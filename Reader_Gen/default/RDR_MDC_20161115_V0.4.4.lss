
RDR_MDC_20161115_V0.4.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000374  00800200  000069c4  00006a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000074a  00800574  00800574  00006dcc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006dcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b20  00000000  00000000  00006e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010fad  00000000  00000000  00007988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004801  00000000  00000000  00018935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ad5b  00000000  00000000  0001d136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e04  00000000  00000000  00027e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00021b28  00000000  00000000  00029c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067f1  00000000  00000000  0004b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  00051fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c188  00000000  00000000  00052941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__ctors_end>
       4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
       8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
       c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      10:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      14:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      18:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      20:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      24:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      28:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      30:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__vector_12>
      34:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      38:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      3c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      40:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      44:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      48:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      4c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      50:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      54:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__vector_21>
      58:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      5c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      60:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      64:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      68:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      6c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      70:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      74:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      78:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      7c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      80:	0c 94 2e 1f 	jmp	0x3e5c	; 0x3e5c <__vector_32>
      84:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      88:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      8c:	0c 94 ba 1f 	jmp	0x3f74	; 0x3f74 <__vector_35>
      90:	0c 94 97 20 	jmp	0x412e	; 0x412e <__vector_36>
      94:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__vector_37>
      98:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      9c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      ac:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      bc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      cc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      dc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      ec:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__vector_59>
      f0:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_60>
      f4:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_61>
      f8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      fc:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__vector_63>
     100:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     104:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     108:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     10c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     110:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     114:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     118:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     11c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     120:	0f 1b       	sub	r16, r31
     122:	70 1b       	sub	r23, r16
     124:	6d 1b       	sub	r22, r29
     126:	6a 1b       	sub	r22, r26
     128:	01 1b       	sub	r16, r17
     12a:	28 1b       	sub	r18, r24
     12c:	08 1b       	sub	r16, r24
     12e:	33 1b       	sub	r19, r19
     130:	3b 1b       	sub	r19, r27
     132:	62 1b       	sub	r22, r18
     134:	6f 24       	eor	r6, r15
     136:	76 24       	eor	r7, r6
     138:	41 27       	eor	r20, r17
     13a:	41 27       	eor	r20, r17
     13c:	41 27       	eor	r20, r17
     13e:	41 27       	eor	r20, r17
     140:	63 25       	eor	r22, r3
     142:	35 26       	eor	r3, r21
     144:	41 27       	eor	r20, r17
     146:	b9 26       	eor	r11, r25
     148:	41 27       	eor	r20, r17
     14a:	bd 24       	eor	r11, r13
     14c:	34 27       	eor	r19, r20
     14e:	41 27       	eor	r20, r17
     150:	46 26       	eor	r4, r22
     152:	39 27       	eor	r19, r25
     154:	41 27       	eor	r20, r17
     156:	41 27       	eor	r20, r17
     158:	40 24       	eor	r4, r0
     15a:	c9 26       	eor	r12, r25
     15c:	41 27       	eor	r20, r17
     15e:	41 27       	eor	r20, r17
     160:	41 27       	eor	r20, r17
     162:	41 27       	eor	r20, r17
     164:	41 27       	eor	r20, r17
     166:	3b 27       	eor	r19, r27
     168:	41 27       	eor	r20, r17
     16a:	41 27       	eor	r20, r17
     16c:	41 27       	eor	r20, r17
     16e:	41 27       	eor	r20, r17
     170:	63 25       	eor	r22, r3
     172:	3f 27       	eor	r19, r31
     174:	41 27       	eor	r20, r17
     176:	41 27       	eor	r20, r17
     178:	41 27       	eor	r20, r17
     17a:	41 27       	eor	r20, r17
     17c:	41 27       	eor	r20, r17
     17e:	41 27       	eor	r20, r17
     180:	39 27       	eor	r19, r25
     182:	5b 25       	eor	r21, r11

00000184 <__trampolines_end>:
     184:	6e 61       	ori	r22, 0x1E	; 30
     186:	6e 00       	.word	0x006e	; ????

00000188 <__c.2240>:
     188:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     198:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1a8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1b8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1c8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1d8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1e8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1f8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     208:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     218:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     228:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     238:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     248:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     258:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     268:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     278:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000286 <pstr_nan>:
     286:	4e 41 4e                                            NAN

00000289 <pstr_inity>:
     289:	49 4e 49 54 59                                      INITY

0000028e <pstr_inf>:
     28e:	49 4e 46                                            INF

00000291 <pwr_m10>:
     291:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2a1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002a9 <pwr_p10>:
     2a9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2b9:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002c2 <__ctors_end>:
     2c2:	11 24       	eor	r1, r1
     2c4:	1f be       	out	0x3f, r1	; 63
     2c6:	cf ef       	ldi	r28, 0xFF	; 255
     2c8:	d1 e4       	ldi	r29, 0x41	; 65
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61

000002ce <__do_copy_data>:
     2ce:	15 e0       	ldi	r17, 0x05	; 5
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b2 e0       	ldi	r27, 0x02	; 2
     2d4:	e4 ec       	ldi	r30, 0xC4	; 196
     2d6:	f9 e6       	ldi	r31, 0x69	; 105
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0b bf       	out	0x3b, r16	; 59
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__do_copy_data+0x14>
     2de:	07 90       	elpm	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	a4 37       	cpi	r26, 0x74	; 116
     2e4:	b1 07       	cpc	r27, r17
     2e6:	d9 f7       	brne	.-10     	; 0x2de <__do_copy_data+0x10>

000002e8 <__do_clear_bss>:
     2e8:	2c e0       	ldi	r18, 0x0C	; 12
     2ea:	a4 e7       	ldi	r26, 0x74	; 116
     2ec:	b5 e0       	ldi	r27, 0x05	; 5
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <.do_clear_bss_start>

000002f0 <.do_clear_bss_loop>:
     2f0:	1d 92       	st	X+, r1

000002f2 <.do_clear_bss_start>:
     2f2:	ae 3b       	cpi	r26, 0xBE	; 190
     2f4:	b2 07       	cpc	r27, r18
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <.do_clear_bss_loop>
     2f8:	0e 94 04 14 	call	0x2808	; 0x2808 <main>
     2fc:	0c 94 e0 34 	jmp	0x69c0	; 0x69c0 <_exit>

00000300 <__bad_interrupt>:
     300:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000304 <timeoutWaitingForOLTReponse>:
	//char tmp[100] = {0};
	
	//extractIncomingMessage(READER_SETUP_PACKAGE);
	
	return true;
}
     304:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <timeout>
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <timeout>
     30e:	08 95       	ret

00000310 <asciiStringToNibble>:

//returns number of characters received.
u8 asciiStringToNibble( char *inStr, char *outStr)
{
     310:	9f 92       	push	r9
     312:	af 92       	push	r10
     314:	bf 92       	push	r11
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	7c 01       	movw	r14, r24
     328:	6b 01       	movw	r12, r22
	u8 n, k;
	
	n = strlen(inStr);
     32a:	fc 01       	movw	r30, r24
     32c:	01 90       	ld	r0, Z+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <asciiStringToNibble+0x1c>
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	ef 01       	movw	r28, r30
     336:	c8 1b       	sub	r28, r24
     338:	d9 0b       	sbc	r29, r25
     33a:	0c 2f       	mov	r16, r28
	k = 0;
     33c:	10 e0       	ldi	r17, 0x00	; 0


	while (k < n)
     33e:	10 17       	cp	r17, r16
     340:	a8 f4       	brcc	.+42     	; 0x36c <asciiStringToNibble+0x5c>
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
     342:	57 01       	movw	r10, r14
     344:	a1 0e       	add	r10, r17
     346:	b1 1c       	adc	r11, r1
     348:	f5 01       	movw	r30, r10
     34a:	80 81       	ld	r24, Z
     34c:	0e 94 14 21 	call	0x4228	; 0x4228 <Ascii_to_nible>
     350:	98 2e       	mov	r9, r24
		+  Ascii_to_nible ( *(inStr+k+1));
     352:	f5 01       	movw	r30, r10
     354:	81 81       	ldd	r24, Z+1	; 0x01
     356:	0e 94 14 21 	call	0x4228	; 0x4228 <Ascii_to_nible>
	k = 0;


	while (k < n)
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
     35a:	f0 e1       	ldi	r31, 0x10	; 16
     35c:	9f 9e       	mul	r9, r31
     35e:	80 0d       	add	r24, r0
     360:	11 24       	eor	r1, r1
     362:	f6 01       	movw	r30, r12
     364:	81 93       	st	Z+, r24
     366:	6f 01       	movw	r12, r30
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
     368:	1e 5f       	subi	r17, 0xFE	; 254
     36a:	e9 cf       	rjmp	.-46     	; 0x33e <asciiStringToNibble+0x2e>
		
		outStr++;
	}
	return n/2;
}
     36c:	8c 2f       	mov	r24, r28
     36e:	86 95       	lsr	r24
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	08 95       	ret

00000388 <constructOutgoingString>:
bool constructOutgoingString(u8 strType, char *tempStr)
{
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	8b 01       	movw	r16, r22
     392:	eb 01       	movw	r28, r22
     394:	21 96       	adiw	r28, 0x01	; 1
	switch(strType)
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	09 f4       	brne	.+2      	; 0x39c <constructOutgoingString+0x14>
     39a:	4e c0       	rjmp	.+156    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     39c:	50 f5       	brcc	.+84     	; 0x3f2 <constructOutgoingString+0x6a>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	71 f1       	breq	.+92     	; 0x3fe <constructOutgoingString+0x76>
     3a2:	82 30       	cpi	r24, 0x02	; 2
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <constructOutgoingString+0x20>
     3a6:	7f c0       	rjmp	.+254    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		
			break;
			
		case REQUEST_SETUP:		  	
    			// Build setup request string
    		sprintf(tempStr+1, "<ReaderSetupInfo>"
     3a8:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
     3ac:	1f 92       	push	r1
     3ae:	8f 93       	push	r24
     3b0:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
     3b4:	1f 92       	push	r1
     3b6:	8f 93       	push	r24
     3b8:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <ReaderSetup+0x5>
     3bc:	8f 93       	push	r24
     3be:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <ReaderSetup+0x4>
     3c2:	8f 93       	push	r24
     3c4:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <ReaderSetup+0x7>
     3c8:	8f 93       	push	r24
     3ca:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <ReaderSetup+0x6>
     3ce:	8f 93       	push	r24
     3d0:	8a e7       	ldi	r24, 0x7A	; 122
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	0e 94 04 32 	call	0x6408	; 0x6408 <sprintf>
            "<laundryRoomId>%d</laundryRoomId>"
			"<manufacturerId>%d</manufacturerId>"
            "<code>%d%d</code>",ReaderSetup.locationId, ReaderSetup.manufacturerId, deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
			
			break;
     3e0:	ad b7       	in	r26, 0x3d	; 61
     3e2:	be b7       	in	r27, 0x3e	; 62
     3e4:	1c 96       	adiw	r26, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	be bf       	out	0x3e, r27	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	ad bf       	out	0x3d, r26	; 61
     3f0:	5a c0       	rjmp	.+180    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	}
	return n/2;
}
bool constructOutgoingString(u8 strType, char *tempStr)
{
	switch(strType)
     3f2:	85 30       	cpi	r24, 0x05	; 5
     3f4:	71 f1       	breq	.+92     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3f6:	30 f1       	brcs	.+76     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3f8:	86 30       	cpi	r24, 0x06	; 6
     3fa:	b1 f1       	breq	.+108    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     3fc:	54 c0       	rjmp	.+168    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	{
		case FIRMWARE_VERSION:
			//build firmware version string
			sprintf(tempStr+1, "<FirmwareVersion>"
     3fe:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
     402:	1f 92       	push	r1
     404:	8f 93       	push	r24
     406:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
     40a:	1f 92       	push	r1
     40c:	8f 93       	push	r24
     40e:	87 e3       	ldi	r24, 0x37	; 55
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	81 e4       	ldi	r24, 0x41	; 65
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	0e 94 04 32 	call	0x6408	; 0x6408 <sprintf>
			"<fw>%s</fw>"
			"<DeviceType>%d%d<Devicetype>"
			,__APP_VERSION_STRING__,deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
			break;
     426:	ad b7       	in	r26, 0x3d	; 61
     428:	be b7       	in	r27, 0x3e	; 62
     42a:	1a 96       	adiw	r26, 0x0a	; 10
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	be bf       	out	0x3e, r27	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	ad bf       	out	0x3d, r26	; 61
     436:	37 c0       	rjmp	.+110    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			
			break;
			
		case REQUEST_VALIDATION:
			//build validation request string
			sprintf(tempStr+1, "<ValidationRequest>");
     438:	61 ee       	ldi	r22, 0xE1	; 225
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 67 31 	call	0x62ce	; 0x62ce <strcpy>
			
			break;
     442:	31 c0       	rjmp	.+98     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			
		case REQUEST_MACHINE_LABEL:
			//build machine label response string
							
			sprintf(tempStr+1, "<MachineLabel>"
     444:	84 ed       	ldi	r24, 0xD4	; 212
     446:	98 e0       	ldi	r25, 0x08	; 8
     448:	9f 93       	push	r25
     44a:	8f 93       	push	r24
     44c:	85 ef       	ldi	r24, 0xF5	; 245
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	1e c0       	rjmp	.+60     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			break;
			
		case REQUEST_MACHINE_DESCRIPTION:
		
			//build machine description response string
			sprintf(tempStr+1, "<MachineDescription>"
     452:	81 ea       	ldi	r24, 0xA1	; 161
     454:	98 e0       	ldi	r25, 0x08	; 8
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	8f e0       	ldi	r24, 0x0F	; 15
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	9f 93       	push	r25
     460:	8f 93       	push	r24
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	17 c0       	rjmp	.+46     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			,ReaderSetup.machineDescription);
		
			break;
		case REQUEST_NUMBER_OF_OLT:
		
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     468:	40 ea       	ldi	r20, 0xA0	; 160
     46a:	58 e0       	ldi	r21, 0x08	; 8
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
     476:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     47a:	8f 3f       	cpi	r24, 0xFF	; 255
     47c:	11 f4       	brne	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			{
				ReaderSetup.numOfSavedTransactions = 0;
     47e:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <ReaderSetup+0x9>
			}
			//build number of offline transactions string
			sprintf(tempStr+1, //"<OLT>"
     482:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     486:	1f 92       	push	r1
     488:	8f 93       	push	r24
     48a:	8f e2       	ldi	r24, 0x2F	; 47
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	0e 94 04 32 	call	0x6408	; 0x6408 <sprintf>
			"<OLT>%d</OLT>"
			,ReaderSetup.numOfSavedTransactions);
			
			break;
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
		default:
		
			break;
	}
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
     4a6:	fe 01       	movw	r30, r28
     4a8:	01 90       	ld	r0, Z+
     4aa:	00 20       	and	r0, r0
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
     4ae:	ec 1b       	sub	r30, r28
     4b0:	d8 01       	movw	r26, r16
     4b2:	ec 93       	st	X, r30
				
	if (tempStr[0] > 127)
     4b4:	8e 2f       	mov	r24, r30
     4b6:	80 95       	com	r24
		//#error "Outgoing string to large"
		return false;
	}

	return true;
}
     4b8:	88 1f       	adc	r24, r24
     4ba:	88 27       	eor	r24, r24
     4bc:	88 1f       	adc	r24, r24
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <sendReaderFirmwareVersion>:
#define lowNibble 0
#define highNibble 1


bool sendReaderFirmwareVersion()
{
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	c0 58       	subi	r28, 0x80	; 128
     4d4:	d1 09       	sbc	r29, r1
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	char tmp[128]={0};
     4e0:	be 01       	movw	r22, r28
     4e2:	6f 5f       	subi	r22, 0xFF	; 255
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	fb 01       	movw	r30, r22
     4ea:	11 92       	st	Z+, r1
     4ec:	8a 95       	dec	r24
     4ee:	e9 f7       	brne	.-6      	; 0x4ea <sendReaderFirmwareVersion+0x22>

	if ( constructOutgoingString(FIRMWARE_VERSION, tmp) )
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     4f6:	18 2f       	mov	r17, r24
     4f8:	88 23       	and	r24, r24
     4fa:	41 f0       	breq	.+16     	; 0x50c <sendReaderFirmwareVersion+0x44>
	{
		macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);	
     4fc:	ae 01       	movw	r20, r28
     4fe:	4e 5f       	subi	r20, 0xFE	; 254
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	69 81       	ldd	r22, Y+1	; 0x01
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
		return true;
	}
	return false;
}
     50c:	81 2f       	mov	r24, r17
     50e:	c0 58       	subi	r28, 0x80	; 128
     510:	df 4f       	sbci	r29, 0xFF	; 255
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <sendSetupRequest>:

bool sendSetupRequest()
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	c0 58       	subi	r28, 0x80	; 128
     52e:	d1 09       	sbc	r29, r1
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	80 e8       	ldi	r24, 0x80	; 128
     542:	fb 01       	movw	r30, r22
     544:	11 92       	st	Z+, r1
     546:	8a 95       	dec	r24
     548:	e9 f7       	brne	.-6      	; 0x544 <sendSetupRequest+0x20>
		
	constructOutgoingString(REQUEST_SETUP, tmp);
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
     550:	ae 01       	movw	r20, r28
     552:	4e 5f       	subi	r20, 0xFE	; 254
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	69 81       	ldd	r22, Y+1	; 0x01
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
	
	return true;
}
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	c0 58       	subi	r28, 0x80	; 128
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <sendValidationRequest>:
bool sendValidationRequest()
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	69 97       	sbiw	r28, 0x19	; 25
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
	char tmp[25] = {0};
     58a:	be 01       	movw	r22, r28
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	89 e1       	ldi	r24, 0x19	; 25
     592:	fb 01       	movw	r30, r22
     594:	11 92       	st	Z+, r1
     596:	8a 95       	dec	r24
     598:	e9 f7       	brne	.-6      	; 0x594 <sendValidationRequest+0x1e>
		
	constructOutgoingString(REQUEST_VALIDATION, tmp);
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
     5a0:	ae 01       	movw	r20, r28
     5a2:	4e 5f       	subi	r20, 0xFE	; 254
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	69 81       	ldd	r22, Y+1	; 0x01
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
	
	return true;
}
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	69 96       	adiw	r28, 0x19	; 25
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <sendMachineLabel>:
bool sendMachineLabel()
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	a3 97       	sbiw	r28, 0x23	; 35
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
     5d8:	be 01       	movw	r22, r28
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	83 e2       	ldi	r24, 0x23	; 35
     5e0:	fb 01       	movw	r30, r22
     5e2:	11 92       	st	Z+, r1
     5e4:	8a 95       	dec	r24
     5e6:	e9 f7       	brne	.-6      	; 0x5e2 <sendMachineLabel+0x1e>
	
	constructOutgoingString(REQUEST_MACHINE_LABEL, tmp);
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
     5ee:	ae 01       	movw	r20, r28
     5f0:	4e 5f       	subi	r20, 0xFE	; 254
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	69 81       	ldd	r22, Y+1	; 0x01
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
	
	return true;
}
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	a3 96       	adiw	r28, 0x23	; 35
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <sendMachineDescription>:
bool sendMachineDescription()
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	c5 55       	subi	r28, 0x55	; 85
     61c:	d1 09       	sbc	r29, r1
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	char tmp[85] = {0};
     628:	be 01       	movw	r22, r28
     62a:	6f 5f       	subi	r22, 0xFF	; 255
     62c:	7f 4f       	sbci	r23, 0xFF	; 255
     62e:	85 e5       	ldi	r24, 0x55	; 85
     630:	fb 01       	movw	r30, r22
     632:	11 92       	st	Z+, r1
     634:	8a 95       	dec	r24
     636:	e9 f7       	brne	.-6      	; 0x632 <sendMachineDescription+0x20>
			
	constructOutgoingString(REQUEST_MACHINE_DESCRIPTION, tmp);
     638:	85 e0       	ldi	r24, 0x05	; 5
     63a:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
     63e:	ae 01       	movw	r20, r28
     640:	4e 5f       	subi	r20, 0xFE	; 254
     642:	5f 4f       	sbci	r21, 0xFF	; 255
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
	
	return true;
}
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	cb 5a       	subi	r28, 0xAB	; 171
     652:	df 4f       	sbci	r29, 0xFF	; 255
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <sendNumberOfOLT>:
bool sendNumberOfOLT()
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	a3 97       	sbiw	r28, 0x23	; 35
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	83 e2       	ldi	r24, 0x23	; 35
     680:	fb 01       	movw	r30, r22
     682:	11 92       	st	Z+, r1
     684:	8a 95       	dec	r24
     686:	e9 f7       	brne	.-6      	; 0x682 <sendNumberOfOLT+0x1e>
	
	constructOutgoingString(REQUEST_NUMBER_OF_OLT, tmp);
     688:	86 e0       	ldi	r24, 0x06	; 6
     68a:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
     68e:	ae 01       	movw	r20, r28
     690:	4e 5f       	subi	r20, 0xFE	; 254
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	69 81       	ldd	r22, Y+1	; 0x01
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
		
	return true;	
}
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	a3 96       	adiw	r28, 0x23	; 35
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <extractIncomingMessage>:

	return true;
}

u8 extractIncomingMessage(char *dataBuffer)
{
     6b2:	8f 92       	push	r8
     6b4:	9f 92       	push	r9
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	cd 54       	subi	r28, 0x4D	; 77
     6ce:	d1 09       	sbc	r29, r1
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	2e 96       	adiw	r28, 0x0e	; 14
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	8e af       	std	Y+62, r24	; 0x3e
     6e0:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
     6e2:	6e 01       	movw	r12, r28
     6e4:	83 e4       	ldi	r24, 0x43	; 67
     6e6:	c8 0e       	add	r12, r24
     6e8:	d1 1c       	adc	r13, r1
     6ea:	88 e0       	ldi	r24, 0x08	; 8
     6ec:	f6 01       	movw	r30, r12
     6ee:	98 2f       	mov	r25, r24
     6f0:	11 92       	st	Z+, r1
     6f2:	9a 95       	dec	r25
     6f4:	e9 f7       	brne	.-6      	; 0x6f0 <extractIncomingMessage+0x3e>
	u8 MaclongAddr[8]  = {0};
     6f6:	5e 01       	movw	r10, r28
     6f8:	eb e3       	ldi	r30, 0x3B	; 59
     6fa:	ae 0e       	add	r10, r30
     6fc:	b1 1c       	adc	r11, r1
     6fe:	f5 01       	movw	r30, r10
     700:	11 92       	st	Z+, r1
     702:	8a 95       	dec	r24
     704:	e9 f7       	brne	.-6      	; 0x700 <extractIncomingMessage+0x4e>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	4c 01       	movw	r8, r24
     70c:	82 e3       	ldi	r24, 0x32	; 50
     70e:	f4 01       	movw	r30, r8
     710:	11 92       	st	Z+, r1
     712:	8a 95       	dec	r24
     714:	e9 f7       	brne	.-6      	; 0x710 <extractIncomingMessage+0x5e>
	u8 i = 0;
     716:	2c 96       	adiw	r28, 0x0c	; 12
     718:	1f ae       	std	Y+63, r1	; 0x3f
     71a:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;	
	u8 returnCode = OP;
     71c:	f0 90 95 08 	lds	r15, 0x0895	; 0x800895 <OP>
*******************************************************************
*************  Extract SetupString from INcomming String **********
******************************************************************* */
            
			
	if(strstr(dataBuffer, "SetupPackage") != NULL)
     720:	2e 96       	adiw	r28, 0x0e	; 14
     722:	0e ad       	ldd	r16, Y+62	; 0x3e
     724:	1f ad       	ldd	r17, Y+63	; 0x3f
     726:	2e 97       	sbiw	r28, 0x0e	; 14
     728:	6d e3       	ldi	r22, 0x3D	; 61
     72a:	73 e0       	ldi	r23, 0x03	; 3
     72c:	c8 01       	movw	r24, r16
     72e:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     732:	89 2b       	or	r24, r25
     734:	09 f4       	brne	.+2      	; 0x738 <extractIncomingMessage+0x86>
     736:	9a c0       	rjmp	.+308    	; 0x86c <extractIncomingMessage+0x1ba>
	{
		if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)
     738:	4a e4       	ldi	r20, 0x4A	; 74
     73a:	53 e0       	ldi	r21, 0x03	; 3
     73c:	6c e4       	ldi	r22, 0x4C	; 76
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	c8 01       	movw	r24, r16
     742:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
     746:	00 97       	sbiw	r24, 0x00	; 0
     748:	29 f1       	breq	.+74     	; 0x794 <extractIncomingMessage+0xe2>
		{ 
			n = asciiStringToNibble(ptr, nibbleStr);
     74a:	b4 01       	movw	r22, r8
     74c:	0e 94 88 01 	call	0x310	; 0x310 <asciiStringToNibble>
     750:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n-1, (u8*)nibbleStr); //write machine setup string to eeprom minus "number of offline transactions"
     752:	6f ef       	ldi	r22, 0xFF	; 255
     754:	68 0f       	add	r22, r24
     756:	a4 01       	movw	r20, r8
     758:	84 e2       	ldi	r24, 0x24	; 36
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
            
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];
     760:	8b a9       	ldd	r24, Y+51	; 0x33
     762:	fe 01       	movw	r30, r28
     764:	e8 0f       	add	r30, r24
     766:	f1 1d       	adc	r31, r1
     768:	80 81       	ld	r24, Z
     76a:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <ReaderSetup+0x8>
			halPutEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"            
     76e:	4f e9       	ldi	r20, 0x9F	; 159
     770:	58 e0       	ldi	r21, 0x08	; 8
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	81 e6       	ldi	r24, 0x61	; 97
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
     77c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     780:	8d 7f       	andi	r24, 0xFD	; 253
     782:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     786:	43 e9       	ldi	r20, 0x93	; 147
     788:	58 e0       	ldi	r21, 0x08	; 8
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	82 e2       	ldi	r24, 0x22	; 34
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ValidationCode from INcomming String ********
	******************************************************************* */
            
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
     794:	4a e4       	ldi	r20, 0x4A	; 74
     796:	53 e0       	ldi	r21, 0x03	; 3
     798:	6a e5       	ldi	r22, 0x5A	; 90
     79a:	73 e0       	ldi	r23, 0x03	; 3
     79c:	2e 96       	adiw	r28, 0x0e	; 14
     79e:	8e ad       	ldd	r24, Y+62	; 0x3e
     7a0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a2:	2e 97       	sbiw	r28, 0x0e	; 14
     7a4:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	91 f0       	breq	.+36     	; 0x7d0 <extractIncomingMessage+0x11e>
		{      
	
			n = asciiStringToNibble(ptr, nibbleStr);	
     7ac:	b4 01       	movw	r22, r8
     7ae:	0e 94 88 01 	call	0x310	; 0x310 <asciiStringToNibble>
     7b2:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
     7b4:	ae 01       	movw	r20, r28
     7b6:	4d 5c       	subi	r20, 0xCD	; 205
     7b8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	87 e5       	ldi	r24, 0x57	; 87
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
     7c4:	a4 01       	movw	r20, r8
     7c6:	6b a9       	ldd	r22, Y+51	; 0x33
     7c8:	88 e5       	ldi	r24, 0x58	; 88
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ReaderID from INcomming String *************
	******************************************************************* */
           
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
     7d0:	4a e4       	ldi	r20, 0x4A	; 74
     7d2:	53 e0       	ldi	r21, 0x03	; 3
     7d4:	6b e6       	ldi	r22, 0x6B	; 107
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	2e 96       	adiw	r28, 0x0e	; 14
     7da:	8e ad       	ldd	r24, Y+62	; 0x3e
     7dc:	9f ad       	ldd	r25, Y+63	; 0x3f
     7de:	2e 97       	sbiw	r28, 0x0e	; 14
     7e0:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	81 f1       	breq	.+96     	; 0x848 <extractIncomingMessage+0x196>
	{ //1

					tmp = atoi(ptr);         
     7e8:	0e 94 33 30 	call	0x6066	; 0x6066 <atoi>
     7ec:	2c 96       	adiw	r28, 0x0c	; 12
     7ee:	3f ad       	ldd	r19, Y+63	; 0x3f
     7f0:	2c 97       	sbiw	r28, 0x0c	; 12
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
	u8 i = 0;
	u8 Nibble = 0;	
     7f2:	20 e0       	ldi	r18, 0x00	; 0
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
	{ //1

					tmp = atoi(ptr);         
	
				while (tmp> 0)
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	c9 f0       	breq	.+50     	; 0x82a <extractIncomingMessage+0x178>
     7f8:	e3 2f       	mov	r30, r19
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
							Nibble = highNibble;
						break;

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
     7fc:	ec 0d       	add	r30, r12
     7fe:	fd 1d       	adc	r31, r13
					tmp = atoi(ptr);         
	
				while (tmp> 0)
				{

					switch(Nibble)
     800:	21 30       	cpi	r18, 0x01	; 1
     802:	29 f0       	breq	.+10     	; 0x80e <extractIncomingMessage+0x15c>
					{
			
						case lowNibble:

							TemplongAddr[i] = (tmp % 16); 
     804:	28 2f       	mov	r18, r24
     806:	2f 70       	andi	r18, 0x0F	; 15
     808:	20 83       	st	Z, r18
							Nibble = highNibble;
     80a:	21 e0       	ldi	r18, 0x01	; 1
						break;
     80c:	08 c0       	rjmp	.+16     	; 0x81e <extractIncomingMessage+0x16c>

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
     80e:	40 81       	ld	r20, Z
     810:	28 2f       	mov	r18, r24
     812:	22 95       	swap	r18
     814:	20 7f       	andi	r18, 0xF0	; 240
     816:	24 2b       	or	r18, r20
     818:	20 83       	st	Z, r18
							i++;
     81a:	3f 5f       	subi	r19, 0xFF	; 255
							Nibble = lowNibble;
     81c:	20 e0       	ldi	r18, 0x00	; 0
						break;

					}
			
						tmp = tmp / 16;
     81e:	64 e0       	ldi	r22, 0x04	; 4
     820:	96 95       	lsr	r25
     822:	87 95       	ror	r24
     824:	6a 95       	dec	r22
     826:	e1 f7       	brne	.-8      	; 0x820 <extractIncomingMessage+0x16e>
     828:	e5 cf       	rjmp	.-54     	; 0x7f4 <extractIncomingMessage+0x142>
     82a:	2c 96       	adiw	r28, 0x0c	; 12
     82c:	3f af       	std	Y+63, r19	; 0x3f
     82e:	2c 97       	sbiw	r28, 0x0c	; 12
				}

					//Update Reader to eeprom in Hex format
					halPutMacAddr(TemplongAddr);
     830:	a6 01       	movw	r20, r12
     832:	68 e0       	ldi	r22, 0x08	; 8
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>

					// Verifry write opertaion
					halGetMacAddr(MaclongAddr);
     83c:	a5 01       	movw	r20, r10
     83e:	68 e0       	ldi	r22, 0x08	; 8
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>




		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
     848:	b5 01       	movw	r22, r10
     84a:	c6 01       	movw	r24, r12
     84c:	0e 94 5e 31 	call	0x62bc	; 0x62bc <strcmp>
     850:	89 2b       	or	r24, r25
     852:	09 f0       	breq	.+2      	; 0x856 <extractIncomingMessage+0x1a4>
     854:	53 c1       	rjmp	.+678    	; 0xafc <extractIncomingMessage+0x44a>
				#if (DEBUG)
					Beeps(5);// Beeps 5x
				#endif
		                    

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;                                        
     856:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     85a:	8e 7f       	andi	r24, 0xFE	; 254
     85c:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     860:	43 e9       	ldi	r20, 0x93	; 147
     862:	58 e0       	ldi	r21, 0x08	; 8
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	82 e2       	ldi	r24, 0x22	; 34
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	30 c0       	rjmp	.+96     	; 0x8cc <extractIncomingMessage+0x21a>
			//appInit();
			returnCode = APP_INIT;	
		}

	}
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
     86c:	66 e7       	ldi	r22, 0x76	; 118
     86e:	73 e0       	ldi	r23, 0x03	; 3
     870:	c8 01       	movw	r24, r16
     872:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     876:	89 2b       	or	r24, r25
     878:	09 f0       	breq	.+2      	; 0x87c <extractIncomingMessage+0x1ca>
     87a:	38 c1       	rjmp	.+624    	; 0xaec <extractIncomingMessage+0x43a>
	{		
		returnCode = SETUP_REQUEST;
	}
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
     87c:	63 e8       	ldi	r22, 0x83	; 131
     87e:	73 e0       	ldi	r23, 0x03	; 3
     880:	c8 01       	movw	r24, r16
     882:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     886:	89 2b       	or	r24, r25
     888:	09 f0       	breq	.+2      	; 0x88c <extractIncomingMessage+0x1da>
     88a:	33 c1       	rjmp	.+614    	; 0xaf2 <extractIncomingMessage+0x440>
	{
		returnCode = VALIDATE_SETUP;
	}
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
     88c:	66 e9       	ldi	r22, 0x96	; 150
     88e:	73 e0       	ldi	r23, 0x03	; 3
     890:	c8 01       	movw	r24, r16
     892:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     896:	89 2b       	or	r24, r25
     898:	19 f0       	breq	.+6      	; 0x8a0 <extractIncomingMessage+0x1ee>
	{
		sendReaderFirmwareVersion();
     89a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <sendReaderFirmwareVersion>
     89e:	2e c1       	rjmp	.+604    	; 0xafc <extractIncomingMessage+0x44a>
				
	}	
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
     8a0:	69 ea       	ldi	r22, 0xA9	; 169
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	c8 01       	movw	r24, r16
     8a6:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     8aa:	89 2b       	or	r24, r25
     8ac:	a1 f0       	breq	.+40     	; 0x8d6 <extractIncomingMessage+0x224>
	{
		 unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	e1 e2       	ldi	r30, 0x21	; 33
     8b2:	f2 e0       	ldi	r31, 0x02	; 2
     8b4:	de 01       	movw	r26, r28
     8b6:	d3 96       	adiw	r26, 0x33	; 51
     8b8:	01 90       	ld	r0, Z+
     8ba:	0d 92       	st	X+, r0
     8bc:	8a 95       	dec	r24
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <extractIncomingMessage+0x206>
		 halPutEeprom(0,8,(u8*)reset_eeprom);
     8c0:	ae 01       	movw	r20, r28
     8c2:	4d 5c       	subi	r20, 0xCD	; 205
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	68 e0       	ldi	r22, 0x08	; 8
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		 
		 
		 // re-associate
		 //appInit();
		 returnCode = APP_INIT;		
     8d0:	50 e2       	ldi	r21, 0x20	; 32
     8d2:	f5 2e       	mov	r15, r21
     8d4:	13 c1       	rjmp	.+550    	; 0xafc <extractIncomingMessage+0x44a>
	}
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
     8d6:	65 eb       	ldi	r22, 0xB5	; 181
     8d8:	73 e0       	ldi	r23, 0x03	; 3
     8da:	c8 01       	movw	r24, r16
     8dc:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     8e0:	89 2b       	or	r24, r25
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <extractIncomingMessage+0x234>
     8e4:	3b c0       	rjmp	.+118    	; 0x95c <extractIncomingMessage+0x2aa>
	{


		// Store Active CHANNEL to EEPROM Address 0xFF2
		// eeprom_write(CHANNEL_ADDR, macConfig.currentChannel[0]);
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
     8e6:	40 e5       	ldi	r20, 0x50	; 80
     8e8:	5b e0       	ldi	r21, 0x0B	; 11
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	82 ef       	ldi	r24, 0xF2	; 242
     8ee:	9f e0       	ldi	r25, 0x0F	; 15
     8f0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
     8f4:	47 e4       	ldi	r20, 0x47	; 71
     8f6:	5b e0       	ldi	r21, 0x0B	; 11
     8f8:	62 e0       	ldi	r22, 0x02	; 2
     8fa:	84 ef       	ldi	r24, 0xF4	; 244
     8fc:	9f e0       	ldi	r25, 0x0F	; 15
     8fe:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
     902:	49 e4       	ldi	r20, 0x49	; 73
     904:	5b e0       	ldi	r21, 0x0B	; 11
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	86 ef       	ldi	r24, 0xF6	; 246
     90a:	9f e0       	ldi	r25, 0x0F	; 15
     90c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>

		// Store Active DESTINATION ADDR to EEPROM Address 0xFF8
		// halPutEeprom(DESTADDR_ADDR, 2, &MdcStatus.MachineType);

		i = 0x01;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	2c 96       	adiw	r28, 0x0c	; 12
     914:	8f af       	std	Y+63, r24	; 0x3f
     916:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
     918:	ae 01       	movw	r20, r28
     91a:	45 5b       	subi	r20, 0xB5	; 181
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	80 ef       	ldi	r24, 0xF0	; 240
     922:	9f e0       	ldi	r25, 0x0F	; 15
     924:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
				
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
     928:	2e 96       	adiw	r28, 0x0e	; 14
     92a:	ee ad       	ldd	r30, Y+62	; 0x3e
     92c:	ff ad       	ldd	r31, Y+63	; 0x3f
     92e:	2e 97       	sbiw	r28, 0x0e	; 14
     930:	11 82       	std	Z+1, r1	; 0x01
     932:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
     934:	ae 01       	movw	r20, r28
     936:	44 5b       	subi	r20, 0xB4	; 180
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	8a ef       	ldi	r24, 0xFA	; 250
     93e:	9f e0       	ldi	r25, 0x0F	; 15
     940:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>

				
		// Initiate watchdog timer
		cli();
     944:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     946:	9f e0       	ldi	r25, 0x0F	; 15
     948:	88 e1       	ldi	r24, 0x18	; 24
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	a8 95       	wdr
     950:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     954:	0f be       	out	0x3f, r0	; 63
     956:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
     95a:	ff cf       	rjmp	.-2      	; 0x95a <extractIncomingMessage+0x2a8>

	}
	else if(strstr(dataBuffer, "SetD") != NULL)
     95c:	65 ec       	ldi	r22, 0xC5	; 197
     95e:	73 e0       	ldi	r23, 0x03	; 3
     960:	c8 01       	movw	r24, r16
     962:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     966:	89 2b       	or	r24, r25
     968:	51 f1       	breq	.+84     	; 0x9be <extractIncomingMessage+0x30c>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
     96a:	4a e4       	ldi	r20, 0x4A	; 74
     96c:	53 e0       	ldi	r21, 0x03	; 3
     96e:	6a ec       	ldi	r22, 0xCA	; 202
     970:	73 e0       	ldi	r23, 0x03	; 3
     972:	c8 01       	movw	r24, r16
     974:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	09 f4       	brne	.+2      	; 0x97e <extractIncomingMessage+0x2cc>
     97c:	bf c0       	rjmp	.+382    	; 0xafc <extractIncomingMessage+0x44a>
		{				
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
     97e:	fc 01       	movw	r30, r24
     980:	01 90       	ld	r0, Z+
     982:	00 20       	and	r0, r0
     984:	e9 f7       	brne	.-6      	; 0x980 <extractIncomingMessage+0x2ce>
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	8f 01       	movw	r16, r30
     98a:	08 1b       	sub	r16, r24
     98c:	19 0b       	sbc	r17, r25
     98e:	0b ab       	std	Y+51, r16	; 0x33
     990:	03 33       	cpi	r16, 0x33	; 51
     992:	08 f0       	brcs	.+2      	; 0x996 <extractIncomingMessage+0x2e4>
     994:	b3 c0       	rjmp	.+358    	; 0xafc <extractIncomingMessage+0x44a>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);				
     996:	bc 01       	movw	r22, r24
     998:	81 ea       	ldi	r24, 0xA1	; 161
     99a:	98 e0       	ldi	r25, 0x08	; 8
     99c:	0e 94 67 31 	call	0x62ce	; 0x62ce <strcpy>
				n++;//add null terminator to string
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	60 0f       	add	r22, r16
     9a4:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
     9a6:	41 ea       	ldi	r20, 0xA1	; 161
     9a8:	58 e0       	ldi	r21, 0x08	; 8
     9aa:	87 e7       	ldi	r24, 0x77	; 119
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
     9b2:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     9b6:	8f 77       	andi	r24, 0x7F	; 127
     9b8:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
     9bc:	3a c0       	rjmp	.+116    	; 0xa32 <extractIncomingMessage+0x380>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
			}		
		}
	}	
	else if(strstr(dataBuffer, "GetD") != NULL)
     9be:	61 ed       	ldi	r22, 0xD1	; 209
     9c0:	73 e0       	ldi	r23, 0x03	; 3
     9c2:	c8 01       	movw	r24, r16
     9c4:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     9c8:	89 2b       	or	r24, r25
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <extractIncomingMessage+0x320>
	{
		sendMachineDescription();
     9cc:	0e 94 09 03 	call	0x612	; 0x612 <sendMachineDescription>
     9d0:	95 c0       	rjmp	.+298    	; 0xafc <extractIncomingMessage+0x44a>
		
	}	
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
     9d2:	66 ed       	ldi	r22, 0xD6	; 214
     9d4:	73 e0       	ldi	r23, 0x03	; 3
     9d6:	c8 01       	movw	r24, r16
     9d8:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     9dc:	89 2b       	or	r24, r25
     9de:	89 f1       	breq	.+98     	; 0xa42 <extractIncomingMessage+0x390>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
     9e0:	4a e4       	ldi	r20, 0x4A	; 74
     9e2:	53 e0       	ldi	r21, 0x03	; 3
     9e4:	66 ee       	ldi	r22, 0xE6	; 230
     9e6:	73 e0       	ldi	r23, 0x03	; 3
     9e8:	c8 01       	movw	r24, r16
     9ea:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <extractIncomingMessage+0x342>
     9f2:	84 c0       	rjmp	.+264    	; 0xafc <extractIncomingMessage+0x44a>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
     9f4:	fc 01       	movw	r30, r24
     9f6:	01 90       	ld	r0, Z+
     9f8:	00 20       	and	r0, r0
     9fa:	e9 f7       	brne	.-6      	; 0x9f6 <extractIncomingMessage+0x344>
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	8f 01       	movw	r16, r30
     a00:	08 1b       	sub	r16, r24
     a02:	19 0b       	sbc	r17, r25
     a04:	0b ab       	std	Y+51, r16	; 0x33
     a06:	0b 30       	cpi	r16, 0x0B	; 11
     a08:	08 f0       	brcs	.+2      	; 0xa0c <extractIncomingMessage+0x35a>
     a0a:	78 c0       	rjmp	.+240    	; 0xafc <extractIncomingMessage+0x44a>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
     a0c:	bc 01       	movw	r22, r24
     a0e:	84 ed       	ldi	r24, 0xD4	; 212
     a10:	98 e0       	ldi	r25, 0x08	; 8
     a12:	0e 94 67 31 	call	0x62ce	; 0x62ce <strcpy>
				n++;//add null terminator to string
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	60 0f       	add	r22, r16
     a1a:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
     a1c:	44 ed       	ldi	r20, 0xD4	; 212
     a1e:	58 e0       	ldi	r21, 0x08	; 8
     a20:	8c e6       	ldi	r24, 0x6C	; 108
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
     a28:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <ReaderStateFlag+0x1>
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     a32:	43 e9       	ldi	r20, 0x93	; 147
     a34:	58 e0       	ldi	r21, 0x08	; 8
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	82 e2       	ldi	r24, 0x22	; 34
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
     a40:	5d c0       	rjmp	.+186    	; 0xafc <extractIncomingMessage+0x44a>
			}
			
		}
	}
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
     a42:	68 ef       	ldi	r22, 0xF8	; 248
     a44:	73 e0       	ldi	r23, 0x03	; 3
     a46:	c8 01       	movw	r24, r16
     a48:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     a4c:	89 2b       	or	r24, r25
     a4e:	19 f0       	breq	.+6      	; 0xa56 <extractIncomingMessage+0x3a4>
	{
		sendMachineLabel();			
     a50:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sendMachineLabel>
     a54:	53 c0       	rjmp	.+166    	; 0xafc <extractIncomingMessage+0x44a>
	}
	else if (strstr(dataBuffer, "GetOLT") != NULL)
     a56:	68 e0       	ldi	r22, 0x08	; 8
     a58:	74 e0       	ldi	r23, 0x04	; 4
     a5a:	c8 01       	movw	r24, r16
     a5c:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     a60:	89 2b       	or	r24, r25
     a62:	69 f0       	breq	.+26     	; 0xa7e <extractIncomingMessage+0x3cc>
	{
		sendNumberOfOLT();
     a64:	0e 94 32 03 	call	0x664	; 0x664 <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
     a68:	62 e8       	ldi	r22, 0x82	; 130
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	8c e3       	ldi	r24, 0x3C	; 60
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <macSetLongAlarm>
     a74:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <__data_end>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
     a78:	48 e2       	ldi	r20, 0x28	; 40
     a7a:	f4 2e       	mov	r15, r20
     a7c:	3f c0       	rjmp	.+126    	; 0xafc <extractIncomingMessage+0x44a>
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
     a7e:	6f e0       	ldi	r22, 0x0F	; 15
     a80:	74 e0       	ldi	r23, 0x04	; 4
     a82:	c8 01       	movw	r24, r16
     a84:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     a88:	89 2b       	or	r24, r25
     a8a:	b1 f5       	brne	.+108    	; 0xaf8 <extractIncomingMessage+0x446>
	{
		returnCode = SHOW_BALANCE_REQUEST;		
	}
	else if (strstr(dataBuffer, "faultcode") != NULL)
     a8c:	6b e1       	ldi	r22, 0x1B	; 27
     a8e:	74 e0       	ldi	r23, 0x04	; 4
     a90:	c8 01       	movw	r24, r16
     a92:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
     a96:	89 2b       	or	r24, r25
     a98:	89 f1       	breq	.+98     	; 0xafc <extractIncomingMessage+0x44a>
	{
		char errCode = 0;
     a9a:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
     a9c:	4a e4       	ldi	r20, 0x4A	; 74
     a9e:	53 e0       	ldi	r21, 0x03	; 3
     aa0:	65 e2       	ldi	r22, 0x25	; 37
     aa2:	74 e0       	ldi	r23, 0x04	; 4
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	39 f1       	breq	.+78     	; 0xafc <extractIncomingMessage+0x44a>
		{
			asciiStringToNibble(ptr, &errCode);
     aae:	be 01       	movw	r22, r28
     ab0:	6d 5c       	subi	r22, 0xCD	; 205
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	0e 94 88 01 	call	0x310	; 0x310 <asciiStringToNibble>
			
			switch(errCode)
     ab8:	8b a9       	ldd	r24, Y+51	; 0x33
     aba:	86 30       	cpi	r24, 0x06	; 6
     abc:	f9 f4       	brne	.+62     	; 0xafc <extractIncomingMessage+0x44a>
			{
				case TRANSACTION_SUCCESSFUL:
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
     abe:	f8 e2       	ldi	r31, 0x28	; 40
     ac0:	ff 12       	cpse	r15, r31
     ac2:	1c c0       	rjmp	.+56     	; 0xafc <extractIncomingMessage+0x44a>
					{
						macTimerEnd(oLTTimerId);
     ac4:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <__data_end>
     ac8:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <macTimerEnd>
						if( !sendStoredTransaction() )
     acc:	0e 94 62 07 	call	0xec4	; 0xec4 <sendStoredTransaction>
     ad0:	88 23       	and	r24, r24
     ad2:	49 f0       	breq	.+18     	; 0xae6 <extractIncomingMessage+0x434>
						{ //All stored transactions have been sent
							returnCode = IDLE;
						}
						else
						{	//set new timer while waiting for next response
							oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
     ad4:	62 e8       	ldi	r22, 0x82	; 130
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	8c e3       	ldi	r24, 0x3C	; 60
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <macSetLongAlarm>
     ae0:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <__data_end>
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <extractIncomingMessage+0x44a>
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
					{
						macTimerEnd(oLTTimerId);
						if( !sendStoredTransaction() )
						{ //All stored transactions have been sent
							returnCode = IDLE;
     ae6:	37 e2       	ldi	r19, 0x27	; 39
     ae8:	f3 2e       	mov	r15, r19
     aea:	08 c0       	rjmp	.+16     	; 0xafc <extractIncomingMessage+0x44a>
		}

	}
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
	{		
		returnCode = SETUP_REQUEST;
     aec:	2a e0       	ldi	r18, 0x0A	; 10
     aee:	f2 2e       	mov	r15, r18
     af0:	05 c0       	rjmp	.+10     	; 0xafc <extractIncomingMessage+0x44a>
	}
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
	{
		returnCode = VALIDATE_SETUP;
     af2:	94 e1       	ldi	r25, 0x14	; 20
     af4:	f9 2e       	mov	r15, r25
     af6:	02 c0       	rjmp	.+4      	; 0xafc <extractIncomingMessage+0x44a>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
	{
		returnCode = SHOW_BALANCE_REQUEST;		
     af8:	8f e1       	ldi	r24, 0x1F	; 31
     afa:	f8 2e       	mov	r15, r24
	}
	


	return returnCode;
}
     afc:	8f 2d       	mov	r24, r15
     afe:	c3 5b       	subi	r28, 0xB3	; 179
     b00:	df 4f       	sbci	r29, 0xFF	; 255
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	08 95       	ret

00000b24 <sendCCTransaction>:

bool sendCCTransaction(structTransaction *transRecord)
{
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	ca 58       	subi	r28, 0x8A	; 138
     b36:	d1 09       	sbc	r29, r1
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
     b44:	7e 01       	movw	r14, r28
     b46:	81 e8       	ldi	r24, 0x81	; 129
     b48:	e8 0e       	add	r14, r24
     b4a:	f1 1c       	adc	r15, r1
     b4c:	8a e0       	ldi	r24, 0x0A	; 10
     b4e:	d7 01       	movw	r26, r14
     b50:	1d 92       	st	X+, r1
     b52:	8a 95       	dec	r24
     b54:	e9 f7       	brne	.-6      	; 0xb50 <sendCCTransaction+0x2c>
	char tempStr[128] = {0};
     b56:	fe 01       	movw	r30, r28
     b58:	31 96       	adiw	r30, 0x01	; 1
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	df 01       	movw	r26, r30
     b5e:	1d 92       	st	X+, r1
     b60:	8a 95       	dec	r24
     b62:	e9 f7       	brne	.-6      	; 0xb5e <sendCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
     b64:	f8 01       	movw	r30, r16
     b66:	61 85       	ldd	r22, Z+9	; 0x09
     b68:	72 85       	ldd	r23, Z+10	; 0x0a
     b6a:	83 85       	ldd	r24, Z+11	; 0x0b
     b6c:	94 85       	ldd	r25, Z+12	; 0x0c
     b6e:	2a e0       	ldi	r18, 0x0A	; 10
     b70:	a7 01       	movw	r20, r14
     b72:	0e 94 aa 31 	call	0x6354	; 0x6354 <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
     b76:	d8 01       	movw	r26, r16
     b78:	54 96       	adiw	r26, 0x14	; 20
     b7a:	8c 91       	ld	r24, X
     b7c:	54 97       	sbiw	r26, 0x14	; 20
     b7e:	1f 92       	push	r1
     b80:	8f 93       	push	r24
     b82:	13 96       	adiw	r26, 0x03	; 3
     b84:	8c 91       	ld	r24, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	1f 92       	push	r1
     b8a:	8f 93       	push	r24
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	8c 91       	ld	r24, X
     b90:	12 97       	sbiw	r26, 0x02	; 2
     b92:	1f 92       	push	r1
     b94:	8f 93       	push	r24
     b96:	15 96       	adiw	r26, 0x05	; 5
     b98:	8c 91       	ld	r24, X
     b9a:	15 97       	sbiw	r26, 0x05	; 5
     b9c:	8f 93       	push	r24
     b9e:	14 96       	adiw	r26, 0x04	; 4
     ba0:	8c 91       	ld	r24, X
     ba2:	14 97       	sbiw	r26, 0x04	; 4
     ba4:	8f 93       	push	r24
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	8c 91       	ld	r24, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	8f 93       	push	r24
     bae:	8c 91       	ld	r24, X
     bb0:	8f 93       	push	r24
     bb2:	17 96       	adiw	r26, 0x07	; 7
     bb4:	6d 91       	ld	r22, X+
     bb6:	7c 91       	ld	r23, X
     bb8:	18 97       	sbiw	r26, 0x08	; 8
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 04 2c 	call	0x5808	; 0x5808 <__floatunsisf>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	48 ec       	ldi	r20, 0xC8	; 200
     bc8:	52 e4       	ldi	r21, 0x42	; 66
     bca:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <__divsf3>
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	7f 93       	push	r23
     bd4:	6f 93       	push	r22
     bd6:	ff 92       	push	r15
     bd8:	ef 92       	push	r14
     bda:	81 e3       	ldi	r24, 0x31	; 49
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	8e 01       	movw	r16, r28
     be4:	0e 5f       	subi	r16, 0xFE	; 254
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	1f 93       	push	r17
     bea:	0f 93       	push	r16
     bec:	0e 94 04 32 	call	0x6408	; 0x6408 <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
     bf0:	f8 01       	movw	r30, r16
     bf2:	01 90       	ld	r0, Z+
     bf4:	00 20       	and	r0, r0
     bf6:	e9 f7       	brne	.-6      	; 0xbf2 <sendCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
     bf8:	6e 2f       	mov	r22, r30
     bfa:	60 1b       	sub	r22, r16
     bfc:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	67 fd       	sbrc	r22, 7
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <sendCCTransaction+0xf6>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
     c0c:	a8 01       	movw	r20, r16
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
	
	return true;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <sendCCTransaction+0xf8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
	
	return true;
}
     c1c:	c6 57       	subi	r28, 0x76	; 118
     c1e:	df 4f       	sbci	r29, 0xFF	; 255
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	08 95       	ret

00000c38 <displayMsg>:
Led1 to led4 are limited to values defined in "display.h"
***********************************************************************************************
*/

void displayMsg( u8 msg ) 
{
     c38:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	19 f4       	brne	.+6      	; 0xc44 <displayMsg+0xc>
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}

}
     c3e:	0f 91       	pop	r16

void displayMsg( u8 msg ) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
     c40:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <displaySQCardError>
	}
	else if (msg == SETUP_MSG)
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	29 f4       	brne	.+10     	; 0xc52 <displayMsg+0x1a>
	{
		sendSQDisplayCommand(LED_BLANK,LED_S,LED_U,LED_BLANK,5);
     c48:	05 e0       	ldi	r16, 0x05	; 5
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	4c e7       	ldi	r20, 0x7C	; 124
     c4e:	6a ed       	ldi	r22, 0xDA	; 218
     c50:	16 c0       	rjmp	.+44     	; 0xc7e <displayMsg+0x46>
	}
	else if (msg == BUSY_MSG)
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	31 f4       	brne	.+12     	; 0xc62 <displayMsg+0x2a>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y, 5);
     c56:	05 e0       	ldi	r16, 0x05	; 5
     c58:	2c ed       	ldi	r18, 0xDC	; 220
     c5a:	4a ed       	ldi	r20, 0xDA	; 218
     c5c:	6c e7       	ldi	r22, 0x7C	; 124
     c5e:	88 ef       	ldi	r24, 0xF8	; 248
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <displayMsg+0x48>
	}
	else if (msg == SERVICE_MSG)
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	31 f4       	brne	.+12     	; 0xc72 <displayMsg+0x3a>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,5);
     c66:	05 e0       	ldi	r16, 0x05	; 5
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	40 ea       	ldi	r20, 0xA0	; 160
     c6c:	62 ef       	ldi	r22, 0xF2	; 242
     c6e:	8a ed       	ldi	r24, 0xDA	; 218
     c70:	07 c0       	rjmp	.+14     	; 0xc80 <displayMsg+0x48>
	}
	else if (msg == BLANK_MSG)
     c72:	85 30       	cpi	r24, 0x05	; 5
     c74:	39 f4       	brne	.+14     	; 0xc84 <displayMsg+0x4c>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
     c76:	00 e0       	ldi	r16, 0x00	; 0
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <sendSQDisplayCommand>
	}

}
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <displayVersion>:

*/

void displayVersion(void)
{	
	displaySQReaderVersion();
     c88:	0c 94 25 0c 	jmp	0x184a	; 0x184a <displaySQReaderVersion>

00000c8c <initReader>:
*
*/
void initReader(void)
{

halGetEeprom(READER_STATE_ADDR, READER_STATE_FLAG_SIZE, (u8*)&ReaderStateFlag); 
     c8c:	43 e9       	ldi	r20, 0x93	; 147
     c8e:	58 e0       	ldi	r21, 0x08	; 8
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	82 e2       	ldi	r24, 0x22	; 34
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
halGetEeprom(MACHINE_TYPE_ADDR, MACHINE_TYPE_SIZE, (u8*)&deviceStatus.deviceType);
     c9a:	40 ea       	ldi	r20, 0xA0	; 160
     c9c:	59 e0       	ldi	r21, 0x09	; 9
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	8e e1       	ldi	r24, 0x1E	; 30
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
	
ReaderSetup.customerId = 0;
     ca8:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <ReaderSetup>
     cac:	10 92 98 08 	sts	0x0898, r1	; 0x800898 <ReaderSetup+0x1>
     cb0:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <ReaderSetup+0x2>
     cb4:	10 92 9a 08 	sts	0x089A, r1	; 0x80089a <ReaderSetup+0x3>
ReaderSetup.manufacturerId = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	90 93 9c 08 	sts	0x089C, r25	; 0x80089c <ReaderSetup+0x5>
     cc0:	80 93 9b 08 	sts	0x089B, r24	; 0x80089b <ReaderSetup+0x4>
ReaderSetup.locationId = 1;
     cc4:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <ReaderSetup+0x7>
     cc8:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <ReaderSetup+0x6>
//ReaderSetup.MaxOfflineTransaction = MAX_NUM_OFFLINE_TRANS; // to become variable once setup is done.
ReaderStateFlag.Busy = false;
     ccc:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     cd0:	8f 7b       	andi	r24, 0xBF	; 191
     cd2:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
//check setup status then set reader state flag
	
#if (DEVICE_CONNECTED == MDC_MACHINE)
	//Init machine variables

	if (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE)
     cd6:	81 fd       	sbrc	r24, 1
     cd8:	47 c0       	rjmp	.+142    	; 0xd68 <initReader+0xdc>
	{
        //a valid reader ID has been detected. check for valid setup
        getSQSetupData();  
     cda:	0e 94 c3 07 	call	0xf86	; 0xf86 <getSQSetupData>
		ReaderStateFlag.ValidateSetup = VALIDATE_READER_SETUP;
     cde:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
		halGetEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction);
     ce8:	4f e9       	ldi	r20, 0x9F	; 159
     cea:	58 e0       	ldi	r21, 0x08	; 8
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	81 e6       	ldi	r24, 0x61	; 97
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
		if (ReaderSetup.maxOfflineTransaction)
     cf6:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <ReaderSetup+0x8>
     cfa:	88 23       	and	r24, r24
     cfc:	c9 f0       	breq	.+50     	; 0xd30 <initReader+0xa4>
		{
			ReaderStateFlag.EnableOfflineTransaction = true;
     cfe:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     d02:	88 60       	ori	r24, 0x08	; 8
     d04:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     d08:	40 ea       	ldi	r20, 0xA0	; 160
     d0a:	58 e0       	ldi	r21, 0x08	; 8
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
     d16:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     d1a:	8f 3f       	cpi	r24, 0xFF	; 255
     d1c:	49 f4       	brne	.+18     	; 0xd30 <initReader+0xa4>
			{
				ReaderSetup.numOfSavedTransactions = 0;
     d1e:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <ReaderSetup+0x9>
				halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     d22:	40 ea       	ldi	r20, 0xA0	; 160
     d24:	58 e0       	ldi	r21, 0x08	; 8
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
			}
			 
		}
		//clear buffers
		memset(ReaderSetup.machineLabel,0,MACHINE_LABEL_SIZE+1);
     d30:	8b e0       	ldi	r24, 0x0B	; 11
     d32:	e4 ed       	ldi	r30, 0xD4	; 212
     d34:	f8 e0       	ldi	r31, 0x08	; 8
     d36:	df 01       	movw	r26, r30
     d38:	1d 92       	st	X+, r1
     d3a:	8a 95       	dec	r24
     d3c:	e9 f7       	brne	.-6      	; 0xd38 <initReader+0xac>
		memset(ReaderSetup.machineDescription,0,MACHINE_NAME_SIZE+1);
     d3e:	83 e3       	ldi	r24, 0x33	; 51
     d40:	e1 ea       	ldi	r30, 0xA1	; 161
     d42:	f8 e0       	ldi	r31, 0x08	; 8
     d44:	df 01       	movw	r26, r30
     d46:	1d 92       	st	X+, r1
     d48:	8a 95       	dec	r24
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <initReader+0xba>
		halGetEeprom(MACHINE_LABEL_ADDR, MACHINE_LABEL_SIZE, (u8*)&ReaderSetup.machineLabel);
     d4c:	44 ed       	ldi	r20, 0xD4	; 212
     d4e:	58 e0       	ldi	r21, 0x08	; 8
     d50:	6a e0       	ldi	r22, 0x0A	; 10
     d52:	8c e6       	ldi	r24, 0x6C	; 108
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
		halGetEeprom(MACHINE_DESCRIPTION_ADDR, MACHINE_NAME_SIZE, (u8*)&ReaderSetup.machineDescription);
     d5a:	41 ea       	ldi	r20, 0xA1	; 161
     d5c:	58 e0       	ldi	r21, 0x08	; 8
     d5e:	62 e3       	ldi	r22, 0x32	; 50
     d60:	87 e7       	ldi	r24, 0x77	; 119
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <halGetEeprom>
	}
	else{
		SetDefaultMachineSetup();
     d68:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <SetDefaultMachineSetup>

00000d6c <storeOfflineTransaction>:
Store transactions,that occur when server is off line, in EEPROM.
*/

#if(DEVICE_CONNECTED == MDC_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	67 97       	sbiw	r28, 0x17	; 23
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
	u8 addr[2];
	u16 temp;
	structTransaction OfflineTransaction;
	
	temp  = (u16)OFFLINE_TRANSACTION_ADDR_START;
	addr[1] = temp >> 8;
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	2f 8b       	std	Y+23, r18	; 0x17
	addr[0] = temp;
     d84:	38 e1       	ldi	r19, 0x18	; 24
     d86:	3e 8b       	std	Y+22, r19	; 0x16
	
	OfflineTransaction.CardId		= cardNum;	
     d88:	6a 87       	std	Y+10, r22	; 0x0a
     d8a:	7b 87       	std	Y+11, r23	; 0x0b
     d8c:	8c 87       	std	Y+12, r24	; 0x0c
     d8e:	9d 87       	std	Y+13, r25	; 0x0d
	OfflineTransaction.LocationId	= ReaderSetup.locationId;	
     d90:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <ReaderSetup+0x6>
     d94:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <ReaderSetup+0x7>
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
	OfflineTransaction.MachineId[0] = MdcStatus.MachineType[0];
     d9c:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <MdcStatus>
     da0:	8b 83       	std	Y+3, r24	; 0x03
	OfflineTransaction.MachineId[1] = MdcStatus.MachineType[1];
     da2:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
     da6:	8c 83       	std	Y+4, r24	; 0x04
	OfflineTransaction.CycleType	= MdcStatus.CycleType;
     da8:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <MdcStatus+0x2>
     dac:	8f 83       	std	Y+7, r24	; 0x07
	
	OfflineTransaction.ManufactureId = ReaderSetup.manufacturerId;
     dae:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <ReaderSetup+0x4>
     db2:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <ReaderSetup+0x5>
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
	OfflineTransaction.vendPrice = MachineSetupData.VendPrice[0];
	OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | MachineSetupData.VendPrice[1];
     dba:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	99 87       	std	Y+9, r25	; 0x09
     dc2:	88 87       	std	Y+8, r24	; 0x08
	
	OfflineTransaction.Date[0] = 0x00;
     dc4:	1e 86       	std	Y+14, r1	; 0x0e
	OfflineTransaction.Date[1] = 0x00;
     dc6:	1f 86       	std	Y+15, r1	; 0x0f
	OfflineTransaction.Date[2] = 0x00;
     dc8:	18 8a       	std	Y+16, r1	; 0x10
	OfflineTransaction.Date[3] = 0x00;
     dca:	19 8a       	std	Y+17, r1	; 0x11
	
	OfflineTransaction.Time[0] = 0x00;	
     dcc:	1a 8a       	std	Y+18, r1	; 0x12
	OfflineTransaction.Time[1] = 0x00;	
     dce:	1b 8a       	std	Y+19, r1	; 0x13
	OfflineTransaction.Time[2] = 0x00;
     dd0:	1c 8a       	std	Y+20, r1	; 0x14
	
	OfflineTransaction.isOffline = true;
     dd2:	2d 8b       	std	Y+21, r18	; 0x15
	//get number of stored records
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     dd4:	40 ea       	ldi	r20, 0xA0	; 160
     dd6:	58 e0       	ldi	r21, 0x08	; 8
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
	//store structure in the next EEPROM record address
	if ((ReaderSetup.numOfSavedTransactions == 0xff) || (ReaderSetup.numOfSavedTransactions < ReaderSetup.maxOfflineTransaction))
     de2:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	29 f0       	breq	.+10     	; 0xdf4 <storeOfflineTransaction+0x88>
     dea:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <ReaderSetup+0x8>
     dee:	89 17       	cp	r24, r25
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <storeOfflineTransaction+0x88>
     df2:	48 c0       	rjmp	.+144    	; 0xe84 <storeOfflineTransaction+0x118>
	{	
		if (ReaderSetup.numOfSavedTransactions == 0xff || ReaderSetup.numOfSavedTransactions == 0x00)
     df4:	81 50       	subi	r24, 0x01	; 1
     df6:	8e 3f       	cpi	r24, 0xFE	; 254
     df8:	50 f0       	brcs	.+20     	; 0xe0e <storeOfflineTransaction+0xa2>
		{
			ReaderSetup.numOfSavedTransactions = 0;
     dfa:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <ReaderSetup+0x9>
			//halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR,1, &num_of_trans);
			//store first transaction records address.
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);
     dfe:	ae 01       	movw	r20, r28
     e00:	4a 5e       	subi	r20, 0xEA	; 234
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	62 e0       	ldi	r22, 0x02	; 2
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
/*		else{
			//start at end of existing records
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);  
		}	*/		
					
		halPutEeprom((u8*)(OFFLINE_TRANSACTION_ADDR_START + (ReaderSetup.numOfSavedTransactions * OFFLINE_TRANSACTION_NUM_BYTE)), OFFLINE_TRANSACTION_NUM_BYTE, (u8*)&OfflineTransaction);
     e0e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     e12:	25 e1       	ldi	r18, 0x15	; 21
     e14:	82 9f       	mul	r24, r18
     e16:	c0 01       	movw	r24, r0
     e18:	11 24       	eor	r1, r1
     e1a:	ae 01       	movw	r20, r28
     e1c:	4f 5f       	subi	r20, 0xFF	; 255
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	65 e1       	ldi	r22, 0x15	; 21
     e22:	88 5e       	subi	r24, 0xE8	; 232
     e24:	9e 4f       	sbci	r25, 0xFE	; 254
     e26:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		ReaderSetup.numOfSavedTransactions++;
     e2a:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <ReaderSetup+0x9>
		halPutEeprom((u8*)OFFLINE_TRANSACTION_RECORD_ADDR,1,&ReaderSetup.numOfSavedTransactions);
     e34:	40 ea       	ldi	r20, 0xA0	; 160
     e36:	58 e0       	ldi	r21, 0x08	; 8
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		if(ReaderStateFlag.OfflineTransactionExist == false)
     e42:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     e46:	85 fd       	sbrc	r24, 5
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <storeOfflineTransaction+0xf2>
		{
			ReaderStateFlag.OfflineTransactionExist = true;
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);	
     e50:	43 e9       	ldi	r20, 0x93	; 147
     e52:	58 e0       	ldi	r21, 0x08	; 8
     e54:	62 e0       	ldi	r22, 0x02	; 2
     e56:	82 e2       	ldi	r24, 0x22	; 34
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		}
		if (ReaderSetup.numOfSavedTransactions == ReaderSetup.maxOfflineTransaction)
     e5e:	90 91 a0 08 	lds	r25, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     e62:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <ReaderSetup+0x8>
     e66:	98 13       	cpse	r25, r24
     e68:	23 c0       	rjmp	.+70     	; 0xeb0 <storeOfflineTransaction+0x144>
		{
			ReaderStateFlag.MaxNumTransReached = true;
     e6a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);
     e74:	43 e9       	ldi	r20, 0x93	; 147
     e76:	58 e0       	ldi	r21, 0x08	; 8
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	82 e2       	ldi	r24, 0x22	; 34
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <storeOfflineTransaction+0x144>
		}
	}
	else if(ReaderSetup.numOfSavedTransactions >= ReaderSetup.maxOfflineTransaction){
		halGetEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
     e84:	43 e9       	ldi	r20, 0x93	; 147
     e86:	58 e0       	ldi	r21, 0x08	; 8
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	82 e2       	ldi	r24, 0x22	; 34
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
		ReaderStateFlag.EnableOfflineTransaction = false; // stop conducting off line transaction, EEPROM is full.
     e92:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = true;
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	80 61       	ori	r24, 0x10	; 16
     e9a:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     e9e:	43 e9       	ldi	r20, 0x93	; 147
     ea0:	58 e0       	ldi	r21, 0x08	; 8
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	82 e2       	ldi	r24, 0x22	; 34
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		return_code = 0;
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <storeOfflineTransaction+0x146>
*/

#if(DEVICE_CONNECTED == MDC_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
	u8 return_code = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
		ReaderStateFlag.MaxNumTransReached = true;
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
		return_code = 0;
	}
	return return_code;	
}
     eb2:	67 96       	adiw	r28, 0x17	; 23
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <sendStoredTransaction>:

u8 sendStoredTransaction(void)
{	
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	67 97       	sbiw	r28, 0x17	; 23
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
	//get total number of stored off line transactions from EEPROM.
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     ed8:	40 ea       	ldi	r20, 0xA0	; 160
     eda:	58 e0       	ldi	r21, 0x08	; 8
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
	
	//build buffer of transactions to be transmitted.
	if (ReaderSetup.numOfSavedTransactions > 0 && ReaderSetup.numOfSavedTransactions < 0xFF) // valid number of transactions stored, prepare to send to BOW
     ee6:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	8e 3f       	cpi	r24, 0xFE	; 254
     eee:	78 f5       	brcc	.+94     	; 0xf4e <sendStoredTransaction+0x8a>
		structTransaction record;
		u16 addr;
		
		//send data to BOW

		halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);		
     ef0:	ae 01       	movw	r20, r28
     ef2:	4a 5e       	subi	r20, 0xEA	; 234
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	62 e0       	ldi	r22, 0x02	; 2
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
		halGetEeprom((void*)addr,OFFLINE_TRANSACTION_NUM_BYTE,(u8*)&record); // get transaction record
     f00:	ae 01       	movw	r20, r28
     f02:	4f 5f       	subi	r20, 0xFF	; 255
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	65 e1       	ldi	r22, 0x15	; 21
     f08:	8e 89       	ldd	r24, Y+22	; 0x16
     f0a:	9f 89       	ldd	r25, Y+23	; 0x17
     f0c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
			
		if( sendCCTransaction(&record) )
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	0e 94 92 05 	call	0xb24	; 0xb24 <sendCCTransaction>
     f18:	88 23       	and	r24, r24
     f1a:	c9 f0       	breq	.+50     	; 0xf4e <sendStoredTransaction+0x8a>
		{//update current record address
			addr = addr + OFFLINE_TRANSACTION_NUM_BYTE;
     f1c:	8e 89       	ldd	r24, Y+22	; 0x16
     f1e:	9f 89       	ldd	r25, Y+23	; 0x17
     f20:	45 96       	adiw	r24, 0x15	; 21
     f22:	9f 8b       	std	Y+23, r25	; 0x17
     f24:	8e 8b       	std	Y+22, r24	; 0x16
			
			ReaderSetup.numOfSavedTransactions--;
     f26:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     f2a:	81 50       	subi	r24, 0x01	; 1
     f2c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <ReaderSetup+0x9>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);
     f30:	ae 01       	movw	r20, r28
     f32:	4a 5e       	subi	r20, 0xEA	; 234
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	62 e0       	ldi	r22, 0x02	; 2
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     f40:	40 ea       	ldi	r20, 0xA0	; 160
     f42:	58 e0       	ldi	r21, 0x08	; 8
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
		}
	}
	if (ReaderSetup.numOfSavedTransactions == 0)
     f4e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     f52:	81 11       	cpse	r24, r1
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <sendStoredTransaction+0xac>
	{
		ReaderStateFlag.OfflineTransactionExist = false;
     f56:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = false;
     f5a:	8f 7d       	andi	r24, 0xDF	; 223
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     f62:	43 e9       	ldi	r20, 0x93	; 147
     f64:	58 e0       	ldi	r21, 0x08	; 8
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	82 e2       	ldi	r24, 0x22	; 34
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
	}
	
	return ReaderSetup.numOfSavedTransactions;
}
     f70:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     f74:	67 96       	adiw	r28, 0x17	; 23
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <getSQSetupData>:
	temp[0] = AUDIO_BEEP_REQUEST_SIZE;
	temp[1] = AUDIO_BEEP_REQUEST;
	temp[2] = beepLength;
	
	return (sendSQData(temp) );		
}
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	e2 97       	sbiw	r28, 0x32	; 50
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	ae 01       	movw	r20, r28
     fa0:	4f 5f       	subi	r20, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	82 e3       	ldi	r24, 0x32	; 50
     fa6:	fa 01       	movw	r30, r20
     fa8:	11 92       	st	Z+, r1
     faa:	8a 95       	dec	r24
     fac:	e9 f7       	brne	.-6      	; 0xfa8 <getSQSetupData+0x22>
     fae:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
     fb2:	9f ed       	ldi	r25, 0xDF	; 223
     fb4:	98 0f       	add	r25, r24
     fb6:	92 30       	cpi	r25, 0x02	; 2
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <getSQSetupData+0x3a>
     fba:	84 32       	cpi	r24, 0x24	; 36
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <getSQSetupData+0x3a>
     fbe:	d1 c0       	rjmp	.+418    	; 0x1162 <getSQSetupData+0x1dc>
     fc0:	60 e1       	ldi	r22, 0x10	; 16
     fc2:	84 e2       	ldi	r24, 0x24	; 36
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
     fca:	0a 81       	ldd	r16, Y+2	; 0x02
     fcc:	1b 81       	ldd	r17, Y+3	; 0x03
     fce:	60 2f       	mov	r22, r16
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	76 2f       	mov	r23, r22
     fd4:	66 27       	eor	r22, r22
     fd6:	61 0f       	add	r22, r17
     fd8:	71 1d       	adc	r23, r1
     fda:	07 2e       	mov	r0, r23
     fdc:	00 0c       	add	r0, r0
     fde:	88 0b       	sbc	r24, r24
     fe0:	99 0b       	sbc	r25, r25
     fe2:	0e 94 06 2c 	call	0x580c	; 0x580c <__floatsisf>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 ec       	ldi	r20, 0xC8	; 200
     fec:	52 e4       	ldi	r21, 0x42	; 66
     fee:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <__divsf3>
     ff2:	60 93 cc 0b 	sts	0x0BCC, r22	; 0x800bcc <vendPrice>
     ff6:	70 93 cd 0b 	sts	0x0BCD, r23	; 0x800bcd <vendPrice+0x1>
     ffa:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <vendPrice+0x2>
     ffe:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <vendPrice+0x3>
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <MachineSetupData>
    1008:	00 93 ce 09 	sts	0x09CE, r16	; 0x8009ce <MachineSetupData+0x4>
    100c:	10 93 cf 09 	sts	0x09CF, r17	; 0x8009cf <MachineSetupData+0x5>
    1010:	10 92 f5 09 	sts	0x09F5, r1	; 0x8009f5 <MachineSetupData+0x2b>
    1014:	39 e1       	ldi	r19, 0x19	; 25
    1016:	30 93 f6 09 	sts	0x09F6, r19	; 0x8009f6 <MachineSetupData+0x2c>
    101a:	10 92 f7 09 	sts	0x09F7, r1	; 0x8009f7 <MachineSetupData+0x2d>
    101e:	84 e6       	ldi	r24, 0x64	; 100
    1020:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <MachineSetupData+0x2e>
    1024:	9c 85       	ldd	r25, Y+12	; 0x0c
    1026:	90 93 f9 09 	sts	0x09F9, r25	; 0x8009f9 <MachineSetupData+0x2f>
    102a:	9d 85       	ldd	r25, Y+13	; 0x0d
    102c:	90 93 fa 09 	sts	0x09FA, r25	; 0x8009fa <MachineSetupData+0x30>
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <MachineSetupData+0x31>
    1036:	9f 85       	ldd	r25, Y+15	; 0x0f
    1038:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <MachineSetupData+0x32>
    103c:	28 89       	ldd	r18, Y+16	; 0x10
    103e:	20 93 fd 09 	sts	0x09FD, r18	; 0x8009fd <MachineSetupData+0x33>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	20 93 05 0a 	sts	0x0A05, r18	; 0x800a05 <MachineSetupData+0x3b>
    1048:	2d 81       	ldd	r18, Y+5	; 0x05
    104a:	20 93 06 0a 	sts	0x0A06, r18	; 0x800a06 <MachineSetupData+0x3c>
    104e:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	09 f0       	breq	.+2      	; 0x1058 <getSQSetupData+0xd2>
    1056:	02 c1       	rjmp	.+516    	; 0x125c <getSQSetupData+0x2d6>
    1058:	10 92 d0 09 	sts	0x09D0, r1	; 0x8009d0 <MachineSetupData+0x6>
    105c:	80 93 d1 09 	sts	0x09D1, r24	; 0x8009d1 <MachineSetupData+0x7>
    1060:	10 92 d2 09 	sts	0x09D2, r1	; 0x8009d2 <MachineSetupData+0x8>
    1064:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <MachineSetupData+0x9>
    1068:	10 92 d4 09 	sts	0x09D4, r1	; 0x8009d4 <MachineSetupData+0xa>
    106c:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <MachineSetupData+0xb>
    1070:	10 92 d6 09 	sts	0x09D6, r1	; 0x8009d6 <MachineSetupData+0xc>
    1074:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <MachineSetupData+0xd>
    1078:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <MachineSetupData+0xe>
    107c:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <MachineSetupData+0xf>
    1080:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <MachineSetupData+0x10>
    1084:	80 93 db 09 	sts	0x09DB, r24	; 0x8009db <MachineSetupData+0x11>
    1088:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <MachineSetupData+0x12>
    108c:	80 93 dd 09 	sts	0x09DD, r24	; 0x8009dd <MachineSetupData+0x13>
    1090:	10 92 de 09 	sts	0x09DE, r1	; 0x8009de <MachineSetupData+0x14>
    1094:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <MachineSetupData+0x15>
    1098:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
    109c:	81 32       	cpi	r24, 0x21	; 33
    109e:	59 f5       	brne	.+86     	; 0x10f6 <getSQSetupData+0x170>
    10a0:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <MachineSetupData+0x16>
    10a4:	30 93 e1 09 	sts	0x09E1, r19	; 0x8009e1 <MachineSetupData+0x17>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <MachineSetupData+0x18>
    10ae:	8a e0       	ldi	r24, 0x0A	; 10
    10b0:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <MachineSetupData+0x1a>
    10b4:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <MachineSetupData+0x1b>
    10b8:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <MachineSetupData+0x19>
    10bc:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <MachineSetupData+0x1f>
    10c0:	24 e0       	ldi	r18, 0x04	; 4
    10c2:	20 93 ea 09 	sts	0x09EA, r18	; 0x8009ea <MachineSetupData+0x20>
    10c6:	10 92 eb 09 	sts	0x09EB, r1	; 0x8009eb <MachineSetupData+0x21>
    10ca:	37 e0       	ldi	r19, 0x07	; 7
    10cc:	30 93 ec 09 	sts	0x09EC, r19	; 0x8009ec <MachineSetupData+0x22>
    10d0:	80 93 ed 09 	sts	0x09ED, r24	; 0x8009ed <MachineSetupData+0x23>
    10d4:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <MachineSetupData+0x24>
    10d8:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <MachineSetupData+0x25>
    10dc:	36 e0       	ldi	r19, 0x06	; 6
    10de:	30 93 f0 09 	sts	0x09F0, r19	; 0x8009f0 <MachineSetupData+0x26>
    10e2:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <MachineSetupData+0x27>
    10e6:	20 93 f2 09 	sts	0x09F2, r18	; 0x8009f2 <MachineSetupData+0x28>
    10ea:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <MachineSetupData+0x29>
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <MachineSetupData+0x2a>
    10f4:	2a c0       	rjmp	.+84     	; 0x114a <getSQSetupData+0x1c4>
    10f6:	82 32       	cpi	r24, 0x22	; 34
    10f8:	89 f4       	brne	.+34     	; 0x111c <getSQSetupData+0x196>
    10fa:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <MachineSetupData+0x16>
    10fe:	82 e3       	ldi	r24, 0x32	; 50
    1100:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <MachineSetupData+0x17>
    1104:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <MachineSetupData+0x1c>
    1108:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <MachineSetupData+0x1d>
    110c:	20 93 e8 09 	sts	0x09E8, r18	; 0x8009e8 <MachineSetupData+0x1e>
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <MachineSetupData+0x18>
    1116:	20 93 0d 0a 	sts	0x0A0D, r18	; 0x800a0d <MachineSetupData+0x43>
    111a:	17 c0       	rjmp	.+46     	; 0x114a <getSQSetupData+0x1c4>
    111c:	84 32       	cpi	r24, 0x24	; 36
    111e:	a9 f4       	brne	.+42     	; 0x114a <getSQSetupData+0x1c4>
    1120:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <MachineSetupData+0x16>
    1124:	82 e3       	ldi	r24, 0x32	; 50
    1126:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <MachineSetupData+0x17>
    112a:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <MachineSetupData+0x1c>
    112e:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <MachineSetupData+0x1d>
    1132:	20 93 e8 09 	sts	0x09E8, r18	; 0x8009e8 <MachineSetupData+0x1e>
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <MachineSetupData+0x18>
    113c:	20 93 e9 09 	sts	0x09E9, r18	; 0x8009e9 <MachineSetupData+0x1f>
    1140:	84 e0       	ldi	r24, 0x04	; 4
    1142:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <MachineSetupData+0x20>
    1146:	10 92 eb 09 	sts	0x09EB, r1	; 0x8009eb <MachineSetupData+0x21>
    114a:	93 ff       	sbrs	r25, 3
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <getSQSetupData+0x1d0>
    114e:	8d e1       	ldi	r24, 0x1D	; 29
    1150:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <MachineSetupData+0x41>
    1154:	02 c0       	rjmp	.+4      	; 0x115a <getSQSetupData+0x1d4>
    1156:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <MachineSetupData+0x41>
    115a:	90 72       	andi	r25, 0x20	; 32
    115c:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <MachineSetupData+0x42>
    1160:	7d c0       	rjmp	.+250    	; 0x125c <getSQSetupData+0x2d6>
    1162:	88 52       	subi	r24, 0x28	; 40
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	08 f0       	brcs	.+2      	; 0x116a <getSQSetupData+0x1e4>
    1168:	79 c0       	rjmp	.+242    	; 0x125c <getSQSetupData+0x2d6>
    116a:	62 e1       	ldi	r22, 0x12	; 18
    116c:	84 e2       	ldi	r24, 0x24	; 36
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
    1174:	0a 81       	ldd	r16, Y+2	; 0x02
    1176:	1b 81       	ldd	r17, Y+3	; 0x03
    1178:	60 2f       	mov	r22, r16
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	76 2f       	mov	r23, r22
    117e:	66 27       	eor	r22, r22
    1180:	61 0f       	add	r22, r17
    1182:	71 1d       	adc	r23, r1
    1184:	07 2e       	mov	r0, r23
    1186:	00 0c       	add	r0, r0
    1188:	88 0b       	sbc	r24, r24
    118a:	99 0b       	sbc	r25, r25
    118c:	0e 94 06 2c 	call	0x580c	; 0x580c <__floatsisf>
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	48 ec       	ldi	r20, 0xC8	; 200
    1196:	52 e4       	ldi	r21, 0x42	; 66
    1198:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <__divsf3>
    119c:	60 93 cc 0b 	sts	0x0BCC, r22	; 0x800bcc <vendPrice>
    11a0:	70 93 cd 0b 	sts	0x0BCD, r23	; 0x800bcd <vendPrice+0x1>
    11a4:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <vendPrice+0x2>
    11a8:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <vendPrice+0x3>
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <MachineSetupData>
    11b2:	00 93 ce 09 	sts	0x09CE, r16	; 0x8009ce <MachineSetupData+0x4>
    11b6:	10 93 cf 09 	sts	0x09CF, r17	; 0x8009cf <MachineSetupData+0x5>
    11ba:	2e 81       	ldd	r18, Y+6	; 0x06
    11bc:	20 93 f5 09 	sts	0x09F5, r18	; 0x8009f5 <MachineSetupData+0x2b>
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <MachineSetupData+0x2c>
    11c6:	20 93 f7 09 	sts	0x09F7, r18	; 0x8009f7 <MachineSetupData+0x2d>
    11ca:	90 93 f8 09 	sts	0x09F8, r25	; 0x8009f8 <MachineSetupData+0x2e>
    11ce:	88 85       	ldd	r24, Y+8	; 0x08
    11d0:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <MachineSetupData+0x2f>
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <MachineSetupData+0x30>
    11da:	8a 85       	ldd	r24, Y+10	; 0x0a
    11dc:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <MachineSetupData+0x31>
    11e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e2:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <MachineSetupData+0x32>
    11e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    11e8:	30 93 fd 09 	sts	0x09FD, r19	; 0x8009fd <MachineSetupData+0x33>
    11ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ee:	30 93 fe 09 	sts	0x09FE, r19	; 0x8009fe <MachineSetupData+0x34>
    11f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f4:	30 93 ff 09 	sts	0x09FF, r19	; 0x8009ff <MachineSetupData+0x35>
    11f8:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <MachineSetupData+0x36>
    11fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    11fe:	30 93 01 0a 	sts	0x0A01, r19	; 0x800a01 <MachineSetupData+0x37>
    1202:	38 89       	ldd	r19, Y+16	; 0x10
    1204:	30 93 02 0a 	sts	0x0A02, r19	; 0x800a02 <MachineSetupData+0x38>
    1208:	39 89       	ldd	r19, Y+17	; 0x11
    120a:	30 93 03 0a 	sts	0x0A03, r19	; 0x800a03 <MachineSetupData+0x39>
    120e:	3a 89       	ldd	r19, Y+18	; 0x12
    1210:	30 93 04 0a 	sts	0x0A04, r19	; 0x800a04 <MachineSetupData+0x3a>
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	30 93 05 0a 	sts	0x0A05, r19	; 0x800a05 <MachineSetupData+0x3b>
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	30 93 06 0a 	sts	0x0A06, r19	; 0x800a06 <MachineSetupData+0x3c>
    1220:	30 91 a1 09 	lds	r19, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    1224:	32 30       	cpi	r19, 0x02	; 2
    1226:	d1 f4       	brne	.+52     	; 0x125c <getSQSetupData+0x2d6>
    1228:	00 93 d0 09 	sts	0x09D0, r16	; 0x8009d0 <MachineSetupData+0x6>
    122c:	10 93 d1 09 	sts	0x09D1, r17	; 0x8009d1 <MachineSetupData+0x7>
    1230:	20 93 d2 09 	sts	0x09D2, r18	; 0x8009d2 <MachineSetupData+0x8>
    1234:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <MachineSetupData+0x9>
    1238:	90 91 08 0a 	lds	r25, 0x0A08	; 0x800a08 <MachineSetupData+0x3e>
    123c:	99 23       	and	r25, r25
    123e:	19 f0       	breq	.+6      	; 0x1246 <getSQSetupData+0x2c0>
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	90 93 07 0a 	sts	0x0A07, r25	; 0x800a07 <MachineSetupData+0x3d>
    1246:	83 ff       	sbrs	r24, 3
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <getSQSetupData+0x2cc>
    124a:	9d e1       	ldi	r25, 0x1D	; 29
    124c:	90 93 0b 0a 	sts	0x0A0B, r25	; 0x800a0b <MachineSetupData+0x41>
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <getSQSetupData+0x2d0>
    1252:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <MachineSetupData+0x41>
    1256:	80 72       	andi	r24, 0x20	; 32
    1258:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <MachineSetupData+0x42>
    125c:	e2 96       	adiw	r28, 0x32	; 50
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	08 95       	ret

00001272 <sendSQData>:
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24
    1288:	98 e0       	ldi	r25, 0x08	; 8
    128a:	f9 2e       	mov	r15, r25
    128c:	c0 2e       	mov	r12, r16
    128e:	0e 94 2e 20 	call	0x405c	; 0x405c <init_rx_buf>
    1292:	f8 01       	movw	r30, r16
    1294:	d0 80       	ld	r13, Z
    1296:	d3 94       	inc	r13
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	0e 94 4b 20 	call	0x4096	; 0x4096 <serial_putchar>
    129e:	c0 2f       	mov	r28, r16
    12a0:	d1 2f       	mov	r29, r17
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	e8 2e       	mov	r14, r24
    12a6:	8c 2f       	mov	r24, r28
    12a8:	8c 19       	sub	r24, r12
    12aa:	8d 15       	cp	r24, r13
    12ac:	40 f4       	brcc	.+16     	; 0x12be <sendSQData+0x4c>
    12ae:	5e 01       	movw	r10, r28
    12b0:	89 91       	ld	r24, Y+
    12b2:	0e 94 4b 20 	call	0x4096	; 0x4096 <serial_putchar>
    12b6:	f5 01       	movw	r30, r10
    12b8:	80 81       	ld	r24, Z
    12ba:	e8 26       	eor	r14, r24
    12bc:	f4 cf       	rjmp	.-24     	; 0x12a6 <sendSQData+0x34>
    12be:	8e 2d       	mov	r24, r14
    12c0:	0e 94 4b 20 	call	0x4096	; 0x4096 <serial_putchar>
    12c4:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <ucTimerCount>
    12c8:	78 94       	sei
    12ca:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <StartTimerZero>
    12ce:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <ucTimerCount>
    12d2:	86 34       	cpi	r24, 0x46	; 70
    12d4:	20 f4       	brcc	.+8      	; 0x12de <sendSQData+0x6c>
    12d6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <rx_buf_count>
    12da:	88 23       	and	r24, r24
    12dc:	39 f0       	breq	.+14     	; 0x12ec <sendSQData+0x7a>
    12de:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <StopTimerZero>
    12e2:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <ucTimerCount>
    12e6:	86 34       	cpi	r24, 0x46	; 70
    12e8:	40 f0       	brcs	.+16     	; 0x12fa <sendSQData+0x88>
    12ea:	0d c0       	rjmp	.+26     	; 0x1306 <sendSQData+0x94>
    12ec:	0e 94 97 1a 	call	0x352e	; 0x352e <mac_event_pending>
    12f0:	88 23       	and	r24, r24
    12f2:	69 f3       	breq	.-38     	; 0x12ce <sendSQData+0x5c>
    12f4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <macTask>
    12f8:	ea cf       	rjmp	.-44     	; 0x12ce <sendSQData+0x5c>
    12fa:	0e 94 86 20 	call	0x410c	; 0x410c <serial_getchar>
    12fe:	86 30       	cpi	r24, 0x06	; 6
    1300:	69 f0       	breq	.+26     	; 0x131c <sendSQData+0xaa>
    1302:	89 30       	cpi	r24, 0x09	; 9
    1304:	49 f0       	breq	.+18     	; 0x1318 <sendSQData+0xa6>
    1306:	8f ed       	ldi	r24, 0xDF	; 223
    1308:	9e e2       	ldi	r25, 0x2E	; 46
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <sendSQData+0x98>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <sendSQData+0x9e>
    1310:	00 00       	nop
    1312:	fa 94       	dec	r15
    1314:	f1 10       	cpse	r15, r1
    1316:	bb cf       	rjmp	.-138    	; 0x128e <sendSQData+0x1c>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	01 c0       	rjmp	.+2      	; 0x131e <sendSQData+0xac>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	08 95       	ret

00001334 <sendSQVendPrice>:
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	28 97       	sbiw	r28, 0x08	; 8
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	90 91 11 0a 	lds	r25, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    134c:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <MdcStatus+0x2>
    1350:	92 30       	cpi	r25, 0x02	; 2
    1352:	f9 f4       	brne	.+62     	; 0x1392 <sendSQVendPrice+0x5e>
    1354:	97 e0       	ldi	r25, 0x07	; 7
    1356:	99 83       	std	Y+1, r25	; 0x01
    1358:	98 e1       	ldi	r25, 0x18	; 24
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	81 11       	cpse	r24, r1
    135e:	0a c0       	rjmp	.+20     	; 0x1374 <sendSQVendPrice+0x40>
    1360:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <ReaderStateFlag+0x1>
    1364:	81 ff       	sbrs	r24, 1
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <sendSQVendPrice+0x40>
    1368:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MachineSetupData+0x3b>
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MachineSetupData+0x3c>
    1372:	05 c0       	rjmp	.+10     	; 0x137e <sendSQVendPrice+0x4a>
    1374:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    137e:	8c 83       	std	Y+4, r24	; 0x04
    1380:	1d 82       	std	Y+5, r1	; 0x05
    1382:	1e 82       	std	Y+6, r1	; 0x06
    1384:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <MachineSetupData+0x3e>
    1388:	8f 83       	std	Y+7, r24	; 0x07
    138a:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <MachineSetupData+0x3f>
    138e:	88 87       	std	Y+8, r24	; 0x08
    1390:	19 c0       	rjmp	.+50     	; 0x13c4 <sendSQVendPrice+0x90>
    1392:	94 e0       	ldi	r25, 0x04	; 4
    1394:	99 83       	std	Y+1, r25	; 0x01
    1396:	92 e1       	ldi	r25, 0x12	; 18
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	81 11       	cpse	r24, r1
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <sendSQVendPrice+0x7e>
    139e:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <ReaderStateFlag+0x1>
    13a2:	81 ff       	sbrs	r24, 1
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <sendSQVendPrice+0x7e>
    13a6:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MachineSetupData+0x3b>
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MachineSetupData+0x3c>
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <sendSQVendPrice+0x88>
    13b2:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    13bc:	8c 83       	std	Y+4, r24	; 0x04
    13be:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <MachineSetupData+0x40>
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    13cc:	28 96       	adiw	r28, 0x08	; 8
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <getSQData>:
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	7c 01       	movw	r14, r24
    13ee:	0e 94 86 20 	call	0x410c	; 0x410c <serial_getchar>
    13f2:	c8 2f       	mov	r28, r24
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	09 f5       	brne	.+66     	; 0x143a <getSQData+0x5c>
    13f8:	0e 94 86 20 	call	0x410c	; 0x410c <serial_getchar>
    13fc:	d8 2f       	mov	r29, r24
    13fe:	f7 01       	movw	r30, r14
    1400:	80 81       	ld	r24, Z
    1402:	8d 17       	cp	r24, r29
    1404:	d0 f0       	brcs	.+52     	; 0x143a <getSQData+0x5c>
    1406:	cd 27       	eor	r28, r29
    1408:	de 2c       	mov	r13, r14
    140a:	87 01       	movw	r16, r14
    140c:	80 2f       	mov	r24, r16
    140e:	8d 19       	sub	r24, r13
    1410:	8d 17       	cp	r24, r29
    1412:	38 f4       	brcc	.+14     	; 0x1422 <getSQData+0x44>
    1414:	0e 94 86 20 	call	0x410c	; 0x410c <serial_getchar>
    1418:	f8 01       	movw	r30, r16
    141a:	81 93       	st	Z+, r24
    141c:	8f 01       	movw	r16, r30
    141e:	c8 27       	eor	r28, r24
    1420:	f5 cf       	rjmp	.-22     	; 0x140c <getSQData+0x2e>
    1422:	0e 94 86 20 	call	0x410c	; 0x410c <serial_getchar>
    1426:	c8 13       	cpse	r28, r24
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <getSQData+0x56>
    142a:	86 e0       	ldi	r24, 0x06	; 6
    142c:	0e 94 4b 20 	call	0x4096	; 0x4096 <serial_putchar>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	04 c0       	rjmp	.+8      	; 0x143c <getSQData+0x5e>
    1434:	85 e1       	ldi	r24, 0x15	; 21
    1436:	0e 94 4b 20 	call	0x4096	; 0x4096 <serial_putchar>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	08 95       	ret

0000144c <getSQStatusData>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	62 97       	sbiw	r28, 0x12	; 18
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	91 f5       	brne	.+100    	; 0x14cc <getSQStatusData+0x80>
    1468:	22 e1       	ldi	r18, 0x12	; 18
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	fc 01       	movw	r30, r24
    1470:	32 2f       	mov	r19, r18
    1472:	11 92       	st	Z+, r1
    1474:	3a 95       	dec	r19
    1476:	e9 f7       	brne	.-6      	; 0x1472 <getSQStatusData+0x26>
    1478:	29 83       	std	Y+1, r18	; 0x01
    147a:	0e 94 ef 09 	call	0x13de	; 0x13de <getSQData>
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <getSQStatusData+0x38>
    1482:	4d c0       	rjmp	.+154    	; 0x151e <getSQStatusData+0xd2>
    1484:	99 81       	ldd	r25, Y+1	; 0x01
    1486:	97 31       	cpi	r25, 0x17	; 23
    1488:	09 f0       	breq	.+2      	; 0x148c <getSQStatusData+0x40>
    148a:	49 c0       	rjmp	.+146    	; 0x151e <getSQStatusData+0xd2>
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	90 5e       	subi	r25, 0xE0	; 224
    1490:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <MdcStatus>
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <MdcStatus+0x2>
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <MdcStatus+0x3>
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <MdcStatus+0x4>
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <MdcStatus+0x5>
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <MdcStatus+0x6>
    14b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b4:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <MdcStatus+0x7>
    14b8:	98 89       	ldd	r25, Y+16	; 0x10
    14ba:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <MdcStatus+0x8>
    14be:	99 89       	ldd	r25, Y+17	; 0x11
    14c0:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <MdcStatus+0x9>
    14c4:	9a 89       	ldd	r25, Y+18	; 0x12
    14c6:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <MdcStatus+0xa>
    14ca:	2a c0       	rjmp	.+84     	; 0x1520 <getSQStatusData+0xd4>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	39 f5       	brne	.+78     	; 0x151e <getSQStatusData+0xd2>
    14d0:	2b e0       	ldi	r18, 0x0B	; 11
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	fc 01       	movw	r30, r24
    14d8:	32 2f       	mov	r19, r18
    14da:	11 92       	st	Z+, r1
    14dc:	3a 95       	dec	r19
    14de:	e9 f7       	brne	.-6      	; 0x14da <getSQStatusData+0x8e>
    14e0:	29 83       	std	Y+1, r18	; 0x01
    14e2:	0e 94 ef 09 	call	0x13de	; 0x13de <getSQData>
    14e6:	88 23       	and	r24, r24
    14e8:	d1 f0       	breq	.+52     	; 0x151e <getSQStatusData+0xd2>
    14ea:	99 81       	ldd	r25, Y+1	; 0x01
    14ec:	91 31       	cpi	r25, 0x11	; 17
    14ee:	b9 f4       	brne	.+46     	; 0x151e <getSQStatusData+0xd2>
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	90 5e       	subi	r25, 0xE0	; 224
    14f4:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <MdcStatus>
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <MdcStatus+0x2>
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <MdcStatus+0x3>
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <MdcStatus+0x4>
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <MdcStatus+0x5>
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <MdcStatus+0x6>
    1516:	9b 85       	ldd	r25, Y+11	; 0x0b
    1518:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <MdcStatus+0x7>
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <getSQStatusData+0xd4>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	62 96       	adiw	r28, 0x12	; 18
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <getSQMachineStatus>:
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	00 d0       	rcall	.+0      	; 0x153a <getSQMachineStatus+0x8>
    153a:	1f 92       	push	r1
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	11 f4       	brne	.+4      	; 0x1550 <getSQMachineStatus+0x1e>
    154c:	86 e1       	ldi	r24, 0x16	; 22
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <getSQMachineStatus+0x20>
    1550:	80 e1       	ldi	r24, 0x10	; 16
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <CurrentAccount+0x9>
    1558:	8b 83       	std	Y+3, r24	; 0x03
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1562:	81 11       	cpse	r24, r1
    1564:	02 c0       	rjmp	.+4      	; 0x156a <getSQMachineStatus+0x38>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	15 c0       	rjmp	.+42     	; 0x1594 <getSQMachineStatus+0x62>
    156a:	0e 94 26 0a 	call	0x144c	; 0x144c <getSQStatusData>
    156e:	18 2f       	mov	r17, r24
    1570:	88 23       	and	r24, r24
    1572:	c9 f3       	breq	.-14     	; 0x1566 <getSQMachineStatus+0x34>
    1574:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <ReaderStateFlag>
    1578:	91 fb       	bst	r25, 1
    157a:	88 27       	eor	r24, r24
    157c:	80 f9       	bld	r24, 0
    157e:	91 fd       	sbrc	r25, 1
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <getSQMachineStatus+0x62>
    1582:	8f ed       	ldi	r24, 0xDF	; 223
    1584:	9e e2       	ldi	r25, 0x2E	; 46
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <getSQMachineStatus+0x54>
    158a:	00 c0       	rjmp	.+0      	; 0x158c <getSQMachineStatus+0x5a>
    158c:	00 00       	nop
    158e:	0e 94 9a 09 	call	0x1334	; 0x1334 <sendSQVendPrice>
    1592:	81 2f       	mov	r24, r17
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	08 95       	ret

000015a2 <getSQInitData>:
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	2a 97       	sbiw	r28, 0x0a	; 10
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	8a e0       	ldi	r24, 0x0A	; 10
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 ef 09 	call	0x13de	; 0x13de <getSQData>
    15c2:	88 23       	and	r24, r24
    15c4:	61 f0       	breq	.+24     	; 0x15de <getSQInitData+0x3c>
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <MachineSetupData+0x1>
    15cc:	9b 81       	ldd	r25, Y+3	; 0x03
    15ce:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <MachineSetupData+0x2>
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	90 93 cd 09 	sts	0x09CD, r25	; 0x8009cd <MachineSetupData+0x3>
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <MachineSetupData+0x32>
    15de:	2a 96       	adiw	r28, 0x0a	; 10
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <isQuantum>:
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	28 97       	sbiw	r28, 0x08	; 8
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	88 e0       	ldi	r24, 0x08	; 8
    1606:	e9 e2       	ldi	r30, 0x29	; 41
    1608:	f2 e0       	ldi	r31, 0x02	; 2
    160a:	de 01       	movw	r26, r28
    160c:	11 96       	adiw	r26, 0x01	; 1
    160e:	01 90       	ld	r0, Z+
    1610:	0d 92       	st	X+, r0
    1612:	8a 95       	dec	r24
    1614:	e1 f7       	brne	.-8      	; 0x160e <isQuantum+0x1e>
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	8e 83       	std	Y+6, r24	; 0x06
    161a:	8f 83       	std	Y+7, r24	; 0x07
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1624:	81 11       	cpse	r24, r1
    1626:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <getSQInitData>
    162a:	28 96       	adiw	r28, 0x08	; 8
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <waitSQStartKey>:
    163c:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	19 f4       	brne	.+6      	; 0x164a <waitSQStartKey+0xe>
    1644:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <MdcStatus+0x4>
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <waitSQStartKey+0x16>
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	79 f4       	brne	.+30     	; 0x166c <waitSQStartKey+0x30>
    164e:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <MdcStatus+0x5>
    1652:	81 fd       	sbrc	r24, 1
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <waitSQStartKey+0x2c>
    1656:	80 31       	cpi	r24, 0x10	; 16
    1658:	49 f4       	brne	.+18     	; 0x166c <waitSQStartKey+0x30>
    165a:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <MdcStatus>
    165e:	98 52       	subi	r25, 0x28	; 40
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	92 30       	cpi	r25, 0x02	; 2
    1664:	20 f0       	brcs	.+8      	; 0x166e <waitSQStartKey+0x32>
    1666:	02 c0       	rjmp	.+4      	; 0x166c <waitSQStartKey+0x30>
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	08 95       	ret
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	08 95       	ret

00001670 <isSQCycleRunning>:
    1670:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <MdcStatus+0x4>
    1674:	80 31       	cpi	r24, 0x10	; 16
    1676:	39 f0       	breq	.+14     	; 0x1686 <isSQCycleRunning+0x16>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <MdcStatus+0x5>
    167e:	90 31       	cpi	r25, 0x10	; 16
    1680:	19 f0       	breq	.+6      	; 0x1688 <isSQCycleRunning+0x18>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <isSQCycleRunning+0x18>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	08 95       	ret

0000168c <sendSQCashCardInserted>:
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	00 d0       	rcall	.+0      	; 0x1692 <sendSQCashCardInserted+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <sendSQCashCardInserted+0x8>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <sendSQCashCardInserted+0xa>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	ce 01       	movw	r24, r28
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	26 e0       	ldi	r18, 0x06	; 6
    16a0:	fc 01       	movw	r30, r24
    16a2:	11 92       	st	Z+, r1
    16a4:	2a 95       	dec	r18
    16a6:	e9 f7       	brne	.-6      	; 0x16a2 <sendSQCashCardInserted+0x16>
    16a8:	40 91 11 0a 	lds	r20, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    16ac:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <CurrentAccount+0x7>
    16b0:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <CurrentAccount+0x8>
    16b4:	42 30       	cpi	r20, 0x02	; 2
    16b6:	39 f4       	brne	.+14     	; 0x16c6 <sendSQCashCardInserted+0x3a>
    16b8:	43 e0       	ldi	r20, 0x03	; 3
    16ba:	49 83       	std	Y+1, r20	; 0x01
    16bc:	40 e4       	ldi	r20, 0x40	; 64
    16be:	4a 83       	std	Y+2, r20	; 0x02
    16c0:	3b 83       	std	Y+3, r19	; 0x03
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	0c c0       	rjmp	.+24     	; 0x16de <sendSQCashCardInserted+0x52>
    16c6:	45 e0       	ldi	r20, 0x05	; 5
    16c8:	49 83       	std	Y+1, r20	; 0x01
    16ca:	40 e4       	ldi	r20, 0x40	; 64
    16cc:	4a 83       	std	Y+2, r20	; 0x02
    16ce:	3b 83       	std	Y+3, r19	; 0x03
    16d0:	2c 83       	std	Y+4, r18	; 0x04
    16d2:	20 91 ce 09 	lds	r18, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    16d6:	2d 83       	std	Y+5, r18	; 0x05
    16d8:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    16dc:	2e 83       	std	Y+6, r18	; 0x06
    16de:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    16e2:	26 96       	adiw	r28, 0x06	; 6
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <sendSQCashCardInsetedForTopoff>:
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	27 97       	sbiw	r28, 0x07	; 7
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	27 e0       	ldi	r18, 0x07	; 7
    170e:	fc 01       	movw	r30, r24
    1710:	11 92       	st	Z+, r1
    1712:	2a 95       	dec	r18
    1714:	e9 f7       	brne	.-6      	; 0x1710 <sendSQCashCardInsetedForTopoff+0x1c>
    1716:	40 91 11 0a 	lds	r20, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    171a:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <CurrentAccount+0x7>
    171e:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <CurrentAccount+0x8>
    1722:	42 30       	cpi	r20, 0x02	; 2
    1724:	39 f4       	brne	.+14     	; 0x1734 <sendSQCashCardInsetedForTopoff+0x40>
    1726:	43 e0       	ldi	r20, 0x03	; 3
    1728:	49 83       	std	Y+1, r20	; 0x01
    172a:	42 e4       	ldi	r20, 0x42	; 66
    172c:	4a 83       	std	Y+2, r20	; 0x02
    172e:	3b 83       	std	Y+3, r19	; 0x03
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <sendSQCashCardInsetedForTopoff+0x5e>
    1734:	46 e0       	ldi	r20, 0x06	; 6
    1736:	49 83       	std	Y+1, r20	; 0x01
    1738:	42 e4       	ldi	r20, 0x42	; 66
    173a:	4a 83       	std	Y+2, r20	; 0x02
    173c:	3b 83       	std	Y+3, r19	; 0x03
    173e:	2c 83       	std	Y+4, r18	; 0x04
    1740:	20 91 ce 09 	lds	r18, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    174a:	2e 83       	std	Y+6, r18	; 0x06
    174c:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MachineSetupData+0x35>
    1750:	2f 83       	std	Y+7, r18	; 0x07
    1752:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1756:	27 96       	adiw	r28, 0x07	; 7
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <sendSQCardRemoved>:
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	00 d0       	rcall	.+0      	; 0x176e <sendSQCardRemoved+0x6>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	81 e4       	ldi	r24, 0x41	; 65
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <sendSQCashCardRemoved>:
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	27 97       	sbiw	r28, 0x07	; 7
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	27 e0       	ldi	r18, 0x07	; 7
    17a6:	fc 01       	movw	r30, r24
    17a8:	11 92       	st	Z+, r1
    17aa:	2a 95       	dec	r18
    17ac:	e9 f7       	brne	.-6      	; 0x17a8 <sendSQCashCardRemoved+0x1c>
    17ae:	40 91 11 0a 	lds	r20, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    17b2:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <CurrentAccount+0x7>
    17b6:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <CurrentAccount+0x8>
    17ba:	42 30       	cpi	r20, 0x02	; 2
    17bc:	39 f4       	brne	.+14     	; 0x17cc <sendSQCashCardRemoved+0x40>
    17be:	43 e0       	ldi	r20, 0x03	; 3
    17c0:	49 83       	std	Y+1, r20	; 0x01
    17c2:	41 e4       	ldi	r20, 0x41	; 65
    17c4:	4a 83       	std	Y+2, r20	; 0x02
    17c6:	3b 83       	std	Y+3, r19	; 0x03
    17c8:	2c 83       	std	Y+4, r18	; 0x04
    17ca:	0c c0       	rjmp	.+24     	; 0x17e4 <sendSQCashCardRemoved+0x58>
    17cc:	45 e0       	ldi	r20, 0x05	; 5
    17ce:	49 83       	std	Y+1, r20	; 0x01
    17d0:	41 e4       	ldi	r20, 0x41	; 65
    17d2:	4a 83       	std	Y+2, r20	; 0x02
    17d4:	3b 83       	std	Y+3, r19	; 0x03
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	20 91 ce 09 	lds	r18, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    17dc:	2d 83       	std	Y+5, r18	; 0x05
    17de:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    17e2:	2e 83       	std	Y+6, r18	; 0x06
    17e4:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    17e8:	27 96       	adiw	r28, 0x07	; 7
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <sendSQDisplayCommand>:
Led1 to led4 are limited to values defined in "display.h"
***********************************************************************************************
*/

bool sendSQDisplayCommand( u8 led1, u8 led2,u8 led3, u8 led4, u8 duration) 
{
    17fa:	0f 93       	push	r16
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	2a 97       	sbiw	r28, 0x0a	; 10
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
	u8 temp[10]={0};
    1810:	fe 01       	movw	r30, r28
    1812:	31 96       	adiw	r30, 0x01	; 1
    1814:	9a e0       	ldi	r25, 0x0A	; 10
    1816:	df 01       	movw	r26, r30
    1818:	1d 92       	st	X+, r1
    181a:	9a 95       	dec	r25
    181c:	e9 f7       	brne	.-6      	; 0x1818 <sendSQDisplayCommand+0x1e>
	
	temp[0] = DISPLAY_REQUEST_SIZE;	//Number of actual data bytes to be transferred to the MDC including command data exclude bbc byte
    181e:	96 e0       	ldi	r25, 0x06	; 6
    1820:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = DISPLAY_REQUEST;		//MDC command to be requested 
    1822:	90 e6       	ldi	r25, 0x60	; 96
    1824:	9a 83       	std	Y+2, r25	; 0x02
	temp[2] = led1;				//Left most digit display character 4
    1826:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = led2;				//Display character 3
    1828:	6c 83       	std	Y+4, r22	; 0x04
	temp[4] = led3;				//Display character 2
    182a:	4d 83       	std	Y+5, r20	; 0x05
	temp[5] = led4;				//Display character 1
    182c:	2e 83       	std	Y+6, r18	; 0x06
	temp[6] = duration;			//Duration of display in seconds
    182e:	0f 83       	std	Y+7, r16	; 0x07
															
	return (sendSQData(temp) );
    1830:	cf 01       	movw	r24, r30
    1832:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
}
    1836:	2a 96       	adiw	r28, 0x0a	; 10
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <displaySQReaderVersion>:
This function will display the current version of reader firmware
on the MDC display for a minimum of 2 seconds.
*/

bool displaySQReaderVersion(void)
{	
    184a:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_r, msgNumber[__APP_MAJOR__],msgNumber[__APP_MINOR__],msgNumber[__APP_REVISION__],5) )
    184c:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <msgNumber+0x4>
    1850:	05 e0       	ldi	r16, 0x05	; 5
    1852:	24 2f       	mov	r18, r20
    1854:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <msgNumber>
    1858:	80 ea       	ldi	r24, 0xA0	; 160
    185a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <sendSQDisplayCommand>
    185e:	88 23       	and	r24, r24
    1860:	49 f0       	breq	.+18     	; 0x1874 <displaySQReaderVersion+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1862:	2f ef       	ldi	r18, 0xFF	; 255
    1864:	37 ea       	ldi	r19, 0xA7	; 167
    1866:	91 e6       	ldi	r25, 0x61	; 97
    1868:	21 50       	subi	r18, 0x01	; 1
    186a:	30 40       	sbci	r19, 0x00	; 0
    186c:	90 40       	sbci	r25, 0x00	; 0
    186e:	e1 f7       	brne	.-8      	; 0x1868 <displaySQReaderVersion+0x1e>
    1870:	00 c0       	rjmp	.+0      	; 0x1872 <displaySQReaderVersion+0x28>
    1872:	00 00       	nop
	{
		_delay_ms(2000);
		return true;	
	}
	return false;	
}	
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <displaySQCardError>:

bool displaySQCardError(void)
{
    1878:	0f 93       	push	r16
    187a:	cf 93       	push	r28
	if( sendSQDisplayCommand(LED_C, LED_A,LED_r,LED_d,4) )
    187c:	04 e0       	ldi	r16, 0x04	; 4
    187e:	2c eb       	ldi	r18, 0xBC	; 188
    1880:	40 ea       	ldi	r20, 0xA0	; 160
    1882:	6e ee       	ldi	r22, 0xEE	; 238
    1884:	82 e7       	ldi	r24, 0x72	; 114
    1886:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <sendSQDisplayCommand>
    188a:	c8 2f       	mov	r28, r24
    188c:	88 23       	and	r24, r24
    188e:	e1 f0       	breq	.+56     	; 0x18c8 <displaySQCardError+0x50>
    1890:	2f ef       	ldi	r18, 0xFF	; 255
    1892:	37 ea       	ldi	r19, 0xA7	; 167
    1894:	81 e6       	ldi	r24, 0x61	; 97
    1896:	21 50       	subi	r18, 0x01	; 1
    1898:	30 40       	sbci	r19, 0x00	; 0
    189a:	80 40       	sbci	r24, 0x00	; 0
    189c:	e1 f7       	brne	.-8      	; 0x1896 <displaySQCardError+0x1e>
    189e:	00 c0       	rjmp	.+0      	; 0x18a0 <displaySQCardError+0x28>
    18a0:	00 00       	nop
	{
		_delay_ms(2000);
		if( sendSQDisplayCommand(LED_E, LED_r,LED_r,LED_BLANK,3) )
    18a2:	03 e0       	ldi	r16, 0x03	; 3
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	40 ea       	ldi	r20, 0xA0	; 160
    18a8:	60 ea       	ldi	r22, 0xA0	; 160
    18aa:	82 ef       	ldi	r24, 0xF2	; 242
    18ac:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <sendSQDisplayCommand>
    18b0:	88 23       	and	r24, r24
    18b2:	51 f0       	breq	.+20     	; 0x18c8 <displaySQCardError+0x50>
    18b4:	9f ef       	ldi	r25, 0xFF	; 255
    18b6:	27 ea       	ldi	r18, 0xA7	; 167
    18b8:	31 e6       	ldi	r19, 0x61	; 97
    18ba:	91 50       	subi	r25, 0x01	; 1
    18bc:	20 40       	sbci	r18, 0x00	; 0
    18be:	30 40       	sbci	r19, 0x00	; 0
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <displaySQCardError+0x42>
    18c2:	00 c0       	rjmp	.+0      	; 0x18c4 <displaySQCardError+0x4c>
    18c4:	00 00       	nop
			_delay_ms(2000);
			
		return true;	
    18c6:	c8 2f       	mov	r28, r24
	}
	return false;	
}	
    18c8:	8c 2f       	mov	r24, r28
    18ca:	cf 91       	pop	r28
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <cardRemoved>:

bool cardRemoved(u8 cardType)
{
	if( cardType == CASH_CARD ) 
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	51 f4       	brne	.+20     	; 0x18e8 <cardRemoved+0x18>
	{
		if( sendSQCashCardRemoved() )
    18d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <sendSQCashCardRemoved>
    18d8:	81 11       	cpse	r24, r1
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <cardRemoved+0x10>
		{
			CurrentAccount.CardState = CARD_OUT;
			return true;
		}
	}		
	return false;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	08 95       	ret
{
	if( cardType == CASH_CARD ) 
	{
		if( sendSQCashCardRemoved() )
		{
			CurrentAccount.CardState = CARD_OUT;
    18e0:	10 92 91 08 	sts	0x0891, r1	; 0x800891 <CurrentAccount+0x9>
			return true;			
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	08 95       	ret
		
	}
	else
	{
	
		if ( sendSQCardRemoved() )
    18e8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <sendSQCardRemoved>
    18ec:	f5 cf       	rjmp	.-22     	; 0x18d8 <cardRemoved+0x8>

000018ee <cardInserted>:
	return false;
}			

bool cardInserted(u8 cardType)
{
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	59 f4       	brne	.+22     	; 0x1908 <cardInserted+0x1a>
    18f2:	0e 94 46 0b 	call	0x168c	; 0x168c <sendSQCashCardInserted>
    18f6:	81 11       	cpse	r24, r1
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <cardInserted+0x10>
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
	{
		CurrentAccount.CardState = CARD_IN;
		return true;
	}
	return false;
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	08 95       	ret

bool cardInserted(u8 cardType)
{
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
	{
		CurrentAccount.CardState = CARD_IN;
    18fe:	80 e8       	ldi	r24, 0x80	; 128
    1900:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <CurrentAccount+0x9>
		return true;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	08 95       	ret
	}
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	b9 f7       	brne	.-18     	; 0x18fa <cardInserted+0xc>
    190c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sendSQCashCardInsetedForTopoff>
    1910:	f2 cf       	rjmp	.-28     	; 0x18f6 <cardInserted+0x8>

00001912 <isMachineCycleRunning>:
	deviceStatus.deviceType[1] = MdcStatus.MachineType[1];
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
    1912:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <isSQCycleRunning>

00001916 <waitForMachineStartKey>:
}

bool waitForMachineStartKey()
{
	
	return waitSQStartKey();
    1916:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <waitSQStartKey>

0000191a <MachineStatus>:
}

void MachineStatus(void)
{
  
	if( getSQMachineStatus() )
    191a:	0e 94 99 0a 	call	0x1532	; 0x1532 <getSQMachineStatus>
    191e:	88 23       	and	r24, r24
    1920:	19 f0       	breq	.+6      	; 0x1928 <MachineStatus+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = DEVICE_STATUS_ONLINE; //machine status has been done
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <ucDeviceStateFlag>
    1928:	08 95       	ret

0000192a <initMachine>:
	return false;
}

void initMachine(void)
{
	if( isQuantum() )
    192a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <isQuantum>
    192e:	88 23       	and	r24, r24
    1930:	11 f0       	breq	.+4      	; 0x1936 <initMachine+0xc>
	{
		//set q flag
		MdcStatus.MachineType[1] = QUANTUM_SERIES;
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <initMachine+0xe>
		
	}
	else //if (isMDC())
	{
		//set MDC flag
		MdcStatus.MachineType[1] = MDC_SERIES;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <MdcStatus+0x1>
    193c:	8f e3       	ldi	r24, 0x3F	; 63
    193e:	9f e1       	ldi	r25, 0x1F	; 31
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <initMachine+0x16>
    1944:	00 c0       	rjmp	.+0      	; 0x1946 <initMachine+0x1c>
    1946:	00 00       	nop
		
	}
	
	_delay_ms(2);
	MachineStatus();
    1948:	0e 94 8d 0c 	call	0x191a	; 0x191a <MachineStatus>
	deviceStatus.deviceType[0] = MdcStatus.MachineType[0];
    194c:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <MdcStatus>
    1950:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <deviceStatus>
	deviceStatus.deviceType[1] = MdcStatus.MachineType[1];
    1954:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    1958:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <deviceStatus+0x1>
    195c:	08 95       	ret

0000195e <setupMachine>:
	}
	
}

bool setupMachine(void)
{
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	e2 97       	sbiw	r28, 0x32	; 50
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
	u8 temp[MDC_MAX_PACKET_SIZE] = {0};
    1972:	fe 01       	movw	r30, r28
    1974:	31 96       	adiw	r30, 0x01	; 1
    1976:	82 e3       	ldi	r24, 0x32	; 50
    1978:	df 01       	movw	r26, r30
    197a:	1d 92       	st	X+, r1
    197c:	8a 95       	dec	r24
    197e:	e9 f7       	brne	.-6      	; 0x197a <setupMachine+0x1c>
	
	//getSQSetupData(); 
	if( deviceStatus.deviceType[1] == QUANTUM_SERIES)
    1980:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    1984:	82 30       	cpi	r24, 0x02	; 2
    1986:	09 f0       	breq	.+2      	; 0x198a <setupMachine+0x2c>
    1988:	a4 c1       	rjmp	.+840    	; 0x1cd2 <setupMachine+0x374>
	{
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_TOPLOAD )
    198a:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <deviceStatus>
    198e:	91 32       	cpi	r25, 0x21	; 33
    1990:	09 f0       	breq	.+2      	; 0x1994 <setupMachine+0x36>
    1992:	7e c0       	rjmp	.+252    	; 0x1a90 <setupMachine+0x132>
		{
			temp[0] = QTL_PROGRAMMING_DATA_SIZE;
    1994:	8d e2       	ldi	r24, 0x2D	; 45
    1996:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1998:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    199a:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    199e:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    19a0:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    19a4:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    19a6:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    19aa:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = 0;
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    19ac:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    19b0:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    19b2:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    19b6:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    19b8:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    19bc:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    19be:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    19c2:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    19c4:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    19c8:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    19ca:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    19ce:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    19d0:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0xa>
    19d4:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    19d6:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    19d8:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0xd>
    19dc:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    19de:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0xc>
    19e2:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    19e4:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0xf>
    19e8:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    19ea:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0xe>
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    19f0:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <MachineSetupData+0x10>
    19f4:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    19f6:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <MachineSetupData+0x11>
    19fa:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    19fc:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MachineSetupData+0x12>
    1a00:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    1a02:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x13>
    1a06:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    1a08:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x14>
    1a0c:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    1a0e:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x15>
    1a12:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.HeavyCycle_vendPrice[0];
    1a14:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x16>
    1a18:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.HeavyCycle_vendPrice[1];
    1a1a:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x17>
    1a1e:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.HeavyCycle_option;
    1a20:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x18>
    1a24:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.HeavyCycle_extraWashTime;
    1a26:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <MachineSetupData+0x1a>
    1a2a:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.HeavyCycle_extraRiseTime;
    1a2c:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <MachineSetupData+0x1b>
    1a30:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.HeavyCycle_warmRinseOption;
    1a32:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <MachineSetupData+0x19>
    1a36:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.NormalCycle_washAgitateTime;
    1a38:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <MachineSetupData+0x1f>
    1a3c:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.NormalCycle_rinseAgitateTime;
    1a3e:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <MachineSetupData+0x20>
    1a42:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.NormalCycle_rinseAgitateTime;
    1a44:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.NormalCycle_finalSpinTime;
    1a46:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <MachineSetupData+0x22>
    1a4a:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = MachineSetupData.PermPressCycle_washAgitateTime;
    1a4c:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <MachineSetupData+0x23>
    1a50:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = MachineSetupData.PermPressCycle_extraRinseAgitateTime;
    1a52:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <MachineSetupData+0x25>
    1a56:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = MachineSetupData.PermPressCycle_rinseAgitateTime;
    1a58:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <MachineSetupData+0x24>
    1a5c:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = MachineSetupData.PermPressCycle_finalSpinTime;
    1a5e:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <MachineSetupData+0x26>
    1a62:	8f a3       	std	Y+39, r24	; 0x27
			temp[39] = MachineSetupData.DelicateCycle_washAgitateTime;
    1a64:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <MachineSetupData+0x27>
    1a68:	88 a7       	std	Y+40, r24	; 0x28
			temp[40] = MachineSetupData.DelicateCycle_extraRinseAgitateTime;
    1a6a:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <MachineSetupData+0x29>
    1a6e:	89 a7       	std	Y+41, r24	; 0x29
			temp[41] = MachineSetupData.DelicateCycle_rinseAgitateTime;
    1a70:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <MachineSetupData+0x28>
    1a74:	8a a7       	std	Y+42, r24	; 0x2a
			temp[42] = MachineSetupData.DelicateCycle_finalSpinTime;
    1a76:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <MachineSetupData+0x2a>
    1a7a:	8b a7       	std	Y+43, r24	; 0x2b
			temp[43] = MachineSetupData.DefaultCycle;
    1a7c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1a80:	8c a7       	std	Y+44, r24	; 0x2c
			temp[44] = MachineSetupData.AudioSetting;
    1a82:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1a86:	8d a7       	std	Y+45, r24	; 0x2d
			temp[45] = MachineSetupData.CardReaderDisplayControl;
    1a88:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1a8c:	8e a7       	std	Y+46, r24	; 0x2e
    1a8e:	cd c0       	rjmp	.+410    	; 0x1c2a <setupMachine+0x2cc>
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_FRONTLOAD )
    1a90:	92 32       	cpi	r25, 0x22	; 34
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <setupMachine+0x138>
    1a94:	5e c0       	rjmp	.+188    	; 0x1b52 <setupMachine+0x1f4>
		{
			temp[0] = QFL_PROGRAMMING_DATA_SIZE;
    1a96:	99 83       	std	Y+1, r25	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1a98:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    1a9a:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    1aa0:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    1aa6:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = 0;
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    1aac:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1ab0:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    1ab2:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1ab6:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    1ab8:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    1abc:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    1abe:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    1ac2:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    1ac4:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    1ac8:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    1aca:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    1ace:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    1ad0:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0xa>
    1ad4:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    1ad6:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    1ad8:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0xd>
    1adc:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    1ade:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0xc>
    1ae2:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    1ae4:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0xf>
    1ae8:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    1aea:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0xe>
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    1af0:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <MachineSetupData+0x10>
    1af4:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    1af6:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <MachineSetupData+0x11>
    1afa:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    1afc:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MachineSetupData+0x12>
    1b00:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    1b02:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x13>
    1b06:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    1b08:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x14>
    1b0c:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    1b0e:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x15>
    1b12:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.MediumCycle_vendPrice[0];
    1b14:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <MachineSetupData+0x1c>
    1b18:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.MediumCycle_vendPrice[1];
    1b1a:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x1d>
    1b1e:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.HeavyCycle_vendPrice[0];
    1b20:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x16>
    1b24:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.HeavyCycle_vendPrice[1];
    1b26:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x17>
    1b2a:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.MediumCycle_option;
    1b2c:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x1e>
    1b30:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.HeavyCycle_option;
    1b32:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x18>
    1b36:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.CycleModifierExtraWashTime;
    1b38:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <MachineSetupData+0x43>
    1b3c:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.DefaultCycle;
    1b3e:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1b42:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.AudioSetting;
    1b44:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1b48:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.CardReaderDisplayControl;
    1b4a:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1b4e:	8b a3       	std	Y+35, r24	; 0x23
    1b50:	6c c0       	rjmp	.+216    	; 0x1c2a <setupMachine+0x2cc>
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_WASHER_EXTRACTOR )
    1b52:	94 32       	cpi	r25, 0x24	; 36
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <setupMachine+0x1fa>
    1b56:	69 c0       	rjmp	.+210    	; 0x1c2a <setupMachine+0x2cc>
		{
			temp[0] = QWE_PROGRAMMING_DATA_SIZE;
    1b58:	86 e2       	ldi	r24, 0x26	; 38
    1b5a:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    1b5e:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    1b62:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    1b64:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    1b68:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    1b6a:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = MachineSetupData.ControlConfig;
    1b70:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <MachineSetupData+0x32>
    1b74:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    1b76:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1b7a:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    1b7c:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1b80:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    1b82:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    1b86:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    1b88:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    1b8e:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    1b92:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    1b94:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    1b98:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    1b9a:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0xa>
    1b9e:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    1ba0:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    1ba2:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0xd>
    1ba6:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    1ba8:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0xc>
    1bac:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    1bae:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0xf>
    1bb2:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    1bb4:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0xe>
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    1bba:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <MachineSetupData+0x10>
    1bbe:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    1bc0:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <MachineSetupData+0x11>
    1bc4:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    1bc6:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MachineSetupData+0x12>
    1bca:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    1bcc:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x13>
    1bd0:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    1bd2:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x14>
    1bd6:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    1bd8:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x15>
    1bdc:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.ModifiedCycleVendPrice[0];
    1bde:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MachineSetupData+0x3b>
    1be2:	2a 8f       	std	Y+26, r18	; 0x1a
			temp[26] = MachineSetupData.ModifiedCycleVendPrice[1];
    1be4:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MachineSetupData+0x3c>
    1be8:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.ModifiedCycleVendPrice[0];
    1bea:	2c 8f       	std	Y+28, r18	; 0x1c
			temp[28] = MachineSetupData.ModifiedCycleVendPrice[1];
    1bec:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.MediumCycle_vendPrice[0];
    1bee:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <MachineSetupData+0x1c>
    1bf2:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.MediumCycle_vendPrice[1];
    1bf4:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x1d>
    1bf8:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.HeavyCycle_vendPrice[0];
    1bfa:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x16>
    1bfe:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.HeavyCycle_vendPrice[1];
    1c00:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x17>
    1c04:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.MediumCycle_option;
    1c06:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x1e>
    1c0a:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.HeavyCycle_option;
    1c0c:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x18>
    1c10:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = MachineSetupData.CycleModifierExtraWashTime;
    1c12:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <MachineSetupData+0x43>
    1c16:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = MachineSetupData.DefaultCycle;
    1c18:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1c1c:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = MachineSetupData.AudioSetting;
    1c1e:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1c22:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = MachineSetupData.CardReaderDisplayControl;
    1c24:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1c28:	8f a3       	std	Y+39, r24	; 0x27
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_DRYER || deviceStatus.deviceType[0] == PROGRAMMING_DATA_TUMBLER )
    1c2a:	88 ed       	ldi	r24, 0xD8	; 216
    1c2c:	89 0f       	add	r24, r25
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <setupMachine+0x2d6>
    1c32:	95 c0       	rjmp	.+298    	; 0x1d5e <setupMachine+0x400>
		{
			temp[0] = QDT_PROGRAMMING_DATA_SIZE;
    1c34:	81 e2       	ldi	r24, 0x21	; 33
    1c36:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1c38:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    1c3a:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    1c40:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    1c44:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    1c46:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = MachineSetupData.ControlConfig;
    1c4c:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <MachineSetupData+0x32>
    1c50:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = 0;
    1c52:	1f 82       	std	Y+7, r1	; 0x07
			temp[7] = MachineSetupData.VendPrice[0]; //heat vend price
    1c54:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1c58:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    1c5a:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1c5e:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];// no heat vend price
    1c60:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    1c64:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    1c66:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    1c6a:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0]; //topoff vend price
    1c6c:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    1c70:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    1c72:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    1c76:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.CycleLength; //heat cycle time in minutes
    1c78:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <MachineSetupData+0x31>
    1c7c:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = 0; //heat cycle time in seconds
    1c7e:	1f 86       	std	Y+15, r1	; 0x0f
			temp[15] = MachineSetupData.CycleLength; //no heat cycle time in minutes
    1c80:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = 0; //no heat cycle time in seconds
    1c82:	19 8a       	std	Y+17, r1	; 0x11
			temp[17] = MachineSetupData.CoolDownTime;
    1c84:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <MachineSetupData+0x34>
    1c88:	9a 8b       	std	Y+18, r25	; 0x12
			temp[18] = MachineSetupData.CoolDownTime;
    1c8a:	9b 8b       	std	Y+19, r25	; 0x13
			temp[19] = MachineSetupData.CoolDownTime;
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
			temp[20] = MachineSetupData.CoolDownTime;
    1c8e:	9d 8b       	std	Y+21, r25	; 0x15
			temp[21] = MachineSetupData.TopoffOn;
    1c90:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <MachineSetupData+0x3d>
    1c94:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.TopoffTime;
    1c96:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <MachineSetupData+0x3e>
    1c9a:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = 0; //seconds
    1c9c:	18 8e       	std	Y+24, r1	; 0x18
			temp[24] = MachineSetupData.HighTempSetting;
    1c9e:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <MachineSetupData+0x37>
    1ca2:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.MediumTempSetting;
    1ca4:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <MachineSetupData+0x38>
    1ca8:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.LowTempSetting;
    1caa:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <MachineSetupData+0x39>
    1cae:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.DelicateTempSetting;
    1cb0:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <MachineSetupData+0x3a>
    1cb4:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.DefaultCycle;
    1cb6:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1cba:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.AudioSetting;
    1cbc:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1cc0:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.CardReaderDisplayControl;
    1cc2:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1cc6:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = 0; //fahrenheit
    1cc8:	18 a2       	std	Y+32, r1	; 0x20
			temp[32] = 1; //display minutes only
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = 0; //disable reversing mode
    1cce:	1a a2       	std	Y+34, r1	; 0x22
    1cd0:	46 c0       	rjmp	.+140    	; 0x1d5e <setupMachine+0x400>
		}		
	}
	else if( deviceStatus.deviceType[1] == MDC_SERIES /*|| MdcStatus.MachineType[1] == QUANTUM_SERIES */)
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <setupMachine+0x37a>
    1cd6:	43 c0       	rjmp	.+134    	; 0x1d5e <setupMachine+0x400>
	{
		temp[0] = PROGRAMMING_DATA_SIZE;
    1cd8:	8b e2       	ldi	r24, 0x2B	; 43
    1cda:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];
    1cdc:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
		temp[2] = MachineSetupData.VendPrice[0];
    1ce2:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = MachineSetupData.VendPrice[1];
    1ce8:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1cec:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = MachineSetupData.Coin1[0];
    1cee:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <MachineSetupData+0x2b>
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = MachineSetupData.Coin1[1];	
    1cf4:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <MachineSetupData+0x2c>
    1cf8:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = MachineSetupData.Coin2[0];
    1cfa:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <MachineSetupData+0x2d>
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = MachineSetupData.Coin2[1];	
    1d00:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <MachineSetupData+0x2e>
    1d04:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = MachineSetupData.StartPulse[0];
    1d06:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <MachineSetupData+0x2f>
    1d0a:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = MachineSetupData.StartPulse[1];
    1d0c:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <MachineSetupData+0x30>
    1d10:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = MachineSetupData.CycleLength;
    1d12:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <MachineSetupData+0x31>
    1d16:	8b 87       	std	Y+11, r24	; 0x0b
	
		if(MdcStatus.MachineType[0] == PROGRAMMING_DATA_DRYER || MdcStatus.MachineType[0] == PROGRAMMING_DATA_TUMBLER)
    1d18:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <MdcStatus>
    1d1c:	98 52       	subi	r25, 0x28	; 40
    1d1e:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1d22:	20 91 fc 09 	lds	r18, 0x09FC	; 0x8009fc <MachineSetupData+0x32>
    1d26:	92 30       	cpi	r25, 0x02	; 2
    1d28:	c0 f4       	brcc	.+48     	; 0x1d5a <setupMachine+0x3fc>
		{
			temp[11] = MachineSetupData.CoolDownTime;
    1d2a:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <MachineSetupData+0x34>
    1d2e:	9c 87       	std	Y+12, r25	; 0x0c
			temp[12] = MachineSetupData.Coin1TopoffTime;
    1d30:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <MachineSetupData+0x35>
    1d34:	9d 87       	std	Y+13, r25	; 0x0d
			temp[13] = MachineSetupData.Coin2TopoffTime;
    1d36:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <MachineSetupData+0x36>
    1d3a:	9e 87       	std	Y+14, r25	; 0x0e
			temp[14] = MachineSetupData.HighTempSetting;
    1d3c:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <MachineSetupData+0x37>
    1d40:	9f 87       	std	Y+15, r25	; 0x0f
			temp[15] = MachineSetupData.MediumTempSetting;
    1d42:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <MachineSetupData+0x38>
    1d46:	98 8b       	std	Y+16, r25	; 0x10
			temp[16] = MachineSetupData.LowTempSetting;
    1d48:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <MachineSetupData+0x39>
    1d4c:	99 8b       	std	Y+17, r25	; 0x11
			temp[17] = MachineSetupData.DelicateTempSetting;
    1d4e:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <MachineSetupData+0x3a>
    1d52:	9a 8b       	std	Y+18, r25	; 0x12
			temp[18] = MachineSetupData.ControlConfig;
    1d54:	2b 8b       	std	Y+19, r18	; 0x13
			temp[19] = MachineSetupData.DefaultCycle;
    1d56:	8c 8b       	std	Y+20, r24	; 0x14
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <setupMachine+0x400>
		}
		else
		{
			temp[11] = MachineSetupData.ControlConfig;
    1d5a:	2c 87       	std	Y+12, r18	; 0x0c
			temp[12] = MachineSetupData.DefaultCycle;
    1d5c:	8d 87       	std	Y+13, r24	; 0x0d
		}
	}
	return (sendSQData(temp) );		
    1d5e:	cf 01       	movw	r24, r30
    1d60:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
}
    1d64:	e2 96       	adiw	r28, 0x32	; 50
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <startMachineCycle>:

bool startMachineCycle()
{
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <startMachineCycle+0x6>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	u8 temp[2];
	
	temp[0] = MACHINE_START_PACKET_SIZE;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = MACHINE_START_COMMAND;
    1d84:	88 e4       	ldi	r24, 0x48	; 72
    1d86:	8a 83       	std	Y+2, r24	; 0x02
	
	return (sendSQData(temp) );	
    1d88:	ce 01       	movw	r24, r28
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	1f 92       	push	r1
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	64 e6       	ldi	r22, 0x64	; 100
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__udivmodhi4>
    1dae:	16 2f       	mov	r17, r22
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	8a e2       	ldi	r24, 0x2A	; 42
    1db6:	79 83       	std	Y+1, r23	; 0x01
    1db8:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1dbc:	66 ea       	ldi	r22, 0xA6	; 166
    1dbe:	8b e2       	ldi	r24, 0x2B	; 43
    1dc0:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1dc4:	8a e2       	ldi	r24, 0x2A	; 42
    1dc6:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1dca:	80 7f       	andi	r24, 0xF0	; 240
    1dcc:	68 2f       	mov	r22, r24
    1dce:	62 60       	ori	r22, 0x02	; 2
    1dd0:	8a e2       	ldi	r24, 0x2A	; 42
    1dd2:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1dd6:	61 2f       	mov	r22, r17
    1dd8:	8d e2       	ldi	r24, 0x2D	; 45
    1dda:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1dde:	79 81       	ldd	r23, Y+1	; 0x01
    1de0:	67 2f       	mov	r22, r23
    1de2:	8c e2       	ldi	r24, 0x2C	; 44
    1de4:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0f 90       	pop	r0
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	08 95       	ret

00001df6 <Rc522Init>:
    1df6:	6f e0       	ldi	r22, 0x0F	; 15
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1dfe:	60 e4       	ldi	r22, 0x40	; 64
    1e00:	85 e1       	ldi	r24, 0x15	; 21
    1e02:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e06:	48 e0       	ldi	r20, 0x08	; 8
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	88 e0       	ldi	r24, 0x08	; 8
    1e0c:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1e10:	82 e1       	ldi	r24, 0x12	; 18
    1e12:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1e16:	88 70       	andi	r24, 0x08	; 8
    1e18:	68 2f       	mov	r22, r24
    1e1a:	60 68       	ori	r22, 0x80	; 128
    1e1c:	82 e1       	ldi	r24, 0x12	; 18
    1e1e:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e22:	83 e1       	ldi	r24, 0x13	; 19
    1e24:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1e28:	88 70       	andi	r24, 0x08	; 8
    1e2a:	68 2f       	mov	r22, r24
    1e2c:	60 68       	ori	r22, 0x80	; 128
    1e2e:	83 e1       	ldi	r24, 0x13	; 19
    1e30:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e34:	6d e6       	ldi	r22, 0x6D	; 109
    1e36:	89 e1       	ldi	r24, 0x19	; 25
    1e38:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e3c:	68 e4       	ldi	r22, 0x48	; 72
    1e3e:	86 e2       	ldi	r24, 0x26	; 38
    1e40:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e44:	65 e5       	ldi	r22, 0x55	; 85
    1e46:	88 e1       	ldi	r24, 0x18	; 24
    1e48:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e4c:	66 e2       	ldi	r22, 0x26	; 38
    1e4e:	84 e2       	ldi	r24, 0x24	; 36
    1e50:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e54:	64 ef       	ldi	r22, 0xF4	; 244
    1e56:	87 e2       	ldi	r24, 0x27	; 39
    1e58:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e5c:	88 e8       	ldi	r24, 0x88	; 136
    1e5e:	93 e1       	ldi	r25, 0x13	; 19
    1e60:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    1e64:	43 e0       	ldi	r20, 0x03	; 3
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	84 e1       	ldi	r24, 0x14	; 20
    1e6a:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1e6e:	40 e4       	ldi	r20, 0x40	; 64
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	8c e0       	ldi	r24, 0x0C	; 12
    1e74:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1e7e:	80 ff       	sbrs	r24, 0
    1e80:	fb cf       	rjmp	.-10     	; 0x1e78 <Rc522Init+0x82>
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	84 e0       	ldi	r24, 0x04	; 4
    1e86:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e8a:	88 e8       	ldi	r24, 0x88	; 136
    1e8c:	93 e1       	ldi	r25, 0x13	; 19
    1e8e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    1e92:	6a e1       	ldi	r22, 0x1A	; 26
    1e94:	8b e0       	ldi	r24, 0x0B	; 11
    1e96:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1e9a:	60 e1       	ldi	r22, 0x10	; 16
    1e9c:	86 e1       	ldi	r24, 0x16	; 22
    1e9e:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1ea2:	64 e8       	ldi	r22, 0x84	; 132
    1ea4:	87 e1       	ldi	r24, 0x17	; 23
    1ea6:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1eb2:	80 ed       	ldi	r24, 0xD0	; 208
    1eb4:	97 e0       	ldi	r25, 0x07	; 7
    1eb6:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <SetTimeOut>

00001eba <M522PcdCmd>:
    1eba:	9f 92       	push	r9
    1ebc:	af 92       	push	r10
    1ebe:	bf 92       	push	r11
    1ec0:	cf 92       	push	r12
    1ec2:	df 92       	push	r13
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	18 2f       	mov	r17, r24
    1ed2:	7b 01       	movw	r14, r22
    1ed4:	ea 01       	movw	r28, r20
    1ed6:	62 e4       	ldi	r22, 0x42	; 66
    1ed8:	84 e0       	ldi	r24, 0x04	; 4
    1eda:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	85 e0       	ldi	r24, 0x05	; 5
    1ee2:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1ee6:	60 e8       	ldi	r22, 0x80	; 128
    1ee8:	8a e0       	ldi	r24, 0x0A	; 10
    1eea:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1ef4:	68 2f       	mov	r22, r24
    1ef6:	60 7f       	andi	r22, 0xF0	; 240
    1ef8:	1c 30       	cpi	r17, 0x0C	; 12
    1efa:	09 f4       	brne	.+2      	; 0x1efe <M522PcdCmd+0x44>
    1efc:	6c 60       	ori	r22, 0x0C	; 12
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1f04:	d0 93 76 05 	sts	0x0576, r29	; 0x800576 <MpIsrInfo+0x1>
    1f08:	c0 93 75 05 	sts	0x0575, r28	; 0x800575 <MpIsrInfo>
    1f0c:	10 31       	cpi	r17, 0x10	; 16
    1f0e:	08 f0       	brcs	.+2      	; 0x1f12 <M522PcdCmd+0x58>
    1f10:	63 c0       	rjmp	.+198    	; 0x1fd8 <M522PcdCmd+0x11e>
    1f12:	81 2f       	mov	r24, r17
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	fc 01       	movw	r30, r24
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e2 5f       	subi	r30, 0xF2	; 242
    1f1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f20:	c0 81       	ld	r28, Z
    1f22:	d1 81       	ldd	r29, Z+1	; 0x01
    1f24:	fc 01       	movw	r30, r24
    1f26:	e2 50       	subi	r30, 0x02	; 2
    1f28:	fb 4f       	sbci	r31, 0xFB	; 251
    1f2a:	c0 80       	ld	r12, Z
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	e2 51       	subi	r30, 0x12	; 18
    1f30:	fb 4f       	sbci	r31, 0xFB	; 251
    1f32:	00 81       	ld	r16, Z
    1f34:	fc 01       	movw	r30, r24
    1f36:	e2 52       	subi	r30, 0x22	; 34
    1f38:	fb 4f       	sbci	r31, 0xFB	; 251
    1f3a:	90 80       	ld	r9, Z
    1f3c:	20 97       	sbiw	r28, 0x00	; 0
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <M522PcdCmd+0x88>
    1f40:	50 c0       	rjmp	.+160    	; 0x1fe2 <M522PcdCmd+0x128>
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1f48:	68 2f       	mov	r22, r24
    1f4a:	6c 29       	or	r22, r12
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1f52:	83 e0       	ldi	r24, 0x03	; 3
    1f54:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1f58:	68 2f       	mov	r22, r24
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1f60:	d1 2c       	mov	r13, r1
    1f62:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    1f66:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    1f6a:	83 81       	ldd	r24, Z+3	; 0x03
    1f6c:	d8 16       	cp	r13, r24
    1f6e:	48 f4       	brcc	.+18     	; 0x1f82 <M522PcdCmd+0xc8>
    1f70:	f7 01       	movw	r30, r14
    1f72:	ed 0d       	add	r30, r13
    1f74:	f1 1d       	adc	r31, r1
    1f76:	60 81       	ld	r22, Z
    1f78:	89 e0       	ldi	r24, 0x09	; 9
    1f7a:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1f7e:	d3 94       	inc	r13
    1f80:	f0 cf       	rjmp	.-32     	; 0x1f62 <M522PcdCmd+0xa8>
    1f82:	1c 30       	cpi	r17, 0x0C	; 12
    1f84:	31 f4       	brne	.+12     	; 0x1f92 <M522PcdCmd+0xd8>
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	8d e0       	ldi	r24, 0x0D	; 13
    1f8c:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1f90:	09 c0       	rjmp	.+18     	; 0x1fa4 <M522PcdCmd+0xea>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1f98:	80 7f       	andi	r24, 0xF0	; 240
    1f9a:	68 2f       	mov	r22, r24
    1f9c:	61 2b       	or	r22, r17
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	a3 94       	inc	r10
    1fa8:	ba 2c       	mov	r11, r10
    1faa:	10 e0       	ldi	r17, 0x00	; 0
    1fac:	00 23       	and	r16, r16
    1fae:	71 f0       	breq	.+28     	; 0x1fcc <M522PcdCmd+0x112>
    1fb0:	81 2f       	mov	r24, r17
    1fb2:	80 23       	and	r24, r16
    1fb4:	59 f4       	brne	.+22     	; 0x1fcc <M522PcdCmd+0x112>
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1fbc:	18 2f       	mov	r17, r24
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	a8 1a       	sub	r10, r24
    1fc8:	b1 08       	sbc	r11, r1
    1fca:	81 f7       	brne	.-32     	; 0x1fac <M522PcdCmd+0xf2>
    1fcc:	01 23       	and	r16, r17
    1fce:	11 70       	andi	r17, 0x01	; 1
    1fd0:	c1 2f       	mov	r28, r17
    1fd2:	e0 e0       	ldi	r30, 0x00	; 0
    1fd4:	de 2f       	mov	r29, r30
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <M522PcdCmd+0x128>
    1fd8:	91 2c       	mov	r9, r1
    1fda:	c1 2c       	mov	r12, r1
    1fdc:	02 e4       	ldi	r16, 0x42	; 66
    1fde:	c3 e0       	ldi	r28, 0x03	; 3
    1fe0:	d1 e0       	ldi	r29, 0x01	; 1
    1fe2:	4c 2d       	mov	r20, r12
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    1ff6:	99 20       	and	r9, r9
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <M522PcdCmd+0x142>
    1ffa:	7e c0       	rjmp	.+252    	; 0x20f8 <M522PcdCmd+0x23e>
    1ffc:	20 97       	sbiw	r28, 0x00	; 0
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <M522PcdCmd+0x148>
    2000:	7b c0       	rjmp	.+246    	; 0x20f8 <M522PcdCmd+0x23e>
    2002:	c0 90 75 05 	lds	r12, 0x0575	; 0x800575 <MpIsrInfo>
    2006:	d0 90 76 05 	lds	r13, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    200a:	8a e0       	ldi	r24, 0x0A	; 10
    200c:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    2010:	f6 01       	movw	r30, r12
    2012:	84 83       	std	Z+4, r24	; 0x04
    2014:	8c e0       	ldi	r24, 0x0C	; 12
    2016:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    201a:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    201e:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    2022:	87 70       	andi	r24, 0x07	; 7
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	96 83       	std	Z+6, r25	; 0x06
    2028:	85 83       	std	Z+5, r24	; 0x05
    202a:	86 e0       	ldi	r24, 0x06	; 6
    202c:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    2030:	18 2f       	mov	r17, r24
    2032:	88 23       	and	r24, r24
    2034:	09 f4       	brne	.+2      	; 0x2038 <M522PcdCmd+0x17e>
    2036:	46 c0       	rjmp	.+140    	; 0x20c4 <M522PcdCmd+0x20a>
    2038:	83 fd       	sbrc	r24, 3
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <M522PcdCmd+0x18c>
    203c:	81 ff       	sbrs	r24, 1
    203e:	05 c0       	rjmp	.+10     	; 0x204a <M522PcdCmd+0x190>
    2040:	c3 e0       	ldi	r28, 0x03	; 3
    2042:	d0 e0       	ldi	r29, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <M522PcdCmd+0x190>
    2046:	c6 e0       	ldi	r28, 0x06	; 6
    2048:	d0 e0       	ldi	r29, 0x00	; 0
    204a:	10 fd       	sbrc	r17, 0
    204c:	22 c0       	rjmp	.+68     	; 0x2092 <M522PcdCmd+0x1d8>
    204e:	14 fd       	sbrc	r17, 4
    2050:	23 c0       	rjmp	.+70     	; 0x2098 <M522PcdCmd+0x1de>
    2052:	12 ff       	sbrs	r17, 2
    2054:	19 c0       	rjmp	.+50     	; 0x2088 <M522PcdCmd+0x1ce>
    2056:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    205a:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    205e:	c4 81       	ldd	r28, Z+4	; 0x04
    2060:	c1 30       	cpi	r28, 0x01	; 1
    2062:	e9 f4       	brne	.+58     	; 0x209e <M522PcdCmd+0x1e4>
    2064:	85 81       	ldd	r24, Z+5	; 0x05
    2066:	96 81       	ldd	r25, Z+6	; 0x06
    2068:	8b 7f       	andi	r24, 0xFB	; 251
    206a:	89 2b       	or	r24, r25
    206c:	c1 f4       	brne	.+48     	; 0x209e <M522PcdCmd+0x1e4>
    206e:	89 e0       	ldi	r24, 0x09	; 9
    2070:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    2074:	f7 01       	movw	r30, r14
    2076:	80 83       	st	Z, r24
    2078:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    207c:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    2080:	c4 83       	std	Z+4, r28	; 0x04
    2082:	c2 e0       	ldi	r28, 0x02	; 2
    2084:	d2 e0       	ldi	r29, 0x02	; 2
    2086:	0d c0       	rjmp	.+26     	; 0x20a2 <M522PcdCmd+0x1e8>
    2088:	16 ff       	sbrs	r17, 6
    208a:	0b c0       	rjmp	.+22     	; 0x20a2 <M522PcdCmd+0x1e8>
    208c:	c4 e0       	ldi	r28, 0x04	; 4
    208e:	de e7       	ldi	r29, 0x7E	; 126
    2090:	08 c0       	rjmp	.+16     	; 0x20a2 <M522PcdCmd+0x1e8>
    2092:	cb e0       	ldi	r28, 0x0B	; 11
    2094:	d0 e0       	ldi	r29, 0x00	; 0
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <M522PcdCmd+0x1e8>
    2098:	c9 e0       	ldi	r28, 0x09	; 9
    209a:	d0 e0       	ldi	r29, 0x00	; 0
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <M522PcdCmd+0x1e8>
    209e:	c2 e0       	ldi	r28, 0x02	; 2
    20a0:	d0 e0       	ldi	r29, 0x00	; 0
    20a2:	17 fd       	sbrc	r17, 7
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <M522PcdCmd+0x1f6>
    20a6:	20 97       	sbiw	r28, 0x00	; 0
    20a8:	29 f4       	brne	.+10     	; 0x20b4 <M522PcdCmd+0x1fa>
    20aa:	cc e0       	ldi	r28, 0x0C	; 12
    20ac:	d0 e0       	ldi	r29, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <M522PcdCmd+0x1fa>
    20b0:	cd e0       	ldi	r28, 0x0D	; 13
    20b2:	d0 e0       	ldi	r29, 0x00	; 0
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	86 e0       	ldi	r24, 0x06	; 6
    20b8:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    20bc:	c2 30       	cpi	r28, 0x02	; 2
    20be:	f2 e0       	ldi	r31, 0x02	; 2
    20c0:	df 07       	cpc	r29, r31
    20c2:	d1 f0       	breq	.+52     	; 0x20f8 <M522PcdCmd+0x23e>
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    20ca:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    20ce:	84 81       	ldd	r24, Z+4	; 0x04
    20d0:	18 17       	cp	r17, r24
    20d2:	50 f4       	brcc	.+20     	; 0x20e8 <M522PcdCmd+0x22e>
    20d4:	67 01       	movw	r12, r14
    20d6:	c1 0e       	add	r12, r17
    20d8:	d1 1c       	adc	r13, r1
    20da:	89 e0       	ldi	r24, 0x09	; 9
    20dc:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    20e0:	f6 01       	movw	r30, r12
    20e2:	80 83       	st	Z, r24
    20e4:	1f 5f       	subi	r17, 0xFF	; 255
    20e6:	ef cf       	rjmp	.-34     	; 0x20c6 <M522PcdCmd+0x20c>
    20e8:	25 81       	ldd	r18, Z+5	; 0x05
    20ea:	36 81       	ldd	r19, Z+6	; 0x06
    20ec:	23 2b       	or	r18, r19
    20ee:	21 f0       	breq	.+8      	; 0x20f8 <M522PcdCmd+0x23e>
    20f0:	88 23       	and	r24, r24
    20f2:	11 f0       	breq	.+4      	; 0x20f8 <M522PcdCmd+0x23e>
    20f4:	81 50       	subi	r24, 0x01	; 1
    20f6:	84 83       	std	Z+4, r24	; 0x04
    20f8:	60 2f       	mov	r22, r16
    20fa:	84 e0       	ldi	r24, 0x04	; 4
    20fc:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	85 e0       	ldi	r24, 0x05	; 5
    2104:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2108:	60 e8       	ldi	r22, 0x80	; 128
    210a:	8a e0       	ldi	r24, 0x0A	; 10
    210c:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	8d e0       	ldi	r24, 0x0D	; 13
    211c:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2120:	ce 01       	movw	r24, r28
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	cf 90       	pop	r12
    2132:	bf 90       	pop	r11
    2134:	af 90       	pop	r10
    2136:	9f 90       	pop	r9
    2138:	08 95       	ret

0000213a <Request>:
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	18 2f       	mov	r17, r24
    2142:	eb 01       	movw	r28, r22
    2144:	48 e0       	ldi	r20, 0x08	; 8
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	88 e0       	ldi	r24, 0x08	; 8
    214a:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    214e:	60 e8       	ldi	r22, 0x80	; 128
    2150:	8e e0       	ldi	r24, 0x0E	; 14
    2152:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	82 e1       	ldi	r24, 0x12	; 18
    215c:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	83 e1       	ldi	r24, 0x13	; 19
    2166:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    216a:	67 e0       	ldi	r22, 0x07	; 7
    216c:	8d e0       	ldi	r24, 0x0D	; 13
    216e:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2172:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <MInfo>
    2176:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <MInfo+0x1>
    217a:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo+0x2>
    217e:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x4>
    2182:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x6>
    2186:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <MInfo+0x5>
    218a:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x7>
    218e:	10 93 1c 0a 	sts	0x0A1C, r17	; 0x800a1c <SerBuffer>
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <MInfo+0x3>
    2198:	80 e9       	ldi	r24, 0x90	; 144
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    21a0:	40 e3       	ldi	r20, 0x30	; 48
    21a2:	5a e0       	ldi	r21, 0x0A	; 10
    21a4:	6c e1       	ldi	r22, 0x1C	; 28
    21a6:	7a e0       	ldi	r23, 0x0A	; 10
    21a8:	8c e0       	ldi	r24, 0x0C	; 12
    21aa:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <M522PcdCmd>
    21ae:	88 23       	and	r24, r24
    21b0:	11 f0       	breq	.+4      	; 0x21b6 <Request+0x7c>
    21b2:	86 30       	cpi	r24, 0x06	; 6
    21b4:	89 f4       	brne	.+34     	; 0x21d8 <Request+0x9e>
    21b6:	90 91 34 0a 	lds	r25, 0x0A34	; 0x800a34 <MInfo+0x4>
    21ba:	92 30       	cpi	r25, 0x02	; 2
    21bc:	81 f4       	brne	.+32     	; 0x21de <Request+0xa4>
    21be:	20 91 35 0a 	lds	r18, 0x0A35	; 0x800a35 <MInfo+0x5>
    21c2:	30 91 36 0a 	lds	r19, 0x0A36	; 0x800a36 <MInfo+0x6>
    21c6:	23 2b       	or	r18, r19
    21c8:	51 f4       	brne	.+20     	; 0x21de <Request+0xa4>
    21ca:	20 91 1c 0a 	lds	r18, 0x0A1C	; 0x800a1c <SerBuffer>
    21ce:	30 91 1d 0a 	lds	r19, 0x0A1D	; 0x800a1d <SerBuffer+0x1>
    21d2:	39 83       	std	Y+1, r19	; 0x01
    21d4:	28 83       	st	Y, r18
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <Request+0xa6>
    21d8:	18 82       	st	Y, r1
    21da:	19 82       	std	Y+1, r1	; 0x01
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <Request+0xa6>
    21de:	8b e0       	ldi	r24, 0x0B	; 11
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	08 95       	ret

000021ea <CascAnticoll>:
    21ea:	6f 92       	push	r6
    21ec:	7f 92       	push	r7
    21ee:	9f 92       	push	r9
    21f0:	af 92       	push	r10
    21f2:	bf 92       	push	r11
    21f4:	cf 92       	push	r12
    21f6:	df 92       	push	r13
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	1f 92       	push	r1
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	e8 2e       	mov	r14, r24
    220c:	f6 2e       	mov	r15, r22
    220e:	3a 01       	movw	r6, r20
    2210:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <SerBuffer+0x2>
    2214:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <SerBuffer+0x3>
    2218:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <SerBuffer+0x4>
    221c:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <SerBuffer+0x5>
    2220:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <SerBuffer+0x6>
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	82 e1       	ldi	r24, 0x12	; 18
    222a:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	83 e1       	ldi	r24, 0x13	; 19
    2234:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	8e e0       	ldi	r24, 0x0E	; 14
    223c:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    2240:	b6 2c       	mov	r11, r6
    2242:	84 e0       	ldi	r24, 0x04	; 4
    2244:	c8 2e       	mov	r12, r24
    2246:	d1 2c       	mov	r13, r1
    2248:	30 e2       	ldi	r19, 0x20	; 32
    224a:	3f 15       	cp	r19, r15
    224c:	08 f4       	brcc	.+2      	; 0x2250 <CascAnticoll+0x66>
    224e:	a9 c0       	rjmp	.+338    	; 0x23a2 <CascAnticoll+0x1b8>
    2250:	2f 2d       	mov	r18, r15
    2252:	27 70       	andi	r18, 0x07	; 7
    2254:	9f 2d       	mov	r25, r15
    2256:	96 95       	lsr	r25
    2258:	96 95       	lsr	r25
    225a:	96 95       	lsr	r25
    225c:	22 23       	and	r18, r18
    225e:	21 f0       	breq	.+8      	; 0x2268 <CascAnticoll+0x7e>
    2260:	aa 24       	eor	r10, r10
    2262:	a3 94       	inc	r10
    2264:	a9 0e       	add	r10, r25
    2266:	01 c0       	rjmp	.+2      	; 0x226a <CascAnticoll+0x80>
    2268:	a9 2e       	mov	r10, r25
    226a:	e0 92 1c 0a 	sts	0x0A1C, r14	; 0x800a1c <SerBuffer>
    226e:	80 e2       	ldi	r24, 0x20	; 32
    2270:	82 0f       	add	r24, r18
    2272:	e0 e1       	ldi	r30, 0x10	; 16
    2274:	9e 9f       	mul	r25, r30
    2276:	80 0d       	add	r24, r0
    2278:	11 24       	eor	r1, r1
    227a:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <SerBuffer+0x1>
    227e:	ae e1       	ldi	r26, 0x1E	; 30
    2280:	ba e0       	ldi	r27, 0x0A	; 10
    2282:	f3 01       	movw	r30, r6
    2284:	8e 2f       	mov	r24, r30
    2286:	8b 19       	sub	r24, r11
    2288:	8a 15       	cp	r24, r10
    228a:	18 f4       	brcc	.+6      	; 0x2292 <CascAnticoll+0xa8>
    228c:	81 91       	ld	r24, Z+
    228e:	8d 93       	st	X+, r24
    2290:	f9 cf       	rjmp	.-14     	; 0x2284 <CascAnticoll+0x9a>
    2292:	f0 e1       	ldi	r31, 0x10	; 16
    2294:	2f 9f       	mul	r18, r31
    2296:	b0 01       	movw	r22, r0
    2298:	11 24       	eor	r1, r1
    229a:	62 2b       	or	r22, r18
    229c:	8d e0       	ldi	r24, 0x0D	; 13
    229e:	29 83       	std	Y+1, r18	; 0x01
    22a0:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    22a4:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <MInfo>
    22a8:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <MInfo+0x1>
    22ac:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo+0x2>
    22b0:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x4>
    22b4:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x6>
    22b8:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <MInfo+0x5>
    22bc:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x7>
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	8a 0d       	add	r24, r10
    22c4:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <MInfo+0x3>
    22c8:	80 e1       	ldi	r24, 0x10	; 16
    22ca:	97 e2       	ldi	r25, 0x27	; 39
    22cc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    22d0:	40 e3       	ldi	r20, 0x30	; 48
    22d2:	5a e0       	ldi	r21, 0x0A	; 10
    22d4:	6c e1       	ldi	r22, 0x1C	; 28
    22d6:	7a e0       	ldi	r23, 0x0A	; 10
    22d8:	8c e0       	ldi	r24, 0x0C	; 12
    22da:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <M522PcdCmd>
    22de:	8c 01       	movw	r16, r24
    22e0:	29 81       	ldd	r18, Y+1	; 0x01
    22e2:	86 30       	cpi	r24, 0x06	; 6
    22e4:	91 05       	cpc	r25, r1
    22e6:	19 f0       	breq	.+6      	; 0x22ee <CascAnticoll+0x104>
    22e8:	89 2b       	or	r24, r25
    22ea:	09 f0       	breq	.+2      	; 0x22ee <CascAnticoll+0x104>
    22ec:	5f c0       	rjmp	.+190    	; 0x23ac <CascAnticoll+0x1c2>
    22ee:	60 91 35 0a 	lds	r22, 0x0A35	; 0x800a35 <MInfo+0x5>
    22f2:	70 91 36 0a 	lds	r23, 0x0A36	; 0x800a36 <MInfo+0x6>
    22f6:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <MInfo+0x4>
    22fa:	a6 2f       	mov	r26, r22
    22fc:	38 e0       	ldi	r19, 0x08	; 8
    22fe:	83 9f       	mul	r24, r19
    2300:	a0 0d       	add	r26, r0
    2302:	11 24       	eor	r1, r1
    2304:	a2 1b       	sub	r26, r18
    2306:	4f 2d       	mov	r20, r15
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	4a 0f       	add	r20, r26
    230c:	51 1d       	adc	r21, r1
    230e:	49 32       	cpi	r20, 0x29	; 41
    2310:	51 05       	cpc	r21, r1
    2312:	0c f0       	brlt	.+2      	; 0x2316 <CascAnticoll+0x12c>
    2314:	49 c0       	rjmp	.+146    	; 0x23a8 <CascAnticoll+0x1be>
    2316:	67 2b       	or	r22, r23
    2318:	19 f0       	breq	.+6      	; 0x2320 <CascAnticoll+0x136>
    231a:	8f 5f       	subi	r24, 0xFF	; 255
    231c:	80 93 34 0a 	sts	0x0A34, r24	; 0x800a34 <MInfo+0x4>
    2320:	4a 2d       	mov	r20, r10
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	22 23       	and	r18, r18
    2326:	59 f0       	breq	.+22     	; 0x233e <CascAnticoll+0x154>
    2328:	fa 01       	movw	r30, r20
    232a:	31 97       	sbiw	r30, 0x01	; 1
    232c:	e6 0d       	add	r30, r6
    232e:	f7 1d       	adc	r31, r7
    2330:	90 81       	ld	r25, Z
    2332:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SerBuffer>
    2336:	89 2b       	or	r24, r25
    2338:	80 83       	st	Z, r24
    233a:	b1 e0       	ldi	r27, 0x01	; 1
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <CascAnticoll+0x156>
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	a1 2c       	mov	r10, r1
    2342:	c6 01       	movw	r24, r12
    2344:	84 1b       	sub	r24, r20
    2346:	95 0b       	sbc	r25, r21
    2348:	6b 2f       	mov	r22, r27
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	2a 2d       	mov	r18, r10
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	28 17       	cp	r18, r24
    2352:	39 07       	cpc	r19, r25
    2354:	74 f4       	brge	.+28     	; 0x2372 <CascAnticoll+0x188>
    2356:	f9 01       	movw	r30, r18
    2358:	e4 5e       	subi	r30, 0xE4	; 228
    235a:	f5 4f       	sbci	r31, 0xF5	; 245
    235c:	e6 0f       	add	r30, r22
    235e:	f7 1f       	adc	r31, r23
    2360:	90 80       	ld	r9, Z
    2362:	26 0d       	add	r18, r6
    2364:	37 1d       	adc	r19, r7
    2366:	f9 01       	movw	r30, r18
    2368:	e4 0f       	add	r30, r20
    236a:	f5 1f       	adc	r31, r21
    236c:	90 82       	st	Z, r9
    236e:	a3 94       	inc	r10
    2370:	ed cf       	rjmp	.-38     	; 0x234c <CascAnticoll+0x162>
    2372:	06 30       	cpi	r16, 0x06	; 6
    2374:	11 05       	cpc	r17, r1
    2376:	11 f4       	brne	.+4      	; 0x237c <CascAnticoll+0x192>
    2378:	fa 0e       	add	r15, r26
    237a:	66 cf       	rjmp	.-308    	; 0x2248 <CascAnticoll+0x5e>
    237c:	f3 01       	movw	r30, r6
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	80 81       	ld	r24, Z
    2382:	89 27       	eor	r24, r25
    2384:	92 81       	ldd	r25, Z+2	; 0x02
    2386:	89 27       	eor	r24, r25
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	89 27       	eor	r24, r25
    238c:	24 5e       	subi	r18, 0xE4	; 228
    238e:	35 4f       	sbci	r19, 0xF5	; 245
    2390:	f9 01       	movw	r30, r18
    2392:	eb 0f       	add	r30, r27
    2394:	f1 1d       	adc	r31, r1
    2396:	90 81       	ld	r25, Z
    2398:	89 17       	cp	r24, r25
    239a:	41 f0       	breq	.+16     	; 0x23ac <CascAnticoll+0x1c2>
    239c:	01 e0       	ldi	r16, 0x01	; 1
    239e:	15 e0       	ldi	r17, 0x05	; 5
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <CascAnticoll+0x1c2>
    23a2:	01 e0       	ldi	r16, 0x01	; 1
    23a4:	11 e0       	ldi	r17, 0x01	; 1
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <CascAnticoll+0x1c2>
    23a8:	04 e0       	ldi	r16, 0x04	; 4
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	8d e0       	ldi	r24, 0x0D	; 13
    23b0:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    23b4:	60 e8       	ldi	r22, 0x80	; 128
    23b6:	8e e0       	ldi	r24, 0x0E	; 14
    23b8:	0e 94 a1 13 	call	0x2742	; 0x2742 <RcSetReg>
    23bc:	c8 01       	movw	r24, r16
    23be:	0f 90       	pop	r0
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	ff 90       	pop	r15
    23ca:	ef 90       	pop	r14
    23cc:	df 90       	pop	r13
    23ce:	cf 90       	pop	r12
    23d0:	bf 90       	pop	r11
    23d2:	af 90       	pop	r10
    23d4:	9f 90       	pop	r9
    23d6:	7f 90       	pop	r7
    23d8:	6f 90       	pop	r6
    23da:	08 95       	ret

000023dc <Select>:
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	f8 2e       	mov	r15, r24
    23e8:	eb 01       	movw	r28, r22
    23ea:	8a 01       	movw	r16, r20
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	82 e1       	ldi	r24, 0x12	; 18
    23f2:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	61 e0       	ldi	r22, 0x01	; 1
    23fa:	83 e1       	ldi	r24, 0x13	; 19
    23fc:	0e 94 bf 13 	call	0x277e	; 0x277e <RcModifyReg>
    2400:	f0 92 1c 0a 	sts	0x0A1C, r15	; 0x800a1c <SerBuffer>
    2404:	80 e7       	ldi	r24, 0x70	; 112
    2406:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <SerBuffer+0x1>
    240a:	fe 01       	movw	r30, r28
    240c:	ae e1       	ldi	r26, 0x1E	; 30
    240e:	ba e0       	ldi	r27, 0x0A	; 10
    2410:	ce 01       	movw	r24, r28
    2412:	04 96       	adiw	r24, 0x04	; 4
    2414:	21 91       	ld	r18, Z+
    2416:	2d 93       	st	X+, r18
    2418:	e8 17       	cp	r30, r24
    241a:	f9 07       	cpc	r31, r25
    241c:	d9 f7       	brne	.-10     	; 0x2414 <Select+0x38>
    241e:	99 81       	ldd	r25, Y+1	; 0x01
    2420:	88 81       	ld	r24, Y
    2422:	89 27       	eor	r24, r25
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	89 27       	eor	r24, r25
    2428:	9b 81       	ldd	r25, Y+3	; 0x03
    242a:	89 27       	eor	r24, r25
    242c:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <SerBuffer+0x6>
    2430:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <MInfo>
    2434:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <MInfo+0x1>
    2438:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo+0x2>
    243c:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x4>
    2440:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x6>
    2444:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <MInfo+0x5>
    2448:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x7>
    244c:	87 e0       	ldi	r24, 0x07	; 7
    244e:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <MInfo+0x3>
    2452:	80 ed       	ldi	r24, 0xD0	; 208
    2454:	97 e0       	ldi	r25, 0x07	; 7
    2456:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    245a:	40 e3       	ldi	r20, 0x30	; 48
    245c:	5a e0       	ldi	r21, 0x0A	; 10
    245e:	6c e1       	ldi	r22, 0x1C	; 28
    2460:	7a e0       	ldi	r23, 0x0A	; 10
    2462:	8c e0       	ldi	r24, 0x0C	; 12
    2464:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <M522PcdCmd>
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	89 f4       	brne	.+34     	; 0x248e <Select+0xb2>
    246c:	20 91 34 0a 	lds	r18, 0x0A34	; 0x800a34 <MInfo+0x4>
    2470:	21 30       	cpi	r18, 0x01	; 1
    2472:	59 f4       	brne	.+22     	; 0x248a <Select+0xae>
    2474:	20 91 35 0a 	lds	r18, 0x0A35	; 0x800a35 <MInfo+0x5>
    2478:	30 91 36 0a 	lds	r19, 0x0A36	; 0x800a36 <MInfo+0x6>
    247c:	23 2b       	or	r18, r19
    247e:	29 f4       	brne	.+10     	; 0x248a <Select+0xae>
    2480:	20 91 1c 0a 	lds	r18, 0x0A1C	; 0x800a1c <SerBuffer>
    2484:	f8 01       	movw	r30, r16
    2486:	20 83       	st	Z, r18
    2488:	02 c0       	rjmp	.+4      	; 0x248e <Select+0xb2>
    248a:	84 e0       	ldi	r24, 0x04	; 4
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	08 95       	ret

0000249a <AnticollSelect>:
    249a:	6f 92       	push	r6
    249c:	7f 92       	push	r7
    249e:	8f 92       	push	r8
    24a0:	9f 92       	push	r9
    24a2:	af 92       	push	r10
    24a4:	bf 92       	push	r11
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2d 97       	sbiw	r28, 0x0d	; 13
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	7b 01       	movw	r14, r22
    24c8:	6a 01       	movw	r12, r20
    24ca:	9e 01       	movw	r18, r28
    24cc:	2f 5f       	subi	r18, 0xFF	; 255
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	59 01       	movw	r10, r18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	10 e0       	ldi	r17, 0x00	; 0
    24d8:	88 23       	and	r24, r24
    24da:	a1 f0       	breq	.+40     	; 0x2504 <AnticollSelect+0x6a>
    24dc:	81 32       	cpi	r24, 0x21	; 33
    24de:	40 f0       	brcs	.+16     	; 0x24f0 <AnticollSelect+0x56>
    24e0:	00 ee       	ldi	r16, 0xE0	; 224
    24e2:	08 0f       	add	r16, r24
    24e4:	11 30       	cpi	r17, 0x01	; 1
    24e6:	61 f0       	breq	.+24     	; 0x2500 <AnticollSelect+0x66>
    24e8:	12 30       	cpi	r17, 0x02	; 2
    24ea:	71 f5       	brne	.+92     	; 0x2548 <AnticollSelect+0xae>
    24ec:	80 e2       	ldi	r24, 0x20	; 32
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <AnticollSelect+0x60>
    24f0:	11 30       	cpi	r17, 0x01	; 1
    24f2:	51 f0       	breq	.+20     	; 0x2508 <AnticollSelect+0x6e>
    24f4:	12 30       	cpi	r17, 0x02	; 2
    24f6:	99 f4       	brne	.+38     	; 0x251e <AnticollSelect+0x84>
    24f8:	00 e0       	ldi	r16, 0x00	; 0
    24fa:	67 e9       	ldi	r22, 0x97	; 151
    24fc:	96 2e       	mov	r9, r22
    24fe:	12 c0       	rjmp	.+36     	; 0x2524 <AnticollSelect+0x8a>
    2500:	80 e2       	ldi	r24, 0x20	; 32
    2502:	03 c0       	rjmp	.+6      	; 0x250a <AnticollSelect+0x70>
    2504:	11 30       	cpi	r17, 0x01	; 1
    2506:	89 f4       	brne	.+34     	; 0x252a <AnticollSelect+0x90>
    2508:	00 e0       	ldi	r16, 0x00	; 0
    250a:	6a 80       	ldd	r6, Y+2	; 0x02
    250c:	7b 80       	ldd	r7, Y+3	; 0x03
    250e:	8c 80       	ldd	r8, Y+4	; 0x04
    2510:	f7 01       	movw	r30, r14
    2512:	60 82       	st	Z, r6
    2514:	71 82       	std	Z+1, r7	; 0x01
    2516:	82 82       	std	Z+2, r8	; 0x02
    2518:	55 e9       	ldi	r21, 0x95	; 149
    251a:	95 2e       	mov	r9, r21
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <AnticollSelect+0x8a>
    251e:	00 e0       	ldi	r16, 0x00	; 0
    2520:	43 e9       	ldi	r20, 0x93	; 147
    2522:	94 2e       	mov	r9, r20
    2524:	80 32       	cpi	r24, 0x20	; 32
    2526:	31 f4       	brne	.+12     	; 0x2534 <AnticollSelect+0x9a>
    2528:	11 c0       	rjmp	.+34     	; 0x254c <AnticollSelect+0xb2>
    252a:	12 30       	cpi	r17, 0x02	; 2
    252c:	29 f3       	breq	.-54     	; 0x24f8 <AnticollSelect+0x5e>
    252e:	00 e0       	ldi	r16, 0x00	; 0
    2530:	93 e9       	ldi	r25, 0x93	; 147
    2532:	99 2e       	mov	r9, r25
    2534:	21 15       	cp	r18, r1
    2536:	31 05       	cpc	r19, r1
    2538:	09 f5       	brne	.+66     	; 0x257c <AnticollSelect+0xe2>
    253a:	a5 01       	movw	r20, r10
    253c:	68 2f       	mov	r22, r24
    253e:	89 2d       	mov	r24, r9
    2540:	0e 94 f5 10 	call	0x21ea	; 0x21ea <CascAnticoll>
    2544:	9c 01       	movw	r18, r24
    2546:	02 c0       	rjmp	.+4      	; 0x254c <AnticollSelect+0xb2>
    2548:	83 e9       	ldi	r24, 0x93	; 147
    254a:	98 2e       	mov	r9, r24
    254c:	21 15       	cp	r18, r1
    254e:	31 05       	cpc	r19, r1
    2550:	a9 f4       	brne	.+42     	; 0x257c <AnticollSelect+0xe2>
    2552:	ae 01       	movw	r20, r28
    2554:	43 5f       	subi	r20, 0xF3	; 243
    2556:	5f 4f       	sbci	r21, 0xFF	; 255
    2558:	b5 01       	movw	r22, r10
    255a:	89 2d       	mov	r24, r9
    255c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Select>
    2560:	9c 01       	movw	r18, r24
    2562:	89 2b       	or	r24, r25
    2564:	19 f4       	brne	.+6      	; 0x256c <AnticollSelect+0xd2>
    2566:	8d 85       	ldd	r24, Y+13	; 0x0d
    2568:	82 ff       	sbrs	r24, 2
    256a:	08 c0       	rjmp	.+16     	; 0x257c <AnticollSelect+0xe2>
    256c:	1f 5f       	subi	r17, 0xFF	; 255
    256e:	f4 e0       	ldi	r31, 0x04	; 4
    2570:	af 0e       	add	r10, r31
    2572:	b1 1c       	adc	r11, r1
    2574:	13 30       	cpi	r17, 0x03	; 3
    2576:	d1 f0       	breq	.+52     	; 0x25ac <AnticollSelect+0x112>
    2578:	80 2f       	mov	r24, r16
    257a:	ae cf       	rjmp	.-164    	; 0x24d8 <AnticollSelect+0x3e>
    257c:	11 30       	cpi	r17, 0x01	; 1
    257e:	61 f0       	breq	.+24     	; 0x2598 <AnticollSelect+0xfe>
    2580:	12 30       	cpi	r17, 0x02	; 2
    2582:	a1 f4       	brne	.+40     	; 0x25ac <AnticollSelect+0x112>
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	af 81       	ldd	r26, Y+7	; 0x07
    258a:	b8 85       	ldd	r27, Y+8	; 0x08
    258c:	f7 01       	movw	r30, r14
    258e:	86 83       	std	Z+6, r24	; 0x06
    2590:	97 83       	std	Z+7, r25	; 0x07
    2592:	a0 87       	std	Z+8, r26	; 0x08
    2594:	b1 87       	std	Z+9, r27	; 0x09
    2596:	13 c0       	rjmp	.+38     	; 0x25be <AnticollSelect+0x124>
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	af 81       	ldd	r26, Y+7	; 0x07
    259e:	b8 85       	ldd	r27, Y+8	; 0x08
    25a0:	f7 01       	movw	r30, r14
    25a2:	83 83       	std	Z+3, r24	; 0x03
    25a4:	94 83       	std	Z+4, r25	; 0x04
    25a6:	a5 83       	std	Z+5, r26	; 0x05
    25a8:	b6 83       	std	Z+6, r27	; 0x06
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <AnticollSelect+0x124>
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	ab 81       	ldd	r26, Y+3	; 0x03
    25b2:	bc 81       	ldd	r27, Y+4	; 0x04
    25b4:	f7 01       	movw	r30, r14
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
    25be:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c0:	f6 01       	movw	r30, r12
    25c2:	80 83       	st	Z, r24
    25c4:	c9 01       	movw	r24, r18
    25c6:	2d 96       	adiw	r28, 0x0d	; 13
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
    25e2:	bf 90       	pop	r11
    25e4:	af 90       	pop	r10
    25e6:	9f 90       	pop	r9
    25e8:	8f 90       	pop	r8
    25ea:	7f 90       	pop	r7
    25ec:	6f 90       	pop	r6
    25ee:	08 95       	ret

000025f0 <Authentication>:
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <MInfo>
    25f8:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <MInfo+0x1>
    25fc:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo+0x2>
    2600:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <MInfo+0x3>
    2604:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x4>
    2608:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x6>
    260c:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <MInfo+0x5>
    2610:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x7>
    2614:	80 93 1c 0a 	sts	0x0A1C, r24	; 0x800a1c <SerBuffer>
    2618:	20 93 1d 0a 	sts	0x0A1D, r18	; 0x800a1d <SerBuffer+0x1>
    261c:	86 e0       	ldi	r24, 0x06	; 6
    261e:	fb 01       	movw	r30, r22
    2620:	ae e1       	ldi	r26, 0x1E	; 30
    2622:	ba e0       	ldi	r27, 0x0A	; 10
    2624:	01 90       	ld	r0, Z+
    2626:	0d 92       	st	X+, r0
    2628:	8a 95       	dec	r24
    262a:	e1 f7       	brne	.-8      	; 0x2624 <Authentication+0x34>
    262c:	fa 01       	movw	r30, r20
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	a2 81       	ldd	r26, Z+2	; 0x02
    2634:	b3 81       	ldd	r27, Z+3	; 0x03
    2636:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SerBuffer+0x8>
    263a:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <SerBuffer+0x9>
    263e:	a0 93 26 0a 	sts	0x0A26, r26	; 0x800a26 <SerBuffer+0xa>
    2642:	b0 93 27 0a 	sts	0x0A27, r27	; 0x800a27 <SerBuffer+0xb>
    2646:	8c e0       	ldi	r24, 0x0C	; 12
    2648:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <MInfo+0x3>
    264c:	80 ed       	ldi	r24, 0xD0	; 208
    264e:	97 e0       	ldi	r25, 0x07	; 7
    2650:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    2654:	40 e3       	ldi	r20, 0x30	; 48
    2656:	5a e0       	ldi	r21, 0x0A	; 10
    2658:	6c e1       	ldi	r22, 0x1C	; 28
    265a:	7a e0       	ldi	r23, 0x0A	; 10
    265c:	8e e0       	ldi	r24, 0x0E	; 14
    265e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <M522PcdCmd>
    2662:	ec 01       	movw	r28, r24
    2664:	89 2b       	or	r24, r25
    2666:	41 f4       	brne	.+16     	; 0x2678 <Authentication+0x88>
    2668:	88 e0       	ldi	r24, 0x08	; 8
    266a:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    266e:	8f 70       	andi	r24, 0x0F	; 15
    2670:	88 30       	cpi	r24, 0x08	; 8
    2672:	11 f0       	breq	.+4      	; 0x2678 <Authentication+0x88>
    2674:	c1 e0       	ldi	r28, 0x01	; 1
    2676:	d2 e0       	ldi	r29, 0x02	; 2
    2678:	ce 01       	movw	r24, r28
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <Read>:
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	eb 01       	movw	r28, r22
    2686:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <MInfo>
    268a:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <MInfo+0x1>
    268e:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo+0x2>
    2692:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x4>
    2696:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x6>
    269a:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <MInfo+0x5>
    269e:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x7>
    26a2:	90 e3       	ldi	r25, 0x30	; 48
    26a4:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <SerBuffer>
    26a8:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <SerBuffer+0x1>
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <MInfo+0x3>
    26b2:	80 e1       	ldi	r24, 0x10	; 16
    26b4:	97 e2       	ldi	r25, 0x27	; 39
    26b6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <SetTimeOut>
    26ba:	40 e3       	ldi	r20, 0x30	; 48
    26bc:	5a e0       	ldi	r21, 0x0A	; 10
    26be:	6c e1       	ldi	r22, 0x1C	; 28
    26c0:	7a e0       	ldi	r23, 0x0A	; 10
    26c2:	8c e0       	ldi	r24, 0x0C	; 12
    26c4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <M522PcdCmd>
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	e9 f0       	breq	.+58     	; 0x2706 <Read+0x86>
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	91 05       	cpc	r25, r1
    26d0:	a1 f0       	breq	.+40     	; 0x26fa <Read+0x7a>
    26d2:	20 91 35 0a 	lds	r18, 0x0A35	; 0x800a35 <MInfo+0x5>
    26d6:	30 91 36 0a 	lds	r19, 0x0A36	; 0x800a36 <MInfo+0x6>
    26da:	24 30       	cpi	r18, 0x04	; 4
    26dc:	31 05       	cpc	r19, r1
    26de:	69 f4       	brne	.+26     	; 0x26fa <Read+0x7a>
    26e0:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SerBuffer>
    26e4:	98 2f       	mov	r25, r24
    26e6:	9f 70       	andi	r25, 0x0F	; 15
    26e8:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <SerBuffer>
    26ec:	8a 70       	andi	r24, 0x0A	; 10
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <Read+0x76>
    26f0:	85 e0       	ldi	r24, 0x05	; 5
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <Read+0x7a>
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	92 e0       	ldi	r25, 0x02	; 2
    26fa:	20 e1       	ldi	r18, 0x10	; 16
    26fc:	fe 01       	movw	r30, r28
    26fe:	11 92       	st	Z+, r1
    2700:	2a 95       	dec	r18
    2702:	e9 f7       	brne	.-6      	; 0x26fe <Read+0x7e>
    2704:	14 c0       	rjmp	.+40     	; 0x272e <Read+0xae>
    2706:	20 91 34 0a 	lds	r18, 0x0A34	; 0x800a34 <MInfo+0x4>
    270a:	20 31       	cpi	r18, 0x10	; 16
    270c:	41 f0       	breq	.+16     	; 0x271e <Read+0x9e>
    270e:	80 e1       	ldi	r24, 0x10	; 16
    2710:	fe 01       	movw	r30, r28
    2712:	11 92       	st	Z+, r1
    2714:	8a 95       	dec	r24
    2716:	e9 f7       	brne	.-6      	; 0x2712 <Read+0x92>
    2718:	88 e0       	ldi	r24, 0x08	; 8
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	08 c0       	rjmp	.+16     	; 0x272e <Read+0xae>
    271e:	20 e1       	ldi	r18, 0x10	; 16
    2720:	ec e1       	ldi	r30, 0x1C	; 28
    2722:	fa e0       	ldi	r31, 0x0A	; 10
    2724:	de 01       	movw	r26, r28
    2726:	01 90       	ld	r0, Z+
    2728:	0d 92       	st	X+, r0
    272a:	2a 95       	dec	r18
    272c:	e1 f7       	brne	.-8      	; 0x2726 <Read+0xa6>
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	08 95       	ret

00002734 <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    2734:	88 30       	cpi	r24, 0x08	; 8
    2736:	11 f4       	brne	.+4      	; 0x273c <readCardID+0x8>
	{
		zone = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	01 c0       	rjmp	.+2      	; 0x273e <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    273c:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    273e:	0c 94 40 13 	jmp	0x2680	; 0x2680 <Read>

00002742 <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	1f 92       	push	r1
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    274c:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    274e:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    2750:	8e 77       	andi	r24, 0x7E	; 126
    2752:	69 83       	std	Y+1, r22	; 0x01
    2754:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Spi_send>
	Spi_send(RegVal);
    2758:	69 81       	ldd	r22, Y+1	; 0x01
    275a:	86 2f       	mov	r24, r22
    275c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Spi_send>

	Spi_ss_high;
    2760:	71 9a       	sbi	0x0e, 1	; 14

}
    2762:	0f 90       	pop	r0
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	08 95       	ret

0000276a <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    276a:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    276c:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    276e:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    2770:	80 68       	ori	r24, 0x80	; 128
    2772:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    2776:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <Spi_receive>
	
	Spi_ss_high;
    277a:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    277c:	08 95       	ret

0000277e <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	00 d0       	rcall	.+0      	; 0x2786 <RcModifyReg+0x8>
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    278c:	4a 83       	std	Y+2, r20	; 0x02
    278e:	69 83       	std	Y+1, r22	; 0x01
    2790:	0e 94 b5 13 	call	0x276a	; 0x276a <RcGetReg>
    if(ModifyVal)
    2794:	69 81       	ldd	r22, Y+1	; 0x01
    2796:	4a 81       	ldd	r20, Y+2	; 0x02
    2798:	66 23       	and	r22, r22
    279a:	19 f0       	breq	.+6      	; 0x27a2 <RcModifyReg+0x24>
    {
        RegVal |= MaskByte;
    279c:	68 2f       	mov	r22, r24
    279e:	64 2b       	or	r22, r20
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <RcModifyReg+0x2a>
    }
    else
    {
        RegVal &= (~MaskByte);
    27a2:	64 2f       	mov	r22, r20
    27a4:	60 95       	com	r22
    27a6:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    27a8:	81 2f       	mov	r24, r17
}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    27b4:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <RcSetReg>

000027b8 <Spi_initialize>:
 * \param ucData is data to be sent.
 * \return ucData1 is received data from SPI
 */
void Spi_send_only ( uint8_t ucData )
{
   Spi_send_and_receive(ucData);
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	1f 92       	push	r1
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	84 b1       	in	r24, 0x04	; 4
    27c4:	87 60       	ori	r24, 0x07	; 7
    27c6:	84 b9       	out	0x04, r24	; 4
    27c8:	23 98       	cbi	0x04, 3	; 4
    27ca:	28 9a       	sbi	0x05, 0	; 5
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	8d b9       	out	0x0d, r24	; 13
    27d0:	71 9a       	sbi	0x0e, 1	; 14
    27d2:	29 98       	cbi	0x05, 1	; 5
    27d4:	82 e5       	ldi	r24, 0x52	; 82
    27d6:	8c bd       	out	0x2c, r24	; 44
    27d8:	8d b5       	in	r24, 0x2d	; 45
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	8e b5       	in	r24, 0x2e	; 46
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	0f 90       	pop	r0
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	08 95       	ret

000027e8 <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    27e8:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    27ea:	0d b4       	in	r0, 0x2d	; 45
    27ec:	07 fe       	sbrs	r0, 7
    27ee:	fd cf       	rjmp	.-6      	; 0x27ea <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    27f0:	08 95       	ret

000027f2 <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    27f6:	0d b4       	in	r0, 0x2d	; 45
    27f8:	07 fe       	sbrs	r0, 7
    27fa:	fd cf       	rjmp	.-6      	; 0x27f6 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    27fc:	8e b5       	in	r24, 0x2e	; 46
}
    27fe:	08 95       	ret

00002800 <mifareInit>:
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    2800:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <Spi_initialize>
	Rc522Init();
    2804:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <Rc522Init>

00002808 <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    2808:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	a8 95       	wdr
    2810:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2814:	88 61       	ori	r24, 0x18	; 24
    2816:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    281a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    281e:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 33 20 	call	0x4066	; 0x4066 <serial_init>
	#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
	#endif

	// Init the timer system for the MAC
	timerInit();
    2828:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <timerInit>

	#if (DEVICE_CONNECTED == MDC_MACHINE)
	InitTimerZero();	//timer for MDC machine comm.
    282c:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <InitTimerZero>
	#endif

	sei();
    2830:	78 94       	sei
	
	// Init the (sample) application
	appInit();
    2832:	0e 94 af 22 	call	0x455e	; 0x455e <appInit>
	#if( DEBUG )
	Beeps(2);
	#endif
	
	// Initialize mifare
	mifareInit();
    2836:	0e 94 00 14 	call	0x2800	; 0x2800 <mifareInit>
	for(;;)
	{
		// Turn interrupts on if they are off.  They should always be on
		// at this point in the loop, so just turn them on every time, in
		// case interrupts were inadvertently turned off elsewhere.
		sei();
    283a:	78 94       	sei

		// Task functions called from main loop.  Either add your own task loop
		// or edit the example appTask().			
		//appTask();	
		APP_TaskHandler();	
    283c:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <APP_TaskHandler>
		macTask();
    2840:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <macTask>

	}
    2844:	fa cf       	rjmp	.-12     	; 0x283a <main+0x32>

00002846 <nodeSleep>:
}


#else  // if (NODETYPE != COORD)
// For coord, provide dummy function so that code compiles
void nodeSleep(u16 seconds) {}
    2846:	08 95       	ret

00002848 <isSleeping>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    2848:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    284c:	86 95       	lsr	r24
    284e:	81 70       	andi	r24, 0x01	; 1
    2850:	08 95       	ret

00002852 <radioGetPartnum>:
    2852:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <radio_part_number.3586>
    2856:	81 11       	cpse	r24, r1
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <radioGetPartnum+0x10>
    285a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    285e:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <radio_part_number.3586>
    2862:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <radio_part_number.3586>
    2866:	08 95       	ret

00002868 <radioRxStartEvent>:
    2868:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    286c:	8f 71       	andi	r24, 0x1F	; 31
    286e:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <rssi_val>
    2872:	10 92 53 0b 	sts	0x0B53, r1	; 0x800b53 <macConfig+0x17>
    2876:	08 95       	ret

00002878 <radioGetSavedRssiValue>:
    2878:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	19 f0       	breq	.+6      	; 0x2886 <radioGetSavedRssiValue+0xe>
    2880:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <rssi_val>
    2884:	08 95       	ret
    2886:	86 e1       	ldi	r24, 0x16	; 22
    2888:	08 95       	ret

0000288a <radioGetSavedLqiValue>:
    288a:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <mac_buffer_rx+0x80>
    288e:	08 95       	ret

00002890 <radioSetOperatingChannel>:
    2890:	cf 93       	push	r28
    2892:	95 ef       	ldi	r25, 0xF5	; 245
    2894:	98 0f       	add	r25, r24
    2896:	90 31       	cpi	r25, 0x10	; 16
    2898:	18 f5       	brcc	.+70     	; 0x28e0 <radioSetOperatingChannel+0x50>
    289a:	c8 2f       	mov	r28, r24
    289c:	0e 94 24 14 	call	0x2848	; 0x2848 <isSleeping>
    28a0:	81 11       	cpse	r24, r1
    28a2:	20 c0       	rjmp	.+64     	; 0x28e4 <radioSetOperatingChannel+0x54>
    28a4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28a8:	8f 71       	andi	r24, 0x1F	; 31
    28aa:	8c 17       	cp	r24, r28
    28ac:	e9 f0       	breq	.+58     	; 0x28e8 <radioSetOperatingChannel+0x58>
    28ae:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28b2:	80 7e       	andi	r24, 0xE0	; 224
    28b4:	9c 2f       	mov	r25, r28
    28b6:	9f 71       	andi	r25, 0x1F	; 31
    28b8:	89 2b       	or	r24, r25
    28ba:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28be:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    28c2:	8f 71       	andi	r24, 0x1F	; 31
    28c4:	86 30       	cpi	r24, 0x06	; 6
    28c6:	11 f0       	breq	.+4      	; 0x28cc <radioSetOperatingChannel+0x3c>
    28c8:	89 30       	cpi	r24, 0x09	; 9
    28ca:	21 f4       	brne	.+8      	; 0x28d4 <radioSetOperatingChannel+0x44>
    28cc:	8d e2       	ldi	r24, 0x2D	; 45
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <radioSetOperatingChannel+0x40>
    28d4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28d8:	8f 71       	andi	r24, 0x1F	; 31
    28da:	8c 13       	cpse	r24, r28
    28dc:	07 c0       	rjmp	.+14     	; 0x28ec <radioSetOperatingChannel+0x5c>
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <radioSetOperatingChannel+0x58>
    28e0:	82 e4       	ldi	r24, 0x42	; 66
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <radioSetOperatingChannel+0x5e>
    28e4:	84 e4       	ldi	r24, 0x44	; 68
    28e6:	03 c0       	rjmp	.+6      	; 0x28ee <radioSetOperatingChannel+0x5e>
    28e8:	80 e4       	ldi	r24, 0x40	; 64
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <radioSetOperatingChannel+0x5e>
    28ec:	83 e4       	ldi	r24, 0x43	; 67
    28ee:	cf 91       	pop	r28
    28f0:	08 95       	ret

000028f2 <radioSetClockSpeed>:
    28f2:	66 30       	cpi	r22, 0x06	; 6
    28f4:	98 f4       	brcc	.+38     	; 0x291c <radioSetClockSpeed+0x2a>
    28f6:	81 11       	cpse	r24, r1
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <radioSetClockSpeed+0x10>
    28fa:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    28fe:	88 60       	ori	r24, 0x08	; 8
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <radioSetClockSpeed+0x16>
    2902:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    2906:	87 7f       	andi	r24, 0xF7	; 247
    2908:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    290c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    2910:	88 7f       	andi	r24, 0xF8	; 248
    2912:	68 2b       	or	r22, r24
    2914:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    2918:	80 e4       	ldi	r24, 0x40	; 64
    291a:	08 95       	ret
    291c:	82 e4       	ldi	r24, 0x42	; 66
    291e:	08 95       	ret

00002920 <radioGetTrxState>:
    2920:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2924:	8f 71       	andi	r24, 0x1F	; 31
    2926:	08 95       	ret

00002928 <radioResetStateMachine>:
    2928:	e9 e3       	ldi	r30, 0x39	; 57
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	80 81       	ld	r24, Z
    292e:	8d 7f       	andi	r24, 0xFD	; 253
    2930:	80 83       	st	Z, r24
    2932:	8d e0       	ldi	r24, 0x0D	; 13
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <radioResetStateMachine+0xe>
    293a:	e2 e4       	ldi	r30, 0x42	; 66
    293c:	f1 e0       	ldi	r31, 0x01	; 1
    293e:	80 81       	ld	r24, Z
    2940:	80 7e       	andi	r24, 0xE0	; 224
    2942:	83 60       	ori	r24, 0x03	; 3
    2944:	80 83       	st	Z, r24
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <radioResetStateMachine+0x22>
    294e:	08 95       	ret

00002950 <radioResetTrx>:
    2950:	e9 e3       	ldi	r30, 0x39	; 57
    2952:	f1 e0       	ldi	r31, 0x01	; 1
    2954:	80 81       	ld	r24, Z
    2956:	81 60       	ori	r24, 0x01	; 1
    2958:	80 83       	st	Z, r24
    295a:	80 81       	ld	r24, Z
    295c:	8d 7f       	andi	r24, 0xFD	; 253
    295e:	80 83       	st	Z, r24
    2960:	8d e0       	ldi	r24, 0x0D	; 13
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <radioResetTrx+0x14>
    2968:	80 81       	ld	r24, Z
    296a:	8e 7f       	andi	r24, 0xFE	; 254
    296c:	80 83       	st	Z, r24
    296e:	08 95       	ret

00002970 <radioInit>:
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	1f 92       	push	r1
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	0d ef       	ldi	r16, 0xFD	; 253
    2980:	13 e0       	ldi	r17, 0x03	; 3
    2982:	f8 01       	movw	r30, r16
    2984:	31 97       	sbiw	r30, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <radioInit+0x14>
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	0e 94 a8 14 	call	0x2950	; 0x2950 <radioResetTrx>
    298e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2992:	90 7e       	andi	r25, 0xE0	; 224
    2994:	93 60       	ori	r25, 0x03	; 3
    2996:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    299a:	f8 01       	movw	r30, r16
    299c:	31 97       	sbiw	r30, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <radioInit+0x2c>
    29a0:	9c e4       	ldi	r25, 0x4C	; 76
    29a2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    29a6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    29aa:	90 7f       	andi	r25, 0xF0	; 240
    29ac:	97 60       	ori	r25, 0x07	; 7
    29ae:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	81 11       	cpse	r24, r1
    29b6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <calibrate_rc_osc>
    29ba:	80 e4       	ldi	r24, 0x40	; 64
    29bc:	0f 90       	pop	r0
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	08 95       	ret

000029c8 <radioUseAutoTxCrc>:
    29c8:	cf 93       	push	r28
    29ca:	c8 2f       	mov	r28, r24
    29cc:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    29d0:	82 30       	cpi	r24, 0x02	; 2
    29d2:	31 f4       	brne	.+12     	; 0x29e0 <radioUseAutoTxCrc+0x18>
    29d4:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    29d8:	c0 fb       	bst	r28, 0
    29da:	87 f9       	bld	r24, 7
    29dc:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    29e0:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	61 f4       	brne	.+24     	; 0x2a00 <radioUseAutoTxCrc+0x38>
    29e8:	20 91 04 00 	lds	r18, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    29ec:	30 e2       	ldi	r19, 0x20	; 32
    29ee:	c3 9f       	mul	r28, r19
    29f0:	c0 01       	movw	r24, r0
    29f2:	11 24       	eor	r1, r1
    29f4:	80 72       	andi	r24, 0x20	; 32
    29f6:	92 2f       	mov	r25, r18
    29f8:	9f 7d       	andi	r25, 0xDF	; 223
    29fa:	89 2b       	or	r24, r25
    29fc:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <radioIsBusy>:
    2a04:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2a08:	98 2f       	mov	r25, r24
    2a0a:	9f 70       	andi	r25, 0x0F	; 15
    2a0c:	91 50       	subi	r25, 0x01	; 1
    2a0e:	92 30       	cpi	r25, 0x02	; 2
    2a10:	38 f0       	brcs	.+14     	; 0x2a20 <radioIsBusy+0x1c>
    2a12:	98 2f       	mov	r25, r24
    2a14:	9f 71       	andi	r25, 0x1F	; 31
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	9e 31       	cpi	r25, 0x1E	; 30
    2a1a:	19 f0       	breq	.+6      	; 0x2a22 <radioIsBusy+0x1e>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	08 95       	ret
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	08 95       	ret

00002a24 <radioSetTrxState>:
    2a24:	cf 93       	push	r28
    2a26:	c8 2f       	mov	r28, r24
    2a28:	88 ef       	ldi	r24, 0xF8	; 248
    2a2a:	8c 0f       	add	r24, r28
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	38 f0       	brcs	.+14     	; 0x2a3e <radioSetTrxState+0x1a>
    2a30:	8c 2f       	mov	r24, r28
    2a32:	8f 7e       	andi	r24, 0xEF	; 239
    2a34:	86 30       	cpi	r24, 0x06	; 6
    2a36:	19 f0       	breq	.+6      	; 0x2a3e <radioSetTrxState+0x1a>
    2a38:	c9 31       	cpi	r28, 0x19	; 25
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <radioSetTrxState+0x1a>
    2a3c:	55 c0       	rjmp	.+170    	; 0x2ae8 <radioSetTrxState+0xc4>
    2a3e:	0e 94 24 14 	call	0x2848	; 0x2848 <isSleeping>
    2a42:	81 11       	cpse	r24, r1
    2a44:	53 c0       	rjmp	.+166    	; 0x2aec <radioSetTrxState+0xc8>
    2a46:	0e 94 02 15 	call	0x2a04	; 0x2a04 <radioIsBusy>
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	fc cf       	rjmp	.-8      	; 0x2a46 <radioSetTrxState+0x22>
    2a4e:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    2a52:	82 30       	cpi	r24, 0x02	; 2
    2a54:	39 f4       	brne	.+14     	; 0x2a64 <radioSetTrxState+0x40>
    2a56:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <macIsScanning>
    2a5a:	88 23       	and	r24, r24
    2a5c:	19 f0       	breq	.+6      	; 0x2a64 <radioSetTrxState+0x40>
    2a5e:	c6 31       	cpi	r28, 0x16	; 22
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <radioSetTrxState+0x40>
    2a62:	c6 e0       	ldi	r28, 0x06	; 6
    2a64:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2a68:	8f 71       	andi	r24, 0x1F	; 31
    2a6a:	c8 17       	cp	r28, r24
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <radioSetTrxState+0x4c>
    2a6e:	40 c0       	rjmp	.+128    	; 0x2af0 <radioSetTrxState+0xcc>
    2a70:	c8 30       	cpi	r28, 0x08	; 8
    2a72:	19 f4       	brne	.+6      	; 0x2a7a <radioSetTrxState+0x56>
    2a74:	0e 94 94 14 	call	0x2928	; 0x2928 <radioResetStateMachine>
    2a78:	31 c0       	rjmp	.+98     	; 0x2adc <radioSetTrxState+0xb8>
    2a7a:	c9 31       	cpi	r28, 0x19	; 25
    2a7c:	59 f4       	brne	.+22     	; 0x2a94 <radioSetTrxState+0x70>
    2a7e:	89 30       	cpi	r24, 0x09	; 9
    2a80:	e1 f0       	breq	.+56     	; 0x2aba <radioSetTrxState+0x96>
    2a82:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2a86:	90 7e       	andi	r25, 0xE0	; 224
    2a88:	99 60       	ori	r25, 0x09	; 9
    2a8a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2a8e:	86 31       	cpi	r24, 0x16	; 22
    2a90:	81 f4       	brne	.+32     	; 0x2ab2 <radioSetTrxState+0x8e>
    2a92:	0c c0       	rjmp	.+24     	; 0x2aac <radioSetTrxState+0x88>
    2a94:	c6 31       	cpi	r28, 0x16	; 22
    2a96:	89 f4       	brne	.+34     	; 0x2aba <radioSetTrxState+0x96>
    2a98:	89 30       	cpi	r24, 0x09	; 9
    2a9a:	79 f0       	breq	.+30     	; 0x2aba <radioSetTrxState+0x96>
    2a9c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2aa0:	90 7e       	andi	r25, 0xE0	; 224
    2aa2:	99 60       	ori	r25, 0x09	; 9
    2aa4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2aa8:	89 31       	cpi	r24, 0x19	; 25
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <radioSetTrxState+0x8e>
    2aac:	e3 e0       	ldi	r30, 0x03	; 3
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <radioSetTrxState+0x92>
    2ab2:	e9 e6       	ldi	r30, 0x69	; 105
    2ab4:	f1 e0       	ldi	r31, 0x01	; 1
    2ab6:	31 97       	sbiw	r30, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <radioSetTrxState+0x92>
    2aba:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2abe:	90 7e       	andi	r25, 0xE0	; 224
    2ac0:	2c 2f       	mov	r18, r28
    2ac2:	2f 71       	andi	r18, 0x1F	; 31
    2ac4:	92 2b       	or	r25, r18
    2ac6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2aca:	88 30       	cpi	r24, 0x08	; 8
    2acc:	19 f4       	brne	.+6      	; 0x2ad4 <radioSetTrxState+0xb0>
    2ace:	89 e6       	ldi	r24, 0x69	; 105
    2ad0:	91 e0       	ldi	r25, 0x01	; 1
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <radioSetTrxState+0xb4>
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <radioSetTrxState+0xb4>
    2adc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2ae0:	8f 71       	andi	r24, 0x1F	; 31
    2ae2:	8c 13       	cpse	r24, r28
    2ae4:	07 c0       	rjmp	.+14     	; 0x2af4 <radioSetTrxState+0xd0>
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <radioSetTrxState+0xcc>
    2ae8:	82 e4       	ldi	r24, 0x42	; 66
    2aea:	05 c0       	rjmp	.+10     	; 0x2af6 <radioSetTrxState+0xd2>
    2aec:	84 e4       	ldi	r24, 0x44	; 68
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <radioSetTrxState+0xd2>
    2af0:	80 e4       	ldi	r24, 0x40	; 64
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <radioSetTrxState+0xd2>
    2af4:	83 e4       	ldi	r24, 0x43	; 67
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <radioTrxEndEvent>:
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <radioTrxEndEvent+0x6>
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <radioTrxEndEvent+0x8>
    2b02:	1f 92       	push	r1
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2b0c:	8f 71       	andi	r24, 0x1F	; 31
    2b0e:	8c 83       	std	Y+4, r24	; 0x04
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	81 31       	cpi	r24, 0x11	; 17
    2b14:	51 f0       	breq	.+20     	; 0x2b2a <radioTrxEndEvent+0x30>
    2b16:	8c 81       	ldd	r24, Y+4	; 0x04
    2b18:	86 30       	cpi	r24, 0x06	; 6
    2b1a:	39 f0       	breq	.+14     	; 0x2b2a <radioTrxEndEvent+0x30>
    2b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1e:	81 30       	cpi	r24, 0x01	; 1
    2b20:	21 f0       	breq	.+8      	; 0x2b2a <radioTrxEndEvent+0x30>
    2b22:	8c 81       	ldd	r24, Y+4	; 0x04
    2b24:	86 31       	cpi	r24, 0x16	; 22
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <radioTrxEndEvent+0x30>
    2b28:	5f c0       	rjmp	.+190    	; 0x2be8 <radioTrxEndEvent+0xee>
    2b2a:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	60 e8       	ldi	r22, 0x80	; 128
    2b32:	71 e0       	ldi	r23, 0x01	; 1
    2b34:	89 e3       	ldi	r24, 0x39	; 57
    2b36:	9a e0       	ldi	r25, 0x0A	; 10
    2b38:	0e 94 4a 31 	call	0x6294	; 0x6294 <memcpy>
    2b3c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    2b40:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <mac_buffer_rx>
    2b44:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	e8 5c       	subi	r30, 0xC8	; 200
    2b4c:	f5 4f       	sbci	r31, 0xF5	; 245
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <mac_buffer_rx+0x80>
    2b54:	19 82       	std	Y+1, r1	; 0x01
    2b56:	1b 82       	std	Y+3, r1	; 0x03
    2b58:	1a 82       	std	Y+2, r1	; 0x02
    2b5a:	20 91 39 0a 	lds	r18, 0x0A39	; 0x800a39 <mac_buffer_rx+0x1>
    2b5e:	80 91 3a 0a 	lds	r24, 0x0A3A	; 0x800a3a <mac_buffer_rx+0x2>
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	98 2f       	mov	r25, r24
    2b66:	88 27       	eor	r24, r24
    2b68:	82 0f       	add	r24, r18
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	90 93 3a 0a 	sts	0x0A3A, r25	; 0x800a3a <mac_buffer_rx+0x2>
    2b70:	80 93 39 0a 	sts	0x0A39, r24	; 0x800a39 <mac_buffer_rx+0x1>
    2b74:	81 36       	cpi	r24, 0x61	; 97
    2b76:	28 e8       	ldi	r18, 0x88	; 136
    2b78:	92 07       	cpc	r25, r18
    2b7a:	09 f1       	breq	.+66     	; 0x2bbe <radioTrxEndEvent+0xc4>
    2b7c:	40 f4       	brcc	.+16     	; 0x2b8e <radioTrxEndEvent+0x94>
    2b7e:	83 30       	cpi	r24, 0x03	; 3
    2b80:	28 e0       	ldi	r18, 0x08	; 8
    2b82:	92 07       	cpc	r25, r18
    2b84:	81 f0       	breq	.+32     	; 0x2ba6 <radioTrxEndEvent+0xac>
    2b86:	81 15       	cp	r24, r1
    2b88:	90 48       	sbci	r25, 0x80	; 128
    2b8a:	99 f0       	breq	.+38     	; 0x2bb2 <radioTrxEndEvent+0xb8>
    2b8c:	28 c0       	rjmp	.+80     	; 0x2bde <radioTrxEndEvent+0xe4>
    2b8e:	83 36       	cpi	r24, 0x63	; 99
    2b90:	2c e8       	ldi	r18, 0x8C	; 140
    2b92:	92 07       	cpc	r25, r18
    2b94:	01 f1       	breq	.+64     	; 0x2bd6 <radioTrxEndEvent+0xdc>
    2b96:	83 36       	cpi	r24, 0x63	; 99
    2b98:	28 ec       	ldi	r18, 0xC8	; 200
    2b9a:	92 07       	cpc	r25, r18
    2b9c:	d1 f0       	breq	.+52     	; 0x2bd2 <radioTrxEndEvent+0xd8>
    2b9e:	83 36       	cpi	r24, 0x63	; 99
    2ba0:	98 48       	sbci	r25, 0x88	; 136
    2ba2:	e9 f4       	brne	.+58     	; 0x2bde <radioTrxEndEvent+0xe4>
    2ba4:	0e c0       	rjmp	.+28     	; 0x2bc2 <radioTrxEndEvent+0xc8>
    2ba6:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    2baa:	88 23       	and	r24, r24
    2bac:	c1 f0       	breq	.+48     	; 0x2bde <radioTrxEndEvent+0xe4>
    2bae:	85 e1       	ldi	r24, 0x15	; 21
    2bb0:	15 c0       	rjmp	.+42     	; 0x2bdc <radioTrxEndEvent+0xe2>
    2bb2:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <macIsScanning>
    2bb6:	88 23       	and	r24, r24
    2bb8:	91 f0       	breq	.+36     	; 0x2bde <radioTrxEndEvent+0xe4>
    2bba:	84 e1       	ldi	r24, 0x14	; 20
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <radioTrxEndEvent+0xe2>
    2bbe:	80 e1       	ldi	r24, 0x10	; 16
    2bc0:	0d c0       	rjmp	.+26     	; 0x2bdc <radioTrxEndEvent+0xe2>
    2bc2:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <mac_buffer_rx+0xa>
    2bc6:	82 30       	cpi	r24, 0x02	; 2
    2bc8:	31 f0       	breq	.+12     	; 0x2bd6 <radioTrxEndEvent+0xdc>
    2bca:	8b 3b       	cpi	r24, 0xBB	; 187
    2bcc:	31 f0       	breq	.+12     	; 0x2bda <radioTrxEndEvent+0xe0>
    2bce:	81 30       	cpi	r24, 0x01	; 1
    2bd0:	31 f4       	brne	.+12     	; 0x2bde <radioTrxEndEvent+0xe4>
    2bd2:	87 e1       	ldi	r24, 0x17	; 23
    2bd4:	03 c0       	rjmp	.+6      	; 0x2bdc <radioTrxEndEvent+0xe2>
    2bd6:	88 e1       	ldi	r24, 0x18	; 24
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <radioTrxEndEvent+0xe2>
    2bda:	89 e1       	ldi	r24, 0x19	; 25
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	ce 01       	movw	r24, r28
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_put_event>
    2be6:	35 c0       	rjmp	.+106    	; 0x2c52 <radioTrxEndEvent+0x158>
    2be8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bea:	82 30       	cpi	r24, 0x02	; 2
    2bec:	49 f0       	breq	.+18     	; 0x2c00 <radioTrxEndEvent+0x106>
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	82 31       	cpi	r24, 0x12	; 18
    2bf2:	31 f0       	breq	.+12     	; 0x2c00 <radioTrxEndEvent+0x106>
    2bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf6:	89 31       	cpi	r24, 0x19	; 25
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <radioTrxEndEvent+0x106>
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	89 30       	cpi	r24, 0x09	; 9
    2bfe:	49 f5       	brne	.+82     	; 0x2c52 <radioTrxEndEvent+0x158>
    2c00:	10 92 53 0b 	sts	0x0B53, r1	; 0x800b53 <macConfig+0x17>
    2c04:	19 82       	std	Y+1, r1	; 0x01
    2c06:	1b 82       	std	Y+3, r1	; 0x03
    2c08:	1a 82       	std	Y+2, r1	; 0x02
    2c0a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2c0e:	82 95       	swap	r24
    2c10:	86 95       	lsr	r24
    2c12:	87 70       	andi	r24, 0x07	; 7
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	83 30       	cpi	r24, 0x03	; 3
    2c1a:	49 f0       	breq	.+18     	; 0x2c2e <radioTrxEndEvent+0x134>
    2c1c:	20 f4       	brcc	.+8      	; 0x2c26 <radioTrxEndEvent+0x12c>
    2c1e:	82 30       	cpi	r24, 0x02	; 2
    2c20:	40 f4       	brcc	.+16     	; 0x2c32 <radioTrxEndEvent+0x138>
    2c22:	81 e1       	ldi	r24, 0x11	; 17
    2c24:	05 c0       	rjmp	.+10     	; 0x2c30 <radioTrxEndEvent+0x136>
    2c26:	85 30       	cpi	r24, 0x05	; 5
    2c28:	21 f4       	brne	.+8      	; 0x2c32 <radioTrxEndEvent+0x138>
    2c2a:	82 e1       	ldi	r24, 0x12	; 18
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <radioTrxEndEvent+0x136>
    2c2e:	83 e1       	ldi	r24, 0x13	; 19
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	88 23       	and	r24, r24
    2c36:	21 f0       	breq	.+8      	; 0x2c40 <radioTrxEndEvent+0x146>
    2c38:	ce 01       	movw	r24, r28
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_put_event>
    2c40:	86 e1       	ldi	r24, 0x16	; 22
    2c42:	0e 94 12 15 	call	0x2a24	; 0x2a24 <radioSetTrxState>
    2c46:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    2c4a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    2c4e:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <srand>
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	08 95       	ret

00002c62 <radioSendData>:
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	c8 2f       	mov	r28, r24
    2c6a:	8b 01       	movw	r16, r22
    2c6c:	87 fd       	sbrc	r24, 7
    2c6e:	2b c0       	rjmp	.+86     	; 0x2cc6 <radioSendData+0x64>
    2c70:	0e 94 02 15 	call	0x2a04	; 0x2a04 <radioIsBusy>
    2c74:	81 11       	cpse	r24, r1
    2c76:	fc cf       	rjmp	.-8      	; 0x2c70 <radioSendData+0xe>
    2c78:	89 e1       	ldi	r24, 0x19	; 25
    2c7a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <radioSetTrxState>
    2c7e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2c82:	8f 71       	andi	r24, 0x1F	; 31
    2c84:	89 31       	cpi	r24, 0x19	; 25
    2c86:	c1 f7       	brne	.-16     	; 0x2c78 <radioSendData+0x16>
    2c88:	f8 01       	movw	r30, r16
    2c8a:	85 81       	ldd	r24, Z+5	; 0x05
    2c8c:	96 81       	ldd	r25, Z+6	; 0x06
    2c8e:	90 93 52 0b 	sts	0x0B52, r25	; 0x800b52 <macConfig+0x16>
    2c92:	80 93 51 0b 	sts	0x0B51, r24	; 0x800b51 <macConfig+0x15>
    2c96:	4c 2f       	mov	r20, r28
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	4e 5f       	subi	r20, 0xFE	; 254
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	b8 01       	movw	r22, r16
    2ca0:	81 e8       	ldi	r24, 0x81	; 129
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	0e 94 4a 31 	call	0x6294	; 0x6294 <memcpy>
    2ca8:	ce 5f       	subi	r28, 0xFE	; 254
    2caa:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    2cae:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cb2:	82 60       	ori	r24, 0x02	; 2
    2cb4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cb8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cbc:	8d 7f       	andi	r24, 0xFD	; 253
    2cbe:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cc2:	80 e4       	ldi	r24, 0x40	; 64
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <radioSendData+0x66>
    2cc6:	82 e4       	ldi	r24, 0x42	; 66
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	08 95       	ret

00002cd0 <radioSetDeviceRole>:
    2cd0:	ee e6       	ldi	r30, 0x6E	; 110
    2cd2:	f1 e0       	ldi	r31, 0x01	; 1
    2cd4:	90 81       	ld	r25, Z
    2cd6:	80 fb       	bst	r24, 0
    2cd8:	93 f9       	bld	r25, 3
    2cda:	90 83       	st	Z, r25
    2cdc:	08 95       	ret

00002cde <radioSetPanId>:
    2cde:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    2ce2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    2ce6:	08 95       	ret

00002ce8 <radioSetShortAddress>:
    2ce8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    2cec:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    2cf0:	08 95       	ret

00002cf2 <radioSetExtendedAddress>:
    2cf2:	e4 e6       	ldi	r30, 0x64	; 100
    2cf4:	f1 e0       	ldi	r31, 0x01	; 1
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	2d 91       	ld	r18, X+
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	21 93       	st	Z+, r18
    2cfe:	ec 36       	cpi	r30, 0x6C	; 108
    2d00:	b1 e0       	ldi	r27, 0x01	; 1
    2d02:	fb 07       	cpc	r31, r27
    2d04:	c1 f7       	brne	.-16     	; 0x2cf6 <radioSetExtendedAddress+0x4>
    2d06:	08 95       	ret

00002d08 <radioRandom>:
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	c8 2f       	mov	r28, r24
    2d0e:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2d12:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    2d16:	83 30       	cpi	r24, 0x03	; 3
    2d18:	39 f4       	brne	.+14     	; 0x2d28 <radioRandom+0x20>
    2d1a:	df 70       	andi	r29, 0x0F	; 15
    2d1c:	d6 30       	cpi	r29, 0x06	; 6
    2d1e:	f1 f4       	brne	.+60     	; 0x2d5c <radioRandom+0x54>
    2d20:	c6 95       	lsr	r28
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	09 c0       	rjmp	.+18     	; 0x2d3a <radioRandom+0x32>
    2d28:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    2d2c:	83 38       	cpi	r24, 0x83	; 131
    2d2e:	a9 f3       	breq	.-22     	; 0x2d1a <radioRandom+0x12>
    2d30:	0e 94 29 14 	call	0x2852	; 0x2852 <radioGetPartnum>
    2d34:	87 30       	cpi	r24, 0x07	; 7
    2d36:	91 f4       	brne	.+36     	; 0x2d5c <radioRandom+0x54>
    2d38:	f0 cf       	rjmp	.-32     	; 0x2d1a <radioRandom+0x12>
    2d3a:	9c 17       	cp	r25, r28
    2d3c:	69 f0       	breq	.+26     	; 0x2d58 <radioRandom+0x50>
    2d3e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    2d42:	44 e0       	ldi	r20, 0x04	; 4
    2d44:	24 9f       	mul	r18, r20
    2d46:	90 01       	movw	r18, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	80 76       	andi	r24, 0x60	; 96
    2d4c:	82 95       	swap	r24
    2d4e:	86 95       	lsr	r24
    2d50:	87 70       	andi	r24, 0x07	; 7
    2d52:	28 2b       	or	r18, r24
    2d54:	9f 5f       	subi	r25, 0xFF	; 255
    2d56:	f1 cf       	rjmp	.-30     	; 0x2d3a <radioRandom+0x32>
    2d58:	82 2f       	mov	r24, r18
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <radioRandom+0x58>
    2d5c:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <rand>
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	08 95       	ret

00002d66 <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    2d66:	08 95       	ret

00002d68 <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    2d68:	1f 92       	push	r1
    2d6a:	0f 92       	push	r0
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	0f 92       	push	r0
    2d70:	11 24       	eor	r1, r1
    2d72:	0b b6       	in	r0, 0x3b	; 59
    2d74:	0f 92       	push	r0
    2d76:	2f 93       	push	r18
    2d78:	3f 93       	push	r19
    2d7a:	4f 93       	push	r20
    2d7c:	5f 93       	push	r21
    2d7e:	6f 93       	push	r22
    2d80:	7f 93       	push	r23
    2d82:	8f 93       	push	r24
    2d84:	9f 93       	push	r25
    2d86:	af 93       	push	r26
    2d88:	bf 93       	push	r27
    2d8a:	ef 93       	push	r30
    2d8c:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    2d8e:	0e 94 34 14 	call	0x2868	; 0x2868 <radioRxStartEvent>
	}
    2d92:	ff 91       	pop	r31
    2d94:	ef 91       	pop	r30
    2d96:	bf 91       	pop	r27
    2d98:	af 91       	pop	r26
    2d9a:	9f 91       	pop	r25
    2d9c:	8f 91       	pop	r24
    2d9e:	7f 91       	pop	r23
    2da0:	6f 91       	pop	r22
    2da2:	5f 91       	pop	r21
    2da4:	4f 91       	pop	r20
    2da6:	3f 91       	pop	r19
    2da8:	2f 91       	pop	r18
    2daa:	0f 90       	pop	r0
    2dac:	0b be       	out	0x3b, r0	; 59
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    2db8:	1f 92       	push	r1
    2dba:	0f 92       	push	r0
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	0b b6       	in	r0, 0x3b	; 59
    2dc4:	0f 92       	push	r0
    2dc6:	2f 93       	push	r18
    2dc8:	3f 93       	push	r19
    2dca:	4f 93       	push	r20
    2dcc:	5f 93       	push	r21
    2dce:	6f 93       	push	r22
    2dd0:	7f 93       	push	r23
    2dd2:	8f 93       	push	r24
    2dd4:	9f 93       	push	r25
    2dd6:	af 93       	push	r26
    2dd8:	bf 93       	push	r27
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    2dde:	0e 94 7d 15 	call	0x2afa	; 0x2afa <radioTrxEndEvent>
	}
    2de2:	ff 91       	pop	r31
    2de4:	ef 91       	pop	r30
    2de6:	bf 91       	pop	r27
    2de8:	af 91       	pop	r26
    2dea:	9f 91       	pop	r25
    2dec:	8f 91       	pop	r24
    2dee:	7f 91       	pop	r23
    2df0:	6f 91       	pop	r22
    2df2:	5f 91       	pop	r21
    2df4:	4f 91       	pop	r20
    2df6:	3f 91       	pop	r19
    2df8:	2f 91       	pop	r18
    2dfa:	0f 90       	pop	r0
    2dfc:	0b be       	out	0x3b, r0	; 59
    2dfe:	0f 90       	pop	r0
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	0f 90       	pop	r0
    2e04:	1f 90       	pop	r1
    2e06:	18 95       	reti

00002e08 <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    2e08:	1f 92       	push	r1
    2e0a:	0f 92       	push	r0
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	0f 92       	push	r0
    2e10:	11 24       	eor	r1, r1
    2e12:	0b b6       	in	r0, 0x3b	; 59
    2e14:	0f 92       	push	r0
    2e16:	2f 93       	push	r18
    2e18:	3f 93       	push	r19
    2e1a:	4f 93       	push	r20
    2e1c:	5f 93       	push	r21
    2e1e:	6f 93       	push	r22
    2e20:	7f 93       	push	r23
    2e22:	8f 93       	push	r24
    2e24:	9f 93       	push	r25
    2e26:	af 93       	push	r26
    2e28:	bf 93       	push	r27
    2e2a:	ef 93       	push	r30
    2e2c:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    2e2e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2e32:	8f 71       	andi	r24, 0x1F	; 31
    2e34:	86 31       	cpi	r24, 0x16	; 22
    2e36:	11 f0       	breq	.+4      	; 0x2e3c <__vector_63+0x34>
        radioTrxEndEvent();
    2e38:	0e 94 7d 15 	call	0x2afa	; 0x2afa <radioTrxEndEvent>
}
    2e3c:	ff 91       	pop	r31
    2e3e:	ef 91       	pop	r30
    2e40:	bf 91       	pop	r27
    2e42:	af 91       	pop	r26
    2e44:	9f 91       	pop	r25
    2e46:	8f 91       	pop	r24
    2e48:	7f 91       	pop	r23
    2e4a:	6f 91       	pop	r22
    2e4c:	5f 91       	pop	r21
    2e4e:	4f 91       	pop	r20
    2e50:	3f 91       	pop	r19
    2e52:	2f 91       	pop	r18
    2e54:	0f 90       	pop	r0
    2e56:	0b be       	out	0x3b, r0	; 59
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	0b b6       	in	r0, 0x3b	; 59
    2e6e:	0f 92       	push	r0
    2e70:	2f 93       	push	r18
    2e72:	3f 93       	push	r19
    2e74:	4f 93       	push	r20
    2e76:	5f 93       	push	r21
    2e78:	6f 93       	push	r22
    2e7a:	7f 93       	push	r23
    2e7c:	8f 93       	push	r24
    2e7e:	9f 93       	push	r25
    2e80:	af 93       	push	r26
    2e82:	bf 93       	push	r27
    2e84:	ef 93       	push	r30
    2e86:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    2e88:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <macEdCallback>
	}
    2e8c:	ff 91       	pop	r31
    2e8e:	ef 91       	pop	r30
    2e90:	bf 91       	pop	r27
    2e92:	af 91       	pop	r26
    2e94:	9f 91       	pop	r25
    2e96:	8f 91       	pop	r24
    2e98:	7f 91       	pop	r23
    2e9a:	6f 91       	pop	r22
    2e9c:	5f 91       	pop	r21
    2e9e:	4f 91       	pop	r20
    2ea0:	3f 91       	pop	r19
    2ea2:	2f 91       	pop	r18
    2ea4:	0f 90       	pop	r0
    2ea6:	0b be       	out	0x3b, r0	; 59
    2ea8:	0f 90       	pop	r0
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	0f 90       	pop	r0
    2eae:	1f 90       	pop	r1
    2eb0:	18 95       	reti

00002eb2 <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    2eb2:	cf 92       	push	r12
    2eb4:	df 92       	push	r13
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <calibrate_rc_osc+0x12>
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    2ec8:	10 91 79 05 	lds	r17, 0x0579	; 0x800579 <once.3484>
    2ecc:	11 23       	and	r17, r17
    2ece:	11 f0       	breq	.+4      	; 0x2ed4 <calibrate_rc_osc+0x22>
            // Only calibrate once
            return true;
    2ed0:	11 e0       	ldi	r17, 0x01	; 1
    2ed2:	58 c0       	rjmp	.+176    	; 0x2f84 <calibrate_rc_osc+0xd2>

        once = true;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    2eda:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    2ede:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    2ee0:	61 e0       	ldi	r22, 0x01	; 1
    2ee2:	0e 94 79 14 	call	0x28f2	; 0x28f2 <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    2ee6:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    2eea:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    2eee:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    2ef2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    2ef6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    2efa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2efe:	88 ee       	ldi	r24, 0xE8	; 232
    2f00:	93 e0       	ldi	r25, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    2f02:	43 e0       	ldi	r20, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    2f04:	56 e0       	ldi	r21, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    2f06:	3f ef       	ldi	r19, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    2f08:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    2f0c:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    2f10:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    2f14:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2f18:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    2f1c:	36 bb       	out	0x16, r19	; 22
            TIFR2 = 0xFF;
    2f1e:	37 bb       	out	0x17, r19	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    2f20:	b8 9b       	sbis	0x17, 0	; 23
    2f22:	fe cf       	rjmp	.-4      	; 0x2f20 <calibrate_rc_osc+0x6e>
                ;

            temp = TCNT1;
    2f24:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2f28:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2f2c:	7a 83       	std	Y+2, r23	; 0x02
    2f2e:	69 83       	std	Y+1, r22	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    2f30:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    2f34:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    2f38:	69 81       	ldd	r22, Y+1	; 0x01
    2f3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2f3c:	6d 3f       	cpi	r22, 0xFD	; 253
    2f3e:	71 40       	sbci	r23, 0x01	; 1
    2f40:	20 f4       	brcc	.+8      	; 0x2f4a <calibrate_rc_osc+0x98>
            {
                // Too fast, slow down
                OSCCAL--;
    2f42:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    2f46:	21 50       	subi	r18, 0x01	; 1
    2f48:	08 c0       	rjmp	.+16     	; 0x2f5a <calibrate_rc_osc+0xa8>
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    2f4a:	69 81       	ldd	r22, Y+1	; 0x01
    2f4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f4e:	63 30       	cpi	r22, 0x03	; 3
    2f50:	72 40       	sbci	r23, 0x02	; 2
    2f52:	48 f0       	brcs	.+18     	; 0x2f66 <calibrate_rc_osc+0xb4>
            {
                // Too slow, speed up
                OSCCAL++;
    2f54:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    2f58:	2f 5f       	subi	r18, 0xFF	; 255
    2f5a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    2f60:	99 f6       	brne	.-90     	; 0x2f08 <calibrate_rc_osc+0x56>
*/
bool calibrate_rc_osc(void)
{
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
    2f62:	00 e0       	ldi	r16, 0x00	; 0
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <calibrate_rc_osc+0xb6>
            }
            else
            {
                // We are within +/- 0.5 % of our target frequency, so we're
                // done.
                success = true;
    2f66:	01 e0       	ldi	r16, 0x01	; 1
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    2f70:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    2f74:	d0 92 81 00 	sts	0x0081, r13	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    2f78:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
    2f7c:	01 11       	cpse	r16, r1
    2f7e:	a8 cf       	rjmp	.-176    	; 0x2ed0 <calibrate_rc_osc+0x1e>
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    2f80:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

        return success;
    }
    else
        return 0;
}
    2f84:	81 2f       	mov	r24, r17
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	ff 90       	pop	r15
    2f94:	ef 90       	pop	r14
    2f96:	df 90       	pop	r13
    2f98:	cf 90       	pop	r12
    2f9a:	08 95       	ret

00002f9c <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	1f 92       	push	r1
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    2faa:	3f b7       	in	r19, 0x3f	; 63
    2fac:	39 83       	std	Y+1, r19	; 0x01
    2fae:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    2fb0:	46 2f       	mov	r20, r22
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	bf 01       	movw	r22, r30
    2fb6:	0e 94 55 34 	call	0x68aa	; 0x68aa <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f bf       	out	0x3f, r24	; 63
}
    2fbe:	0f 90       	pop	r0
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	08 95       	ret

00002fc6 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	1f 92       	push	r1
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    2fd4:	3f b7       	in	r19, 0x3f	; 63
    2fd6:	39 83       	std	Y+1, r19	; 0x01
    2fd8:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    2fda:	46 2f       	mov	r20, r22
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	bf 01       	movw	r22, r30
    2fe0:	0e 94 77 34 	call	0x68ee	; 0x68ee <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	8f bf       	out	0x3f, r24	; 63
}
    2fe8:	0f 90       	pop	r0
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	28 97       	sbiw	r28, 0x08	; 8
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    3008:	2f ef       	ldi	r18, 0xFF	; 255
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	30 93 48 0b 	sts	0x0B48, r19	; 0x800b48 <macConfig+0xc>
    3010:	20 93 47 0b 	sts	0x0B47, r18	; 0x800b47 <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    3014:	30 93 4a 0b 	sts	0x0B4A, r19	; 0x800b4a <macConfig+0xe>
    3018:	20 93 49 0b 	sts	0x0B49, r18	; 0x800b49 <macConfig+0xd>
    macConfig.associated = false;
    301c:	10 92 44 0b 	sts	0x0B44, r1	; 0x800b44 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    3020:	30 93 4c 0b 	sts	0x0B4C, r19	; 0x800b4c <macConfig+0x10>
    3024:	20 93 4b 0b 	sts	0x0B4B, r18	; 0x800b4b <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    3028:	30 93 4e 0b 	sts	0x0B4E, r19	; 0x800b4e <macConfig+0x12>
    302c:	20 93 4d 0b 	sts	0x0B4D, r18	; 0x800b4d <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    3030:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <macConfig+0x13>
    macConfig.busy = 0;
    3034:	10 92 53 0b 	sts	0x0B53, r1	; 0x800b53 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    303e:	0e 94 b8 14 	call	0x2970	; 0x2970 <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    3042:	10 93 50 0b 	sts	0x0B50, r17	; 0x800b50 <macConfig+0x14>
    if (Channel != 0xff)
    3046:	1f 3f       	cpi	r17, 0xFF	; 255
    3048:	19 f0       	breq	.+6      	; 0x3050 <macInit+0x60>
        radioSetOperatingChannel(Channel);
    304a:	81 2f       	mov	r24, r17
    304c:	0e 94 48 14 	call	0x2890	; 0x2890 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    3056:	88 e0       	ldi	r24, 0x08	; 8
    3058:	0e 94 12 15 	call	0x2a24	; 0x2a24 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    305c:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    3060:	86 e1       	ldi	r24, 0x16	; 22
    3062:	0e 94 12 15 	call	0x2a24	; 0x2a24 <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    3066:	4c e3       	ldi	r20, 0x3C	; 60
    3068:	5b e0       	ldi	r21, 0x0B	; 11
    306a:	68 e0       	ldi	r22, 0x08	; 8
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    307a:	8f ef       	ldi	r24, 0xFF	; 255
    307c:	9f ef       	ldi	r25, 0xFF	; 255
    307e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    3082:	8f ef       	ldi	r24, 0xFF	; 255
    3084:	9f ef       	ldi	r25, 0xFF	; 255
    3086:	0e 94 6f 16 	call	0x2cde	; 0x2cde <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    308a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    308e:	8f 70       	andi	r24, 0x0F	; 15
    3090:	80 62       	ori	r24, 0x20	; 32
    3092:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    3096:	80 91 3c 0b 	lds	r24, 0x0B3C	; 0x800b3c <macConfig>
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <macConfig+0x1>
    30a0:	8a 83       	std	Y+2, r24	; 0x02
    30a2:	80 91 3e 0b 	lds	r24, 0x0B3E	; 0x800b3e <macConfig+0x2>
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <macConfig+0x3>
    30ac:	8c 83       	std	Y+4, r24	; 0x04
    30ae:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <macConfig+0x4>
    30b2:	8d 83       	std	Y+5, r24	; 0x05
    30b4:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <macConfig+0x5>
    30b8:	8e 83       	std	Y+6, r24	; 0x06
    30ba:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <macConfig+0x6>
    30be:	8f 83       	std	Y+7, r24	; 0x07
    30c0:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <macConfig+0x7>
    30c4:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    30c6:	ce 01       	movw	r24, r28
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    30ce:	0e 94 41 19 	call	0x3282	; 0x3282 <macInitNodes>
}
    30d2:	28 96       	adiw	r28, 0x08	; 8
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	08 95       	ret

000030e6 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    30e6:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    30ea:	0c 94 48 14 	jmp	0x2890	; 0x2890 <radioSetOperatingChannel>

000030ee <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    30ee:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <associationTimer>
    30f2:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <macTimerEnd>
    30f6:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <macConfig+0x8>
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	89 27       	eor	r24, r25
    30fe:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <appAssociateConfirm>

00003102 <macAssociate>:
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	ec 01       	movw	r28, r24
    3108:	86 2f       	mov	r24, r22
    310a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <macSetOperatingChannel>
    310e:	ea eb       	ldi	r30, 0xBA	; 186
    3110:	fa e0       	ldi	r31, 0x0A	; 10
    3112:	83 e6       	ldi	r24, 0x63	; 99
    3114:	98 ec       	ldi	r25, 0xC8	; 200
    3116:	92 83       	std	Z+2, r25	; 0x02
    3118:	81 83       	std	Z+1, r24	; 0x01
    311a:	ac e3       	ldi	r26, 0x3C	; 60
    311c:	bb e0       	ldi	r27, 0x0B	; 11
    311e:	1a 96       	adiw	r26, 0x0a	; 10
    3120:	8c 91       	ld	r24, X
    3122:	1a 97       	sbiw	r26, 0x0a	; 10
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	98 0f       	add	r25, r24
    3128:	1a 96       	adiw	r26, 0x0a	; 10
    312a:	9c 93       	st	X, r25
    312c:	1a 97       	sbiw	r26, 0x0a	; 10
    312e:	83 83       	std	Z+3, r24	; 0x03
    3130:	1b 96       	adiw	r26, 0x0b	; 11
    3132:	8d 91       	ld	r24, X+
    3134:	9c 91       	ld	r25, X
    3136:	1c 97       	sbiw	r26, 0x0c	; 12
    3138:	95 83       	std	Z+5, r25	; 0x05
    313a:	84 83       	std	Z+4, r24	; 0x04
    313c:	d7 83       	std	Z+7, r29	; 0x07
    313e:	c6 83       	std	Z+6, r28	; 0x06
    3140:	8c 91       	ld	r24, X
    3142:	80 87       	std	Z+8, r24	; 0x08
    3144:	11 96       	adiw	r26, 0x01	; 1
    3146:	8c 91       	ld	r24, X
    3148:	11 97       	sbiw	r26, 0x01	; 1
    314a:	81 87       	std	Z+9, r24	; 0x09
    314c:	12 96       	adiw	r26, 0x02	; 2
    314e:	8c 91       	ld	r24, X
    3150:	12 97       	sbiw	r26, 0x02	; 2
    3152:	82 87       	std	Z+10, r24	; 0x0a
    3154:	13 96       	adiw	r26, 0x03	; 3
    3156:	8c 91       	ld	r24, X
    3158:	13 97       	sbiw	r26, 0x03	; 3
    315a:	83 87       	std	Z+11, r24	; 0x0b
    315c:	14 96       	adiw	r26, 0x04	; 4
    315e:	8c 91       	ld	r24, X
    3160:	14 97       	sbiw	r26, 0x04	; 4
    3162:	84 87       	std	Z+12, r24	; 0x0c
    3164:	15 96       	adiw	r26, 0x05	; 5
    3166:	8c 91       	ld	r24, X
    3168:	15 97       	sbiw	r26, 0x05	; 5
    316a:	85 87       	std	Z+13, r24	; 0x0d
    316c:	16 96       	adiw	r26, 0x06	; 6
    316e:	8c 91       	ld	r24, X
    3170:	16 97       	sbiw	r26, 0x06	; 6
    3172:	86 87       	std	Z+14, r24	; 0x0e
    3174:	17 96       	adiw	r26, 0x07	; 7
    3176:	8c 91       	ld	r24, X
    3178:	87 87       	std	Z+15, r24	; 0x0f
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 8b       	std	Z+16, r24	; 0x10
    317e:	d2 8b       	std	Z+18, r29	; 0x12
    3180:	c1 8b       	std	Z+17, r28	; 0x11
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	83 8b       	std	Z+19, r24	; 0x13
    3186:	6b eb       	ldi	r22, 0xBB	; 187
    3188:	7a e0       	ldi	r23, 0x0A	; 10
    318a:	83 e1       	ldi	r24, 0x13	; 19
    318c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <radioSendData>
    3190:	67 e7       	ldi	r22, 0x77	; 119
    3192:	78 e1       	ldi	r23, 0x18	; 24
    3194:	84 e6       	ldi	r24, 0x64	; 100
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    319c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <associationTimer>
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	08 95       	ret

000031a6 <macIsChild>:
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	61 f0       	breq	.+24     	; 0x31c2 <macIsChild+0x1c>
    31aa:	ea e7       	ldi	r30, 0x7A	; 122
    31ac:	f5 e0       	ldi	r31, 0x05	; 5
    31ae:	20 81       	ld	r18, Z
    31b0:	31 81       	ldd	r19, Z+1	; 0x01
    31b2:	28 17       	cp	r18, r24
    31b4:	39 07       	cpc	r19, r25
    31b6:	39 f0       	breq	.+14     	; 0x31c6 <macIsChild+0x20>
    31b8:	33 96       	adiw	r30, 0x03	; 3
    31ba:	26 e0       	ldi	r18, 0x06	; 6
    31bc:	e6 3a       	cpi	r30, 0xA6	; 166
    31be:	f2 07       	cpc	r31, r18
    31c0:	b1 f7       	brne	.-20     	; 0x31ae <macIsChild+0x8>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	08 95       	ret
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	08 95       	ret

000031ca <macAddChild>:
    31ca:	ea e7       	ldi	r30, 0x7A	; 122
    31cc:	f5 e0       	ldi	r31, 0x05	; 5
    31ce:	df 01       	movw	r26, r30
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	4d 91       	ld	r20, X+
    31d6:	5c 91       	ld	r21, X
    31d8:	11 97       	sbiw	r26, 0x01	; 1
    31da:	48 17       	cp	r20, r24
    31dc:	59 07       	cpc	r21, r25
    31de:	69 f4       	brne	.+26     	; 0x31fa <macAddChild+0x30>
    31e0:	f9 01       	movw	r30, r18
    31e2:	ee 0f       	add	r30, r30
    31e4:	ff 1f       	adc	r31, r31
    31e6:	2e 0f       	add	r18, r30
    31e8:	3f 1f       	adc	r19, r31
    31ea:	f9 01       	movw	r30, r18
    31ec:	e4 58       	subi	r30, 0x84	; 132
    31ee:	fa 4f       	sbci	r31, 0xFA	; 250
    31f0:	80 81       	ld	r24, Z
    31f2:	8e 7f       	andi	r24, 0xFE	; 254
    31f4:	8d 7f       	andi	r24, 0xFD	; 253
    31f6:	80 83       	st	Z, r24
    31f8:	08 95       	ret
    31fa:	2f 5f       	subi	r18, 0xFF	; 255
    31fc:	3f 4f       	sbci	r19, 0xFF	; 255
    31fe:	13 96       	adiw	r26, 0x03	; 3
    3200:	24 36       	cpi	r18, 0x64	; 100
    3202:	31 05       	cpc	r19, r1
    3204:	39 f7       	brne	.-50     	; 0x31d4 <macAddChild+0xa>
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	42 2f       	mov	r20, r18
    320c:	60 81       	ld	r22, Z
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	67 2b       	or	r22, r23
    3212:	a9 f4       	brne	.+42     	; 0x323e <macAddChild+0x74>
    3214:	f9 01       	movw	r30, r18
    3216:	ee 0f       	add	r30, r30
    3218:	ff 1f       	adc	r31, r31
    321a:	2e 0f       	add	r18, r30
    321c:	3f 1f       	adc	r19, r31
    321e:	f9 01       	movw	r30, r18
    3220:	e6 58       	subi	r30, 0x86	; 134
    3222:	fa 4f       	sbci	r31, 0xFA	; 250
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
    3228:	f9 01       	movw	r30, r18
    322a:	e4 58       	subi	r30, 0x84	; 132
    322c:	fa 4f       	sbci	r31, 0xFA	; 250
    322e:	90 81       	ld	r25, Z
    3230:	9e 7f       	andi	r25, 0xFE	; 254
    3232:	9d 7f       	andi	r25, 0xFD	; 253
    3234:	90 83       	st	Z, r25
    3236:	84 2f       	mov	r24, r20
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <appChildAssociated>
    323e:	2f 5f       	subi	r18, 0xFF	; 255
    3240:	3f 4f       	sbci	r19, 0xFF	; 255
    3242:	33 96       	adiw	r30, 0x03	; 3
    3244:	24 36       	cpi	r18, 0x64	; 100
    3246:	31 05       	cpc	r19, r1
    3248:	01 f7       	brne	.-64     	; 0x320a <macAddChild+0x40>
    324a:	08 95       	ret

0000324c <macRemoveChild>:
    324c:	ea e7       	ldi	r30, 0x7A	; 122
    324e:	f5 e0       	ldi	r31, 0x05	; 5
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 81       	ld	r20, Z
    3256:	51 81       	ldd	r21, Z+1	; 0x01
    3258:	48 17       	cp	r20, r24
    325a:	59 07       	cpc	r21, r25
    325c:	59 f4       	brne	.+22     	; 0x3274 <macRemoveChild+0x28>
    325e:	f9 01       	movw	r30, r18
    3260:	ee 0f       	add	r30, r30
    3262:	ff 1f       	adc	r31, r31
    3264:	2e 0f       	add	r18, r30
    3266:	3f 1f       	adc	r19, r31
    3268:	f9 01       	movw	r30, r18
    326a:	e6 58       	subi	r30, 0x86	; 134
    326c:	fa 4f       	sbci	r31, 0xFA	; 250
    326e:	11 82       	std	Z+1, r1	; 0x01
    3270:	10 82       	st	Z, r1
    3272:	08 95       	ret
    3274:	2f 5f       	subi	r18, 0xFF	; 255
    3276:	3f 4f       	sbci	r19, 0xFF	; 255
    3278:	33 96       	adiw	r30, 0x03	; 3
    327a:	24 36       	cpi	r18, 0x64	; 100
    327c:	31 05       	cpc	r19, r1
    327e:	51 f7       	brne	.-44     	; 0x3254 <macRemoveChild+0x8>
    3280:	08 95       	ret

00003282 <macInitNodes>:
    3282:	08 95       	ret

00003284 <macWakeChildNode>:
    3284:	08 95       	ret

00003286 <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    3286:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    3288:	95 85       	ldd	r25, Z+13	; 0x0d
    328a:	9f 77       	andi	r25, 0x7F	; 127
    328c:	95 87       	std	Z+13, r25	; 0x0d
    328e:	08 95       	ret

00003290 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    3290:	ea eb       	ldi	r30, 0xBA	; 186
    3292:	fa e0       	ldi	r31, 0x0A	; 10
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e8       	ldi	r25, 0x80	; 128
    3298:	92 83       	std	Z+2, r25	; 0x02
    329a:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    329c:	ac e3       	ldi	r26, 0x3C	; 60
    329e:	bb e0       	ldi	r27, 0x0B	; 11
    32a0:	19 96       	adiw	r26, 0x09	; 9
    32a2:	8c 91       	ld	r24, X
    32a4:	19 97       	sbiw	r26, 0x09	; 9
    32a6:	91 e0       	ldi	r25, 0x01	; 1
    32a8:	98 0f       	add	r25, r24
    32aa:	19 96       	adiw	r26, 0x09	; 9
    32ac:	9c 93       	st	X, r25
    32ae:	19 97       	sbiw	r26, 0x09	; 9
    32b0:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    32b2:	1b 96       	adiw	r26, 0x0b	; 11
    32b4:	8d 91       	ld	r24, X+
    32b6:	9c 91       	ld	r25, X
    32b8:	1c 97       	sbiw	r26, 0x0c	; 12
    32ba:	95 83       	std	Z+5, r25	; 0x05
    32bc:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    32be:	1d 96       	adiw	r26, 0x0d	; 13
    32c0:	8d 91       	ld	r24, X+
    32c2:	9c 91       	ld	r25, X
    32c4:	1e 97       	sbiw	r26, 0x0e	; 14
    32c6:	97 83       	std	Z+7, r25	; 0x07
    32c8:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    32ca:	8f ef       	ldi	r24, 0xFF	; 255
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	91 87       	std	Z+9, r25	; 0x09
    32d0:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    32d2:	86 e0       	ldi	r24, 0x06	; 6
    32d4:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    32d6:	53 96       	adiw	r26, 0x13	; 19
    32d8:	8c 91       	ld	r24, X
    32da:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    32dc:	6b eb       	ldi	r22, 0xBB	; 187
    32de:	7a e0       	ldi	r23, 0x0A	; 10
    32e0:	8b e0       	ldi	r24, 0x0B	; 11
    32e2:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <radioSendData>

000032e6 <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    32e6:	6b eb       	ldi	r22, 0xBB	; 187
    32e8:	7a e0       	ldi	r23, 0x0A	; 10
    32ea:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <mac_buffer_tx>
    32ee:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <radioSendData>

000032f2 <macDataRequestInt>:
    32f2:	ef 92       	push	r14
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	e0 91 49 0b 	lds	r30, 0x0B49	; 0x800b49 <macConfig+0xd>
    3302:	f0 91 4a 0b 	lds	r31, 0x0B4A	; 0x800b4a <macConfig+0xe>
    3306:	8e 17       	cp	r24, r30
    3308:	9f 07       	cpc	r25, r31
    330a:	09 f4       	brne	.+2      	; 0x330e <macDataRequestInt+0x1c>
    330c:	6e c0       	rjmp	.+220    	; 0x33ea <macDataRequestInt+0xf8>
    330e:	8f 3f       	cpi	r24, 0xFF	; 255
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	93 07       	cpc	r25, r19
    3314:	09 f4       	brne	.+2      	; 0x3318 <macDataRequestInt+0x26>
    3316:	69 c0       	rjmp	.+210    	; 0x33ea <macDataRequestInt+0xf8>
    3318:	30 91 44 0b 	lds	r19, 0x0B44	; 0x800b44 <macConfig+0x8>
    331c:	33 23       	and	r19, r19
    331e:	09 f4       	brne	.+2      	; 0x3322 <macDataRequestInt+0x30>
    3320:	64 c0       	rjmp	.+200    	; 0x33ea <macDataRequestInt+0xf8>
    3322:	c2 2f       	mov	r28, r18
    3324:	7a 01       	movw	r14, r20
    3326:	d6 2f       	mov	r29, r22
    3328:	8c 01       	movw	r16, r24
    332a:	81 e6       	ldi	r24, 0x61	; 97
    332c:	98 e8       	ldi	r25, 0x88	; 136
    332e:	90 93 bc 0a 	sts	0x0ABC, r25	; 0x800abc <mac_buffer_tx+0x2>
    3332:	80 93 bb 0a 	sts	0x0ABB, r24	; 0x800abb <mac_buffer_tx+0x1>
    3336:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0xa>
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	98 0f       	add	r25, r24
    333e:	90 93 46 0b 	sts	0x0B46, r25	; 0x800b46 <macConfig+0xa>
    3342:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <mac_buffer_tx+0x3>
    3346:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <macConfig+0xb>
    334a:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <macConfig+0xc>
    334e:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <mac_buffer_tx+0x5>
    3352:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <mac_buffer_tx+0x4>
    3356:	f0 93 c3 0a 	sts	0x0AC3, r31	; 0x800ac3 <mac_buffer_tx+0x9>
    335a:	e0 93 c2 0a 	sts	0x0AC2, r30	; 0x800ac2 <mac_buffer_tx+0x8>
    335e:	10 93 c5 0a 	sts	0x0AC5, r17	; 0x800ac5 <mac_buffer_tx+0xb>
    3362:	00 93 c4 0a 	sts	0x0AC4, r16	; 0x800ac4 <mac_buffer_tx+0xa>
    3366:	f0 93 c7 0a 	sts	0x0AC7, r31	; 0x800ac7 <mac_buffer_tx+0xd>
    336a:	e0 93 c6 0a 	sts	0x0AC6, r30	; 0x800ac6 <mac_buffer_tx+0xc>
    336e:	c8 01       	movw	r24, r16
    3370:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <macSendRoutingPacket>
    3374:	c6 30       	cpi	r28, 0x06	; 6
    3376:	29 f4       	brne	.+10     	; 0x3382 <macDataRequestInt+0x90>
    3378:	10 93 c1 0a 	sts	0x0AC1, r17	; 0x800ac1 <mac_buffer_tx+0x7>
    337c:	00 93 c0 0a 	sts	0x0AC0, r16	; 0x800ac0 <mac_buffer_tx+0x6>
    3380:	08 c0       	rjmp	.+16     	; 0x3392 <macDataRequestInt+0xa0>
    3382:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <macConfig+0xf>
    3386:	90 91 4c 0b 	lds	r25, 0x0B4C	; 0x800b4c <macConfig+0x10>
    338a:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <mac_buffer_tx+0x7>
    338e:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x6>
    3392:	c0 93 c8 0a 	sts	0x0AC8, r28	; 0x800ac8 <mac_buffer_tx+0xe>
    3396:	f7 01       	movw	r30, r14
    3398:	29 ec       	ldi	r18, 0xC9	; 201
    339a:	3a e0       	ldi	r19, 0x0A	; 10
    339c:	d9 01       	movw	r26, r18
    339e:	8a 2f       	mov	r24, r26
    33a0:	82 1b       	sub	r24, r18
    33a2:	8d 17       	cp	r24, r29
    33a4:	18 f4       	brcc	.+6      	; 0x33ac <macDataRequestInt+0xba>
    33a6:	81 91       	ld	r24, Z+
    33a8:	8d 93       	st	X+, r24
    33aa:	f9 cf       	rjmp	.-14     	; 0x339e <macDataRequestInt+0xac>
    33ac:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <mac_buffer_tx+0x6>
    33b0:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <mac_buffer_tx+0x7>
    33b4:	20 91 49 0b 	lds	r18, 0x0B49	; 0x800b49 <macConfig+0xd>
    33b8:	30 91 4a 0b 	lds	r19, 0x0B4A	; 0x800b4a <macConfig+0xe>
    33bc:	82 17       	cp	r24, r18
    33be:	93 07       	cpc	r25, r19
    33c0:	a1 f0       	breq	.+40     	; 0x33ea <macDataRequestInt+0xf8>
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	91 f0       	breq	.+36     	; 0x33ea <macDataRequestInt+0xf8>
    33c6:	d2 5f       	subi	r29, 0xF2	; 242
    33c8:	d0 93 ba 0a 	sts	0x0ABA, r29	; 0x800aba <mac_buffer_tx>
    33cc:	c6 50       	subi	r28, 0x06	; 6
    33ce:	c2 30       	cpi	r28, 0x02	; 2
    33d0:	18 f0       	brcs	.+6      	; 0x33d8 <macDataRequestInt+0xe6>
    33d2:	87 e0       	ldi	r24, 0x07	; 7
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <macDataRequestInt+0xea>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	63 e7       	ldi	r22, 0x73	; 115
    33de:	79 e1       	ldi	r23, 0x19	; 25
    33e0:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	80 93 53 0b 	sts	0x0B53, r24	; 0x800b53 <macConfig+0x17>
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	ff 90       	pop	r15
    33f4:	ef 90       	pop	r14
    33f6:	08 95       	ret

000033f8 <macDataRequest>:
    33f8:	21 e0       	ldi	r18, 0x01	; 1
    33fa:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <macDataRequestInt>

000033fe <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    33fe:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xe>
    3402:	8f 77       	andi	r24, 0x7F	; 127
    3404:	83 30       	cpi	r24, 0x03	; 3
    3406:	29 f1       	breq	.+74     	; 0x3452 <macDataIndication+0x54>
    3408:	28 f4       	brcc	.+10     	; 0x3414 <macDataIndication+0x16>
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	41 f0       	breq	.+16     	; 0x341e <macDataIndication+0x20>
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	d1 f0       	breq	.+52     	; 0x3446 <macDataIndication+0x48>
    3412:	08 95       	ret
    3414:	84 30       	cpi	r24, 0x04	; 4
    3416:	19 f1       	breq	.+70     	; 0x345e <macDataIndication+0x60>
    3418:	86 30       	cpi	r24, 0x06	; 6
    341a:	19 f0       	breq	.+6      	; 0x3422 <macDataIndication+0x24>
    341c:	08 95       	ret
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    341e:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <appDataIndication>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    3422:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <mac_buffer_rx+0xf>
    3426:	90 91 48 0a 	lds	r25, 0x0A48	; 0x800a48 <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    342a:	40 91 40 0a 	lds	r20, 0x0A40	; 0x800a40 <mac_buffer_rx+0x8>
    342e:	50 91 41 0a 	lds	r21, 0x0A41	; 0x800a41 <mac_buffer_rx+0x9>
    3432:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <macConfig+0xf>
    3436:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <macConfig+0x10>
    343a:	42 17       	cp	r20, r18
    343c:	53 07       	cpc	r21, r19
    343e:	a9 f4       	brne	.+42     	; 0x346a <macDataIndication+0x6c>
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    3440:	99 27       	eor	r25, r25
    3442:	0c 94 42 19 	jmp	0x3284	; 0x3284 <macWakeChildNode>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    3446:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <mac_buffer_rx+0xc>
    344a:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <mac_buffer_rx+0xd>
    344e:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <appPingReq>
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    3452:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <mac_buffer_rx+0xc>
    3456:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <mac_buffer_rx+0xd>
    345a:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <appPingRsp>
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    345e:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <mac_buffer_rx+0xf>
    3462:	90 91 48 0a 	lds	r25, 0x0A48	; 0x800a48 <mac_buffer_rx+0x10>
    3466:	0c 94 26 19 	jmp	0x324c	; 0x324c <macRemoveChild>
    346a:	08 95       	ret

0000346c <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	60 97       	sbiw	r28, 0x10	; 16
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    3484:	81 e6       	ldi	r24, 0x61	; 97
    3486:	98 e8       	ldi	r25, 0x88	; 136
    3488:	9a 83       	std	Y+2, r25	; 0x02
    348a:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    348c:	0c e3       	ldi	r16, 0x3C	; 60
    348e:	1b e0       	ldi	r17, 0x0B	; 11
    3490:	f8 01       	movw	r30, r16
    3492:	82 85       	ldd	r24, Z+10	; 0x0a
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	98 0f       	add	r25, r24
    3498:	92 87       	std	Z+10, r25	; 0x0a
    349a:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    349c:	83 85       	ldd	r24, Z+11	; 0x0b
    349e:	94 85       	ldd	r25, Z+12	; 0x0c
    34a0:	9d 83       	std	Y+5, r25	; 0x05
    34a2:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    34a4:	85 85       	ldd	r24, Z+13	; 0x0d
    34a6:	96 85       	ldd	r25, Z+14	; 0x0e
    34a8:	99 87       	std	Y+9, r25	; 0x09
    34aa:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    34ac:	9d 87       	std	Y+13, r25	; 0x0d
    34ae:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    34b0:	80 91 a9 06 	lds	r24, 0x06A9	; 0x8006a9 <pingAddr>
    34b4:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <pingAddr+0x1>
    34b8:	9b 87       	std	Y+11, r25	; 0x0b
    34ba:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    34bc:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pingType>
    34c0:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    34c2:	0e 94 3c 14 	call	0x2878	; 0x2878 <radioGetSavedRssiValue>
    34c6:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    34c8:	0e 94 45 14 	call	0x288a	; 0x288a <radioGetSavedLqiValue>
    34cc:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    34ce:	f8 01       	movw	r30, r16
    34d0:	87 85       	ldd	r24, Z+15	; 0x0f
    34d2:	90 89       	ldd	r25, Z+16	; 0x10
    34d4:	9f 83       	std	Y+7, r25	; 0x07
    34d6:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    34d8:	be 01       	movw	r22, r28
    34da:	6f 5f       	subi	r22, 0xFF	; 255
    34dc:	7f 4f       	sbci	r23, 0xFF	; 255
    34de:	80 e1       	ldi	r24, 0x10	; 16
    34e0:	0e 94 31 16 	call	0x2c62	; 0x2c62 <radioSendData>
}
    34e4:	60 96       	adiw	r28, 0x10	; 16
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    34fa:	20 91 49 0b 	lds	r18, 0x0B49	; 0x800b49 <macConfig+0xd>
    34fe:	30 91 4a 0b 	lds	r19, 0x0B4A	; 0x800b4a <macConfig+0xe>
    3502:	62 17       	cp	r22, r18
    3504:	73 07       	cpc	r23, r19
    3506:	91 f0       	breq	.+36     	; 0x352c <macPing+0x32>
        // Don't send to self
        return;

    if (!macConfig.associated)
    3508:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <macConfig+0x8>
    350c:	99 23       	and	r25, r25
    350e:	71 f0       	breq	.+28     	; 0x352c <macPing+0x32>
        // Broadcast addr
        return;

    pingAddr = addr;
    3510:	70 93 aa 06 	sts	0x06AA, r23	; 0x8006aa <pingAddr+0x1>
    3514:	60 93 a9 06 	sts	0x06A9, r22	; 0x8006a9 <pingAddr>
    pingType = pingTypeArg;
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pingType+0x1>
    351e:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    3522:	0e 94 36 1a 	call	0x346c	; 0x346c <mp>
        macConfig.busy = true;
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	80 93 53 0b 	sts	0x0B53, r24	; 0x800b53 <macConfig+0x17>
    352c:	08 95       	ret

0000352e <mac_event_pending>:

    @return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
    u8 head = event_queue.head;
    352e:	20 91 55 0b 	lds	r18, 0x0B55	; 0x800b55 <event_queue>
    return (head != event_queue.tail);
    3532:	90 91 56 0b 	lds	r25, 0x0B56	; 0x800b56 <event_queue+0x1>
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	29 13       	cpse	r18, r25
    353a:	01 c0       	rjmp	.+2      	; 0x353e <mac_event_pending+0x10>
    353c:	80 e0       	ldi	r24, 0x00	; 0
}
    353e:	08 95       	ret

00003540 <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
*/
void mac_put_event(event_object_t *object)
{
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	ec 01       	movw	r28, r24
    u8 newhead = event_queue.head;
    3546:	40 91 55 0b 	lds	r20, 0x0B55	; 0x800b55 <event_queue>

    if ((newhead + 1) % MAX_EVENTS == event_queue.tail)
    354a:	24 2f       	mov	r18, r20
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	e0 91 56 0b 	lds	r30, 0x0B56	; 0x800b56 <event_queue+0x1>
    3552:	c9 01       	movw	r24, r18
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	6e e1       	ldi	r22, 0x1E	; 30
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <__divmodhi4>
    355e:	6e 2f       	mov	r22, r30
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	86 17       	cp	r24, r22
    3564:	97 07       	cpc	r25, r23
    3566:	a9 f0       	breq	.+42     	; 0x3592 <mac_put_event+0x52>
        return;

    //    newhead = event_queue.head;

    // store in queue
    event_queue.event_object[newhead] = *object;
    3568:	f9 01       	movw	r30, r18
    356a:	ee 0f       	add	r30, r30
    356c:	ff 1f       	adc	r31, r31
    356e:	2e 0f       	add	r18, r30
    3570:	3f 1f       	adc	r19, r31
    3572:	f9 01       	movw	r30, r18
    3574:	eb 5a       	subi	r30, 0xAB	; 171
    3576:	f4 4f       	sbci	r31, 0xF4	; 244
    3578:	88 81       	ld	r24, Y
    357a:	99 81       	ldd	r25, Y+1	; 0x01
    357c:	aa 81       	ldd	r26, Y+2	; 0x02
    357e:	82 83       	std	Z+2, r24	; 0x02
    3580:	93 83       	std	Z+3, r25	; 0x03
    3582:	a4 83       	std	Z+4, r26	; 0x04

    // calculate new head index
    newhead++;
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	84 0f       	add	r24, r20
    if (newhead >= MAX_EVENTS)
    3588:	8e 31       	cpi	r24, 0x1E	; 30
    358a:	08 f0       	brcs	.+2      	; 0x358e <mac_put_event+0x4e>
        newhead = 0;
    358c:	80 e0       	ldi	r24, 0x00	; 0
    event_queue.head = newhead;
    358e:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <event_queue>
}
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	08 95       	ret

00003598 <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
*/
event_object_t * mac_get_event(void)
{
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	1f 92       	push	r1
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    event_object_t *object = NULL;
    volatile u8 newtail;

    newtail = event_queue.tail;
    35a2:	80 91 56 0b 	lds	r24, 0x0B56	; 0x800b56 <event_queue+0x1>
    35a6:	89 83       	std	Y+1, r24	; 0x01

    object = &(event_queue.event_object[newtail]);
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	9c 01       	movw	r18, r24
    35ae:	22 0f       	add	r18, r18
    35b0:	33 1f       	adc	r19, r19
    35b2:	82 0f       	add	r24, r18
    35b4:	93 1f       	adc	r25, r19
    35b6:	89 5a       	subi	r24, 0xA9	; 169
    35b8:	94 4f       	sbci	r25, 0xF4	; 244

    // calculate new tail
    newtail++;
    35ba:	29 81       	ldd	r18, Y+1	; 0x01
    35bc:	2f 5f       	subi	r18, 0xFF	; 255
    35be:	29 83       	std	Y+1, r18	; 0x01
    if (newtail >= MAX_EVENTS)
    35c0:	29 81       	ldd	r18, Y+1	; 0x01
    35c2:	2e 31       	cpi	r18, 0x1E	; 30
    35c4:	08 f0       	brcs	.+2      	; 0x35c8 <mac_get_event+0x30>
        newtail = 0;
    35c6:	19 82       	std	Y+1, r1	; 0x01

    event_queue.tail = newtail;
    35c8:	29 81       	ldd	r18, Y+1	; 0x01
    35ca:	20 93 56 0b 	sts	0x0B56, r18	; 0x800b56 <event_queue+0x1>

    return(object);
}
    35ce:	0f 90       	pop	r0
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	08 95       	ret

000035d6 <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
*/
void macTask(void)
{
    35d6:	cf 93       	push	r28
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    35d8:	c1 e0       	ldi	r28, 0x01	; 1
void macTask(void)
{
    event_object_t *event;

    event = 0;
    while(mac_event_pending())
    35da:	0e 94 97 1a 	call	0x352e	; 0x352e <mac_event_pending>
    35de:	88 23       	and	r24, r24
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <macTask+0xe>
    35e2:	81 c0       	rjmp	.+258    	; 0x36e6 <macTask+0x110>
    {
        event = mac_get_event();
    35e4:	0e 94 cc 1a 	call	0x3598	; 0x3598 <mac_get_event>
        switch (event->event)
    35e8:	dc 01       	movw	r26, r24
    35ea:	ec 91       	ld	r30, X
    35ec:	4e 2f       	mov	r20, r30
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	fa 01       	movw	r30, r20
    35f2:	70 97       	sbiw	r30, 0x10	; 16
    35f4:	ea 30       	cpi	r30, 0x0A	; 10
    35f6:	f1 05       	cpc	r31, r1
    35f8:	80 f7       	brcc	.-32     	; 0x35da <macTask+0x4>
    35fa:	e0 57       	subi	r30, 0x70	; 112
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	0c 94 49 2d 	jmp	0x5a92	; 0x5a92 <__tablejump2__>
        {
        case MAC_EVENT_SCAN:
            // A beacon has been received as a result of an active scan.
            // Record the pan descriptor and store it until the scan has
            // completed.
            if (!macConfig.associated)
    3602:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    3606:	81 11       	cpse	r24, r1
    3608:	e8 cf       	rjmp	.-48     	; 0x35da <macTask+0x4>
                mac_logPanDescriptors();
    360a:	0e 94 75 1d 	call	0x3aea	; 0x3aea <mac_logPanDescriptors>
    360e:	e5 cf       	rjmp	.-54     	; 0x35da <macTask+0x4>
            break;
// ETG #if __AVR__ || __AVR32__
#if __AVR__ || __AVR32__
       case MAC_EVENT_TIMER:
           // Timer has expired, just callback the stored function pointer
           ((void (*)(void))event->data)();  // cast data to function pointer
    3610:	dc 01       	movw	r26, r24
    3612:	11 96       	adiw	r26, 0x01	; 1
    3614:	ed 91       	ld	r30, X+
    3616:	fc 91       	ld	r31, X
    3618:	12 97       	sbiw	r26, 0x02	; 2
    361a:	09 95       	icall
           break;
    361c:	de cf       	rjmp	.-68     	; 0x35da <macTask+0x4>
#endif
        case MAC_EVENT_RX:
            if (macConfig.associated)
    361e:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    3622:	88 23       	and	r24, r24
    3624:	d1 f2       	breq	.-76     	; 0x35da <macTask+0x4>
                frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
                frame->originAddr = ntohs_16(frame->originAddr);

                // Wake up
                if (NODETYPE != ENDDEVICE)
                    macChildIsAwake((ftData*)(mac_buffer_rx+1));
    3626:	89 e3       	ldi	r24, 0x39	; 57
    3628:	9a e0       	ldi	r25, 0x0A	; 10
    362a:	0e 94 43 19 	call	0x3286	; 0x3286 <macChildIsAwake>
                // Received a data frame, process it or route it
                if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    362e:	20 91 42 0a 	lds	r18, 0x0A42	; 0x800a42 <mac_buffer_rx+0xa>
    3632:	30 91 43 0a 	lds	r19, 0x0A43	; 0x800a43 <mac_buffer_rx+0xb>
    3636:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <macConfig+0xd>
    363a:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <macConfig+0xe>
    363e:	28 17       	cp	r18, r24
    3640:	39 07       	cpc	r19, r25
    3642:	19 f4       	brne	.+6      	; 0x364a <macTask+0x74>
                    // This data frame is for this node
                    macDataIndication();
    3644:	0e 94 ff 19 	call	0x33fe	; 0x33fe <macDataIndication>
    3648:	c8 cf       	rjmp	.-112    	; 0x35da <macTask+0x4>
                else
                    // Route the packet up/down stream
                    if (NODETYPE != ENDDEVICE)
                        macRouteData();
    364a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <macRouteData>
    364e:	c5 cf       	rjmp	.-118    	; 0x35da <macTask+0x4>
            {
                ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
                frame->panid = ntohs_16(frame->panid);
                
                // Generate and send the beacon.
                if (NODETYPE == ROUTER && macConfig.associated)
    3650:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    3654:	88 23       	and	r24, r24
    3656:	09 f2       	breq	.-126    	; 0x35da <macTask+0x4>
                    macSetAlarm(1, sendBeaconFrame);
    3658:	68 e4       	ldi	r22, 0x48	; 72
    365a:	79 e1       	ldi	r23, 0x19	; 25
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    3664:	ba cf       	rjmp	.-140    	; 0x35da <macTask+0x4>
                break;                
            }
            if (NODETYPE == COORD)
                // Pan Coord has received this request.
                macAssociationResponse();
            if (NODETYPE == ROUTER && macConfig.associated)
    3666:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    366a:	88 23       	and	r24, r24
    366c:	09 f4       	brne	.+2      	; 0x3670 <macTask+0x9a>
    366e:	b5 cf       	rjmp	.-150    	; 0x35da <macTask+0x4>
            {
                // Send this packet along to parent
                macRouteAssociateRequest();
    3670:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <macRouteAssociateRequest>
    3674:	b2 cf       	rjmp	.-156    	; 0x35da <macTask+0x4>
        case MAC_EVENT_ASSOCIATION_RESPONSE:
            // End device has received this response.
            if (NODETYPE != COORD)
            {
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    3676:	80 91 3a 0a 	lds	r24, 0x0A3A	; 0x800a3a <mac_buffer_rx+0x2>
    367a:	8c 38       	cpi	r24, 0x8C	; 140
    367c:	d9 f4       	brne	.+54     	; 0x36b4 <macTask+0xde>
    367e:	80 91 39 0a 	lds	r24, 0x0A39	; 0x800a39 <mac_buffer_rx+0x1>
    3682:	83 36       	cpi	r24, 0x63	; 99
    3684:	b9 f4       	brne	.+46     	; 0x36b4 <macTask+0xde>
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    3686:	c0 93 44 0b 	sts	0x0B44, r28	; 0x800b44 <macConfig+0x8>
                    macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    368a:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xe>
    368e:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <mac_buffer_rx+0xf>
    3692:	90 93 4c 0b 	sts	0x0B4C, r25	; 0x800b4c <macConfig+0x10>
    3696:	80 93 4b 0b 	sts	0x0B4B, r24	; 0x800b4b <macConfig+0xf>
                    macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    369a:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0x11>
    369e:	90 91 4a 0a 	lds	r25, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x12>
    36a2:	90 93 4a 0b 	sts	0x0B4A, r25	; 0x800b4a <macConfig+0xe>
    36a6:	80 93 49 0b 	sts	0x0B49, r24	; 0x800b49 <macConfig+0xd>

                    radioSetShortAddress(macConfig.shortAddress);
    36aa:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <radioSetShortAddress>
                    macAssociationConfirm();
    36ae:	0e 94 77 18 	call	0x30ee	; 0x30ee <macAssociationConfirm>
    36b2:	93 cf       	rjmp	.-218    	; 0x35da <macTask+0x4>
                }
                else
                {
                    // we are indirect, so just send this packet along.
                    if (NODETYPE == ROUTER && macConfig.associated)
    36b4:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    36b8:	88 23       	and	r24, r24
    36ba:	09 f4       	brne	.+2      	; 0x36be <macTask+0xe8>
    36bc:	8e cf       	rjmp	.-228    	; 0x35da <macTask+0x4>
                        frame->srcAddr = ntohs_16(frame->srcAddr);
                        frame->parentAddr = ntohs_16(frame->parentAddr);
                        frame->shortAddr = ntohs_16(frame->shortAddr);
                        frame->macAddr = ntohs_64(frame->macAddr);
                        // Route the packet
                        macRouteAssociateResponse();
    36be:	0e 94 c1 1b 	call	0x3782	; 0x3782 <macRouteAssociateResponse>
    36c2:	8b cf       	rjmp	.-234    	; 0x35da <macTask+0x4>
                }
            }
            break;
        case MAC_EVENT_ROUTE:
            // Routing packet received, forward it
            if (NODETYPE == ROUTER && macConfig.associated)
    36c4:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    36c8:	88 23       	and	r24, r24
    36ca:	09 f4       	brne	.+2      	; 0x36ce <macTask+0xf8>
    36cc:	86 cf       	rjmp	.-244    	; 0x35da <macTask+0x4>
                macForwardRoutingPacket();
    36ce:	0e 94 75 1b 	call	0x36ea	; 0x36ea <macForwardRoutingPacket>
    36d2:	83 cf       	rjmp	.-250    	; 0x35da <macTask+0x4>
            break;
        case MAC_EVENT_ACCESS:
            // Channel access failure
            appPacketSendAccessFail();
    36d4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <appPacketSendAccessFail>
            break;
    36d8:	80 cf       	rjmp	.-256    	; 0x35da <macTask+0x4>
        case MAC_EVENT_NACK:
            // Packet failed to be sent, alert application
            appPacketSendFailed();
    36da:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <appPacketSendFailed>
            break;
    36de:	7d cf       	rjmp	.-262    	; 0x35da <macTask+0x4>
        case MAC_EVENT_ACK:
            // Packet got through, alert application
            appPacketSendSucceed();
    36e0:	0e 94 5d 21 	call	0x42ba	; 0x42ba <appPacketSendSucceed>
            break;
    36e4:	7a cf       	rjmp	.-268    	; 0x35da <macTask+0x4>
        default:
            break;
        }
    }
}
    36e6:	cf 91       	pop	r28
    36e8:	08 95       	ret

000036ea <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    36ea:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <mac_buffer_rx>
    36ee:	92 e8       	ldi	r25, 0x82	; 130
    36f0:	e8 e3       	ldi	r30, 0x38	; 56
    36f2:	fa e0       	ldi	r31, 0x0A	; 10
    36f4:	aa eb       	ldi	r26, 0xBA	; 186
    36f6:	ba e0       	ldi	r27, 0x0A	; 10
    36f8:	01 90       	ld	r0, Z+
    36fa:	0d 92       	st	X+, r0
    36fc:	9a 95       	dec	r25
    36fe:	e1 f7       	brne	.-8      	; 0x36f8 <macForwardRoutingPacket+0xe>
    3700:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <macConfig+0x8>
    3704:	99 23       	and	r25, r25
    3706:	e1 f1       	breq	.+120    	; 0x3780 <macForwardRoutingPacket+0x96>
    3708:	8c 50       	subi	r24, 0x0C	; 12
    370a:	86 95       	lsr	r24
    370c:	e8 2f       	mov	r30, r24
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	ee 0f       	add	r30, r30
    3712:	ff 1f       	adc	r31, r31
    3714:	ed 53       	subi	r30, 0x3D	; 61
    3716:	f5 4f       	sbci	r31, 0xF5	; 245
    3718:	20 81       	ld	r18, Z
    371a:	31 81       	ldd	r19, Z+1	; 0x01
    371c:	30 93 4e 0b 	sts	0x0B4E, r19	; 0x800b4e <macConfig+0x12>
    3720:	20 93 4d 0b 	sts	0x0B4D, r18	; 0x800b4d <macConfig+0x11>
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	60 f1       	brcs	.+88     	; 0x3780 <macForwardRoutingPacket+0x96>
    3728:	81 50       	subi	r24, 0x01	; 1
    372a:	23 e6       	ldi	r18, 0x63	; 99
    372c:	38 e8       	ldi	r19, 0x88	; 136
    372e:	30 93 bc 0a 	sts	0x0ABC, r19	; 0x800abc <mac_buffer_tx+0x2>
    3732:	20 93 bb 0a 	sts	0x0ABB, r18	; 0x800abb <mac_buffer_tx+0x1>
    3736:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <macConfig+0xa>
    373a:	21 e0       	ldi	r18, 0x01	; 1
    373c:	29 0f       	add	r18, r25
    373e:	20 93 46 0b 	sts	0x0B46, r18	; 0x800b46 <macConfig+0xa>
    3742:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <mac_buffer_tx+0x3>
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	fc 01       	movw	r30, r24
    374a:	ee 0f       	add	r30, r30
    374c:	ff 1f       	adc	r31, r31
    374e:	eb 53       	subi	r30, 0x3B	; 59
    3750:	f5 4f       	sbci	r31, 0xF5	; 245
    3752:	20 81       	ld	r18, Z
    3754:	31 81       	ldd	r19, Z+1	; 0x01
    3756:	30 93 c1 0a 	sts	0x0AC1, r19	; 0x800ac1 <mac_buffer_tx+0x7>
    375a:	20 93 c0 0a 	sts	0x0AC0, r18	; 0x800ac0 <mac_buffer_tx+0x6>
    375e:	20 91 49 0b 	lds	r18, 0x0B49	; 0x800b49 <macConfig+0xd>
    3762:	30 91 4a 0b 	lds	r19, 0x0B4A	; 0x800b4a <macConfig+0xe>
    3766:	30 93 c3 0a 	sts	0x0AC3, r19	; 0x800ac3 <mac_buffer_tx+0x9>
    376a:	20 93 c2 0a 	sts	0x0AC2, r18	; 0x800ac2 <mac_buffer_tx+0x8>
    376e:	9b eb       	ldi	r25, 0xBB	; 187
    3770:	90 93 c4 0a 	sts	0x0AC4, r25	; 0x800ac4 <mac_buffer_tx+0xa>
    3774:	8b 5f       	subi	r24, 0xFB	; 251
    3776:	6b eb       	ldi	r22, 0xBB	; 187
    3778:	7a e0       	ldi	r23, 0x0A	; 10
    377a:	88 0f       	add	r24, r24
    377c:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <radioSendData>
    3780:	08 95       	ret

00003782 <macRouteAssociateResponse>:
    3782:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    3786:	88 23       	and	r24, r24
    3788:	09 f4       	brne	.+2      	; 0x378c <macRouteAssociateResponse+0xa>
    378a:	89 c0       	rjmp	.+274    	; 0x389e <macRouteAssociateResponse+0x11c>
    378c:	20 91 43 0a 	lds	r18, 0x0A43	; 0x800a43 <mac_buffer_rx+0xb>
    3790:	30 91 44 0a 	lds	r19, 0x0A44	; 0x800a44 <mac_buffer_rx+0xc>
    3794:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <macConfig+0xd>
    3798:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <macConfig+0xe>
    379c:	28 17       	cp	r18, r24
    379e:	39 07       	cpc	r19, r25
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <macRouteAssociateResponse+0x22>
    37a2:	4b c0       	rjmp	.+150    	; 0x383a <macRouteAssociateResponse+0xb8>
    37a4:	83 e6       	ldi	r24, 0x63	; 99
    37a6:	9c e8       	ldi	r25, 0x8C	; 140
    37a8:	90 93 bb 0a 	sts	0x0ABB, r25	; 0x800abb <mac_buffer_tx+0x1>
    37ac:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <mac_buffer_tx>
    37b0:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0xa>
    37b4:	91 e0       	ldi	r25, 0x01	; 1
    37b6:	98 0f       	add	r25, r24
    37b8:	90 93 46 0b 	sts	0x0B46, r25	; 0x800b46 <macConfig+0xa>
    37bc:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <mac_buffer_tx+0x2>
    37c0:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <macConfig+0xb>
    37c4:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <macConfig+0xc>
    37c8:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <mac_buffer_tx+0x4>
    37cc:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <mac_buffer_tx+0x3>
    37d0:	80 91 45 0a 	lds	r24, 0x0A45	; 0x800a45 <mac_buffer_rx+0xd>
    37d4:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <mac_buffer_tx+0x5>
    37d8:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xe>
    37dc:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x6>
    37e0:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <mac_buffer_rx+0xf>
    37e4:	80 93 c1 0a 	sts	0x0AC1, r24	; 0x800ac1 <mac_buffer_tx+0x7>
    37e8:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <mac_buffer_rx+0x10>
    37ec:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x8>
    37f0:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0x11>
    37f4:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <mac_buffer_tx+0x9>
    37f8:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x12>
    37fc:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <mac_buffer_tx+0xa>
    3800:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x13>
    3804:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <mac_buffer_tx+0xb>
    3808:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <mac_buffer_rx+0x14>
    380c:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <mac_buffer_tx+0xc>
    3810:	30 93 c8 0a 	sts	0x0AC8, r19	; 0x800ac8 <mac_buffer_tx+0xe>
    3814:	20 93 c7 0a 	sts	0x0AC7, r18	; 0x800ac7 <mac_buffer_tx+0xd>
    3818:	82 e0       	ldi	r24, 0x02	; 2
    381a:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <mac_buffer_tx+0xf>
    381e:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <mac_buffer_rx+0x15>
    3822:	90 91 4e 0a 	lds	r25, 0x0A4E	; 0x800a4e <mac_buffer_rx+0x16>
    3826:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <mac_buffer_tx+0x11>
    382a:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <mac_buffer_tx+0x10>
    382e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <macAddChild>
    3832:	6a eb       	ldi	r22, 0xBA	; 186
    3834:	7a e0       	ldi	r23, 0x0A	; 10
    3836:	82 e1       	ldi	r24, 0x12	; 18
    3838:	30 c0       	rjmp	.+96     	; 0x389a <macRouteAssociateResponse+0x118>
    383a:	22 e8       	ldi	r18, 0x82	; 130
    383c:	e8 e3       	ldi	r30, 0x38	; 56
    383e:	fa e0       	ldi	r31, 0x0A	; 10
    3840:	aa eb       	ldi	r26, 0xBA	; 186
    3842:	ba e0       	ldi	r27, 0x0A	; 10
    3844:	01 90       	ld	r0, Z+
    3846:	0d 92       	st	X+, r0
    3848:	2a 95       	dec	r18
    384a:	e1 f7       	brne	.-8      	; 0x3844 <macRouteAssociateResponse+0xc2>
    384c:	20 91 46 0b 	lds	r18, 0x0B46	; 0x800b46 <macConfig+0xa>
    3850:	31 e0       	ldi	r19, 0x01	; 1
    3852:	32 0f       	add	r19, r18
    3854:	30 93 46 0b 	sts	0x0B46, r19	; 0x800b46 <macConfig+0xa>
    3858:	20 93 bd 0a 	sts	0x0ABD, r18	; 0x800abd <mac_buffer_tx+0x3>
    385c:	20 91 4d 0b 	lds	r18, 0x0B4D	; 0x800b4d <macConfig+0x11>
    3860:	30 91 4e 0b 	lds	r19, 0x0B4E	; 0x800b4e <macConfig+0x12>
    3864:	30 93 c1 0a 	sts	0x0AC1, r19	; 0x800ac1 <mac_buffer_tx+0x7>
    3868:	20 93 c0 0a 	sts	0x0AC0, r18	; 0x800ac0 <mac_buffer_tx+0x6>
    386c:	90 93 c3 0a 	sts	0x0AC3, r25	; 0x800ac3 <mac_buffer_tx+0x9>
    3870:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x8>
    3874:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <mac_buffer_tx+0xb>
    3878:	90 91 c6 0a 	lds	r25, 0x0AC6	; 0x800ac6 <mac_buffer_tx+0xc>
    387c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <macIsChild>
    3880:	88 23       	and	r24, r24
    3882:	41 f0       	breq	.+16     	; 0x3894 <macRouteAssociateResponse+0x112>
    3884:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <mac_buffer_tx+0xb>
    3888:	90 91 c6 0a 	lds	r25, 0x0AC6	; 0x800ac6 <mac_buffer_tx+0xc>
    388c:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <mac_buffer_tx+0x7>
    3890:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x6>
    3894:	6b eb       	ldi	r22, 0xBB	; 187
    3896:	7a e0       	ldi	r23, 0x0A	; 10
    3898:	86 e1       	ldi	r24, 0x16	; 22
    389a:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <radioSendData>
    389e:	08 95       	ret

000038a0 <macRouteAssociateRequest>:
    38a0:	cf 93       	push	r28
    38a2:	df 93       	push	r29
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62
    38a8:	65 97       	sbiw	r28, 0x15	; 21
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	de bf       	out	0x3e, r29	; 62
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	cd bf       	out	0x3d, r28	; 61
    38b4:	a0 91 3a 0a 	lds	r26, 0x0A3A	; 0x800a3a <mac_buffer_rx+0x2>
    38b8:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0xa>
    38bc:	e0 91 47 0b 	lds	r30, 0x0B47	; 0x800b47 <macConfig+0xb>
    38c0:	f0 91 48 0b 	lds	r31, 0x0B48	; 0x800b48 <macConfig+0xc>
    38c4:	60 91 4b 0b 	lds	r22, 0x0B4B	; 0x800b4b <macConfig+0xf>
    38c8:	70 91 4c 0b 	lds	r23, 0x0B4C	; 0x800b4c <macConfig+0x10>
    38cc:	40 91 49 0b 	lds	r20, 0x0B49	; 0x800b49 <macConfig+0xd>
    38d0:	50 91 4a 0b 	lds	r21, 0x0B4A	; 0x800b4a <macConfig+0xe>
    38d4:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <mac_buffer_rx+0xd>
    38d8:	20 91 46 0a 	lds	r18, 0x0A46	; 0x800a46 <mac_buffer_rx+0xe>
    38dc:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <mac_buffer_rx+0xf>
    38e0:	a8 3c       	cpi	r26, 0xC8	; 200
    38e2:	81 f5       	brne	.+96     	; 0x3944 <macRouteAssociateRequest+0xa4>
    38e4:	a3 e6       	ldi	r26, 0x63	; 99
    38e6:	b8 e8       	ldi	r27, 0x88	; 136
    38e8:	ba 83       	std	Y+2, r27	; 0x02
    38ea:	a9 83       	std	Y+1, r26	; 0x01
    38ec:	a1 e0       	ldi	r26, 0x01	; 1
    38ee:	a8 0f       	add	r26, r24
    38f0:	a0 93 46 0b 	sts	0x0B46, r26	; 0x800b46 <macConfig+0xa>
    38f4:	8b 83       	std	Y+3, r24	; 0x03
    38f6:	fd 83       	std	Y+5, r31	; 0x05
    38f8:	ec 83       	std	Y+4, r30	; 0x04
    38fa:	7f 83       	std	Y+7, r23	; 0x07
    38fc:	6e 83       	std	Y+6, r22	; 0x06
    38fe:	59 87       	std	Y+9, r21	; 0x09
    3900:	48 87       	std	Y+8, r20	; 0x08
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	8a 87       	std	Y+10, r24	; 0x0a
    3906:	40 91 49 0a 	lds	r20, 0x0A49	; 0x800a49 <mac_buffer_rx+0x11>
    390a:	50 91 4a 0a 	lds	r21, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x12>
    390e:	5c 87       	std	Y+12, r21	; 0x0c
    3910:	4b 87       	std	Y+11, r20	; 0x0b
    3912:	80 91 40 0a 	lds	r24, 0x0A40	; 0x800a40 <mac_buffer_rx+0x8>
    3916:	8d 87       	std	Y+13, r24	; 0x0d
    3918:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <mac_buffer_rx+0x9>
    391c:	8e 87       	std	Y+14, r24	; 0x0e
    391e:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <mac_buffer_rx+0xa>
    3922:	8f 87       	std	Y+15, r24	; 0x0f
    3924:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <mac_buffer_rx+0xb>
    3928:	88 8b       	std	Y+16, r24	; 0x10
    392a:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <mac_buffer_rx+0xc>
    392e:	89 8b       	std	Y+17, r24	; 0x11
    3930:	3a 8b       	std	Y+18, r19	; 0x12
    3932:	2b 8b       	std	Y+19, r18	; 0x13
    3934:	9c 8b       	std	Y+20, r25	; 0x14
    3936:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x13>
    393a:	8d 8b       	std	Y+21, r24	; 0x15
    393c:	be 01       	movw	r22, r28
    393e:	6f 5f       	subi	r22, 0xFF	; 255
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	43 c0       	rjmp	.+134    	; 0x39ca <macRouteAssociateRequest+0x12a>
    3944:	a3 e6       	ldi	r26, 0x63	; 99
    3946:	b8 e8       	ldi	r27, 0x88	; 136
    3948:	b0 93 bb 0a 	sts	0x0ABB, r27	; 0x800abb <mac_buffer_tx+0x1>
    394c:	a0 93 ba 0a 	sts	0x0ABA, r26	; 0x800aba <mac_buffer_tx>
    3950:	a1 e0       	ldi	r26, 0x01	; 1
    3952:	a8 0f       	add	r26, r24
    3954:	a0 93 46 0b 	sts	0x0B46, r26	; 0x800b46 <macConfig+0xa>
    3958:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <mac_buffer_tx+0x2>
    395c:	f0 93 be 0a 	sts	0x0ABE, r31	; 0x800abe <mac_buffer_tx+0x4>
    3960:	e0 93 bd 0a 	sts	0x0ABD, r30	; 0x800abd <mac_buffer_tx+0x3>
    3964:	70 93 c0 0a 	sts	0x0AC0, r23	; 0x800ac0 <mac_buffer_tx+0x6>
    3968:	60 93 bf 0a 	sts	0x0ABF, r22	; 0x800abf <mac_buffer_tx+0x5>
    396c:	50 93 c2 0a 	sts	0x0AC2, r21	; 0x800ac2 <mac_buffer_tx+0x8>
    3970:	40 93 c1 0a 	sts	0x0AC1, r20	; 0x800ac1 <mac_buffer_tx+0x7>
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <mac_buffer_tx+0x9>
    397a:	40 91 43 0a 	lds	r20, 0x0A43	; 0x800a43 <mac_buffer_rx+0xb>
    397e:	50 91 44 0a 	lds	r21, 0x0A44	; 0x800a44 <mac_buffer_rx+0xc>
    3982:	50 93 c5 0a 	sts	0x0AC5, r21	; 0x800ac5 <mac_buffer_tx+0xb>
    3986:	40 93 c4 0a 	sts	0x0AC4, r20	; 0x800ac4 <mac_buffer_tx+0xa>
    398a:	30 93 c6 0a 	sts	0x0AC6, r19	; 0x800ac6 <mac_buffer_tx+0xc>
    398e:	20 93 c7 0a 	sts	0x0AC7, r18	; 0x800ac7 <mac_buffer_tx+0xd>
    3992:	90 93 c8 0a 	sts	0x0AC8, r25	; 0x800ac8 <mac_buffer_tx+0xe>
    3996:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <mac_buffer_rx+0x10>
    399a:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <mac_buffer_tx+0xf>
    399e:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0x11>
    39a2:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <mac_buffer_tx+0x10>
    39a6:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x12>
    39aa:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <mac_buffer_tx+0x11>
    39ae:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x13>
    39b2:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <mac_buffer_tx+0x12>
    39b6:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <mac_buffer_rx+0x14>
    39ba:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <mac_buffer_tx+0x13>
    39be:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <mac_buffer_rx+0x15>
    39c2:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <mac_buffer_tx+0x14>
    39c6:	6a eb       	ldi	r22, 0xBA	; 186
    39c8:	7a e0       	ldi	r23, 0x0A	; 10
    39ca:	85 e1       	ldi	r24, 0x15	; 21
    39cc:	0e 94 31 16 	call	0x2c62	; 0x2c62 <radioSendData>
    39d0:	65 96       	adiw	r28, 0x15	; 21
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	df 91       	pop	r29
    39de:	cf 91       	pop	r28
    39e0:	08 95       	ret

000039e2 <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    39e2:	82 e8       	ldi	r24, 0x82	; 130
    39e4:	e8 e3       	ldi	r30, 0x38	; 56
    39e6:	fa e0       	ldi	r31, 0x0A	; 10
    39e8:	aa eb       	ldi	r26, 0xBA	; 186
    39ea:	ba e0       	ldi	r27, 0x0A	; 10
    39ec:	01 90       	ld	r0, Z+
    39ee:	0d 92       	st	X+, r0
    39f0:	8a 95       	dec	r24
    39f2:	e1 f7       	brne	.-8      	; 0x39ec <macRouteData+0xa>

        Led1_on();
    39f4:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    39f6:	68 e2       	ldi	r22, 0x28	; 40
    39f8:	71 e2       	ldi	r23, 0x21	; 33
    39fa:	8a e0       	ldi	r24, 0x0A	; 10
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    3a02:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <mac_buffer_tx+0xa>
    3a06:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <mac_buffer_tx+0xb>
    3a0a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <macIsChild>
    3a0e:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <macConfig+0xa>
    3a12:	20 91 49 0b 	lds	r18, 0x0B49	; 0x800b49 <macConfig+0xd>
    3a16:	30 91 4a 0b 	lds	r19, 0x0B4A	; 0x800b4a <macConfig+0xe>
    3a1a:	88 23       	and	r24, r24
    3a1c:	59 f0       	breq	.+22     	; 0x3a34 <macRouteData+0x52>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	89 0f       	add	r24, r25
    3a22:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <macConfig+0xa>
    3a26:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    3a2a:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <mac_buffer_tx+0xa>
    3a2e:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <mac_buffer_tx+0xb>
    3a32:	15 c0       	rjmp	.+42     	; 0x3a5e <macRouteData+0x7c>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    3a34:	40 91 4b 0b 	lds	r20, 0x0B4B	; 0x800b4b <macConfig+0xf>
    3a38:	50 91 4c 0b 	lds	r21, 0x0B4C	; 0x800b4c <macConfig+0x10>
    3a3c:	60 91 c2 0a 	lds	r22, 0x0AC2	; 0x800ac2 <mac_buffer_tx+0x8>
    3a40:	70 91 c3 0a 	lds	r23, 0x0AC3	; 0x800ac3 <mac_buffer_tx+0x9>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	89 0f       	add	r24, r25
    3a48:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <macConfig+0xa>
    3a4c:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <mac_buffer_tx+0x3>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    3a50:	64 17       	cp	r22, r20
    3a52:	75 07       	cpc	r23, r21
    3a54:	49 f4       	brne	.+18     	; 0x3a68 <macRouteData+0x86>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.lastRoute;
    3a56:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <macConfig+0x11>
    3a5a:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <macConfig+0x12>
    3a5e:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <mac_buffer_tx+0x7>
    3a62:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x6>
    3a66:	04 c0       	rjmp	.+8      	; 0x3a70 <macRouteData+0x8e>
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.parentShortAddress;
    3a68:	50 93 c1 0a 	sts	0x0AC1, r21	; 0x800ac1 <mac_buffer_tx+0x7>
    3a6c:	40 93 c0 0a 	sts	0x0AC0, r20	; 0x800ac0 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    3a70:	30 93 c3 0a 	sts	0x0AC3, r19	; 0x800ac3 <mac_buffer_tx+0x9>
    3a74:	20 93 c2 0a 	sts	0x0AC2, r18	; 0x800ac2 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    3a78:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <mac_buffer_tx+0x6>
    3a7c:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <mac_buffer_tx+0x7>
    3a80:	01 96       	adiw	r24, 0x01	; 1
    3a82:	39 f0       	breq	.+14     	; 0x3a92 <macRouteData+0xb0>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    3a84:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <mac_buffer_tx>
    3a88:	6b eb       	ldi	r22, 0xBB	; 187
    3a8a:	7a e0       	ldi	r23, 0x0A	; 10
    3a8c:	82 50       	subi	r24, 0x02	; 2
    3a8e:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <radioSendData>
    3a92:	08 95       	ret

00003a94 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	08 95       	ret

00003a98 <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	e8 e3       	ldi	r30, 0x38	; 56
    3a9e:	fa e0       	ldi	r31, 0x0A	; 10
    3aa0:	20 91 b8 0a 	lds	r18, 0x0AB8	; 0x800ab8 <mac_buffer_rx+0x80>
    3aa4:	c1 eb       	ldi	r28, 0xB1	; 177
    3aa6:	db e0       	ldi	r29, 0x0B	; 11
    3aa8:	81 81       	ldd	r24, Z+1	; 0x01
    3aaa:	92 81       	ldd	r25, Z+2	; 0x02
    3aac:	84 e0       	ldi	r24, 0x04	; 4
    3aae:	98 9f       	mul	r25, r24
    3ab0:	81 2d       	mov	r24, r1
    3ab2:	99 27       	eor	r25, r25
    3ab4:	11 24       	eor	r1, r1
    3ab6:	88 83       	st	Y, r24
    3ab8:	84 81       	ldd	r24, Z+4	; 0x04
    3aba:	95 81       	ldd	r25, Z+5	; 0x05
    3abc:	9a 83       	std	Y+2, r25	; 0x02
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	86 81       	ldd	r24, Z+6	; 0x06
    3ac2:	97 81       	ldd	r25, Z+7	; 0x07
    3ac4:	9c 83       	std	Y+4, r25	; 0x04
    3ac6:	8b 83       	std	Y+3, r24	; 0x03
    3ac8:	83 85       	ldd	r24, Z+11	; 0x0b
    3aca:	89 87       	std	Y+9, r24	; 0x09
    3acc:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <macConfig+0x14>
    3ad0:	81 50       	subi	r24, 0x01	; 1
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
    3ad4:	1e 82       	std	Y+6, r1	; 0x06
    3ad6:	2a 87       	std	Y+10, r18	; 0x0a
    3ad8:	0e 94 3c 14 	call	0x2878	; 0x2878 <radioGetSavedRssiValue>
    3adc:	8b 87       	std	Y+11, r24	; 0x0b
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	08 95       	ret

00003ae4 <macIsScanning>:
    3ae4:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <scanInProcess>
    3ae8:	08 95       	ret

00003aea <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    3aea:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    3aec:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    3af0:	40 91 40 0a 	lds	r20, 0x0A40	; 0x800a40 <mac_buffer_rx+0x8>
    3af4:	50 91 41 0a 	lds	r21, 0x0A41	; 0x800a41 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    3af8:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <scanInProcess>
    3afc:	99 23       	and	r25, r25
    3afe:	61 f1       	breq	.+88     	; 0x3b58 <mac_logPanDescriptors+0x6e>
        return;
    if (frame->netID != 6)
    3b00:	90 91 42 0a 	lds	r25, 0x0A42	; 0x800a42 <mac_buffer_rx+0xa>
    3b04:	96 30       	cpi	r25, 0x06	; 6
    3b06:	41 f5       	brne	.+80     	; 0x3b58 <mac_logPanDescriptors+0x6e>
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    3b08:	20 91 b8 0b 	lds	r18, 0x0BB8	; 0x800bb8 <panDescriptor+0x7>
    3b0c:	30 91 b9 0b 	lds	r19, 0x0BB9	; 0x800bb9 <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    3b10:	50 93 b9 0b 	sts	0x0BB9, r21	; 0x800bb9 <panDescriptor+0x8>
    3b14:	40 93 b8 0b 	sts	0x0BB8, r20	; 0x800bb8 <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    3b18:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <panDescriptor+0x8>
    3b1c:	97 ff       	sbrs	r25, 7
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <mac_logPanDescriptors+0x40>
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    3b20:	30 93 b9 0b 	sts	0x0BB9, r19	; 0x800bb9 <panDescriptor+0x8>
    3b24:	20 93 b8 0b 	sts	0x0BB8, r18	; 0x800bb8 <panDescriptor+0x7>
            return;
    3b28:	17 c0       	rjmp	.+46     	; 0x3b58 <mac_logPanDescriptors+0x6e>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    3b2a:	90 91 bb 0b 	lds	r25, 0x0BBB	; 0x800bbb <panDescriptor+0xa>
    3b2e:	98 17       	cp	r25, r24
    3b30:	18 f4       	brcc	.+6      	; 0x3b38 <mac_logPanDescriptors+0x4e>
            {
                store_pandescriptors();
            }
        }
    }
}
    3b32:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    3b34:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <store_pandescriptors>
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    3b38:	98 13       	cpse	r25, r24
    3b3a:	0e c0       	rjmp	.+28     	; 0x3b58 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    3b3c:	90 91 ba 0b 	lds	r25, 0x0BBA	; 0x800bba <panDescriptor+0x9>
    3b40:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <mac_buffer_rx+0xb>
    3b44:	89 17       	cp	r24, r25
    3b46:	a8 f3       	brcs	.-22     	; 0x3b32 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    3b48:	98 13       	cpse	r25, r24
    3b4a:	06 c0       	rjmp	.+12     	; 0x3b58 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    3b4c:	c0 91 bc 0b 	lds	r28, 0x0BBC	; 0x800bbc <panDescriptor+0xb>
    3b50:	0e 94 3c 14 	call	0x2878	; 0x2878 <radioGetSavedRssiValue>
    3b54:	c8 17       	cp	r28, r24
    3b56:	68 f3       	brcs	.-38     	; 0x3b32 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
        }
    }
}
    3b58:	cf 91       	pop	r28
    3b5a:	08 95       	ret

00003b5c <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    3b5c:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    3b5e:	c1 e0       	ldi	r28, 0x01	; 1
    3b60:	80 91 b6 0b 	lds	r24, 0x0BB6	; 0x800bb6 <panDescriptor+0x5>
    3b64:	8f 3f       	cpi	r24, 0xFF	; 255
    3b66:	11 f4       	brne	.+4      	; 0x3b6c <mac_scanConfirm+0x10>
    3b68:	c0 e0       	ldi	r28, 0x00	; 0
    3b6a:	1b c0       	rjmp	.+54     	; 0x3ba2 <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    3b6c:	80 91 b2 0b 	lds	r24, 0x0BB2	; 0x800bb2 <panDescriptor+0x1>
    3b70:	90 91 b3 0b 	lds	r25, 0x0BB3	; 0x800bb3 <panDescriptor+0x2>
    3b74:	90 93 48 0b 	sts	0x0B48, r25	; 0x800b48 <macConfig+0xc>
    3b78:	80 93 47 0b 	sts	0x0B47, r24	; 0x800b47 <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    3b7c:	20 91 b4 0b 	lds	r18, 0x0BB4	; 0x800bb4 <panDescriptor+0x3>
    3b80:	30 91 b5 0b 	lds	r19, 0x0BB5	; 0x800bb5 <panDescriptor+0x4>
    3b84:	30 93 4c 0b 	sts	0x0B4C, r19	; 0x800b4c <macConfig+0x10>
    3b88:	20 93 4b 0b 	sts	0x0B4B, r18	; 0x800b4b <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    3b8c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    3b90:	80 91 b6 0b 	lds	r24, 0x0BB6	; 0x800bb6 <panDescriptor+0x5>
    3b94:	0e 94 73 18 	call	0x30e6	; 0x30e6 <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    3b98:	90 91 ba 0b 	lds	r25, 0x0BBA	; 0x800bba <panDescriptor+0x9>
    3b9c:	9f 5f       	subi	r25, 0xFF	; 255
    3b9e:	90 93 4f 0b 	sts	0x0B4F, r25	; 0x800b4f <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    3ba2:	8c 2f       	mov	r24, r28
}
    3ba4:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    3ba6:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <appScanConfirm>

00003baa <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    3baa:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <macConfig+0x14>
    3bae:	8f 3f       	cpi	r24, 0xFF	; 255
    3bb0:	b1 f4       	brne	.+44     	; 0x3bde <macScan+0x34>
    {
        scanInProcess = true;
    3bb2:	91 e0       	ldi	r25, 0x01	; 1
    3bb4:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    3bb8:	96 e1       	ldi	r25, 0x16	; 22
    3bba:	e1 eb       	ldi	r30, 0xB1	; 177
    3bbc:	fb e0       	ldi	r31, 0x0B	; 11
    3bbe:	df 01       	movw	r26, r30
    3bc0:	1d 92       	st	X+, r1
    3bc2:	9a 95       	dec	r25
    3bc4:	e9 f7       	brne	.-6      	; 0x3bc0 <macScan+0x16>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    3bc6:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    3bca:	8b e0       	ldi	r24, 0x0B	; 11
    3bcc:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    3bd0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <scanChannel>
    3bd4:	80 38       	cpi	r24, 0x80	; 128
    3bd6:	a9 f0       	breq	.+42     	; 0x3c02 <macScan+0x58>
            macConfig.currentChannel = scanChannel;
    3bd8:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <macConfig+0x14>
    3bdc:	12 c0       	rjmp	.+36     	; 0x3c02 <macScan+0x58>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    3bde:	8b 31       	cpi	r24, 0x1B	; 27
    3be0:	48 f4       	brcc	.+18     	; 0x3bf4 <macScan+0x4a>
       macConfig.currentChannel == scanChannel + 1)
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <scanChannel>
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	2f 5f       	subi	r18, 0xFF	; 255
    3bec:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    3bee:	82 17       	cp	r24, r18
    3bf0:	93 07       	cpc	r25, r19
    3bf2:	39 f4       	brne	.+14     	; 0x3c02 <macScan+0x58>
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    3bf4:	10 92 ab 06 	sts	0x06AB, r1	; 0x8006ab <scanInProcess>
            macConfig.currentChannel = 0xFF;
    3bf8:	8f ef       	ldi	r24, 0xFF	; 255
    3bfa:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <macConfig+0x14>

            mac_scanConfirm();
    3bfe:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <mac_scanConfirm>
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    3c02:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <macConfig+0x14>
    3c06:	0e 94 73 18 	call	0x30e6	; 0x30e6 <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	98 e0       	ldi	r25, 0x08	; 8
    3c0e:	90 93 bc 0a 	sts	0x0ABC, r25	; 0x800abc <mac_buffer_tx+0x2>
    3c12:	80 93 bb 0a 	sts	0x0ABB, r24	; 0x800abb <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    3c16:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <macConfig+0x9>
    3c1a:	91 e0       	ldi	r25, 0x01	; 1
    3c1c:	98 0f       	add	r25, r24
    3c1e:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <macConfig+0x9>
    3c22:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    3c26:	8f ef       	ldi	r24, 0xFF	; 255
    3c28:	9f ef       	ldi	r25, 0xFF	; 255
    3c2a:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <mac_buffer_tx+0x5>
    3c2e:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    3c32:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <mac_buffer_tx+0x7>
    3c36:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    3c3a:	87 e0       	ldi	r24, 0x07	; 7
    3c3c:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    3c40:	6b eb       	ldi	r22, 0xBB	; 187
    3c42:	7a e0       	ldi	r23, 0x0A	; 10
    3c44:	88 e0       	ldi	r24, 0x08	; 8
    3c46:	0e 94 31 16 	call	0x2c62	; 0x2c62 <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    3c4a:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <macConfig+0x14>
    3c4e:	8f 5f       	subi	r24, 0xFF	; 255
    3c50:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    3c54:	65 ed       	ldi	r22, 0xD5	; 213
    3c56:	7d e1       	ldi	r23, 0x1D	; 29
    3c58:	84 e1       	ldi	r24, 0x14	; 20
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <macSetAlarm>

00003c60 <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    3c60:	08 95       	ret

00003c62 <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    3c62:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <currentTimerID.3609>
    3c66:	8f 5f       	subi	r24, 0xFF	; 255
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <getUniqueID+0xa>
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	91 e0       	ldi	r25, 0x01	; 1
    3c72:	f9 01       	movw	r30, r18
    3c74:	ec 5e       	subi	r30, 0xEC	; 236
    3c76:	f8 4f       	sbci	r31, 0xF8	; 248
    3c78:	42 81       	ldd	r20, Z+2	; 0x02
    3c7a:	48 13       	cpse	r20, r24
    3c7c:	01 c0       	rjmp	.+2      	; 0x3c80 <getUniqueID+0x1e>
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	2b 5f       	subi	r18, 0xFB	; 251
    3c82:	3f 4f       	sbci	r19, 0xFF	; 255
    3c84:	24 36       	cpi	r18, 0x64	; 100
    3c86:	31 05       	cpc	r19, r1
    3c88:	a1 f7       	brne	.-24     	; 0x3c72 <getUniqueID+0x10>
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	f9 01       	movw	r30, r18
    3c90:	e0 55       	subi	r30, 0x50	; 80
    3c92:	f9 4f       	sbci	r31, 0xF9	; 249
    3c94:	42 81       	ldd	r20, Z+2	; 0x02
    3c96:	48 13       	cpse	r20, r24
    3c98:	01 c0       	rjmp	.+2      	; 0x3c9c <getUniqueID+0x3a>
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	2b 5f       	subi	r18, 0xFB	; 251
    3c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca0:	24 36       	cpi	r18, 0x64	; 100
    3ca2:	31 05       	cpc	r19, r1
    3ca4:	a1 f7       	brne	.-24     	; 0x3c8e <getUniqueID+0x2c>
    3ca6:	99 23       	and	r25, r25
    3ca8:	f1 f2       	breq	.-68     	; 0x3c66 <getUniqueID+0x4>
    3caa:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <currentTimerID.3609>
    3cae:	08 95       	ret

00003cb0 <timerStart>:
    3cb0:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <timerRunning>
    3cb4:	81 11       	cpse	r24, r1
    3cb6:	0a c0       	rjmp	.+20     	; 0x3ccc <timerStart+0x1c>
    3cb8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3cbc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
    3cc2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <timerRunning>
    3ccc:	08 95       	ret

00003cce <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    3cce:	0f 93       	push	r16
    3cd0:	1f 93       	push	r17
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	1f 92       	push	r1
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	19 f4       	brne	.+6      	; 0x3ce6 <macSetAlarm+0x18>
    {
        // Don't delay, just call it
        callback();
    3ce0:	fb 01       	movw	r30, r22
    3ce2:	09 95       	icall
    3ce4:	12 c0       	rjmp	.+36     	; 0x3d0a <macSetAlarm+0x3c>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    3ce6:	2f b7       	in	r18, 0x3f	; 63
    3ce8:	29 83       	std	Y+1, r18	; 0x01
    3cea:	f8 94       	cli
    3cec:	a4 e1       	ldi	r26, 0x14	; 20
    3cee:	b7 e0       	ldi	r27, 0x07	; 7
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    3cf4:	4d 91       	ld	r20, X+
    3cf6:	5c 91       	ld	r21, X
    3cf8:	11 97       	sbiw	r26, 0x01	; 1
    3cfa:	45 2b       	or	r20, r21
    3cfc:	41 f0       	breq	.+16     	; 0x3d0e <macSetAlarm+0x40>
    3cfe:	2f 5f       	subi	r18, 0xFF	; 255
    3d00:	3f 4f       	sbci	r19, 0xFF	; 255
    3d02:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    3d04:	24 31       	cpi	r18, 0x14	; 20
    3d06:	31 05       	cpc	r19, r1
    3d08:	a9 f7       	brne	.-22     	; 0x3cf4 <macSetAlarm+0x26>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	23 c0       	rjmp	.+70     	; 0x3d54 <macSetAlarm+0x86>

    timerEvents[i].time = ticks;
    3d0e:	45 e0       	ldi	r20, 0x05	; 5
    3d10:	42 9f       	mul	r20, r18
    3d12:	d0 01       	movw	r26, r0
    3d14:	43 9f       	mul	r20, r19
    3d16:	b0 0d       	add	r27, r0
    3d18:	11 24       	eor	r1, r1
    3d1a:	ac 5e       	subi	r26, 0xEC	; 236
    3d1c:	b8 4f       	sbci	r27, 0xF8	; 248
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	11 f4       	brne	.+4      	; 0x3d26 <macSetAlarm+0x58>
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    3d26:	8d 93       	st	X+, r24
    3d28:	9c 93       	st	X, r25
    timerEvents[i].callback = callback;
    3d2a:	85 e0       	ldi	r24, 0x05	; 5
    3d2c:	82 9f       	mul	r24, r18
    3d2e:	80 01       	movw	r16, r0
    3d30:	83 9f       	mul	r24, r19
    3d32:	10 0d       	add	r17, r0
    3d34:	11 24       	eor	r1, r1
    3d36:	0c 5e       	subi	r16, 0xEC	; 236
    3d38:	18 4f       	sbci	r17, 0xF8	; 248
    3d3a:	f8 01       	movw	r30, r16
    3d3c:	74 83       	std	Z+4, r23	; 0x04
    3d3e:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    3d40:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <getUniqueID>
    3d44:	f8 01       	movw	r30, r16
    3d46:	82 83       	std	Z+2, r24	; 0x02

    // start timer running, since we have at least one timer running
    timerStart();
    3d48:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <timerStart>
    AVR_LEAVE_CRITICAL_REGION();
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    3d50:	f8 01       	movw	r30, r16
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
}
    3d54:	0f 90       	pop	r0
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	08 95       	ret

00003d60 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	1f 92       	push	r1
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    3d6e:	00 97       	sbiw	r24, 0x00	; 0
    3d70:	19 f4       	brne	.+6      	; 0x3d78 <macSetLongAlarm+0x18>
        {
            // Just go right now
            callback();
    3d72:	fb 01       	movw	r30, r22
    3d74:	09 95       	icall
    3d76:	0f c0       	rjmp	.+30     	; 0x3d96 <macSetLongAlarm+0x36>
    3d78:	a0 eb       	ldi	r26, 0xB0	; 176
    3d7a:	b6 e0       	ldi	r27, 0x06	; 6
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    3d80:	4d 91       	ld	r20, X+
    3d82:	5c 91       	ld	r21, X
    3d84:	11 97       	sbiw	r26, 0x01	; 1
    3d86:	45 2b       	or	r20, r21
    3d88:	41 f0       	breq	.+16     	; 0x3d9a <macSetLongAlarm+0x3a>
    3d8a:	2f 5f       	subi	r18, 0xFF	; 255
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    3d90:	24 31       	cpi	r18, 0x14	; 20
    3d92:	31 05       	cpc	r19, r1
    3d94:	a9 f7       	brne	.-22     	; 0x3d80 <macSetLongAlarm+0x20>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	1a c0       	rjmp	.+52     	; 0x3dce <macSetLongAlarm+0x6e>
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    3d9a:	45 e0       	ldi	r20, 0x05	; 5
    3d9c:	42 9f       	mul	r20, r18
    3d9e:	80 01       	movw	r16, r0
    3da0:	43 9f       	mul	r20, r19
    3da2:	10 0d       	add	r17, r0
    3da4:	11 24       	eor	r1, r1
    3da6:	00 55       	subi	r16, 0x50	; 80
    3da8:	19 4f       	sbci	r17, 0xF9	; 249
    3daa:	f8 01       	movw	r30, r16
    3dac:	91 83       	std	Z+1, r25	; 0x01
    3dae:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    3db0:	74 83       	std	Z+4, r23	; 0x04
    3db2:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    3db4:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <getUniqueID>
    3db8:	f8 01       	movw	r30, r16
    3dba:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    3dbc:	8f b7       	in	r24, 0x3f	; 63
    3dbe:	89 83       	std	Y+1, r24	; 0x01
    3dc0:	f8 94       	cli
        timerStart();
    3dc2:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <timerStart>
        AVR_LEAVE_CRITICAL_REGION();
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    3dca:	f8 01       	movw	r30, r16
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return 0;
}
    3dce:	0f 90       	pop	r0
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	08 95       	ret

00003dda <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    3dda:	e6 e1       	ldi	r30, 0x16	; 22
    3ddc:	f7 e0       	ldi	r31, 0x07	; 7
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    3de2:	90 81       	ld	r25, Z
    3de4:	98 13       	cpse	r25, r24
    3de6:	09 c0       	rjmp	.+18     	; 0x3dfa <macTimerEnd+0x20>
        {
            // kill this timer
            timerEvents[i].time = 0;
    3de8:	85 e0       	ldi	r24, 0x05	; 5
    3dea:	82 9f       	mul	r24, r18
    3dec:	f0 01       	movw	r30, r0
    3dee:	83 9f       	mul	r24, r19
    3df0:	f0 0d       	add	r31, r0
    3df2:	11 24       	eor	r1, r1
    3df4:	ec 5e       	subi	r30, 0xEC	; 236
    3df6:	f8 4f       	sbci	r31, 0xF8	; 248
    3df8:	15 c0       	rjmp	.+42     	; 0x3e24 <macTimerEnd+0x4a>
    3dfa:	2f 5f       	subi	r18, 0xFF	; 255
    3dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfe:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    3e00:	24 31       	cpi	r18, 0x14	; 20
    3e02:	31 05       	cpc	r19, r1
    3e04:	71 f7       	brne	.-36     	; 0x3de2 <macTimerEnd+0x8>
    3e06:	e2 eb       	ldi	r30, 0xB2	; 178
    3e08:	f6 e0       	ldi	r31, 0x06	; 6
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    3e0e:	90 81       	ld	r25, Z
    3e10:	98 13       	cpse	r25, r24
    3e12:	0c c0       	rjmp	.+24     	; 0x3e2c <macTimerEnd+0x52>
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    3e14:	85 e0       	ldi	r24, 0x05	; 5
    3e16:	82 9f       	mul	r24, r18
    3e18:	f0 01       	movw	r30, r0
    3e1a:	83 9f       	mul	r24, r19
    3e1c:	f0 0d       	add	r31, r0
    3e1e:	11 24       	eor	r1, r1
    3e20:	e0 55       	subi	r30, 0x50	; 80
    3e22:	f9 4f       	sbci	r31, 0xF9	; 249
    3e24:	11 82       	std	Z+1, r1	; 0x01
    3e26:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    3e28:	12 82       	std	Z+2, r1	; 0x02
                return;
    3e2a:	08 95       	ret
    3e2c:	2f 5f       	subi	r18, 0xFF	; 255
    3e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e30:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    3e32:	24 31       	cpi	r18, 0x14	; 20
    3e34:	31 05       	cpc	r19, r1
    3e36:	59 f7       	brne	.-42     	; 0x3e0e <macTimerEnd+0x34>
    3e38:	08 95       	ret

00003e3a <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    3e3a:	e1 e9       	ldi	r30, 0x91	; 145
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	8a 60       	ori	r24, 0x0A	; 10
    3e42:	80 83       	st	Z, r24
    3e44:	80 ed       	ldi	r24, 0xD0	; 208
    3e46:	97 e0       	ldi	r25, 0x07	; 7
    3e48:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3e4c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    3e50:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3e54:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3e58:	0c 94 ec 2e 	jmp	0x5dd8	; 0x5dd8 <srand>

00003e5c <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    3e5c:	1f 92       	push	r1
    3e5e:	0f 92       	push	r0
    3e60:	0f b6       	in	r0, 0x3f	; 63
    3e62:	0f 92       	push	r0
    3e64:	11 24       	eor	r1, r1
    3e66:	0b b6       	in	r0, 0x3b	; 59
    3e68:	0f 92       	push	r0
    3e6a:	ff 92       	push	r15
    3e6c:	0f 93       	push	r16
    3e6e:	1f 93       	push	r17
    3e70:	2f 93       	push	r18
    3e72:	3f 93       	push	r19
    3e74:	4f 93       	push	r20
    3e76:	5f 93       	push	r21
    3e78:	6f 93       	push	r22
    3e7a:	7f 93       	push	r23
    3e7c:	8f 93       	push	r24
    3e7e:	9f 93       	push	r25
    3e80:	af 93       	push	r26
    3e82:	bf 93       	push	r27
    3e84:	ef 93       	push	r30
    3e86:	ff 93       	push	r31
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
    3e8c:	00 d0       	rcall	.+0      	; 0x3e8e <__vector_32+0x32>
    3e8e:	1f 92       	push	r1
    3e90:	cd b7       	in	r28, 0x3d	; 61
    3e92:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    3e94:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <tickTimer>
    3e98:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <tickTimer+0x1>
    3e9c:	01 96       	adiw	r24, 0x01	; 1
    3e9e:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <tickTimer+0x1>
    3ea2:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    3ea6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <secondTimer>
    3eaa:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <secondTimer+0x1>
    3eae:	01 97       	sbiw	r24, 0x01	; 1
    3eb0:	49 f0       	breq	.+18     	; 0x3ec4 <__vector_32+0x68>
    3eb2:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <secondTimer+0x1>
    3eb6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <secondTimer>
    3eba:	04 e1       	ldi	r16, 0x14	; 20
    3ebc:	17 e0       	ldi	r17, 0x07	; 7
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3ebe:	96 e1       	ldi	r25, 0x16	; 22
    3ec0:	f9 2e       	mov	r15, r25
    3ec2:	24 c0       	rjmp	.+72     	; 0x3f0c <__vector_32+0xb0>
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    3ec4:	84 ef       	ldi	r24, 0xF4	; 244
    3ec6:	91 e0       	ldi	r25, 0x01	; 1
    3ec8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <secondTimer+0x1>
    3ecc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <secondTimer>
    3ed0:	00 eb       	ldi	r16, 0xB0	; 176
    3ed2:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3ed4:	86 e1       	ldi	r24, 0x16	; 22
    3ed6:	f8 2e       	mov	r15, r24
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    3ed8:	f8 01       	movw	r30, r16
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	71 f0       	breq	.+28     	; 0x3efe <__vector_32+0xa2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	91 83       	std	Z+1, r25	; 0x01
    3ee6:	80 83       	st	Z, r24
    3ee8:	89 2b       	or	r24, r25
    3eea:	49 f4       	brne	.+18     	; 0x3efe <__vector_32+0xa2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3eec:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    3eee:	83 81       	ldd	r24, Z+3	; 0x03
    3ef0:	94 81       	ldd	r25, Z+4	; 0x04
    3ef2:	9b 83       	std	Y+3, r25	; 0x03
    3ef4:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	01 96       	adiw	r24, 0x01	; 1
    3efa:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_put_event>
    3efe:	0b 5f       	subi	r16, 0xFB	; 251
    3f00:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    3f02:	f7 e0       	ldi	r31, 0x07	; 7
    3f04:	04 31       	cpi	r16, 0x14	; 20
    3f06:	1f 07       	cpc	r17, r31
    3f08:	39 f7       	brne	.-50     	; 0x3ed8 <__vector_32+0x7c>
    3f0a:	d7 cf       	rjmp	.-82     	; 0x3eba <__vector_32+0x5e>
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	71 f0       	breq	.+28     	; 0x3f32 <__vector_32+0xd6>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    3f16:	01 97       	sbiw	r24, 0x01	; 1
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	80 83       	st	Z, r24
    3f1c:	89 2b       	or	r24, r25
    3f1e:	49 f4       	brne	.+18     	; 0x3f32 <__vector_32+0xd6>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3f20:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    3f22:	83 81       	ldd	r24, Z+3	; 0x03
    3f24:	94 81       	ldd	r25, Z+4	; 0x04
    3f26:	9b 83       	std	Y+3, r25	; 0x03
    3f28:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	01 96       	adiw	r24, 0x01	; 1
    3f2e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_put_event>
    3f32:	0b 5f       	subi	r16, 0xFB	; 251
    3f34:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    3f36:	f7 e0       	ldi	r31, 0x07	; 7
    3f38:	08 37       	cpi	r16, 0x78	; 120
    3f3a:	1f 07       	cpc	r17, r31
    3f3c:	39 f7       	brne	.-50     	; 0x3f0c <__vector_32+0xb0>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	df 91       	pop	r29
    3f46:	cf 91       	pop	r28
    3f48:	ff 91       	pop	r31
    3f4a:	ef 91       	pop	r30
    3f4c:	bf 91       	pop	r27
    3f4e:	af 91       	pop	r26
    3f50:	9f 91       	pop	r25
    3f52:	8f 91       	pop	r24
    3f54:	7f 91       	pop	r23
    3f56:	6f 91       	pop	r22
    3f58:	5f 91       	pop	r21
    3f5a:	4f 91       	pop	r20
    3f5c:	3f 91       	pop	r19
    3f5e:	2f 91       	pop	r18
    3f60:	1f 91       	pop	r17
    3f62:	0f 91       	pop	r16
    3f64:	ff 90       	pop	r15
    3f66:	0f 90       	pop	r0
    3f68:	0b be       	out	0x3b, r0	; 59
    3f6a:	0f 90       	pop	r0
    3f6c:	0f be       	out	0x3f, r0	; 63
    3f6e:	0f 90       	pop	r0
    3f70:	1f 90       	pop	r1
    3f72:	18 95       	reti

00003f74 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    3f74:	1f 92       	push	r1
    3f76:	0f 92       	push	r0
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	0f 92       	push	r0
    3f7c:	11 24       	eor	r1, r1
    3f7e:	8f 93       	push	r24
    3f80:	82 e0       	ldi	r24, 0x02	; 2
    3f82:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <GenericTimerFlag>
    3f86:	8f 91       	pop	r24
    3f88:	0f 90       	pop	r0
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	0f 90       	pop	r0
    3f8e:	1f 90       	pop	r1
    3f90:	18 95       	reti

00003f92 <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    3f92:	1f 92       	push	r1
    3f94:	0f 92       	push	r0
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	0f 92       	push	r0
    3f9a:	11 24       	eor	r1, r1
    3f9c:	8f 93       	push	r24
    WDTFlag = 1;
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <WDTFlag>
}
    3fa4:	8f 91       	pop	r24
    3fa6:	0f 90       	pop	r0
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	0f 90       	pop	r0
    3fac:	1f 90       	pop	r1
    3fae:	18 95       	reti

00003fb0 <WaitForMachine>:
	if(MdcStatus.MachineType[1] == QUANTUM_SERIES)
	halGetEeprom(MACHINE_SETUP_ADDR_QUANTUM, QUANTUM_SETUP_NUM_BYTE, &MachineSetupData.CoolDownTime);
}

void SaveMachineSetupData(void)
{
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <ucMachineWait>
    3fb6:	08 95       	ret

00003fb8 <InitTimerZero>:
    3fb8:	82 e0       	ldi	r24, 0x02	; 2
    3fba:	85 bb       	out	0x15, r24	; 21
    3fbc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3fc0:	16 bc       	out	0x26, r1	; 38
    3fc2:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <ucTimerCount>
    3fc6:	08 95       	ret

00003fc8 <StopTimerZero>:
    3fc8:	15 bc       	out	0x25, r1	; 37
    3fca:	08 95       	ret

00003fcc <StartTimerZero>:
    3fcc:	8e e4       	ldi	r24, 0x4E	; 78
    3fce:	87 bd       	out	0x27, r24	; 39
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	84 bd       	out	0x24, r24	; 36
    3fd4:	85 e0       	ldi	r24, 0x05	; 5
    3fd6:	85 bd       	out	0x25, r24	; 37
    3fd8:	08 95       	ret

00003fda <__vector_21>:
    3fda:	1f 92       	push	r1
    3fdc:	0f 92       	push	r0
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	0f 92       	push	r0
    3fe2:	11 24       	eor	r1, r1
    3fe4:	8f 93       	push	r24
    3fe6:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <ucTimerCount>
    3fea:	8f 5f       	subi	r24, 0xFF	; 255
    3fec:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <ucTimerCount>
    3ff0:	8f 91       	pop	r24
    3ff2:	0f 90       	pop	r0
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	0f 90       	pop	r0
    3ff8:	1f 90       	pop	r1
    3ffa:	18 95       	reti

00003ffc <SetDefaultMachineSetup>:
}

void SetDefaultMachineSetup(void)
{
	//Default settings
	MachineSetupData.KeyPressWaitTime = 25;
    3ffc:	ea ec       	ldi	r30, 0xCA	; 202
    3ffe:	f9 e0       	ldi	r31, 0x09	; 9
    4000:	99 e1       	ldi	r25, 0x19	; 25
    4002:	90 83       	st	Z, r25
	MachineSetupData.VendPrice[0] = 0;
    4004:	14 82       	std	Z+4, r1	; 0x04
	MachineSetupData.VendPrice[1] = 100;
    4006:	84 e6       	ldi	r24, 0x64	; 100
    4008:	85 83       	std	Z+5, r24	; 0x05
	MachineSetupData.Coin1[0] = 0;
    400a:	13 a6       	std	Z+43, r1	; 0x2b
	MachineSetupData.Coin1[1] = 25;
    400c:	94 a7       	std	Z+44, r25	; 0x2c
	MachineSetupData.Coin2[0] = 0;
    400e:	15 a6       	std	Z+45, r1	; 0x2d
	MachineSetupData.Coin2[1] = 100;
    4010:	86 a7       	std	Z+46, r24	; 0x2e
	MachineSetupData.StartPulse[0] = 0;
    4012:	17 a6       	std	Z+47, r1	; 0x2f
	MachineSetupData.StartPulse[1] = 100;
    4014:	80 ab       	std	Z+48, r24	; 0x30
	MachineSetupData.CycleLength = 1;
    4016:	91 e0       	ldi	r25, 0x01	; 1
    4018:	91 ab       	std	Z+49, r25	; 0x31
	MachineSetupData.ControlConfig = 0;//8;
    401a:	12 aa       	std	Z+50, r1	; 0x32
	MachineSetupData.DefaultCycle = 2; //Normal for washer
    401c:	82 e0       	ldi	r24, 0x02	; 2
    401e:	83 ab       	std	Z+51, r24	; 0x33

	//Dryer specific settings
	MachineSetupData.CoolDownTime = 3;
    4020:	83 e0       	ldi	r24, 0x03	; 3
    4022:	84 ab       	std	Z+52, r24	; 0x34
	MachineSetupData.Coin1TopoffTime = 15;
    4024:	2f e0       	ldi	r18, 0x0F	; 15
    4026:	25 ab       	std	Z+53, r18	; 0x35
	MachineSetupData.Coin2TopoffTime = 60;
    4028:	2c e3       	ldi	r18, 0x3C	; 60
    402a:	26 ab       	std	Z+54, r18	; 0x36
	MachineSetupData.HighTempSetting = 0;
    402c:	17 aa       	std	Z+55, r1	; 0x37
	MachineSetupData.MediumTempSetting = 1;
    402e:	90 af       	std	Z+56, r25	; 0x38
	MachineSetupData.LowTempSetting = 3;
    4030:	81 af       	std	Z+57, r24	; 0x39
	MachineSetupData.DelicateTempSetting = 9;
    4032:	89 e0       	ldi	r24, 0x09	; 9
    4034:	82 af       	std	Z+58, r24	; 0x3a
    4036:	08 95       	ret

00004038 <get_from_circ_buf>:
    else
    {
        ucData = ucData - 10 + 'A';
    }
    return ucData;
}
    4038:	fc 01       	movw	r30, r24
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	df 01       	movw	r26, r30
    403e:	a9 0f       	add	r26, r25
    4040:	b1 1d       	adc	r27, r1
    4042:	12 96       	adiw	r26, 0x02	; 2
    4044:	2c 91       	ld	r18, X
    4046:	80 81       	ld	r24, Z
    4048:	98 17       	cp	r25, r24
    404a:	31 f0       	breq	.+12     	; 0x4058 <get_from_circ_buf+0x20>
    404c:	9f 5f       	subi	r25, 0xFF	; 255
    404e:	97 fd       	sbrc	r25, 7
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	82 2f       	mov	r24, r18
    4056:	08 95       	ret
    4058:	8f ef       	ldi	r24, 0xFF	; 255
    405a:	08 95       	ret

0000405c <init_rx_buf>:
    405c:	ee e7       	ldi	r30, 0x7E	; 126
    405e:	f7 e0       	ldi	r31, 0x07	; 7
    4060:	11 82       	std	Z+1, r1	; 0x01
    4062:	10 82       	st	Z, r1
    4064:	08 95       	ret

00004066 <serial_init>:
    4066:	ee e7       	ldi	r30, 0x7E	; 126
    4068:	f7 e0       	ldi	r31, 0x07	; 7
    406a:	11 82       	std	Z+1, r1	; 0x01
    406c:	10 82       	st	Z, r1
    406e:	e0 e0       	ldi	r30, 0x00	; 0
    4070:	f8 e0       	ldi	r31, 0x08	; 8
    4072:	11 82       	std	Z+1, r1	; 0x01
    4074:	10 82       	st	Z, r1
    4076:	28 e9       	ldi	r18, 0x98	; 152
    4078:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    407c:	26 e0       	ldi	r18, 0x06	; 6
    407e:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    4082:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    4086:	27 e6       	ldi	r18, 0x67	; 103
    4088:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    408c:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <rx_handler+0x1>
    4090:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <rx_handler>
    4094:	08 95       	ret

00004096 <serial_putchar>:
    4096:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pause>
    409a:	91 11       	cpse	r25, r1
    409c:	2a c0       	rjmp	.+84     	; 0x40f2 <serial_putchar+0x5c>
    409e:	78 94       	sei
    40a0:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <txbuf>
    40a4:	9f 5f       	subi	r25, 0xFF	; 255
    40a6:	97 fd       	sbrc	r25, 7
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	30 91 7b 07 	lds	r19, 0x077B	; 0x80077b <rx>
    40ae:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <txbuf+0x1>
    40b2:	92 13       	cpse	r25, r18
    40b4:	03 c0       	rjmp	.+6      	; 0x40bc <serial_putchar+0x26>
    40b6:	33 23       	and	r19, r19
    40b8:	d1 f3       	breq	.-12     	; 0x40ae <serial_putchar+0x18>
    40ba:	08 c0       	rjmp	.+16     	; 0x40cc <serial_putchar+0x36>
    40bc:	e0 91 00 08 	lds	r30, 0x0800	; 0x800800 <txbuf>
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	e0 50       	subi	r30, 0x00	; 0
    40c4:	f8 4f       	sbci	r31, 0xF8	; 248
    40c6:	82 83       	std	Z+2, r24	; 0x02
    40c8:	90 93 00 08 	sts	0x0800, r25	; 0x800800 <txbuf>
    40cc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    40d0:	85 fd       	sbrc	r24, 5
    40d2:	0f c0       	rjmp	.+30     	; 0x40f2 <serial_putchar+0x5c>
    40d4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    40d8:	85 ff       	sbrs	r24, 5
    40da:	fc cf       	rjmp	.-8      	; 0x40d4 <serial_putchar+0x3e>
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	98 e0       	ldi	r25, 0x08	; 8
    40e0:	0e 94 1c 20 	call	0x4038	; 0x4038 <get_from_circ_buf>
    40e4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    40e8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    40ec:	80 62       	ori	r24, 0x20	; 32
    40ee:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    40f2:	08 95       	ret

000040f4 <rx_buf_count>:
    40f4:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <rxbuf>
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <rxbuf+0x1>
    40fe:	82 1b       	sub	r24, r18
    4100:	91 09       	sbc	r25, r1
    4102:	97 ff       	sbrs	r25, 7
    4104:	02 c0       	rjmp	.+4      	; 0x410a <rx_buf_count+0x16>
    4106:	80 58       	subi	r24, 0x80	; 128
    4108:	9f 4f       	sbci	r25, 0xFF	; 255
    410a:	08 95       	ret

0000410c <serial_getchar>:
    410c:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <rxbuf>
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <rxbuf+0x1>
    4116:	82 1b       	sub	r24, r18
    4118:	91 09       	sbc	r25, r1
    411a:	97 ff       	sbrs	r25, 7
    411c:	02 c0       	rjmp	.+4      	; 0x4122 <serial_getchar+0x16>
    411e:	80 58       	subi	r24, 0x80	; 128
    4120:	9f 4f       	sbci	r25, 0xFF	; 255
    4122:	88 23       	and	r24, r24
    4124:	99 f3       	breq	.-26     	; 0x410c <serial_getchar>
    4126:	8e e7       	ldi	r24, 0x7E	; 126
    4128:	97 e0       	ldi	r25, 0x07	; 7
    412a:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <get_from_circ_buf>

0000412e <__vector_36>:
    412e:	1f 92       	push	r1
    4130:	0f 92       	push	r0
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	0f 92       	push	r0
    4136:	11 24       	eor	r1, r1
    4138:	0b b6       	in	r0, 0x3b	; 59
    413a:	0f 92       	push	r0
    413c:	2f 93       	push	r18
    413e:	3f 93       	push	r19
    4140:	4f 93       	push	r20
    4142:	5f 93       	push	r21
    4144:	6f 93       	push	r22
    4146:	7f 93       	push	r23
    4148:	8f 93       	push	r24
    414a:	9f 93       	push	r25
    414c:	af 93       	push	r26
    414e:	bf 93       	push	r27
    4150:	ef 93       	push	r30
    4152:	ff 93       	push	r31
    4154:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <rx>
    415e:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <rxbuf>
    4162:	9f 5f       	subi	r25, 0xFF	; 255
    4164:	97 fd       	sbrc	r25, 7
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <rxbuf+0x1>
    416c:	92 17       	cp	r25, r18
    416e:	41 f0       	breq	.+16     	; 0x4180 <__vector_36+0x52>
    4170:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <rxbuf>
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	e2 58       	subi	r30, 0x82	; 130
    4178:	f8 4f       	sbci	r31, 0xF8	; 248
    417a:	82 83       	std	Z+2, r24	; 0x02
    417c:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <rxbuf>
    4180:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <rx>
    4184:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <rx_handler>
    4188:	f0 91 7d 07 	lds	r31, 0x077D	; 0x80077d <rx_handler+0x1>
    418c:	30 97       	sbiw	r30, 0x00	; 0
    418e:	09 f0       	breq	.+2      	; 0x4192 <__vector_36+0x64>
    4190:	09 95       	icall
    4192:	ff 91       	pop	r31
    4194:	ef 91       	pop	r30
    4196:	bf 91       	pop	r27
    4198:	af 91       	pop	r26
    419a:	9f 91       	pop	r25
    419c:	8f 91       	pop	r24
    419e:	7f 91       	pop	r23
    41a0:	6f 91       	pop	r22
    41a2:	5f 91       	pop	r21
    41a4:	4f 91       	pop	r20
    41a6:	3f 91       	pop	r19
    41a8:	2f 91       	pop	r18
    41aa:	0f 90       	pop	r0
    41ac:	0b be       	out	0x3b, r0	; 59
    41ae:	0f 90       	pop	r0
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	0f 90       	pop	r0
    41b4:	1f 90       	pop	r1
    41b6:	18 95       	reti

000041b8 <__vector_37>:
    41b8:	1f 92       	push	r1
    41ba:	0f 92       	push	r0
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	0f 92       	push	r0
    41c0:	11 24       	eor	r1, r1
    41c2:	0b b6       	in	r0, 0x3b	; 59
    41c4:	0f 92       	push	r0
    41c6:	2f 93       	push	r18
    41c8:	3f 93       	push	r19
    41ca:	4f 93       	push	r20
    41cc:	5f 93       	push	r21
    41ce:	6f 93       	push	r22
    41d0:	7f 93       	push	r23
    41d2:	8f 93       	push	r24
    41d4:	9f 93       	push	r25
    41d6:	af 93       	push	r26
    41d8:	bf 93       	push	r27
    41da:	ef 93       	push	r30
    41dc:	ff 93       	push	r31
    41de:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <txbuf>
    41e2:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <txbuf+0x1>
    41e6:	98 17       	cp	r25, r24
    41e8:	39 f0       	breq	.+14     	; 0x41f8 <__vector_37+0x40>
    41ea:	80 e0       	ldi	r24, 0x00	; 0
    41ec:	98 e0       	ldi	r25, 0x08	; 8
    41ee:	0e 94 1c 20 	call	0x4038	; 0x4038 <get_from_circ_buf>
    41f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    41f6:	05 c0       	rjmp	.+10     	; 0x4202 <__stack+0x3>
    41f8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    41fc:	8f 7d       	andi	r24, 0xDF	; 223
    41fe:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4202:	ff 91       	pop	r31
    4204:	ef 91       	pop	r30
    4206:	bf 91       	pop	r27
    4208:	af 91       	pop	r26
    420a:	9f 91       	pop	r25
    420c:	8f 91       	pop	r24
    420e:	7f 91       	pop	r23
    4210:	6f 91       	pop	r22
    4212:	5f 91       	pop	r21
    4214:	4f 91       	pop	r20
    4216:	3f 91       	pop	r19
    4218:	2f 91       	pop	r18
    421a:	0f 90       	pop	r0
    421c:	0b be       	out	0x3b, r0	; 59
    421e:	0f 90       	pop	r0
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	0f 90       	pop	r0
    4224:	1f 90       	pop	r1
    4226:	18 95       	reti

00004228 <Ascii_to_nible>:
 * \param ucData is the ASCII value to be converted.
 *
 * \return ucData is the nible value.
**/
u8 Ascii_to_nible ( u8 ucData )
{
    4228:	98 2f       	mov	r25, r24
    if ((ucData <= '9' ) && (ucData >= '0')) 
    422a:	80 ed       	ldi	r24, 0xD0	; 208
    422c:	89 0f       	add	r24, r25
    422e:	8a 30       	cpi	r24, 0x0A	; 10
    4230:	70 f0       	brcs	.+28     	; 0x424e <Ascii_to_nible+0x26>
    {
        ucData -= '0';
    }
    else if ((ucData <= 'F' ) && (ucData >= 'A')) 
    4232:	8f eb       	ldi	r24, 0xBF	; 191
    4234:	89 0f       	add	r24, r25
    4236:	86 30       	cpi	r24, 0x06	; 6
    4238:	10 f4       	brcc	.+4      	; 0x423e <Ascii_to_nible+0x16>
    {
        ucData = ucData -'A' + 10;
    423a:	89 ec       	ldi	r24, 0xC9	; 201
    423c:	05 c0       	rjmp	.+10     	; 0x4248 <Ascii_to_nible+0x20>
    }
    else if ((ucData <= 'f' ) && (ucData >= 'a')) 
    423e:	8f e9       	ldi	r24, 0x9F	; 159
    4240:	89 0f       	add	r24, r25
    4242:	86 30       	cpi	r24, 0x06	; 6
    4244:	18 f4       	brcc	.+6      	; 0x424c <Ascii_to_nible+0x24>
    {
        ucData = ucData -'a' + 10;
    4246:	89 ea       	ldi	r24, 0xA9	; 169
    4248:	89 0f       	add	r24, r25
    424a:	08 95       	ret
    }
    else 
    {
        ucData = 0;
    424c:	80 e0       	ldi	r24, 0x00	; 0
    }
    return ucData;
}
    424e:	08 95       	ret

00004250 <ledoff1>:

}

void SetBillReturn(void)
{
    ucReturnBillTimeout = 2;
    4250:	a0 98       	cbi	0x14, 0	; 20
    4252:	08 95       	ret

00004254 <ledoff2>:
    4254:	a1 98       	cbi	0x14, 1	; 20
    4256:	08 95       	ret

00004258 <ValidationTimeout>:
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <VALIDATION_TIMEOUT>
    425e:	08 95       	ret

00004260 <CommTimeOut>:
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <TOFlag>
    4266:	e3 e9       	ldi	r30, 0x93	; 147
    4268:	f8 e0       	ldi	r31, 0x08	; 8
    426a:	80 81       	ld	r24, Z
    426c:	8f 7b       	andi	r24, 0xBF	; 191
    426e:	80 83       	st	Z, r24
    4270:	08 95       	ret

00004272 <KeypressTimeOut>:
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <KPTOFlag>
    4278:	08 95       	ret

0000427a <SetupTimeout>:
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETUP_TIMEOUT>
    4280:	08 95       	ret

00004282 <SetDeviceState>:
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <ucDeviceStateFlag>
    4288:	08 95       	ret

0000428a <appStartScan>:
    428a:	8f ef       	ldi	r24, 0xFF	; 255
    428c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <macInit>
    4290:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <macScan>

00004294 <appAssociate>:
    4294:	e1 eb       	ldi	r30, 0xB1	; 177
    4296:	fb e0       	ldi	r31, 0x0B	; 11
    4298:	65 81       	ldd	r22, Z+5	; 0x05
    429a:	83 81       	ldd	r24, Z+3	; 0x03
    429c:	94 81       	ldd	r25, Z+4	; 0x04
    429e:	0c 94 81 18 	jmp	0x3102	; 0x3102 <macAssociate>

000042a2 <appPingReq>:
    42a2:	bc 01       	movw	r22, r24
    42a4:	83 e0       	ldi	r24, 0x03	; 3
    42a6:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <macPing>

000042aa <appPingRsp>:
    42aa:	0e 94 3c 14 	call	0x2878	; 0x2878 <radioGetSavedRssiValue>
    42ae:	88 23       	and	r24, r24
    42b0:	19 f0       	breq	.+6      	; 0x42b8 <appPingRsp+0xe>
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <macConfig+0x8>
    42b8:	08 95       	ret

000042ba <appPacketSendSucceed>:
    42ba:	20 91 51 0b 	lds	r18, 0x0B51	; 0x800b51 <macConfig+0x15>
    42be:	30 91 52 0b 	lds	r19, 0x0B52	; 0x800b52 <macConfig+0x16>
    42c2:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <macConfig+0xf>
    42c6:	90 91 4c 0b 	lds	r25, 0x0B4C	; 0x800b4c <macConfig+0x10>
    42ca:	28 17       	cp	r18, r24
    42cc:	39 07       	cpc	r19, r25
    42ce:	11 f4       	brne	.+4      	; 0x42d4 <appPacketSendSucceed+0x1a>
    42d0:	10 92 84 08 	sts	0x0884, r1	; 0x800884 <failCount>
    42d4:	08 95       	ret

000042d6 <appPacketSendAccessFail>:
    42d6:	08 95       	ret

000042d8 <appPacketSendFailed>:
    42d8:	cf 93       	push	r28
    42da:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <macIsScanning>
    42de:	81 11       	cpse	r24, r1
    42e0:	40 c0       	rjmp	.+128    	; 0x4362 <appPacketSendFailed+0x8a>
    42e2:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <macConfig+0xf>
    42e6:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <macConfig+0x10>
    42ea:	c1 e0       	ldi	r28, 0x01	; 1
    42ec:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <macConfig+0x15>
    42f0:	90 91 52 0b 	lds	r25, 0x0B52	; 0x800b52 <macConfig+0x16>
    42f4:	82 17       	cp	r24, r18
    42f6:	93 07       	cpc	r25, r19
    42f8:	11 f0       	breq	.+4      	; 0x42fe <appPacketSendFailed+0x26>
    42fa:	c0 e0       	ldi	r28, 0x00	; 0
    42fc:	05 c0       	rjmp	.+10     	; 0x4308 <appPacketSendFailed+0x30>
    42fe:	40 e0       	ldi	r20, 0x00	; 0
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	60 e0       	ldi	r22, 0x00	; 0
    4304:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
    4308:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <failCount>
    430c:	8f 5f       	subi	r24, 0xFF	; 255
    430e:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <failCount>
    4312:	83 30       	cpi	r24, 0x03	; 3
    4314:	30 f1       	brcs	.+76     	; 0x4362 <appPacketSendFailed+0x8a>
    4316:	cc 23       	and	r28, r28
    4318:	a9 f0       	breq	.+42     	; 0x4344 <appPacketSendFailed+0x6c>
    431a:	10 92 44 0b 	sts	0x0B44, r1	; 0x800b44 <macConfig+0x8>
    431e:	88 e0       	ldi	r24, 0x08	; 8
    4320:	0e 94 84 16 	call	0x2d08	; 0x2d08 <radioRandom>
    4324:	28 2f       	mov	r18, r24
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	2e 5c       	subi	r18, 0xCE	; 206
    432a:	3f 4f       	sbci	r19, 0xFF	; 255
    432c:	4e e1       	ldi	r20, 0x1E	; 30
    432e:	42 9f       	mul	r20, r18
    4330:	c0 01       	movw	r24, r0
    4332:	43 9f       	mul	r20, r19
    4334:	90 0d       	add	r25, r0
    4336:	11 24       	eor	r1, r1
    4338:	65 e4       	ldi	r22, 0x45	; 69
    433a:	71 e2       	ldi	r23, 0x21	; 33
    433c:	88 51       	subi	r24, 0x18	; 24
    433e:	9c 4f       	sbci	r25, 0xFC	; 252
    4340:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    4344:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <macConfig+0x15>
    4348:	90 91 52 0b 	lds	r25, 0x0B52	; 0x800b52 <macConfig+0x16>
    434c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <macIsChild>
    4350:	88 23       	and	r24, r24
    4352:	39 f0       	breq	.+14     	; 0x4362 <appPacketSendFailed+0x8a>
    4354:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <macConfig+0x15>
    4358:	90 91 52 0b 	lds	r25, 0x0B52	; 0x800b52 <macConfig+0x16>
    435c:	cf 91       	pop	r28
    435e:	0c 94 26 19 	jmp	0x324c	; 0x324c <macRemoveChild>
    4362:	cf 91       	pop	r28
    4364:	08 95       	ret

00004366 <appDataIndication>:
    4366:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <mac_buffer_rx>
    436a:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <ucSendDataSize>
    436e:	88 23       	and	r24, r24
    4370:	11 f1       	breq	.+68     	; 0x43b6 <appDataIndication+0x50>
    4372:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xe>
    4376:	8f 77       	andi	r24, 0x7F	; 127
    4378:	81 30       	cpi	r24, 0x01	; 1
    437a:	e9 f4       	brne	.+58     	; 0x43b6 <appDataIndication+0x50>
    437c:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <mac_buffer_rx+0xf>
    4380:	80 93 83 08 	sts	0x0883, r24	; 0x800883 <ucDataLength.4348>
    4384:	90 e8       	ldi	r25, 0x80	; 128
    4386:	e7 e3       	ldi	r30, 0x37	; 55
    4388:	fc e0       	ldi	r31, 0x0C	; 12
    438a:	df 01       	movw	r26, r30
    438c:	1d 92       	st	X+, r1
    438e:	9a 95       	dec	r25
    4390:	e9 f7       	brne	.-6      	; 0x438c <appDataIndication+0x26>
    4392:	a8 e4       	ldi	r26, 0x48	; 72
    4394:	ba e0       	ldi	r27, 0x0A	; 10
    4396:	9f 01       	movw	r18, r30
    4398:	9e 2f       	mov	r25, r30
    439a:	92 1b       	sub	r25, r18
    439c:	98 17       	cp	r25, r24
    439e:	18 f4       	brcc	.+6      	; 0x43a6 <appDataIndication+0x40>
    43a0:	9d 91       	ld	r25, X+
    43a2:	91 93       	st	Z+, r25
    43a4:	f9 cf       	rjmp	.-14     	; 0x4398 <appDataIndication+0x32>
    43a6:	87 e3       	ldi	r24, 0x37	; 55
    43a8:	9c e0       	ldi	r25, 0x0C	; 12
    43aa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <extractIncomingMessage>
    43ae:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    43b2:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <ucNumberOfRetry>
    43b6:	08 95       	ret

000043b8 <appChildAssociated>:
    43b8:	a1 9a       	sbi	0x14, 1	; 20
    43ba:	6a e2       	ldi	r22, 0x2A	; 42
    43bc:	71 e2       	ldi	r23, 0x21	; 33
    43be:	8a e0       	ldi	r24, 0x0A	; 10
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <macSetAlarm>

000043c6 <appAssociateConfirm>:
    43c6:	81 11       	cpse	r24, r1
    43c8:	07 c0       	rjmp	.+14     	; 0x43d8 <appAssociateConfirm+0x12>
    43ca:	a1 9a       	sbi	0x14, 1	; 20
    43cc:	6a e2       	ldi	r22, 0x2A	; 42
    43ce:	71 e2       	ldi	r23, 0x21	; 33
    43d0:	8a e0       	ldi	r24, 0x0A	; 10
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <macSetAlarm>
    43d8:	84 e6       	ldi	r24, 0x64	; 100
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	0e 94 23 14 	call	0x2846	; 0x2846 <nodeSleep>
    43e0:	0c 94 45 21 	jmp	0x428a	; 0x428a <appStartScan>

000043e4 <appScanConfirm>:
    43e4:	88 23       	and	r24, r24
    43e6:	29 f0       	breq	.+10     	; 0x43f2 <appScanConfirm+0xe>
    43e8:	6a e4       	ldi	r22, 0x4A	; 74
    43ea:	71 e2       	ldi	r23, 0x21	; 33
    43ec:	8e e1       	ldi	r24, 0x1E	; 30
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	04 c0       	rjmp	.+8      	; 0x43fa <appScanConfirm+0x16>
    43f2:	65 e4       	ldi	r22, 0x45	; 69
    43f4:	71 e2       	ldi	r23, 0x21	; 33
    43f6:	88 ee       	ldi	r24, 0xE8	; 232
    43f8:	93 e0       	ldi	r25, 0x03	; 3
    43fa:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <macSetAlarm>

000043fe <checkEeprom>:
    43fe:	8f 92       	push	r8
    4400:	9f 92       	push	r9
    4402:	af 92       	push	r10
    4404:	bf 92       	push	r11
    4406:	cf 92       	push	r12
    4408:	df 92       	push	r13
    440a:	ef 92       	push	r14
    440c:	ff 92       	push	r15
    440e:	0f 93       	push	r16
    4410:	1f 93       	push	r17
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    441a:	62 97       	sbiw	r28, 0x12	; 18
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	de bf       	out	0x3e, r29	; 62
    4422:	0f be       	out	0x3f, r0	; 63
    4424:	cd bf       	out	0x3d, r28	; 61
    4426:	87 e0       	ldi	r24, 0x07	; 7
    4428:	89 8b       	std	Y+17, r24	; 0x11
    442a:	ae 01       	movw	r20, r28
    442c:	47 5f       	subi	r20, 0xF7	; 247
    442e:	5f 4f       	sbci	r21, 0xFF	; 255
    4430:	68 e0       	ldi	r22, 0x08	; 8
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
    443a:	89 84       	ldd	r8, Y+9	; 0x09
    443c:	9a 84       	ldd	r9, Y+10	; 0x0a
    443e:	ab 84       	ldd	r10, Y+11	; 0x0b
    4440:	bc 84       	ldd	r11, Y+12	; 0x0c
    4442:	cd 84       	ldd	r12, Y+13	; 0x0d
    4444:	de 84       	ldd	r13, Y+14	; 0x0e
    4446:	ef 84       	ldd	r14, Y+15	; 0x0f
    4448:	f8 88       	ldd	r15, Y+16	; 0x10
    444a:	5f ef       	ldi	r21, 0xFF	; 255
    444c:	85 16       	cp	r8, r21
    444e:	95 06       	cpc	r9, r21
    4450:	a5 06       	cpc	r10, r21
    4452:	b5 06       	cpc	r11, r21
    4454:	09 f0       	breq	.+2      	; 0x4458 <checkEeprom+0x5a>
    4456:	70 c0       	rjmp	.+224    	; 0x4538 <checkEeprom+0x13a>
    4458:	94 01       	movw	r18, r8
    445a:	a5 01       	movw	r20, r10
    445c:	b6 01       	movw	r22, r12
    445e:	c7 01       	movw	r24, r14
    4460:	00 e2       	ldi	r16, 0x20	; 32
    4462:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__lshrdi3>
    4466:	69 01       	movw	r12, r18
    4468:	7a 01       	movw	r14, r20
    446a:	2f 3f       	cpi	r18, 0xFF	; 255
    446c:	3f 4f       	sbci	r19, 0xFF	; 255
    446e:	4f 4f       	sbci	r20, 0xFF	; 255
    4470:	5f 4f       	sbci	r21, 0xFF	; 255
    4472:	61 05       	cpc	r22, r1
    4474:	71 05       	cpc	r23, r1
    4476:	81 05       	cpc	r24, r1
    4478:	91 05       	cpc	r25, r1
    447a:	09 f0       	breq	.+2      	; 0x447e <checkEeprom+0x80>
    447c:	50 c0       	rjmp	.+160    	; 0x451e <checkEeprom+0x120>
    447e:	8e 01       	movw	r16, r28
    4480:	0f 5f       	subi	r16, 0xFF	; 255
    4482:	1f 4f       	sbci	r17, 0xFF	; 255
    4484:	88 e0       	ldi	r24, 0x08	; 8
    4486:	f8 01       	movw	r30, r16
    4488:	11 92       	st	Z+, r1
    448a:	8a 95       	dec	r24
    448c:	e9 f7       	brne	.-6      	; 0x4488 <checkEeprom+0x8a>
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	0e 94 b8 14 	call	0x2970	; 0x2970 <radioInit>
    4494:	86 e0       	ldi	r24, 0x06	; 6
    4496:	0e 94 12 15 	call	0x2a24	; 0x2a24 <radioSetTrxState>
    449a:	78 01       	movw	r14, r16
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	dd 24       	eor	r13, r13
    44a0:	da 94       	dec	r13
    44a2:	34 30       	cpi	r19, 0x04	; 4
    44a4:	18 f4       	brcc	.+6      	; 0x44ac <checkEeprom+0xae>
    44a6:	f7 01       	movw	r30, r14
    44a8:	d0 82       	st	Z, r13
    44aa:	1a c0       	rjmp	.+52     	; 0x44e0 <checkEeprom+0xe2>
    44ac:	3a 8b       	std	Y+18, r19	; 0x12
    44ae:	0e 94 90 14 	call	0x2920	; 0x2920 <radioGetTrxState>
    44b2:	8f 7e       	andi	r24, 0xEF	; 239
    44b4:	3a 89       	ldd	r19, Y+18	; 0x12
    44b6:	86 30       	cpi	r24, 0x06	; 6
    44b8:	99 f4       	brne	.+38     	; 0x44e0 <checkEeprom+0xe2>
    44ba:	44 e0       	ldi	r20, 0x04	; 4
    44bc:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    44c0:	f7 01       	movw	r30, r14
    44c2:	90 81       	ld	r25, Z
    44c4:	f4 e0       	ldi	r31, 0x04	; 4
    44c6:	9f 9f       	mul	r25, r31
    44c8:	c0 01       	movw	r24, r0
    44ca:	11 24       	eor	r1, r1
    44cc:	92 2f       	mov	r25, r18
    44ce:	90 76       	andi	r25, 0x60	; 96
    44d0:	92 95       	swap	r25
    44d2:	96 95       	lsr	r25
    44d4:	97 70       	andi	r25, 0x07	; 7
    44d6:	89 2b       	or	r24, r25
    44d8:	f7 01       	movw	r30, r14
    44da:	80 83       	st	Z, r24
    44dc:	41 50       	subi	r20, 0x01	; 1
    44de:	71 f7       	brne	.-36     	; 0x44bc <checkEeprom+0xbe>
    44e0:	3f 5f       	subi	r19, 0xFF	; 255
    44e2:	ff ef       	ldi	r31, 0xFF	; 255
    44e4:	ef 1a       	sub	r14, r31
    44e6:	ff 0a       	sbc	r15, r31
    44e8:	38 30       	cpi	r19, 0x08	; 8
    44ea:	d9 f6       	brne	.-74     	; 0x44a2 <checkEeprom+0xa4>
    44ec:	a8 01       	movw	r20, r16
    44ee:	68 e0       	ldi	r22, 0x08	; 8
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    44f8:	ae 01       	movw	r20, r28
    44fa:	4f 5e       	subi	r20, 0xEF	; 239
    44fc:	5f 4f       	sbci	r21, 0xFF	; 255
    44fe:	62 e0       	ldi	r22, 0x02	; 2
    4500:	82 e2       	ldi	r24, 0x22	; 34
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    4508:	60 e0       	ldi	r22, 0x00	; 0
    450a:	8c e6       	ldi	r24, 0x6C	; 108
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	0e 94 65 34 	call	0x68ca	; 0x68ca <eeprom_update_byte>
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	87 e7       	ldi	r24, 0x77	; 119
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	0e 94 65 34 	call	0x68ca	; 0x68ca <eeprom_update_byte>
    451c:	0d c0       	rjmp	.+26     	; 0x4538 <checkEeprom+0x13a>
    451e:	cd 28       	or	r12, r13
    4520:	ce 28       	or	r12, r14
    4522:	cf 28       	or	r12, r15
    4524:	49 f0       	breq	.+18     	; 0x4538 <checkEeprom+0x13a>
    4526:	ae 01       	movw	r20, r28
    4528:	4f 5e       	subi	r20, 0xEF	; 239
    452a:	5f 4f       	sbci	r21, 0xFF	; 255
    452c:	62 e0       	ldi	r22, 0x02	; 2
    452e:	82 e2       	ldi	r24, 0x22	; 34
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    4536:	00 00       	nop
    4538:	62 96       	adiw	r28, 0x12	; 18
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	df 91       	pop	r29
    4546:	cf 91       	pop	r28
    4548:	1f 91       	pop	r17
    454a:	0f 91       	pop	r16
    454c:	ff 90       	pop	r15
    454e:	ef 90       	pop	r14
    4550:	df 90       	pop	r13
    4552:	cf 90       	pop	r12
    4554:	bf 90       	pop	r11
    4556:	af 90       	pop	r10
    4558:	9f 90       	pop	r9
    455a:	8f 90       	pop	r8
    455c:	08 95       	ret

0000455e <appInit>:
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	1f 92       	push	r1
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	83 b3       	in	r24, 0x13	; 19
    456e:	87 60       	ori	r24, 0x07	; 7
    4570:	83 bb       	out	0x13, r24	; 19
    4572:	84 b3       	in	r24, 0x14	; 20
    4574:	88 7f       	andi	r24, 0xF8	; 248
    4576:	84 bb       	out	0x14, r24	; 20
    4578:	84 b3       	in	r24, 0x14	; 20
    457a:	87 60       	ori	r24, 0x07	; 7
    457c:	84 bb       	out	0x14, r24	; 20
    457e:	6b 9a       	sbi	0x0d, 3	; 13
    4580:	73 98       	cbi	0x0e, 3	; 14
    4582:	84 b3       	in	r24, 0x14	; 20
    4584:	88 7f       	andi	r24, 0xF8	; 248
    4586:	84 bb       	out	0x14, r24	; 20
    4588:	a0 9a       	sbi	0x14, 0	; 20
    458a:	83 e1       	ldi	r24, 0x13	; 19
    458c:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    4590:	68 e2       	ldi	r22, 0x28	; 40
    4592:	71 e2       	ldi	r23, 0x21	; 33
    4594:	89 e1       	ldi	r24, 0x19	; 25
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <ucDeviceStateFlag>
    45a2:	0e 94 ff 21 	call	0x43fe	; 0x43fe <checkEeprom>
    45a6:	0e 94 46 06 	call	0xc8c	; 0xc8c <initReader>
    45aa:	68 ed       	ldi	r22, 0xD8	; 216
    45ac:	7f e1       	ldi	r23, 0x1F	; 31
    45ae:	80 e1       	ldi	r24, 0x10	; 16
    45b0:	97 e2       	ldi	r25, 0x27	; 39
    45b2:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    45b6:	08 2f       	mov	r16, r24
    45b8:	10 e0       	ldi	r17, 0x00	; 0
    45ba:	90 91 0e 0a 	lds	r25, 0x0A0E	; 0x800a0e <ucMachineWait>
    45be:	91 11       	cpse	r25, r1
    45c0:	1e c0       	rjmp	.+60     	; 0x45fe <appInit+0xa0>
    45c2:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <ucDeviceStateFlag>
    45c6:	91 30       	cpi	r25, 0x01	; 1
    45c8:	51 f4       	brne	.+20     	; 0x45de <appInit+0x80>
    45ca:	0e 94 95 0c 	call	0x192a	; 0x192a <initMachine>
    45ce:	61 e4       	ldi	r22, 0x41	; 65
    45d0:	71 e2       	ldi	r23, 0x21	; 33
    45d2:	8c e2       	ldi	r24, 0x2C	; 44
    45d4:	91 e0       	ldi	r25, 0x01	; 1
    45d6:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    45da:	18 2f       	mov	r17, r24
    45dc:	ee cf       	rjmp	.-36     	; 0x45ba <appInit+0x5c>
    45de:	92 30       	cpi	r25, 0x02	; 2
    45e0:	39 f4       	brne	.+14     	; 0x45f0 <appInit+0x92>
    45e2:	80 2f       	mov	r24, r16
    45e4:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <macTimerEnd>
    45e8:	81 2f       	mov	r24, r17
    45ea:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <macTimerEnd>
    45ee:	07 c0       	rjmp	.+14     	; 0x45fe <appInit+0xa0>
    45f0:	0e 94 97 1a 	call	0x352e	; 0x352e <mac_event_pending>
    45f4:	88 23       	and	r24, r24
    45f6:	09 f3       	breq	.-62     	; 0x45ba <appInit+0x5c>
    45f8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <macTask>
    45fc:	de cf       	rjmp	.-68     	; 0x45ba <appInit+0x5c>
    45fe:	61 e4       	ldi	r22, 0x41	; 65
    4600:	71 e2       	ldi	r23, 0x21	; 33
    4602:	8c e2       	ldi	r24, 0x2C	; 44
    4604:	91 e0       	ldi	r25, 0x01	; 1
    4606:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    460a:	ae 01       	movw	r20, r28
    460c:	4f 5f       	subi	r20, 0xFF	; 255
    460e:	5f 4f       	sbci	r21, 0xFF	; 255
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	8e e1       	ldi	r24, 0x1E	; 30
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
    461a:	89 81       	ldd	r24, Y+1	; 0x01
    461c:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <MdcStatus>
    4620:	8f 3f       	cpi	r24, 0xFF	; 255
    4622:	79 f4       	brne	.+30     	; 0x4642 <appInit+0xe4>
    4624:	99 23       	and	r25, r25
    4626:	69 f0       	breq	.+26     	; 0x4642 <appInit+0xe4>
    4628:	40 e1       	ldi	r20, 0x10	; 16
    462a:	5a e0       	ldi	r21, 0x0A	; 10
    462c:	61 e0       	ldi	r22, 0x01	; 1
    462e:	8e e1       	ldi	r24, 0x1E	; 30
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    4636:	41 e1       	ldi	r20, 0x11	; 17
    4638:	5a e0       	ldi	r21, 0x0A	; 10
    463a:	61 e0       	ldi	r22, 0x01	; 1
    463c:	8f e1       	ldi	r24, 0x1F	; 31
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	1a c0       	rjmp	.+52     	; 0x4676 <appInit+0x118>
    4642:	98 17       	cp	r25, r24
    4644:	d1 f0       	breq	.+52     	; 0x467a <appInit+0x11c>
    4646:	40 e1       	ldi	r20, 0x10	; 16
    4648:	5a e0       	ldi	r21, 0x0A	; 10
    464a:	61 e0       	ldi	r22, 0x01	; 1
    464c:	8e e1       	ldi	r24, 0x1E	; 30
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    4654:	41 e1       	ldi	r20, 0x11	; 17
    4656:	5a e0       	ldi	r21, 0x0A	; 10
    4658:	61 e0       	ldi	r22, 0x01	; 1
    465a:	8f e1       	ldi	r24, 0x1F	; 31
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    4662:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4666:	82 60       	ori	r24, 0x02	; 2
    4668:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
    466c:	43 e9       	ldi	r20, 0x93	; 147
    466e:	58 e0       	ldi	r21, 0x08	; 8
    4670:	61 e0       	ldi	r22, 0x01	; 1
    4672:	82 e2       	ldi	r24, 0x22	; 34
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <halPutEeprom>
    467a:	0e 94 45 21 	call	0x428a	; 0x428a <appStartScan>
    467e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <ucDeviceStateFlag>
    4682:	82 30       	cpi	r24, 0x02	; 2
    4684:	69 f4       	brne	.+26     	; 0x46a0 <appInit+0x142>
    4686:	0e 94 44 06 	call	0xc88	; 0xc88 <displayVersion>
    468a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    468e:	81 fd       	sbrc	r24, 1
    4690:	07 c0       	rjmp	.+14     	; 0x46a0 <appInit+0x142>
    4692:	0e 94 af 0c 	call	0x195e	; 0x195e <setupMachine>
    4696:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <ucCardStatus>
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <cardRemoved>
    46a0:	00 00       	nop
    46a2:	0f 90       	pop	r0
    46a4:	df 91       	pop	r29
    46a6:	cf 91       	pop	r28
    46a8:	1f 91       	pop	r17
    46aa:	0f 91       	pop	r16
    46ac:	08 95       	ret

000046ae <GetParam>:
    46ae:	ef 92       	push	r14
    46b0:	ff 92       	push	r15
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	7a 01       	movw	r14, r20
    46bc:	fb 01       	movw	r30, r22
    46be:	01 90       	ld	r0, Z+
    46c0:	00 20       	and	r0, r0
    46c2:	e9 f7       	brne	.-6      	; 0x46be <GetParam+0x10>
    46c4:	31 97       	sbiw	r30, 0x01	; 1
    46c6:	ef 01       	movw	r28, r30
    46c8:	c6 1b       	sub	r28, r22
    46ca:	d7 0b       	sbc	r29, r23
    46cc:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	c1 f0       	breq	.+48     	; 0x4704 <GetParam+0x56>
    46d4:	8c 01       	movw	r16, r24
    46d6:	0c 0f       	add	r16, r28
    46d8:	11 1d       	adc	r17, r1
    46da:	b7 01       	movw	r22, r14
    46dc:	c8 01       	movw	r24, r16
    46de:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
    46e2:	00 97       	sbiw	r24, 0x00	; 0
    46e4:	79 f0       	breq	.+30     	; 0x4704 <GetParam+0x56>
    46e6:	ec 01       	movw	r28, r24
    46e8:	c0 1b       	sub	r28, r16
    46ea:	d1 0b       	sbc	r29, r17
    46ec:	ae 01       	movw	r20, r28
    46ee:	b8 01       	movw	r22, r16
    46f0:	82 ed       	ldi	r24, 0xD2	; 210
    46f2:	9b e0       	ldi	r25, 0x0B	; 11
    46f4:	0e 94 4a 31 	call	0x6294	; 0x6294 <memcpy>
    46f8:	ce 52       	subi	r28, 0x2E	; 46
    46fa:	d4 4f       	sbci	r29, 0xF4	; 244
    46fc:	18 82       	st	Y, r1
    46fe:	82 ed       	ldi	r24, 0xD2	; 210
    4700:	9b e0       	ldi	r25, 0x0B	; 11
    4702:	02 c0       	rjmp	.+4      	; 0x4708 <GetParam+0x5a>
    4704:	80 e0       	ldi	r24, 0x00	; 0
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	df 91       	pop	r29
    470a:	cf 91       	pop	r28
    470c:	1f 91       	pop	r17
    470e:	0f 91       	pop	r16
    4710:	ff 90       	pop	r15
    4712:	ef 90       	pop	r14
    4714:	08 95       	ret

00004716 <DevicePoll>:
    4716:	0e 94 8d 0c 	call	0x191a	; 0x191a <MachineStatus>
    471a:	61 e4       	ldi	r22, 0x41	; 65
    471c:	71 e2       	ldi	r23, 0x21	; 33
    471e:	8c e2       	ldi	r24, 0x2C	; 44
    4720:	91 e0       	ldi	r25, 0x01	; 1
    4722:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <macSetAlarm>

00004726 <padLeft>:
}

char * padLeft(char * string, u8 paddedLength, const char * pad) 
{
    4726:	7f 92       	push	r7
    4728:	8f 92       	push	r8
    472a:	9f 92       	push	r9
    472c:	af 92       	push	r10
    472e:	bf 92       	push	r11
    4730:	cf 92       	push	r12
    4732:	df 92       	push	r13
    4734:	ef 92       	push	r14
    4736:	ff 92       	push	r15
    4738:	0f 93       	push	r16
    473a:	1f 93       	push	r17
    473c:	cf 93       	push	r28
    473e:	df 93       	push	r29
    4740:	7c 01       	movw	r14, r24
    4742:	76 2e       	mov	r7, r22
    4744:	4a 01       	movw	r8, r20
	size_t stringLength = strlen(string);
    4746:	ec 01       	movw	r28, r24
    4748:	09 90       	ld	r0, Y+
    474a:	00 20       	and	r0, r0
    474c:	e9 f7       	brne	.-6      	; 0x4748 <padLeft+0x22>
    474e:	21 97       	sbiw	r28, 0x01	; 1
    4750:	c8 1b       	sub	r28, r24
    4752:	d9 0b       	sbc	r29, r25
	size_t lenpad = strlen(pad);
    4754:	fa 01       	movw	r30, r20
    4756:	01 90       	ld	r0, Z+
    4758:	00 20       	and	r0, r0
    475a:	e9 f7       	brne	.-6      	; 0x4756 <padLeft+0x30>
    475c:	31 97       	sbiw	r30, 0x01	; 1
    475e:	8f 01       	movw	r16, r30
    4760:	04 1b       	sub	r16, r20
    4762:	15 0b       	sbc	r17, r21
	u8 i = paddedLength;
	
	if (stringLength >= paddedLength)
    4764:	c6 2e       	mov	r12, r22
    4766:	d1 2c       	mov	r13, r1
    4768:	cc 15       	cp	r28, r12
    476a:	dd 05       	cpc	r29, r13
    476c:	20 f5       	brcc	.+72     	; 0x47b6 <padLeft+0x90>
	{
		return NULL;//'\0';
	}

	char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
    476e:	c6 01       	movw	r24, r12
    4770:	01 96       	adiw	r24, 0x01	; 1
    4772:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    4776:	5c 01       	movw	r10, r24
	
	for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    4778:	87 2d       	mov	r24, r7
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	c8 17       	cp	r28, r24
    477e:	d9 07       	cpc	r29, r25
    4780:	48 f4       	brcc	.+18     	; 0x4794 <padLeft+0x6e>
	{
		strncpy(padded, pad, lenpad);
    4782:	a8 01       	movw	r20, r16
    4784:	b4 01       	movw	r22, r8
    4786:	c5 01       	movw	r24, r10
    4788:	0e 94 6e 31 	call	0x62dc	; 0x62dc <strncpy>
		return NULL;//'\0';
	}

	char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
	
	for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    478c:	7a 94       	dec	r7
    478e:	a0 0e       	add	r10, r16
    4790:	b1 1e       	adc	r11, r17
    4792:	f2 cf       	rjmp	.-28     	; 0x4778 <padLeft+0x52>
	{
		strncpy(padded, pad, lenpad);
	}
	
	strncpy(padded, string, stringLength); /* copy without '\0' */
    4794:	ae 01       	movw	r20, r28
    4796:	b7 01       	movw	r22, r14
    4798:	c5 01       	movw	r24, r10
    479a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <strncpy>
	padded += stringLength; /* prepare for first append of pad */
    479e:	ca 0d       	add	r28, r10
    47a0:	db 1d       	adc	r29, r11
	*padded = '\0';
    47a2:	18 82       	st	Y, r1

	padded = (padded - i);
    47a4:	cc 19       	sub	r28, r12
    47a6:	dd 09       	sbc	r29, r13
	strncpy(string,padded,i);
    47a8:	a6 01       	movw	r20, r12
    47aa:	be 01       	movw	r22, r28
    47ac:	c7 01       	movw	r24, r14
    47ae:	0e 94 6e 31 	call	0x62dc	; 0x62dc <strncpy>
	
	return padded;
    47b2:	ce 01       	movw	r24, r28
    47b4:	02 c0       	rjmp	.+4      	; 0x47ba <padLeft+0x94>
	size_t lenpad = strlen(pad);
	u8 i = paddedLength;
	
	if (stringLength >= paddedLength)
	{
		return NULL;//'\0';
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0

	padded = (padded - i);
	strncpy(string,padded,i);
	
	return padded;
}
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	1f 91       	pop	r17
    47c0:	0f 91       	pop	r16
    47c2:	ff 90       	pop	r15
    47c4:	ef 90       	pop	r14
    47c6:	df 90       	pop	r13
    47c8:	cf 90       	pop	r12
    47ca:	bf 90       	pop	r11
    47cc:	af 90       	pop	r10
    47ce:	9f 90       	pop	r9
    47d0:	8f 90       	pop	r8
    47d2:	7f 90       	pop	r7
    47d4:	08 95       	ret

000047d6 <APP_TaskHandler>:
   be called periodically.  It receives data from serial and sends it
   to end device.
*/
//void appTask(void)
void APP_TaskHandler(void)
{
    47d6:	bf 92       	push	r11
    47d8:	cf 92       	push	r12
    47da:	df 92       	push	r13
    47dc:	ef 92       	push	r14
    47de:	ff 92       	push	r15
    47e0:	0f 93       	push	r16
    47e2:	1f 93       	push	r17
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	ab 97       	sbiw	r28, 0x2b	; 43
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	f8 94       	cli
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	cd bf       	out	0x3d, r28	; 61
	//vars declaration
	ucSendDataSize = 0;
    47f8:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <ucSendDataSize>
	u8 n = 0;

	
  #ifdef MACHINE_CONNECTED
	#if (DEVICE_CONNECTED == MDC_MACHINE)
	if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
    47fc:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <ucDeviceStateFlag>
    4800:	81 30       	cpi	r24, 0x01	; 1
    4802:	41 f5       	brne	.+80     	; 0x4854 <APP_TaskHandler+0x7e>
	{
        DevicePoll();	
    4804:	0e 94 8b 23 	call	0x4716	; 0x4716 <DevicePoll>
		
		
		if (ucDeviceStateFlag == DEVICE_STATUS_ONLINE)
    4808:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <ucDeviceStateFlag>
    480c:	82 30       	cpi	r24, 0x02	; 2
    480e:	11 f5       	brne	.+68     	; 0x4854 <APP_TaskHandler+0x7e>
    4810:	8f e1       	ldi	r24, 0x1F	; 31
    4812:	9e e4       	ldi	r25, 0x4E	; 78
    4814:	01 97       	sbiw	r24, 0x01	; 1
    4816:	f1 f7       	brne	.-4      	; 0x4814 <APP_TaskHandler+0x3e>
    4818:	00 c0       	rjmp	.+0      	; 0x481a <APP_TaskHandler+0x44>
    481a:	00 00       	nop
			//if (macConfig.associated == false)
			{
				//appPingReq(DEFAULT_COORD_ADDR);
				//appStartScan();
			}
			if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
    481c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4820:	81 ff       	sbrs	r24, 1
    4822:	02 c0       	rjmp	.+4      	; 0x4828 <APP_TaskHandler+0x52>
			{
				//Display "No Setup" message on machine
				displayMsg(SETUP_MSG);				
    4824:	82 e0       	ldi	r24, 0x02	; 2
    4826:	14 c0       	rjmp	.+40     	; 0x4850 <APP_TaskHandler+0x7a>
			}
			else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
    4828:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <macConfig+0x8>
    482c:	91 11       	cpse	r25, r1
    482e:	02 c0       	rjmp	.+4      	; 0x4834 <APP_TaskHandler+0x5e>
    4830:	83 ff       	sbrs	r24, 3
    4832:	02 c0       	rjmp	.+4      	; 0x4838 <APP_TaskHandler+0x62>
    4834:	84 ff       	sbrs	r24, 4
    4836:	02 c0       	rjmp	.+4      	; 0x483c <APP_TaskHandler+0x66>
			{
				//Display "Service message" message on machine
				displayMsg(SERVICE_MSG);				
    4838:	83 e0       	ldi	r24, 0x03	; 3
    483a:	0a c0       	rjmp	.+20     	; 0x4850 <APP_TaskHandler+0x7a>
			}
			else if (ReaderStateFlag.Busy == true)
    483c:	86 ff       	sbrs	r24, 6
    483e:	0a c0       	rjmp	.+20     	; 0x4854 <APP_TaskHandler+0x7e>
			{
				#if (DEVICE_CONNECTED == MDC_MACHINE)
				//Display busy message
				if( OP != WAIT_FOR_SERVER ) // ****need to put op code in a queue****
    4840:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <OP>
    4844:	87 30       	cpi	r24, 0x07	; 7
    4846:	19 f0       	breq	.+6      	; 0x484e <APP_TaskHandler+0x78>
				{
					OP = WAIT_FOR_SERVER;
    4848:	87 e0       	ldi	r24, 0x07	; 7
    484a:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
				}					
				displayMsg(BUSY_MSG);
    484e:	84 e0       	ldi	r24, 0x04	; 4
    4850:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayMsg>
	}
	#endif // MDC_MACHINE
	
  #endif

if(macConfig.associated == true/*/false*/ || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
    4854:	20 91 44 0b 	lds	r18, 0x0B44	; 0x800b44 <macConfig+0x8>
    4858:	21 11       	cpse	r18, r1
    485a:	04 c0       	rjmp	.+8      	; 0x4864 <APP_TaskHandler+0x8e>
    485c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4860:	83 ff       	sbrs	r24, 3
    4862:	0f c3       	rjmp	.+1566   	; 0x4e82 <APP_TaskHandler+0x6ac>
{		
	switch(OP){
    4864:	e0 91 95 08 	lds	r30, 0x0895	; 0x800895 <OP>
    4868:	8e 2f       	mov	r24, r30
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	fc 01       	movw	r30, r24
    486e:	31 97       	sbiw	r30, 0x01	; 1
    4870:	e8 32       	cpi	r30, 0x28	; 40
    4872:	f1 05       	cpc	r31, r1
    4874:	08 f0       	brcs	.+2      	; 0x4878 <APP_TaskHandler+0xa2>
    4876:	05 c3       	rjmp	.+1546   	; 0x4e82 <APP_TaskHandler+0x6ac>
    4878:	e6 56       	subi	r30, 0x66	; 102
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	0c 94 49 2d 	jmp	0x5a92	; 0x5a92 <__tablejump2__>
		case VALIDATE_READER:
		//TODO: fix machine type switch
		// 
				#if (DEVICE_CONNECTED == MDC_MACHINE) 
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
    4880:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4884:	83 ff       	sbrs	r24, 3
    4886:	04 c0       	rjmp	.+8      	; 0x4890 <APP_TaskHandler+0xba>
    4888:	81 fd       	sbrc	r24, 1
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <APP_TaskHandler+0xba>
				{	
					OP = INIT_READER;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	f4 c2       	rjmp	.+1512   	; 0x4e78 <APP_TaskHandler+0x6a2>
				}
				else{													
				#endif //MDC_MACHINE 
				
					#if (DEVICE_CONNECTED == MDC_MACHINE)
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (MdcStatus.MachineType[0] != INVALID_MACHINE) ){
    4890:	81 fb       	bst	r24, 1
    4892:	99 27       	eor	r25, r25
    4894:	90 f9       	bld	r25, 0
    4896:	81 fd       	sbrc	r24, 1
    4898:	02 c0       	rjmp	.+4      	; 0x489e <APP_TaskHandler+0xc8>
    489a:	80 ff       	sbrs	r24, 0
    489c:	0b c0       	rjmp	.+22     	; 0x48b4 <APP_TaskHandler+0xde>
    489e:	20 91 10 0a 	lds	r18, 0x0A10	; 0x800a10 <MdcStatus>
    48a2:	22 23       	and	r18, r18
    48a4:	29 f0       	breq	.+10     	; 0x48b0 <APP_TaskHandler+0xda>
						
						SETUP_TIMEOUT = true;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server				
    48ac:	8a e0       	ldi	r24, 0x0A	; 10
    48ae:	e4 c2       	rjmp	.+1480   	; 0x4e78 <APP_TaskHandler+0x6a2>
											
					#endif
	
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) ){
    48b0:	91 11       	cpse	r25, r1
    48b2:	e7 c2       	rjmp	.+1486   	; 0x4e82 <APP_TaskHandler+0x6ac>
    48b4:	82 ff       	sbrs	r24, 2
    48b6:	ea cf       	rjmp	.-44     	; 0x488c <APP_TaskHandler+0xb6>
                       	
						VALIDATION_TIMEOUT = false;
    48b8:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <VALIDATION_TIMEOUT>
						sendValidationRequest();
    48bc:	0e 94 bb 02 	call	0x576	; 0x576 <sendValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
    48c0:	80 e8       	ldi	r24, 0x80	; 128
    48c2:	e7 e3       	ldi	r30, 0x37	; 55
    48c4:	fc e0       	ldi	r31, 0x0C	; 12
    48c6:	df 01       	movw	r26, r30
    48c8:	1d 92       	st	X+, r1
    48ca:	8a 95       	dec	r24
    48cc:	e9 f7       	brne	.-6      	; 0x48c8 <APP_TaskHandler+0xf2>
					   
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
    48ce:	6c e2       	ldi	r22, 0x2C	; 44
    48d0:	71 e2       	ldi	r23, 0x21	; 33
    48d2:	8c e3       	ldi	r24, 0x3C	; 60
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
    48da:	84 e1       	ldi	r24, 0x14	; 20
    48dc:	cd c2       	rjmp	.+1434   	; 0x4e78 <APP_TaskHandler+0x6a2>
			break;

		case INIT_READER:
			#if (DEVICE_CONNECTED == MDC_MACHINE)
			
			if( isMachineCycleRunning() )
    48de:	0e 94 89 0c 	call	0x1912	; 0x1912 <isMachineCycleRunning>
    48e2:	88 23       	and	r24, r24
    48e4:	09 f4       	brne	.+2      	; 0x48e8 <APP_TaskHandler+0x112>
    48e6:	c5 c2       	rjmp	.+1418   	; 0x4e72 <APP_TaskHandler+0x69c>
			{
				OP = CYCLE_STARTED;
    48e8:	80 e1       	ldi	r24, 0x10	; 16
    48ea:	c6 c2       	rjmp	.+1420   	; 0x4e78 <APP_TaskHandler+0x6a2>
			 break;

		case SCANNING: //scan for card swipe

                // Enable Heart beat routine
                    if (uiFunctionEntered < (20 * (F_CPU/4000000)))
    48ec:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uiFunctionEntered>
    48f0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uiFunctionEntered+0x1>
    48f4:	80 35       	cpi	r24, 0x50	; 80
    48f6:	91 05       	cpc	r25, r1
    48f8:	30 f4       	brcc	.+12     	; 0x4906 <APP_TaskHandler+0x130>
                    {
                        uiFunctionEntered++;
    48fa:	01 96       	adiw	r24, 0x01	; 1
    48fc:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <uiFunctionEntered+0x1>
    4900:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uiFunctionEntered>
    4904:	04 c0       	rjmp	.+8      	; 0x490e <APP_TaskHandler+0x138>
                    }
                    else
                    {						
                        uiFunctionEntered = 0;					
    4906:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <uiFunctionEntered+0x1>
    490a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <uiFunctionEntered>
                    }
	
					if(!Request(ISO14443_3_REQALL, tmp))
    490e:	be 01       	movw	r22, r28
    4910:	6f 5f       	subi	r22, 0xFF	; 255
    4912:	7f 4f       	sbci	r23, 0xFF	; 255
    4914:	82 e5       	ldi	r24, 0x52	; 82
    4916:	0e 94 9d 10 	call	0x213a	; 0x213a <Request>
    491a:	89 2b       	or	r24, r25
    491c:	09 f0       	breq	.+2      	; 0x4920 <APP_TaskHandler+0x14a>
    491e:	b1 c2       	rjmp	.+1378   	; 0x4e82 <APP_TaskHandler+0x6ac>
					{
						u8 cardType;
						u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
    4920:	86 e0       	ldi	r24, 0x06	; 6
    4922:	e1 e3       	ldi	r30, 0x31	; 49
    4924:	f2 e0       	ldi	r31, 0x02	; 2
    4926:	de 01       	movw	r26, r28
    4928:	5f 96       	adiw	r26, 0x1f	; 31
    492a:	01 90       	ld	r0, Z+
    492c:	0d 92       	st	X+, r0
    492e:	8a 95       	dec	r24
    4930:	e1 f7       	brne	.-8      	; 0x492a <APP_TaskHandler+0x154>
						
						/*anti-collision and select the card*/
						if(!AnticollSelect(0, tmp, &cardType))
    4932:	ae 01       	movw	r20, r28
    4934:	49 5d       	subi	r20, 0xD9	; 217
    4936:	5f 4f       	sbci	r21, 0xFF	; 255
    4938:	be 01       	movw	r22, r28
    493a:	6f 5f       	subi	r22, 0xFF	; 255
    493c:	7f 4f       	sbci	r23, 0xFF	; 255
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	0e 94 4d 12 	call	0x249a	; 0x249a <AnticollSelect>
    4944:	89 2b       	or	r24, r25
    4946:	09 f0       	breq	.+2      	; 0x494a <APP_TaskHandler+0x174>
    4948:	9c c2       	rjmp	.+1336   	; 0x4e82 <APP_TaskHandler+0x6ac>
						{
							if(cardType == MIFARE_1K)
    494a:	8f a1       	ldd	r24, Y+39	; 0x27
    494c:	88 30       	cpi	r24, 0x08	; 8
    494e:	69 f4       	brne	.+26     	; 0x496a <APP_TaskHandler+0x194>
							{
								CurrentAccount.Type = MIFARE_1K;
    4950:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <CurrentAccount>
								
								Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	ae 01       	movw	r20, r28
    4958:	4f 5f       	subi	r20, 0xFF	; 255
    495a:	5f 4f       	sbci	r21, 0xFF	; 255
    495c:	be 01       	movw	r22, r28
    495e:	61 5e       	subi	r22, 0xE1	; 225
    4960:	7f 4f       	sbci	r23, 0xFF	; 255
    4962:	80 e6       	ldi	r24, 0x60	; 96
    4964:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <Authentication>
    4968:	02 c0       	rjmp	.+4      	; 0x496e <APP_TaskHandler+0x198>
							}
							else 
							{
								CurrentAccount.Type = 0;
    496a:	10 92 88 08 	sts	0x0888, r1	; 0x800888 <CurrentAccount>
							}								
							OP = CARD_DETECTED;	
    496e:	8c e0       	ldi	r24, 0x0C	; 12
    4970:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
							ledoff1();
    4974:	0e 94 28 21 	call	0x4250	; 0x4250 <ledoff1>
    4978:	84 c2       	rjmp	.+1288   	; 0x4e82 <APP_TaskHandler+0x6ac>
		
		case CARD_DETECTED:		
			{			
				

				u8 cardNum[10] = {0};	
    497a:	8e 01       	movw	r16, r28
    497c:	0f 5f       	subi	r16, 0xFF	; 255
    497e:	1f 4f       	sbci	r17, 0xFF	; 255
    4980:	8a e0       	ldi	r24, 0x0A	; 10
    4982:	f8 01       	movw	r30, r16
    4984:	11 92       	st	Z+, r1
    4986:	8a 95       	dec	r24
    4988:	e9 f7       	brne	.-6      	; 0x4984 <APP_TaskHandler+0x1ae>
				//memset(DataBuffer,0,sizeof(DataBuffer));	// Clear Buffer
				
				
				//Read CardID from User Zone
				if(!readCardID(CurrentAccount.Type, &cardNum[0]))
    498a:	b8 01       	movw	r22, r16
    498c:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <CurrentAccount>
    4990:	0e 94 9a 13 	call	0x2734	; 0x2734 <readCardID>
    4994:	89 2b       	or	r24, r25
    4996:	09 f0       	breq	.+2      	; 0x499a <APP_TaskHandler+0x1c4>
    4998:	8c c0       	rjmp	.+280    	; 0x4ab2 <APP_TaskHandler+0x2dc>
				{
					padLeft((char*)&cardNum[0],9,"200");
    499a:	43 e3       	ldi	r20, 0x33	; 51
    499c:	55 e0       	ldi	r21, 0x05	; 5
    499e:	69 e0       	ldi	r22, 0x09	; 9
    49a0:	c8 01       	movw	r24, r16
    49a2:	0e 94 93 23 	call	0x4726	; 0x4726 <padLeft>
					
					CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
    49a6:	4a e0       	ldi	r20, 0x0A	; 10
    49a8:	50 e0       	ldi	r21, 0x00	; 0
    49aa:	60 e0       	ldi	r22, 0x00	; 0
    49ac:	70 e0       	ldi	r23, 0x00	; 0
    49ae:	c8 01       	movw	r24, r16
    49b0:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <strtoul>
    49b4:	60 93 89 08 	sts	0x0889, r22	; 0x800889 <CurrentAccount+0x1>
    49b8:	70 93 8a 08 	sts	0x088A, r23	; 0x80088a <CurrentAccount+0x2>
    49bc:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <CurrentAccount+0x3>
    49c0:	90 93 8c 08 	sts	0x088C, r25	; 0x80088c <CurrentAccount+0x4>
					
					if(macConfig.associated == true)
    49c4:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    49c8:	88 23       	and	r24, r24
    49ca:	a1 f1       	breq	.+104    	; 0x4a34 <APP_TaskHandler+0x25e>
					{					
						// Send Data Package via Radio						
						sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
    49cc:	1f 93       	push	r17
    49ce:	0f 93       	push	r16
    49d0:	87 e3       	ldi	r24, 0x37	; 55
    49d2:	95 e0       	ldi	r25, 0x05	; 5
    49d4:	9f 93       	push	r25
    49d6:	8f 93       	push	r24
    49d8:	01 ee       	ldi	r16, 0xE1	; 225
    49da:	18 e0       	ldi	r17, 0x08	; 8
    49dc:	1f 93       	push	r17
    49de:	0f 93       	push	r16
    49e0:	0e 94 04 32 	call	0x6408	; 0x6408 <sprintf>

						ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
    49e4:	f8 01       	movw	r30, r16
    49e6:	01 90       	ld	r0, Z+
    49e8:	00 20       	and	r0, r0
    49ea:	e9 f7       	brne	.-6      	; 0x49e6 <APP_TaskHandler+0x210>
    49ec:	bf 01       	movw	r22, r30
    49ee:	62 5e       	subi	r22, 0xE2	; 226
    49f0:	78 40       	sbci	r23, 0x08	; 8
						ucSendDataBuffer[0] = ucSendDataSize;   // Length
    49f2:	60 93 e0 08 	sts	0x08E0, r22	; 0x8008e0 <ucSendDataBuffer>
						ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
    49f6:	6f 5f       	subi	r22, 0xFF	; 255
    49f8:	60 93 a3 09 	sts	0x09A3, r22	; 0x8009a3 <ucSendDataSize>
						macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
    49fc:	40 ee       	ldi	r20, 0xE0	; 224
    49fe:	58 e0       	ldi	r21, 0x08	; 8
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <macDataRequest>
									
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
    4a08:	80 e8       	ldi	r24, 0x80	; 128
    4a0a:	e7 e3       	ldi	r30, 0x37	; 55
    4a0c:	fc e0       	ldi	r31, 0x0C	; 12
    4a0e:	df 01       	movw	r26, r30
    4a10:	1d 92       	st	X+, r1
    4a12:	8a 95       	dec	r24
    4a14:	e9 f7       	brne	.-6      	; 0x4a10 <APP_TaskHandler+0x23a>
					
						OP = WAIT_FOR_SERVER;
    4a16:	87 e0       	ldi	r24, 0x07	; 7
    4a18:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
						ReaderStateFlag.Busy = true;
    4a1c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4a20:	80 64       	ori	r24, 0x40	; 64
    4a22:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	3a c0       	rjmp	.+116    	; 0x4aa8 <APP_TaskHandler+0x2d2>
						
					}
					#if (DEVICE_CONNECTED == MDC_MACHINE)


					else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
    4a34:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4a38:	83 ff       	sbrs	r24, 3
    4a3a:	33 c0       	rjmp	.+102    	; 0x4aa2 <APP_TaskHandler+0x2cc>
    4a3c:	84 fd       	sbrc	r24, 4
    4a3e:	31 c0       	rjmp	.+98     	; 0x4aa2 <APP_TaskHandler+0x2cc>
					{//allow cycle to start when BOW is down
						CurrentAccount.Value = vendPrice * 100;				 
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	48 ec       	ldi	r20, 0xC8	; 200
    4a46:	52 e4       	ldi	r21, 0x42	; 66
    4a48:	60 91 cc 0b 	lds	r22, 0x0BCC	; 0x800bcc <vendPrice>
    4a4c:	70 91 cd 0b 	lds	r23, 0x0BCD	; 0x800bcd <vendPrice+0x1>
    4a50:	80 91 ce 0b 	lds	r24, 0x0BCE	; 0x800bce <vendPrice+0x2>
    4a54:	90 91 cf 0b 	lds	r25, 0x0BCF	; 0x800bcf <vendPrice+0x3>
    4a58:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulsf3>
    4a5c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__fixunssfsi>
    4a60:	70 93 90 08 	sts	0x0890, r23	; 0x800890 <CurrentAccount+0x8>
    4a64:	60 93 8f 08 	sts	0x088F, r22	; 0x80088f <CurrentAccount+0x7>
    					//CurrentAccount.CardState = CARD_IN;
    					if( cardInserted(REGULAR_VEND) )
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <cardInserted>
    4a6e:	88 23       	and	r24, r24
    4a70:	d9 f0       	breq	.+54     	; 0x4aa8 <APP_TaskHandler+0x2d2>
    					{
							
							OP = WAIT_FOR_SELECTION;
    4a72:	88 e0       	ldi	r24, 0x08	; 8
    4a74:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
							
							KPTOFlag = 0;
    4a78:	10 92 86 08 	sts	0x0886, r1	; 0x800886 <KPTOFlag>
							
							if( waitForMachineStartKey() )
    4a7c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <waitForMachineStartKey>
    4a80:	88 23       	and	r24, r24
    4a82:	41 f0       	breq	.+16     	; 0x4a94 <APP_TaskHandler+0x2be>
							{
    							macSetLongAlarm(MachineSetupData.KeyPressWaitTime,KeypressTimeOut);
    4a84:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <MachineSetupData>
    4a88:	69 e3       	ldi	r22, 0x39	; 57
    4a8a:	71 e2       	ldi	r23, 0x21	; 33
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <macSetLongAlarm>
    4a92:	0a c0       	rjmp	.+20     	; 0x4aa8 <APP_TaskHandler+0x2d2>
							}
							else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.								
    4a94:	69 e3       	ldi	r22, 0x39	; 57
    4a96:	71 e2       	ldi	r23, 0x21	; 33
    4a98:	84 ef       	ldi	r24, 0xF4	; 244
    4a9a:	91 e0       	ldi	r25, 0x01	; 1
    4a9c:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    4aa0:	03 c0       	rjmp	.+6      	; 0x4aa8 <APP_TaskHandler+0x2d2>
    					
						}							
					}
					else{
						OP = SCANNING;
    4aa2:	82 e0       	ldi	r24, 0x02	; 2
    4aa4:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
					#if (DEBUG)
						Beeps(1);
					#endif

					//Set Timeout timer
					TOFlag = 0;
    4aa8:	10 92 87 08 	sts	0x0887, r1	; 0x800887 <TOFlag>
					ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
    4aac:	60 e3       	ldi	r22, 0x30	; 48
    4aae:	71 e2       	ldi	r23, 0x21	; 33
    4ab0:	d6 c1       	rjmp	.+940    	; 0x4e5e <APP_TaskHandler+0x688>
				else
				{					
					#if (DEBUG)
						debugMsgStr("\r\nInvalid CardID\r\n");
					#endif
					OP = SCARD_REMOVED;
    4ab2:	8d e0       	ldi	r24, 0x0D	; 13
    4ab4:	e1 c1       	rjmp	.+962    	; 0x4e78 <APP_TaskHandler+0x6a2>
				}		
			break;

		case SEND_OFFLINE_TRANSACTIONS:
		
			if (timeout.sendingOfflineTransactions)
    4ab6:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <timeout>
    4aba:	80 ff       	sbrs	r24, 0
    4abc:	e2 c1       	rjmp	.+964    	; 0x4e82 <APP_TaskHandler+0x6ac>
			{
				timeout.sendingOfflineTransactions = false;
    4abe:	8e 7f       	andi	r24, 0xFE	; 254
    4ac0:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <timeout>
    4ac4:	d8 c1       	rjmp	.+944    	; 0x4e76 <APP_TaskHandler+0x6a0>
			
		case SHOW_BALANCE_REQUEST:
		case WAIT_FOR_SERVER: //wait for response from server


		    if(DataBuffer[0] != '\0')
    4ac6:	80 91 37 0c 	lds	r24, 0x0C37	; 0x800c37 <DataBuffer>
    4aca:	88 23       	and	r24, r24
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <APP_TaskHandler+0x2fa>
    4ace:	b8 c0       	rjmp	.+368    	; 0x4c40 <APP_TaskHandler+0x46a>
			{
			  // Print response
			
				ReaderStateFlag.Busy = false;
    4ad0:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4ad4:	8f 7b       	andi	r24, 0xBF	; 191
    4ad6:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
				debugMsgStr("\r\n");
				debugMsgStr(DataBuffer);	
				debugMsgStr("\r\n");
				#endif

				OP = SCARD_REMOVED;
    4ada:	8d e0       	ldi	r24, 0x0D	; 13
    4adc:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>

                #if (DEVICE_CONNECTED == MDC_MACHINE)
                    
                    //Extract the Card Id				
    				if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
    4ae0:	63 e4       	ldi	r22, 0x43	; 67
    4ae2:	75 e0       	ldi	r23, 0x05	; 5
    4ae4:	87 e3       	ldi	r24, 0x37	; 55
    4ae6:	9c e0       	ldi	r25, 0x0C	; 12
    4ae8:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
    4aec:	00 97       	sbiw	r24, 0x00	; 0
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <APP_TaskHandler+0x31c>
    4af0:	a4 c0       	rjmp	.+328    	; 0x4c3a <APP_TaskHandler+0x464>
                    {						
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
    4af2:	4a e0       	ldi	r20, 0x0A	; 10
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	60 e0       	ldi	r22, 0x00	; 0
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	04 96       	adiw	r24, 0x04	; 4
    4afc:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <strtoul>
    4b00:	60 93 89 08 	sts	0x0889, r22	; 0x800889 <CurrentAccount+0x1>
    4b04:	70 93 8a 08 	sts	0x088A, r23	; 0x80088a <CurrentAccount+0x2>
    4b08:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <CurrentAccount+0x3>
    4b0c:	90 93 8c 08 	sts	0x088C, r25	; 0x80088c <CurrentAccount+0x4>
						

								
    					//Display card balance on machine
    					double fBalance = 0.0;
    					uctempBuf = strstr((char *)DataBuffer,"Balance: ");
    4b10:	68 e4       	ldi	r22, 0x48	; 72
    4b12:	75 e0       	ldi	r23, 0x05	; 5
    4b14:	87 e3       	ldi	r24, 0x37	; 55
    4b16:	9c e0       	ldi	r25, 0x0C	; 12
    4b18:	0e 94 88 31 	call	0x6310	; 0x6310 <strstr>
    4b1c:	7c 01       	movw	r14, r24
						
    					uctempBuf += 9;
    4b1e:	8c 01       	movw	r16, r24
    4b20:	07 5f       	subi	r16, 0xF7	; 247
    4b22:	1f 4f       	sbci	r17, 0xFF	; 255
    					ptr = strchr(uctempBuf,'.');
    4b24:	6e e2       	ldi	r22, 0x2E	; 46
    4b26:	70 e0       	ldi	r23, 0x00	; 0
    4b28:	c8 01       	movw	r24, r16
    4b2a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <strchr>
						k = ptr - uctempBuf;
    4b2e:	28 2f       	mov	r18, r24
    4b30:	20 1b       	sub	r18, r16
						fBalance = atof(uctempBuf);
    4b32:	c8 01       	movw	r24, r16
    4b34:	2b a7       	std	Y+43, r18	; 0x2b
    4b36:	0e 94 2f 30 	call	0x605e	; 0x605e <atof>
     
    					// Format the Balance to XX.XX
						if (k <2)
    4b3a:	2b a5       	ldd	r18, Y+43	; 0x2b
    4b3c:	22 30       	cpi	r18, 0x02	; 2
    4b3e:	38 f4       	brcc	.+14     	; 0x4b4e <APP_TaskHandler+0x378>
						 sprintf(uctempBuf,"0%.2f",fBalance);
    4b40:	9f 93       	push	r25
    4b42:	8f 93       	push	r24
    4b44:	7f 93       	push	r23
    4b46:	6f 93       	push	r22
    4b48:	82 e5       	ldi	r24, 0x52	; 82
    4b4a:	95 e0       	ldi	r25, 0x05	; 5
    4b4c:	08 c0       	rjmp	.+16     	; 0x4b5e <APP_TaskHandler+0x388>
						else if(k == 2)
    4b4e:	22 30       	cpi	r18, 0x02	; 2
    4b50:	91 f4       	brne	.+36     	; 0x4b76 <APP_TaskHandler+0x3a0>
						 sprintf(uctempBuf,"%.2f",fBalance);
    4b52:	9f 93       	push	r25
    4b54:	8f 93       	push	r24
    4b56:	7f 93       	push	r23
    4b58:	6f 93       	push	r22
    4b5a:	83 e5       	ldi	r24, 0x53	; 83
    4b5c:	95 e0       	ldi	r25, 0x05	; 5
    4b5e:	9f 93       	push	r25
    4b60:	8f 93       	push	r24
    4b62:	1f 93       	push	r17
    4b64:	0f 93       	push	r16
    4b66:	0e 94 04 32 	call	0x6408	; 0x6408 <sprintf>
    4b6a:	0f b6       	in	r0, 0x3f	; 63
    4b6c:	f8 94       	cli
    4b6e:	de bf       	out	0x3e, r29	; 62
    4b70:	0f be       	out	0x3f, r0	; 63
    4b72:	cd bf       	out	0x3d, r28	; 61
    4b74:	05 c0       	rjmp	.+10     	; 0x4b80 <APP_TaskHandler+0x3aa>
						else
						 strcpy(uctempBuf,"99.99");
    4b76:	68 e5       	ldi	r22, 0x58	; 88
    4b78:	75 e0       	ldi	r23, 0x05	; 5
    4b7a:	c8 01       	movw	r24, r16
    4b7c:	0e 94 67 31 	call	0x62ce	; 0x62ce <strcpy>
 
     					//Format the Display Balance
    					CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;				 
    4b80:	d7 01       	movw	r26, r14
    4b82:	19 96       	adiw	r26, 0x09	; 9
    4b84:	2c 91       	ld	r18, X
    4b86:	19 97       	sbiw	r26, 0x09	; 9
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	20 53       	subi	r18, 0x30	; 48
    4b8c:	31 09       	sbc	r19, r1
    4b8e:	88 ee       	ldi	r24, 0xE8	; 232
    4b90:	93 e0       	ldi	r25, 0x03	; 3
    4b92:	28 9f       	mul	r18, r24
    4b94:	a0 01       	movw	r20, r0
    4b96:	29 9f       	mul	r18, r25
    4b98:	50 0d       	add	r21, r0
    4b9a:	38 9f       	mul	r19, r24
    4b9c:	50 0d       	add	r21, r0
    4b9e:	11 24       	eor	r1, r1
    4ba0:	1a 96       	adiw	r26, 0x0a	; 10
    4ba2:	2c 91       	ld	r18, X
    4ba4:	1a 97       	sbiw	r26, 0x0a	; 10
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
    4ba8:	20 53       	subi	r18, 0x30	; 48
    4baa:	31 09       	sbc	r19, r1
    4bac:	64 e6       	ldi	r22, 0x64	; 100
    4bae:	62 9f       	mul	r22, r18
    4bb0:	c0 01       	movw	r24, r0
    4bb2:	63 9f       	mul	r22, r19
    4bb4:	90 0d       	add	r25, r0
    4bb6:	11 24       	eor	r1, r1
    4bb8:	84 0f       	add	r24, r20
    4bba:	95 1f       	adc	r25, r21
    4bbc:	1c 96       	adiw	r26, 0x0c	; 12
    4bbe:	4c 91       	ld	r20, X
    4bc0:	1c 97       	sbiw	r26, 0x0c	; 12
    4bc2:	50 e0       	ldi	r21, 0x00	; 0
    4bc4:	40 53       	subi	r20, 0x30	; 48
    4bc6:	51 09       	sbc	r21, r1
    4bc8:	6a e0       	ldi	r22, 0x0A	; 10
    4bca:	64 9f       	mul	r22, r20
    4bcc:	90 01       	movw	r18, r0
    4bce:	65 9f       	mul	r22, r21
    4bd0:	30 0d       	add	r19, r0
    4bd2:	11 24       	eor	r1, r1
    4bd4:	82 0f       	add	r24, r18
    4bd6:	93 1f       	adc	r25, r19
    4bd8:	1d 96       	adiw	r26, 0x0d	; 13
    4bda:	2c 91       	ld	r18, X
    4bdc:	82 0f       	add	r24, r18
    4bde:	91 1d       	adc	r25, r1
    4be0:	c0 97       	sbiw	r24, 0x30	; 48
    4be2:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <CurrentAccount+0x8>
    4be6:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <CurrentAccount+0x7>


						#if(DEVICE_CONNECTED == MDC_MACHINE)
						
						// give display control back to front end controller.
						displayMsg(BLANK_MSG);
    4bea:	85 e0       	ldi	r24, 0x05	; 5
    4bec:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayMsg>
    4bf0:	bf ef       	ldi	r27, 0xFF	; 255
    4bf2:	e1 ee       	ldi	r30, 0xE1	; 225
    4bf4:	f4 e0       	ldi	r31, 0x04	; 4
    4bf6:	b1 50       	subi	r27, 0x01	; 1
    4bf8:	e0 40       	sbci	r30, 0x00	; 0
    4bfa:	f0 40       	sbci	r31, 0x00	; 0
    4bfc:	e1 f7       	brne	.-8      	; 0x4bf6 <APP_TaskHandler+0x420>
    4bfe:	00 c0       	rjmp	.+0      	; 0x4c00 <APP_TaskHandler+0x42a>
    4c00:	00 00       	nop
    					_delay_ms(100);
						
						if( cardInserted(REGULAR_VEND) )
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	0e 94 77 0c 	call	0x18ee	; 0x18ee <cardInserted>
    4c08:	88 23       	and	r24, r24
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <APP_TaskHandler+0x438>
    4c0c:	3a c1       	rjmp	.+628    	; 0x4e82 <APP_TaskHandler+0x6ac>
    						#if(DEBUG_BOW)
    						debugMsgStr("\r\nSerialSendMachineData(CASH_CARD_INSERTED)\r\n");
    						#endif

    						//CurrentAccount.CardState = CARD_OUT;
    						OP = WAIT_FOR_SELECTION;
    4c0e:	88 e0       	ldi	r24, 0x08	; 8
    4c10:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    					//Sound Buzzer
    						#if (DEBUG)
								Beeps(2);
							#endif

    						KPTOFlag = 0;
    4c14:	10 92 86 08 	sts	0x0886, r1	; 0x800886 <KPTOFlag>
							
							if( waitForMachineStartKey() )
    4c18:	0e 94 8b 0c 	call	0x1916	; 0x1916 <waitForMachineStartKey>
    4c1c:	88 23       	and	r24, r24
    4c1e:	31 f0       	breq	.+12     	; 0x4c2c <APP_TaskHandler+0x456>
							{
    							macSetLongAlarm(MachineSetupData.KeyPressWaitTime,KeypressTimeOut);
    4c20:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <MachineSetupData>
    4c24:	69 e3       	ldi	r22, 0x39	; 57
    4c26:	71 e2       	ldi	r23, 0x21	; 33
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	1b c1       	rjmp	.+566    	; 0x4e62 <APP_TaskHandler+0x68c>
							}
							else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.								
    4c2c:	69 e3       	ldi	r22, 0x39	; 57
    4c2e:	71 e2       	ldi	r23, 0x21	; 33
    4c30:	84 ef       	ldi	r24, 0xF4	; 244
    4c32:	91 e0       	ldi	r25, 0x01	; 1
    4c34:	0e 94 67 1e 	call	0x3cce	; 0x3cce <macSetAlarm>
    4c38:	24 c1       	rjmp	.+584    	; 0x4e82 <APP_TaskHandler+0x6ac>
    					}
						#endif	//MDC_MACHINE
					}	//serial number found in server database
					else //serial number error from server database
					{
						CommTimeOut();//TOFlag = 1;	//force timeout condition
    4c3a:	0e 94 30 21 	call	0x4260	; 0x4260 <CommTimeOut>
    4c3e:	21 c1       	rjmp	.+578    	; 0x4e82 <APP_TaskHandler+0x6ac>
					}											
                #endif//MDC_MACHINE

			 }
			 else if(TOFlag == 1 || macConfig.associated == false) // server fails to respond in time
    4c40:	80 91 87 08 	lds	r24, 0x0887	; 0x800887 <TOFlag>
    4c44:	81 30       	cpi	r24, 0x01	; 1
    4c46:	11 f0       	breq	.+4      	; 0x4c4c <APP_TaskHandler+0x476>
    4c48:	21 11       	cpse	r18, r1
    4c4a:	1b c1       	rjmp	.+566    	; 0x4e82 <APP_TaskHandler+0x6ac>

				// Error Occured
				// Re-enter SCANNING mode

				#if(DEVICE_CONNECTED == MDC_MACHINE)
				if ( cardRemoved(REMOVE_CARD) )
    4c4c:	82 e0       	ldi	r24, 0x02	; 2
    4c4e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <cardRemoved>
    4c52:	88 23       	and	r24, r24
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <APP_TaskHandler+0x482>
    4c56:	15 c1       	rjmp	.+554    	; 0x4e82 <APP_TaskHandler+0x6ac>
				{
					//TOFlag = 1;
					ReaderStateFlag.Busy = false;
    4c58:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4c5c:	8f 7b       	andi	r24, 0xBF	; 191
    4c5e:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
					//send error message to machine display
					displayMsg(CARD_ERR_MSG);				
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayMsg>
    4c68:	06 c1       	rjmp	.+524    	; 0x4e76 <APP_TaskHandler+0x6a0>
			 break;

		case WAIT_FOR_SELECTION: //wait to see if cycle start has been requested by user

			#if(DEVICE_CONNECTED == MDC_MACHINE)
            if( (MdcStatus.CmdToReader == DEDUCT_VEND_COMMAND || MdcStatus.CmdToReader == DEDUCT_TOPOFF_COMMAND) )
    4c6a:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <MdcStatus+0x3>
    4c6e:	86 54       	subi	r24, 0x46	; 70
    4c70:	82 30       	cpi	r24, 0x02	; 2
    4c72:	10 f4       	brcc	.+4      	; 0x4c78 <APP_TaskHandler+0x4a2>
			{
					OP = START_CYCLE; // set only if vend price deduction successful.
    4c74:	8f e0       	ldi	r24, 0x0F	; 15
    4c76:	00 c1       	rjmp	.+512    	; 0x4e78 <APP_TaskHandler+0x6a2>

			}
			else if(KPTOFlag == 1)
    4c78:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <KPTOFlag>
    4c7c:	81 30       	cpi	r24, 0x01	; 1
    4c7e:	09 f0       	breq	.+2      	; 0x4c82 <APP_TaskHandler+0x4ac>
    4c80:	00 c1       	rjmp	.+512    	; 0x4e82 <APP_TaskHandler+0x6ac>
			{			
				if ( cardRemoved(CASH_CARD) )
    4c82:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <cardRemoved>
    4c86:	81 11       	cpse	r24, r1
    4c88:	f4 c0       	rjmp	.+488    	; 0x4e72 <APP_TaskHandler+0x69c>
    4c8a:	fb c0       	rjmp	.+502    	; 0x4e82 <APP_TaskHandler+0x6ac>

		case START_CYCLE:	// send start cycle command to machine

            #if(DEVICE_CONNECTED == MDC_MACHINE)

			if( startMachineCycle() )//SerialSendMachineData(MACHINE_START_COMMAND) )
    4c8c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <startMachineCycle>
    4c90:	88 23       	and	r24, r24
    4c92:	09 f4       	brne	.+2      	; 0x4c96 <APP_TaskHandler+0x4c0>
    4c94:	6a c0       	rjmp	.+212    	; 0x4d6a <APP_TaskHandler+0x594>
				
				structTransaction vend;
				
				
				
				vend.CardId			= CurrentAccount.ID;
    4c96:	c0 90 89 08 	lds	r12, 0x0889	; 0x800889 <CurrentAccount+0x1>
    4c9a:	d0 90 8a 08 	lds	r13, 0x088A	; 0x80088a <CurrentAccount+0x2>
    4c9e:	e0 90 8b 08 	lds	r14, 0x088B	; 0x80088b <CurrentAccount+0x3>
    4ca2:	f0 90 8c 08 	lds	r15, 0x088C	; 0x80088c <CurrentAccount+0x4>
    4ca6:	ca 86       	std	Y+10, r12	; 0x0a
    4ca8:	db 86       	std	Y+11, r13	; 0x0b
    4caa:	ec 86       	std	Y+12, r14	; 0x0c
    4cac:	fd 86       	std	Y+13, r15	; 0x0d
				vend.vendPrice		= vendPrice * 100;
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	48 ec       	ldi	r20, 0xC8	; 200
    4cb4:	52 e4       	ldi	r21, 0x42	; 66
    4cb6:	60 91 cc 0b 	lds	r22, 0x0BCC	; 0x800bcc <vendPrice>
    4cba:	70 91 cd 0b 	lds	r23, 0x0BCD	; 0x800bcd <vendPrice+0x1>
    4cbe:	80 91 ce 0b 	lds	r24, 0x0BCE	; 0x800bce <vendPrice+0x2>
    4cc2:	90 91 cf 0b 	lds	r25, 0x0BCF	; 0x800bcf <vendPrice+0x3>
    4cc6:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulsf3>
    4cca:	9b 01       	movw	r18, r22
    4ccc:	ac 01       	movw	r20, r24
    4cce:	2b a7       	std	Y+43, r18	; 0x2b
    4cd0:	38 a7       	std	Y+40, r19	; 0x28
    4cd2:	49 a7       	std	Y+41, r20	; 0x29
    4cd4:	5a a7       	std	Y+42, r21	; 0x2a
    4cd6:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__fixunssfsi>
    4cda:	79 87       	std	Y+9, r23	; 0x09
    4cdc:	68 87       	std	Y+8, r22	; 0x08
				vend.LocationId		= ReaderSetup.locationId;
    4cde:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <ReaderSetup+0x6>
    4ce2:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <ReaderSetup+0x7>
    4ce6:	9a 83       	std	Y+2, r25	; 0x02
    4ce8:	89 83       	std	Y+1, r24	; 0x01
				vend.ManufactureId	= ReaderSetup.manufacturerId;
    4cea:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <ReaderSetup+0x4>
    4cee:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <ReaderSetup+0x5>
    4cf2:	9e 83       	std	Y+6, r25	; 0x06
    4cf4:	8d 83       	std	Y+5, r24	; 0x05
				vend.MachineId[0]	= deviceStatus.deviceType[0];
    4cf6:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
    4cfa:	8b 83       	std	Y+3, r24	; 0x03
				vend.MachineId[1]	= deviceStatus.deviceType[1];
    4cfc:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    4d00:	8c 83       	std	Y+4, r24	; 0x04
				
				
				
				if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
    4d02:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x8>
    4d06:	2b a5       	ldd	r18, Y+43	; 0x2b
    4d08:	38 a5       	ldd	r19, Y+40	; 0x28
    4d0a:	49 a5       	ldd	r20, Y+41	; 0x29
    4d0c:	5a a5       	ldd	r21, Y+42	; 0x2a
    4d0e:	81 11       	cpse	r24, r1
    4d10:	0b c0       	rjmp	.+22     	; 0x4d28 <APP_TaskHandler+0x552>
    4d12:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4d16:	83 ff       	sbrs	r24, 3
    4d18:	07 c0       	rjmp	.+14     	; 0x4d28 <APP_TaskHandler+0x552>
				{//must be offline transaction, store a record.
					vend.isOffline = true;
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	8d 8b       	std	Y+21, r24	; 0x15
					storeOfflineTransaction(CurrentAccount.ID);					
    4d1e:	c7 01       	movw	r24, r14
    4d20:	b6 01       	movw	r22, r12
    4d22:	0e 94 b6 06 	call	0xd6c	; 0xd6c <storeOfflineTransaction>
    4d26:	1e c0       	rjmp	.+60     	; 0x4d64 <APP_TaskHandler+0x58e>
				}
				else{
					vend.isOffline = false;	
    4d28:	1d 8a       	std	Y+21, r1	; 0x15
					CurrentAccount.Value -= (vendPrice*100);
    4d2a:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <CurrentAccount+0x7>
    4d2e:	90 91 90 08 	lds	r25, 0x0890	; 0x800890 <CurrentAccount+0x8>
    4d32:	bc 01       	movw	r22, r24
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	2b a7       	std	Y+43, r18	; 0x2b
    4d3a:	38 a7       	std	Y+40, r19	; 0x28
    4d3c:	49 a7       	std	Y+41, r20	; 0x29
    4d3e:	5a a7       	std	Y+42, r21	; 0x2a
    4d40:	0e 94 04 2c 	call	0x5808	; 0x5808 <__floatunsisf>
    4d44:	2b a5       	ldd	r18, Y+43	; 0x2b
    4d46:	38 a5       	ldd	r19, Y+40	; 0x28
    4d48:	49 a5       	ldd	r20, Y+41	; 0x29
    4d4a:	5a a5       	ldd	r21, Y+42	; 0x2a
    4d4c:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <__subsf3>
    4d50:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <__fixunssfsi>
    4d54:	70 93 90 08 	sts	0x0890, r23	; 0x800890 <CurrentAccount+0x8>
    4d58:	60 93 8f 08 	sts	0x088F, r22	; 0x80088f <CurrentAccount+0x7>
					sendCCTransaction(&vend);
    4d5c:	ce 01       	movw	r24, r28
    4d5e:	01 96       	adiw	r24, 0x01	; 1
    4d60:	0e 94 92 05 	call	0xb24	; 0xb24 <sendCCTransaction>
				}				
				OP = CYCLE_STARTED;
    4d64:	80 e1       	ldi	r24, 0x10	; 16
    4d66:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
				
				//let server know machine is in use.

			}
			
			cardRemoved(CASH_CARD);
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <cardRemoved>
			
				
            #endif

		    break;
    4d70:	88 c0       	rjmp	.+272    	; 0x4e82 <APP_TaskHandler+0x6ac>


              break;
		case SETUP_REQUEST:
		
			if( SETUP_TIMEOUT == true)
    4d72:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SETUP_TIMEOUT>
    4d76:	88 23       	and	r24, r24
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <APP_TaskHandler+0x5a6>
    4d7a:	83 c0       	rjmp	.+262    	; 0x4e82 <APP_TaskHandler+0x6ac>
			{				
				#if(DEVICE_CONNECTED == MDC_MACHINE)
            
    			#ifdef MACHINE_CONNECTED
    			DevicePoll();
    4d7c:	0e 94 8b 23 	call	0x4716	; 0x4716 <DevicePoll>
				#else
    			deviceStatus.deviceType[0] = 33;
				deviceStatus.deviceType[1] = 1;
    			#endif
				#endif //DEVICE_CONNECTED
				sendSetupRequest();
    4d80:	0e 94 92 02 	call	0x524	; 0x524 <sendSetupRequest>
			
				SETUP_TIMEOUT = false;
    4d84:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SETUP_TIMEOUT>
				macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
    4d88:	6d e3       	ldi	r22, 0x3D	; 61
    4d8a:	71 e2       	ldi	r23, 0x21	; 33
    4d8c:	88 e7       	ldi	r24, 0x78	; 120
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	68 c0       	rjmp	.+208    	; 0x4e62 <APP_TaskHandler+0x68c>
          //}
			//break;
			
		case VALIDATE_SETUP: 

		    	if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
    4d92:	4a e4       	ldi	r20, 0x4A	; 74
    4d94:	53 e0       	ldi	r21, 0x03	; 3
    4d96:	6e e5       	ldi	r22, 0x5E	; 94
    4d98:	75 e0       	ldi	r23, 0x05	; 5
    4d9a:	87 e3       	ldi	r24, 0x37	; 55
    4d9c:	9c e0       	ldi	r25, 0x0C	; 12
    4d9e:	0e 94 57 23 	call	0x46ae	; 0x46ae <GetParam>
    4da2:	7c 01       	movw	r14, r24
    4da4:	00 97       	sbiw	r24, 0x00	; 0
    4da6:	09 f4       	brne	.+2      	; 0x4daa <APP_TaskHandler+0x5d4>
    4da8:	50 c0       	rjmp	.+160    	; 0x4e4a <APP_TaskHandler+0x674>
				{  
				

					  u8 addr[8];
                      static u8 Len =0;
					  n = strlen(ptr);
    4daa:	fc 01       	movw	r30, r24
    4dac:	01 90       	ld	r0, Z+
    4dae:	00 20       	and	r0, r0
    4db0:	e9 f7       	brne	.-6      	; 0x4dac <APP_TaskHandler+0x5d6>
    4db2:	31 97       	sbiw	r30, 0x01	; 1
    4db4:	1e 2f       	mov	r17, r30
    4db6:	18 1b       	sub	r17, r24
				      k = 0;
					  l = 0;
					  			
				    // Get length of Validation code
				   		halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
    4db8:	42 e8       	ldi	r20, 0x82	; 130
    4dba:	58 e0       	ldi	r21, 0x08	; 8
    4dbc:	61 e0       	ldi	r22, 0x01	; 1
    4dbe:	87 e5       	ldi	r24, 0x57	; 87
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>
																    
				   // 	Get Validation Code from EEPROM
						halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
    4dc6:	ae 01       	movw	r20, r28
    4dc8:	41 5e       	subi	r20, 0xE1	; 225
    4dca:	5f 4f       	sbci	r21, 0xFF	; 255
    4dcc:	60 91 82 08 	lds	r22, 0x0882	; 0x800882 <Len.4448>
    4dd0:	88 e5       	ldi	r24, 0x58	; 88
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <halGetEeprom>

					  u8 addr[8];
                      static u8 Len =0;
					  n = strlen(ptr);
				      k = 0;
					  l = 0;
    4dd8:	00 e0       	ldi	r16, 0x00	; 0
    4dda:	80 2f       	mov	r24, r16
    4ddc:	88 0f       	add	r24, r24
				   		halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
																    
				   // 	Get Validation Code from EEPROM
						halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
 
						while (k < n)
    4dde:	81 17       	cp	r24, r17
    4de0:	c8 f4       	brcc	.+50     	; 0x4e14 <APP_TaskHandler+0x63e>
						{
							Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16) 
    4de2:	67 01       	movw	r12, r14
    4de4:	c8 0e       	add	r12, r24
    4de6:	d1 1c       	adc	r13, r1
    4de8:	d6 01       	movw	r26, r12
    4dea:	8c 91       	ld	r24, X
    4dec:	0e 94 14 21 	call	0x4228	; 0x4228 <Ascii_to_nible>
    4df0:	b8 2e       	mov	r11, r24
									 +  Ascii_to_nible ( *(ptr+k+1));
    4df2:	f6 01       	movw	r30, r12
    4df4:	81 81       	ldd	r24, Z+1	; 0x01
    4df6:	0e 94 14 21 	call	0x4228	; 0x4228 <Ascii_to_nible>
				   // 	Get Validation Code from EEPROM
						halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
 
						while (k < n)
						{
							Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16) 
    4dfa:	e1 e0       	ldi	r30, 0x01	; 1
    4dfc:	f0 e0       	ldi	r31, 0x00	; 0
    4dfe:	ec 0f       	add	r30, r28
    4e00:	fd 1f       	adc	r31, r29
    4e02:	e0 0f       	add	r30, r16
    4e04:	f1 1d       	adc	r31, r1
    4e06:	20 e1       	ldi	r18, 0x10	; 16
    4e08:	b2 9e       	mul	r11, r18
    4e0a:	80 0d       	add	r24, r0
    4e0c:	11 24       	eor	r1, r1
    4e0e:	80 83       	st	Z, r24
									 +  Ascii_to_nible ( *(ptr+k+1));
							k += 2;
							l++;
    4e10:	0f 5f       	subi	r16, 0xFF	; 255
    4e12:	e3 cf       	rjmp	.-58     	; 0x4dda <APP_TaskHandler+0x604>
						}



				    if(memcmp(addr,Setup,Len) == 0)
    4e14:	40 91 82 08 	lds	r20, 0x0882	; 0x800882 <Len.4448>
    4e18:	50 e0       	ldi	r21, 0x00	; 0
    4e1a:	be 01       	movw	r22, r28
    4e1c:	6f 5f       	subi	r22, 0xFF	; 255
    4e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e20:	ce 01       	movw	r24, r28
    4e22:	4f 96       	adiw	r24, 0x1f	; 31
    4e24:	0e 94 3d 31 	call	0x627a	; 0x627a <memcmp>
    4e28:	89 2b       	or	r24, r25
    4e2a:	49 f4       	brne	.+18     	; 0x4e3e <APP_TaskHandler+0x668>
					{
                        ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
    4e2c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4e30:	8b 7f       	andi	r24, 0xFB	; 251
    4e32:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			            OP = VALIDATE_READER;
    4e36:	83 e1       	ldi	r24, 0x13	; 19
    4e38:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    4e3c:	06 c0       	rjmp	.+12     	; 0x4e4a <APP_TaskHandler+0x674>
					}						
					else
					{
					 OP = SETUP_REQUEST; // validation failed, request new setup info
    4e3e:	8a e0       	ldi	r24, 0x0A	; 10
    4e40:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
                     SETUP_TIMEOUT = true;
    4e44:	81 e0       	ldi	r24, 0x01	; 1
    4e46:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETUP_TIMEOUT>
					}					 
				 }

                     // Reposnse TIMEOUT
				if(VALIDATION_TIMEOUT)
    4e4a:	80 91 85 08 	lds	r24, 0x0885	; 0x800885 <VALIDATION_TIMEOUT>
    4e4e:	88 23       	and	r24, r24
    4e50:	c1 f0       	breq	.+48     	; 0x4e82 <APP_TaskHandler+0x6ac>
				{
					VALIDATION_TIMEOUT = false;
    4e52:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <VALIDATION_TIMEOUT>
					sendValidationRequest();// Re-send Validation Request
    4e56:	0e 94 bb 02 	call	0x576	; 0x576 <sendValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
    4e5a:	6c e2       	ldi	r22, 0x2C	; 44
    4e5c:	71 e2       	ldi	r23, 0x21	; 33
    4e5e:	8c e3       	ldi	r24, 0x3C	; 60
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <macSetLongAlarm>
    4e66:	0d c0       	rjmp	.+26     	; 0x4e82 <APP_TaskHandler+0x6ac>
			
			break;
		case SCARD_REMOVED:

            #if(DEVICE_CONNECTED == MDC_MACHINE)
			ucCardStatus = CARD_OUT;
    4e68:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <ucCardStatus>
			cardRemoved(REMOVE_CARD);
    4e6c:	82 e0       	ldi	r24, 0x02	; 2
    4e6e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <cardRemoved>
			//SerialSendMachineData(CARD_REMOVED);
			#endif

			#if( DEVICE_CONNECTED == MDC_MACHINE )				
				OP = SCANNING;
    4e72:	82 e0       	ldi	r24, 0x02	; 2
    4e74:	01 c0       	rjmp	.+2      	; 0x4e78 <APP_TaskHandler+0x6a2>
			#endif
			
			break;
		case BOW_ERROR:
			OP = IDLE;
    4e76:	87 e2       	ldi	r24, 0x27	; 39
    4e78:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
			break;
    4e7c:	02 c0       	rjmp	.+4      	; 0x4e82 <APP_TaskHandler+0x6ac>
			
		case APP_INIT:
			appInit();
    4e7e:	0e 94 af 22 	call	0x455e	; 0x455e <appInit>
} //switch


}// macConfig.associated

}
    4e82:	ab 96       	adiw	r28, 0x2b	; 43
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	f8 94       	cli
    4e88:	de bf       	out	0x3e, r29	; 62
    4e8a:	0f be       	out	0x3f, r0	; 63
    4e8c:	cd bf       	out	0x3d, r28	; 61
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	df 90       	pop	r13
    4e9c:	cf 90       	pop	r12
    4e9e:	bf 90       	pop	r11
    4ea0:	08 95       	ret

00004ea2 <vfprintf>:
    4ea2:	2f 92       	push	r2
    4ea4:	3f 92       	push	r3
    4ea6:	4f 92       	push	r4
    4ea8:	5f 92       	push	r5
    4eaa:	6f 92       	push	r6
    4eac:	7f 92       	push	r7
    4eae:	8f 92       	push	r8
    4eb0:	9f 92       	push	r9
    4eb2:	af 92       	push	r10
    4eb4:	bf 92       	push	r11
    4eb6:	cf 92       	push	r12
    4eb8:	df 92       	push	r13
    4eba:	ef 92       	push	r14
    4ebc:	ff 92       	push	r15
    4ebe:	0f 93       	push	r16
    4ec0:	1f 93       	push	r17
    4ec2:	cf 93       	push	r28
    4ec4:	df 93       	push	r29
    4ec6:	cd b7       	in	r28, 0x3d	; 61
    4ec8:	de b7       	in	r29, 0x3e	; 62
    4eca:	63 97       	sbiw	r28, 0x13	; 19
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	de bf       	out	0x3e, r29	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	cd bf       	out	0x3d, r28	; 61
    4ed6:	6c 01       	movw	r12, r24
    4ed8:	4b 01       	movw	r8, r22
    4eda:	2a 01       	movw	r4, r20
    4edc:	fc 01       	movw	r30, r24
    4ede:	17 82       	std	Z+7, r1	; 0x07
    4ee0:	16 82       	std	Z+6, r1	; 0x06
    4ee2:	83 81       	ldd	r24, Z+3	; 0x03
    4ee4:	81 ff       	sbrs	r24, 1
    4ee6:	43 c3       	rjmp	.+1670   	; 0x556e <vfprintf+0x6cc>
    4ee8:	ae 01       	movw	r20, r28
    4eea:	4f 5f       	subi	r20, 0xFF	; 255
    4eec:	5f 4f       	sbci	r21, 0xFF	; 255
    4eee:	3a 01       	movw	r6, r20
    4ef0:	f6 01       	movw	r30, r12
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	f4 01       	movw	r30, r8
    4ef6:	93 fd       	sbrc	r25, 3
    4ef8:	85 91       	lpm	r24, Z+
    4efa:	93 ff       	sbrs	r25, 3
    4efc:	81 91       	ld	r24, Z+
    4efe:	4f 01       	movw	r8, r30
    4f00:	88 23       	and	r24, r24
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <vfprintf+0x64>
    4f04:	30 c3       	rjmp	.+1632   	; 0x5566 <vfprintf+0x6c4>
    4f06:	85 32       	cpi	r24, 0x25	; 37
    4f08:	39 f4       	brne	.+14     	; 0x4f18 <vfprintf+0x76>
    4f0a:	93 fd       	sbrc	r25, 3
    4f0c:	85 91       	lpm	r24, Z+
    4f0e:	93 ff       	sbrs	r25, 3
    4f10:	81 91       	ld	r24, Z+
    4f12:	4f 01       	movw	r8, r30
    4f14:	85 32       	cpi	r24, 0x25	; 37
    4f16:	39 f4       	brne	.+14     	; 0x4f26 <vfprintf+0x84>
    4f18:	b6 01       	movw	r22, r12
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    4f20:	52 01       	movw	r10, r4
    4f22:	25 01       	movw	r4, r10
    4f24:	e5 cf       	rjmp	.-54     	; 0x4ef0 <vfprintf+0x4e>
    4f26:	10 e0       	ldi	r17, 0x00	; 0
    4f28:	f1 2c       	mov	r15, r1
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	20 32       	cpi	r18, 0x20	; 32
    4f2e:	a0 f4       	brcc	.+40     	; 0x4f58 <vfprintf+0xb6>
    4f30:	8b 32       	cpi	r24, 0x2B	; 43
    4f32:	69 f0       	breq	.+26     	; 0x4f4e <vfprintf+0xac>
    4f34:	30 f4       	brcc	.+12     	; 0x4f42 <vfprintf+0xa0>
    4f36:	80 32       	cpi	r24, 0x20	; 32
    4f38:	59 f0       	breq	.+22     	; 0x4f50 <vfprintf+0xae>
    4f3a:	83 32       	cpi	r24, 0x23	; 35
    4f3c:	69 f4       	brne	.+26     	; 0x4f58 <vfprintf+0xb6>
    4f3e:	20 61       	ori	r18, 0x10	; 16
    4f40:	2c c0       	rjmp	.+88     	; 0x4f9a <vfprintf+0xf8>
    4f42:	8d 32       	cpi	r24, 0x2D	; 45
    4f44:	39 f0       	breq	.+14     	; 0x4f54 <vfprintf+0xb2>
    4f46:	80 33       	cpi	r24, 0x30	; 48
    4f48:	39 f4       	brne	.+14     	; 0x4f58 <vfprintf+0xb6>
    4f4a:	21 60       	ori	r18, 0x01	; 1
    4f4c:	26 c0       	rjmp	.+76     	; 0x4f9a <vfprintf+0xf8>
    4f4e:	22 60       	ori	r18, 0x02	; 2
    4f50:	24 60       	ori	r18, 0x04	; 4
    4f52:	23 c0       	rjmp	.+70     	; 0x4f9a <vfprintf+0xf8>
    4f54:	28 60       	ori	r18, 0x08	; 8
    4f56:	21 c0       	rjmp	.+66     	; 0x4f9a <vfprintf+0xf8>
    4f58:	27 fd       	sbrc	r18, 7
    4f5a:	27 c0       	rjmp	.+78     	; 0x4faa <vfprintf+0x108>
    4f5c:	30 ed       	ldi	r19, 0xD0	; 208
    4f5e:	38 0f       	add	r19, r24
    4f60:	3a 30       	cpi	r19, 0x0A	; 10
    4f62:	78 f4       	brcc	.+30     	; 0x4f82 <vfprintf+0xe0>
    4f64:	26 ff       	sbrs	r18, 6
    4f66:	06 c0       	rjmp	.+12     	; 0x4f74 <vfprintf+0xd2>
    4f68:	fa e0       	ldi	r31, 0x0A	; 10
    4f6a:	1f 9f       	mul	r17, r31
    4f6c:	30 0d       	add	r19, r0
    4f6e:	11 24       	eor	r1, r1
    4f70:	13 2f       	mov	r17, r19
    4f72:	13 c0       	rjmp	.+38     	; 0x4f9a <vfprintf+0xf8>
    4f74:	4a e0       	ldi	r20, 0x0A	; 10
    4f76:	f4 9e       	mul	r15, r20
    4f78:	30 0d       	add	r19, r0
    4f7a:	11 24       	eor	r1, r1
    4f7c:	f3 2e       	mov	r15, r19
    4f7e:	20 62       	ori	r18, 0x20	; 32
    4f80:	0c c0       	rjmp	.+24     	; 0x4f9a <vfprintf+0xf8>
    4f82:	8e 32       	cpi	r24, 0x2E	; 46
    4f84:	21 f4       	brne	.+8      	; 0x4f8e <vfprintf+0xec>
    4f86:	26 fd       	sbrc	r18, 6
    4f88:	ee c2       	rjmp	.+1500   	; 0x5566 <vfprintf+0x6c4>
    4f8a:	20 64       	ori	r18, 0x40	; 64
    4f8c:	06 c0       	rjmp	.+12     	; 0x4f9a <vfprintf+0xf8>
    4f8e:	8c 36       	cpi	r24, 0x6C	; 108
    4f90:	11 f4       	brne	.+4      	; 0x4f96 <vfprintf+0xf4>
    4f92:	20 68       	ori	r18, 0x80	; 128
    4f94:	02 c0       	rjmp	.+4      	; 0x4f9a <vfprintf+0xf8>
    4f96:	88 36       	cpi	r24, 0x68	; 104
    4f98:	41 f4       	brne	.+16     	; 0x4faa <vfprintf+0x108>
    4f9a:	f4 01       	movw	r30, r8
    4f9c:	93 fd       	sbrc	r25, 3
    4f9e:	85 91       	lpm	r24, Z+
    4fa0:	93 ff       	sbrs	r25, 3
    4fa2:	81 91       	ld	r24, Z+
    4fa4:	4f 01       	movw	r8, r30
    4fa6:	81 11       	cpse	r24, r1
    4fa8:	c1 cf       	rjmp	.-126    	; 0x4f2c <vfprintf+0x8a>
    4faa:	9b eb       	ldi	r25, 0xBB	; 187
    4fac:	98 0f       	add	r25, r24
    4fae:	93 30       	cpi	r25, 0x03	; 3
    4fb0:	18 f4       	brcc	.+6      	; 0x4fb8 <vfprintf+0x116>
    4fb2:	20 61       	ori	r18, 0x10	; 16
    4fb4:	80 5e       	subi	r24, 0xE0	; 224
    4fb6:	06 c0       	rjmp	.+12     	; 0x4fc4 <vfprintf+0x122>
    4fb8:	9b e9       	ldi	r25, 0x9B	; 155
    4fba:	98 0f       	add	r25, r24
    4fbc:	93 30       	cpi	r25, 0x03	; 3
    4fbe:	08 f0       	brcs	.+2      	; 0x4fc2 <vfprintf+0x120>
    4fc0:	71 c1       	rjmp	.+738    	; 0x52a4 <vfprintf+0x402>
    4fc2:	2f 7e       	andi	r18, 0xEF	; 239
    4fc4:	26 ff       	sbrs	r18, 6
    4fc6:	16 e0       	ldi	r17, 0x06	; 6
    4fc8:	2f 73       	andi	r18, 0x3F	; 63
    4fca:	32 2e       	mov	r3, r18
    4fcc:	85 36       	cpi	r24, 0x65	; 101
    4fce:	19 f4       	brne	.+6      	; 0x4fd6 <vfprintf+0x134>
    4fd0:	20 64       	ori	r18, 0x40	; 64
    4fd2:	32 2e       	mov	r3, r18
    4fd4:	08 c0       	rjmp	.+16     	; 0x4fe6 <vfprintf+0x144>
    4fd6:	86 36       	cpi	r24, 0x66	; 102
    4fd8:	21 f4       	brne	.+8      	; 0x4fe2 <vfprintf+0x140>
    4fda:	f2 2f       	mov	r31, r18
    4fdc:	f0 68       	ori	r31, 0x80	; 128
    4fde:	3f 2e       	mov	r3, r31
    4fe0:	02 c0       	rjmp	.+4      	; 0x4fe6 <vfprintf+0x144>
    4fe2:	11 11       	cpse	r17, r1
    4fe4:	11 50       	subi	r17, 0x01	; 1
    4fe6:	37 fe       	sbrs	r3, 7
    4fe8:	07 c0       	rjmp	.+14     	; 0x4ff8 <vfprintf+0x156>
    4fea:	1c 33       	cpi	r17, 0x3C	; 60
    4fec:	50 f4       	brcc	.+20     	; 0x5002 <vfprintf+0x160>
    4fee:	ee 24       	eor	r14, r14
    4ff0:	e3 94       	inc	r14
    4ff2:	e1 0e       	add	r14, r17
    4ff4:	27 e0       	ldi	r18, 0x07	; 7
    4ff6:	0b c0       	rjmp	.+22     	; 0x500e <vfprintf+0x16c>
    4ff8:	18 30       	cpi	r17, 0x08	; 8
    4ffa:	38 f0       	brcs	.+14     	; 0x500a <vfprintf+0x168>
    4ffc:	27 e0       	ldi	r18, 0x07	; 7
    4ffe:	17 e0       	ldi	r17, 0x07	; 7
    5000:	05 c0       	rjmp	.+10     	; 0x500c <vfprintf+0x16a>
    5002:	27 e0       	ldi	r18, 0x07	; 7
    5004:	4c e3       	ldi	r20, 0x3C	; 60
    5006:	e4 2e       	mov	r14, r20
    5008:	02 c0       	rjmp	.+4      	; 0x500e <vfprintf+0x16c>
    500a:	21 2f       	mov	r18, r17
    500c:	e1 2c       	mov	r14, r1
    500e:	52 01       	movw	r10, r4
    5010:	44 e0       	ldi	r20, 0x04	; 4
    5012:	a4 0e       	add	r10, r20
    5014:	b1 1c       	adc	r11, r1
    5016:	f2 01       	movw	r30, r4
    5018:	60 81       	ld	r22, Z
    501a:	71 81       	ldd	r23, Z+1	; 0x01
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	93 81       	ldd	r25, Z+3	; 0x03
    5020:	0e 2d       	mov	r16, r14
    5022:	a3 01       	movw	r20, r6
    5024:	0e 94 51 30 	call	0x60a2	; 0x60a2 <__ftoa_engine>
    5028:	2c 01       	movw	r4, r24
    502a:	09 81       	ldd	r16, Y+1	; 0x01
    502c:	00 ff       	sbrs	r16, 0
    502e:	02 c0       	rjmp	.+4      	; 0x5034 <vfprintf+0x192>
    5030:	03 ff       	sbrs	r16, 3
    5032:	07 c0       	rjmp	.+14     	; 0x5042 <vfprintf+0x1a0>
    5034:	31 fc       	sbrc	r3, 1
    5036:	08 c0       	rjmp	.+16     	; 0x5048 <vfprintf+0x1a6>
    5038:	32 fe       	sbrs	r3, 2
    503a:	09 c0       	rjmp	.+18     	; 0x504e <vfprintf+0x1ac>
    503c:	30 e2       	ldi	r19, 0x20	; 32
    503e:	23 2e       	mov	r2, r19
    5040:	07 c0       	rjmp	.+14     	; 0x5050 <vfprintf+0x1ae>
    5042:	2d e2       	ldi	r18, 0x2D	; 45
    5044:	22 2e       	mov	r2, r18
    5046:	04 c0       	rjmp	.+8      	; 0x5050 <vfprintf+0x1ae>
    5048:	9b e2       	ldi	r25, 0x2B	; 43
    504a:	29 2e       	mov	r2, r25
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <vfprintf+0x1ae>
    504e:	21 2c       	mov	r2, r1
    5050:	80 2f       	mov	r24, r16
    5052:	8c 70       	andi	r24, 0x0C	; 12
    5054:	19 f0       	breq	.+6      	; 0x505c <vfprintf+0x1ba>
    5056:	21 10       	cpse	r2, r1
    5058:	68 c2       	rjmp	.+1232   	; 0x552a <vfprintf+0x688>
    505a:	a8 c2       	rjmp	.+1360   	; 0x55ac <vfprintf+0x70a>
    505c:	37 fe       	sbrs	r3, 7
    505e:	0f c0       	rjmp	.+30     	; 0x507e <vfprintf+0x1dc>
    5060:	e4 0c       	add	r14, r4
    5062:	04 ff       	sbrs	r16, 4
    5064:	04 c0       	rjmp	.+8      	; 0x506e <vfprintf+0x1cc>
    5066:	8a 81       	ldd	r24, Y+2	; 0x02
    5068:	81 33       	cpi	r24, 0x31	; 49
    506a:	09 f4       	brne	.+2      	; 0x506e <vfprintf+0x1cc>
    506c:	ea 94       	dec	r14
    506e:	1e 14       	cp	r1, r14
    5070:	74 f5       	brge	.+92     	; 0x50ce <vfprintf+0x22c>
    5072:	f8 e0       	ldi	r31, 0x08	; 8
    5074:	fe 15       	cp	r31, r14
    5076:	78 f5       	brcc	.+94     	; 0x50d6 <vfprintf+0x234>
    5078:	88 e0       	ldi	r24, 0x08	; 8
    507a:	e8 2e       	mov	r14, r24
    507c:	2c c0       	rjmp	.+88     	; 0x50d6 <vfprintf+0x234>
    507e:	36 fc       	sbrc	r3, 6
    5080:	2a c0       	rjmp	.+84     	; 0x50d6 <vfprintf+0x234>
    5082:	81 2f       	mov	r24, r17
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	84 15       	cp	r24, r4
    5088:	95 05       	cpc	r25, r5
    508a:	9c f0       	brlt	.+38     	; 0x50b2 <vfprintf+0x210>
    508c:	2c ef       	ldi	r18, 0xFC	; 252
    508e:	42 16       	cp	r4, r18
    5090:	2f ef       	ldi	r18, 0xFF	; 255
    5092:	52 06       	cpc	r5, r18
    5094:	74 f0       	brlt	.+28     	; 0x50b2 <vfprintf+0x210>
    5096:	43 2d       	mov	r20, r3
    5098:	40 68       	ori	r20, 0x80	; 128
    509a:	34 2e       	mov	r3, r20
    509c:	0a c0       	rjmp	.+20     	; 0x50b2 <vfprintf+0x210>
    509e:	e2 e0       	ldi	r30, 0x02	; 2
    50a0:	f0 e0       	ldi	r31, 0x00	; 0
    50a2:	ec 0f       	add	r30, r28
    50a4:	fd 1f       	adc	r31, r29
    50a6:	e1 0f       	add	r30, r17
    50a8:	f1 1d       	adc	r31, r1
    50aa:	80 81       	ld	r24, Z
    50ac:	80 33       	cpi	r24, 0x30	; 48
    50ae:	19 f4       	brne	.+6      	; 0x50b6 <vfprintf+0x214>
    50b0:	11 50       	subi	r17, 0x01	; 1
    50b2:	11 11       	cpse	r17, r1
    50b4:	f4 cf       	rjmp	.-24     	; 0x509e <vfprintf+0x1fc>
    50b6:	37 fe       	sbrs	r3, 7
    50b8:	0e c0       	rjmp	.+28     	; 0x50d6 <vfprintf+0x234>
    50ba:	ee 24       	eor	r14, r14
    50bc:	e3 94       	inc	r14
    50be:	e1 0e       	add	r14, r17
    50c0:	81 2f       	mov	r24, r17
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	48 16       	cp	r4, r24
    50c6:	59 06       	cpc	r5, r25
    50c8:	2c f4       	brge	.+10     	; 0x50d4 <vfprintf+0x232>
    50ca:	14 19       	sub	r17, r4
    50cc:	04 c0       	rjmp	.+8      	; 0x50d6 <vfprintf+0x234>
    50ce:	ee 24       	eor	r14, r14
    50d0:	e3 94       	inc	r14
    50d2:	01 c0       	rjmp	.+2      	; 0x50d6 <vfprintf+0x234>
    50d4:	10 e0       	ldi	r17, 0x00	; 0
    50d6:	37 fe       	sbrs	r3, 7
    50d8:	06 c0       	rjmp	.+12     	; 0x50e6 <vfprintf+0x244>
    50da:	14 14       	cp	r1, r4
    50dc:	15 04       	cpc	r1, r5
    50de:	34 f4       	brge	.+12     	; 0x50ec <vfprintf+0x24a>
    50e0:	c2 01       	movw	r24, r4
    50e2:	01 96       	adiw	r24, 0x01	; 1
    50e4:	05 c0       	rjmp	.+10     	; 0x50f0 <vfprintf+0x24e>
    50e6:	85 e0       	ldi	r24, 0x05	; 5
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	02 c0       	rjmp	.+4      	; 0x50f0 <vfprintf+0x24e>
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	21 10       	cpse	r2, r1
    50f2:	01 96       	adiw	r24, 0x01	; 1
    50f4:	11 23       	and	r17, r17
    50f6:	31 f0       	breq	.+12     	; 0x5104 <vfprintf+0x262>
    50f8:	21 2f       	mov	r18, r17
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	2f 5f       	subi	r18, 0xFF	; 255
    50fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5100:	82 0f       	add	r24, r18
    5102:	93 1f       	adc	r25, r19
    5104:	2f 2d       	mov	r18, r15
    5106:	30 e0       	ldi	r19, 0x00	; 0
    5108:	82 17       	cp	r24, r18
    510a:	93 07       	cpc	r25, r19
    510c:	14 f4       	brge	.+4      	; 0x5112 <vfprintf+0x270>
    510e:	f8 1a       	sub	r15, r24
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <vfprintf+0x272>
    5112:	f1 2c       	mov	r15, r1
    5114:	83 2d       	mov	r24, r3
    5116:	89 70       	andi	r24, 0x09	; 9
    5118:	49 f4       	brne	.+18     	; 0x512c <vfprintf+0x28a>
    511a:	ff 20       	and	r15, r15
    511c:	39 f0       	breq	.+14     	; 0x512c <vfprintf+0x28a>
    511e:	b6 01       	movw	r22, r12
    5120:	80 e2       	ldi	r24, 0x20	; 32
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5128:	fa 94       	dec	r15
    512a:	f7 cf       	rjmp	.-18     	; 0x511a <vfprintf+0x278>
    512c:	22 20       	and	r2, r2
    512e:	29 f0       	breq	.+10     	; 0x513a <vfprintf+0x298>
    5130:	b6 01       	movw	r22, r12
    5132:	82 2d       	mov	r24, r2
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    513a:	33 fc       	sbrc	r3, 3
    513c:	09 c0       	rjmp	.+18     	; 0x5150 <vfprintf+0x2ae>
    513e:	ff 20       	and	r15, r15
    5140:	39 f0       	breq	.+14     	; 0x5150 <vfprintf+0x2ae>
    5142:	b6 01       	movw	r22, r12
    5144:	80 e3       	ldi	r24, 0x30	; 48
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    514c:	fa 94       	dec	r15
    514e:	f7 cf       	rjmp	.-18     	; 0x513e <vfprintf+0x29c>
    5150:	37 fe       	sbrs	r3, 7
    5152:	5a c0       	rjmp	.+180    	; 0x5208 <vfprintf+0x366>
    5154:	94 2d       	mov	r25, r4
    5156:	85 2d       	mov	r24, r5
    5158:	57 fe       	sbrs	r5, 7
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <vfprintf+0x2be>
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	29 2e       	mov	r2, r25
    5162:	38 2e       	mov	r3, r24
    5164:	20 e0       	ldi	r18, 0x00	; 0
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	a2 01       	movw	r20, r4
    516a:	4e 19       	sub	r20, r14
    516c:	51 09       	sbc	r21, r1
    516e:	5d 87       	std	Y+13, r21	; 0x0d
    5170:	4c 87       	std	Y+12, r20	; 0x0c
    5172:	a2 01       	movw	r20, r4
    5174:	42 19       	sub	r20, r2
    5176:	53 09       	sbc	r21, r3
    5178:	5f 87       	std	Y+15, r21	; 0x0f
    517a:	4e 87       	std	Y+14, r20	; 0x0e
    517c:	61 2f       	mov	r22, r17
    517e:	70 e0       	ldi	r23, 0x00	; 0
    5180:	44 27       	eor	r20, r20
    5182:	55 27       	eor	r21, r21
    5184:	46 1b       	sub	r20, r22
    5186:	57 0b       	sbc	r21, r23
    5188:	59 8b       	std	Y+17, r21	; 0x11
    518a:	48 8b       	std	Y+16, r20	; 0x10
    518c:	5f ef       	ldi	r21, 0xFF	; 255
    518e:	25 16       	cp	r2, r21
    5190:	35 06       	cpc	r3, r21
    5192:	49 f4       	brne	.+18     	; 0x51a6 <vfprintf+0x304>
    5194:	b6 01       	movw	r22, r12
    5196:	8e e2       	ldi	r24, 0x2E	; 46
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	2a 8b       	std	Y+18, r18	; 0x12
    519c:	3b 8b       	std	Y+19, r19	; 0x13
    519e:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    51a2:	3b 89       	ldd	r19, Y+19	; 0x13
    51a4:	2a 89       	ldd	r18, Y+18	; 0x12
    51a6:	42 14       	cp	r4, r2
    51a8:	53 04       	cpc	r5, r3
    51aa:	6c f0       	brlt	.+26     	; 0x51c6 <vfprintf+0x324>
    51ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    51ae:	5d 85       	ldd	r21, Y+13	; 0x0d
    51b0:	42 15       	cp	r20, r2
    51b2:	53 05       	cpc	r21, r3
    51b4:	44 f4       	brge	.+16     	; 0x51c6 <vfprintf+0x324>
    51b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    51b8:	ff 85       	ldd	r31, Y+15	; 0x0f
    51ba:	e2 0f       	add	r30, r18
    51bc:	f3 1f       	adc	r31, r19
    51be:	e6 0d       	add	r30, r6
    51c0:	f7 1d       	adc	r31, r7
    51c2:	81 81       	ldd	r24, Z+1	; 0x01
    51c4:	01 c0       	rjmp	.+2      	; 0x51c8 <vfprintf+0x326>
    51c6:	80 e3       	ldi	r24, 0x30	; 48
    51c8:	51 e0       	ldi	r21, 0x01	; 1
    51ca:	25 1a       	sub	r2, r21
    51cc:	31 08       	sbc	r3, r1
    51ce:	2f 5f       	subi	r18, 0xFF	; 255
    51d0:	3f 4f       	sbci	r19, 0xFF	; 255
    51d2:	48 89       	ldd	r20, Y+16	; 0x10
    51d4:	59 89       	ldd	r21, Y+17	; 0x11
    51d6:	24 16       	cp	r2, r20
    51d8:	35 06       	cpc	r3, r21
    51da:	4c f0       	brlt	.+18     	; 0x51ee <vfprintf+0x34c>
    51dc:	b6 01       	movw	r22, r12
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	2a 8b       	std	Y+18, r18	; 0x12
    51e2:	3b 8b       	std	Y+19, r19	; 0x13
    51e4:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    51e8:	2a 89       	ldd	r18, Y+18	; 0x12
    51ea:	3b 89       	ldd	r19, Y+19	; 0x13
    51ec:	cf cf       	rjmp	.-98     	; 0x518c <vfprintf+0x2ea>
    51ee:	24 14       	cp	r2, r4
    51f0:	35 04       	cpc	r3, r5
    51f2:	39 f4       	brne	.+14     	; 0x5202 <vfprintf+0x360>
    51f4:	9a 81       	ldd	r25, Y+2	; 0x02
    51f6:	96 33       	cpi	r25, 0x36	; 54
    51f8:	18 f4       	brcc	.+6      	; 0x5200 <vfprintf+0x35e>
    51fa:	95 33       	cpi	r25, 0x35	; 53
    51fc:	11 f4       	brne	.+4      	; 0x5202 <vfprintf+0x360>
    51fe:	04 ff       	sbrs	r16, 4
    5200:	81 e3       	ldi	r24, 0x31	; 49
    5202:	b6 01       	movw	r22, r12
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	4b c0       	rjmp	.+150    	; 0x529e <vfprintf+0x3fc>
    5208:	8a 81       	ldd	r24, Y+2	; 0x02
    520a:	81 33       	cpi	r24, 0x31	; 49
    520c:	09 f0       	breq	.+2      	; 0x5210 <vfprintf+0x36e>
    520e:	0f 7e       	andi	r16, 0xEF	; 239
    5210:	b6 01       	movw	r22, r12
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5218:	11 11       	cpse	r17, r1
    521a:	05 c0       	rjmp	.+10     	; 0x5226 <vfprintf+0x384>
    521c:	34 fc       	sbrc	r3, 4
    521e:	18 c0       	rjmp	.+48     	; 0x5250 <vfprintf+0x3ae>
    5220:	85 e6       	ldi	r24, 0x65	; 101
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	17 c0       	rjmp	.+46     	; 0x5254 <vfprintf+0x3b2>
    5226:	b6 01       	movw	r22, r12
    5228:	8e e2       	ldi	r24, 0x2E	; 46
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5230:	82 e0       	ldi	r24, 0x02	; 2
    5232:	ee 24       	eor	r14, r14
    5234:	e3 94       	inc	r14
    5236:	e8 0e       	add	r14, r24
    5238:	f3 01       	movw	r30, r6
    523a:	e8 0f       	add	r30, r24
    523c:	f1 1d       	adc	r31, r1
    523e:	80 81       	ld	r24, Z
    5240:	b6 01       	movw	r22, r12
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5248:	11 50       	subi	r17, 0x01	; 1
    524a:	8e 2d       	mov	r24, r14
    524c:	91 f7       	brne	.-28     	; 0x5232 <vfprintf+0x390>
    524e:	e6 cf       	rjmp	.-52     	; 0x521c <vfprintf+0x37a>
    5250:	85 e4       	ldi	r24, 0x45	; 69
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	b6 01       	movw	r22, r12
    5256:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    525a:	57 fc       	sbrc	r5, 7
    525c:	05 c0       	rjmp	.+10     	; 0x5268 <vfprintf+0x3c6>
    525e:	41 14       	cp	r4, r1
    5260:	51 04       	cpc	r5, r1
    5262:	39 f4       	brne	.+14     	; 0x5272 <vfprintf+0x3d0>
    5264:	04 ff       	sbrs	r16, 4
    5266:	05 c0       	rjmp	.+10     	; 0x5272 <vfprintf+0x3d0>
    5268:	51 94       	neg	r5
    526a:	41 94       	neg	r4
    526c:	51 08       	sbc	r5, r1
    526e:	8d e2       	ldi	r24, 0x2D	; 45
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <vfprintf+0x3d2>
    5272:	8b e2       	ldi	r24, 0x2B	; 43
    5274:	b6 01       	movw	r22, r12
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    527c:	80 e3       	ldi	r24, 0x30	; 48
    527e:	9a e0       	ldi	r25, 0x0A	; 10
    5280:	49 16       	cp	r4, r25
    5282:	51 04       	cpc	r5, r1
    5284:	2c f0       	brlt	.+10     	; 0x5290 <vfprintf+0x3ee>
    5286:	8f 5f       	subi	r24, 0xFF	; 255
    5288:	5a e0       	ldi	r21, 0x0A	; 10
    528a:	45 1a       	sub	r4, r21
    528c:	51 08       	sbc	r5, r1
    528e:	f7 cf       	rjmp	.-18     	; 0x527e <vfprintf+0x3dc>
    5290:	b6 01       	movw	r22, r12
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5298:	b6 01       	movw	r22, r12
    529a:	c2 01       	movw	r24, r4
    529c:	c0 96       	adiw	r24, 0x30	; 48
    529e:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    52a2:	57 c1       	rjmp	.+686    	; 0x5552 <vfprintf+0x6b0>
    52a4:	83 36       	cpi	r24, 0x63	; 99
    52a6:	31 f0       	breq	.+12     	; 0x52b4 <vfprintf+0x412>
    52a8:	83 37       	cpi	r24, 0x73	; 115
    52aa:	79 f0       	breq	.+30     	; 0x52ca <vfprintf+0x428>
    52ac:	83 35       	cpi	r24, 0x53	; 83
    52ae:	09 f0       	breq	.+2      	; 0x52b2 <vfprintf+0x410>
    52b0:	58 c0       	rjmp	.+176    	; 0x5362 <vfprintf+0x4c0>
    52b2:	21 c0       	rjmp	.+66     	; 0x52f6 <vfprintf+0x454>
    52b4:	52 01       	movw	r10, r4
    52b6:	e2 e0       	ldi	r30, 0x02	; 2
    52b8:	ae 0e       	add	r10, r30
    52ba:	b1 1c       	adc	r11, r1
    52bc:	f2 01       	movw	r30, r4
    52be:	80 81       	ld	r24, Z
    52c0:	89 83       	std	Y+1, r24	; 0x01
    52c2:	01 e0       	ldi	r16, 0x01	; 1
    52c4:	10 e0       	ldi	r17, 0x00	; 0
    52c6:	23 01       	movw	r4, r6
    52c8:	14 c0       	rjmp	.+40     	; 0x52f2 <vfprintf+0x450>
    52ca:	52 01       	movw	r10, r4
    52cc:	f2 e0       	ldi	r31, 0x02	; 2
    52ce:	af 0e       	add	r10, r31
    52d0:	b1 1c       	adc	r11, r1
    52d2:	f2 01       	movw	r30, r4
    52d4:	40 80       	ld	r4, Z
    52d6:	51 80       	ldd	r5, Z+1	; 0x01
    52d8:	26 ff       	sbrs	r18, 6
    52da:	03 c0       	rjmp	.+6      	; 0x52e2 <vfprintf+0x440>
    52dc:	61 2f       	mov	r22, r17
    52de:	70 e0       	ldi	r23, 0x00	; 0
    52e0:	02 c0       	rjmp	.+4      	; 0x52e6 <vfprintf+0x444>
    52e2:	6f ef       	ldi	r22, 0xFF	; 255
    52e4:	7f ef       	ldi	r23, 0xFF	; 255
    52e6:	c2 01       	movw	r24, r4
    52e8:	2a 8b       	std	Y+18, r18	; 0x12
    52ea:	0e 94 7d 31 	call	0x62fa	; 0x62fa <strnlen>
    52ee:	8c 01       	movw	r16, r24
    52f0:	2a 89       	ldd	r18, Y+18	; 0x12
    52f2:	2f 77       	andi	r18, 0x7F	; 127
    52f4:	15 c0       	rjmp	.+42     	; 0x5320 <vfprintf+0x47e>
    52f6:	52 01       	movw	r10, r4
    52f8:	f2 e0       	ldi	r31, 0x02	; 2
    52fa:	af 0e       	add	r10, r31
    52fc:	b1 1c       	adc	r11, r1
    52fe:	f2 01       	movw	r30, r4
    5300:	40 80       	ld	r4, Z
    5302:	51 80       	ldd	r5, Z+1	; 0x01
    5304:	26 ff       	sbrs	r18, 6
    5306:	03 c0       	rjmp	.+6      	; 0x530e <vfprintf+0x46c>
    5308:	61 2f       	mov	r22, r17
    530a:	70 e0       	ldi	r23, 0x00	; 0
    530c:	02 c0       	rjmp	.+4      	; 0x5312 <vfprintf+0x470>
    530e:	6f ef       	ldi	r22, 0xFF	; 255
    5310:	7f ef       	ldi	r23, 0xFF	; 255
    5312:	c2 01       	movw	r24, r4
    5314:	2a 8b       	std	Y+18, r18	; 0x12
    5316:	0e 94 32 31 	call	0x6264	; 0x6264 <strnlen_P>
    531a:	8c 01       	movw	r16, r24
    531c:	2a 89       	ldd	r18, Y+18	; 0x12
    531e:	20 68       	ori	r18, 0x80	; 128
    5320:	32 2e       	mov	r3, r18
    5322:	23 fd       	sbrc	r18, 3
    5324:	1a c0       	rjmp	.+52     	; 0x535a <vfprintf+0x4b8>
    5326:	8f 2d       	mov	r24, r15
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	08 17       	cp	r16, r24
    532c:	19 07       	cpc	r17, r25
    532e:	a8 f4       	brcc	.+42     	; 0x535a <vfprintf+0x4b8>
    5330:	b6 01       	movw	r22, r12
    5332:	80 e2       	ldi	r24, 0x20	; 32
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    533a:	fa 94       	dec	r15
    533c:	f4 cf       	rjmp	.-24     	; 0x5326 <vfprintf+0x484>
    533e:	f2 01       	movw	r30, r4
    5340:	37 fc       	sbrc	r3, 7
    5342:	85 91       	lpm	r24, Z+
    5344:	37 fe       	sbrs	r3, 7
    5346:	81 91       	ld	r24, Z+
    5348:	2f 01       	movw	r4, r30
    534a:	b6 01       	movw	r22, r12
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5352:	f1 10       	cpse	r15, r1
    5354:	fa 94       	dec	r15
    5356:	01 50       	subi	r16, 0x01	; 1
    5358:	11 09       	sbc	r17, r1
    535a:	01 15       	cp	r16, r1
    535c:	11 05       	cpc	r17, r1
    535e:	79 f7       	brne	.-34     	; 0x533e <vfprintf+0x49c>
    5360:	f8 c0       	rjmp	.+496    	; 0x5552 <vfprintf+0x6b0>
    5362:	84 36       	cpi	r24, 0x64	; 100
    5364:	11 f0       	breq	.+4      	; 0x536a <vfprintf+0x4c8>
    5366:	89 36       	cpi	r24, 0x69	; 105
    5368:	59 f5       	brne	.+86     	; 0x53c0 <vfprintf+0x51e>
    536a:	52 01       	movw	r10, r4
    536c:	27 ff       	sbrs	r18, 7
    536e:	09 c0       	rjmp	.+18     	; 0x5382 <vfprintf+0x4e0>
    5370:	f4 e0       	ldi	r31, 0x04	; 4
    5372:	af 0e       	add	r10, r31
    5374:	b1 1c       	adc	r11, r1
    5376:	f2 01       	movw	r30, r4
    5378:	60 81       	ld	r22, Z
    537a:	71 81       	ldd	r23, Z+1	; 0x01
    537c:	82 81       	ldd	r24, Z+2	; 0x02
    537e:	93 81       	ldd	r25, Z+3	; 0x03
    5380:	0a c0       	rjmp	.+20     	; 0x5396 <vfprintf+0x4f4>
    5382:	f2 e0       	ldi	r31, 0x02	; 2
    5384:	af 0e       	add	r10, r31
    5386:	b1 1c       	adc	r11, r1
    5388:	f2 01       	movw	r30, r4
    538a:	60 81       	ld	r22, Z
    538c:	71 81       	ldd	r23, Z+1	; 0x01
    538e:	07 2e       	mov	r0, r23
    5390:	00 0c       	add	r0, r0
    5392:	88 0b       	sbc	r24, r24
    5394:	99 0b       	sbc	r25, r25
    5396:	2f 76       	andi	r18, 0x6F	; 111
    5398:	32 2e       	mov	r3, r18
    539a:	97 ff       	sbrs	r25, 7
    539c:	09 c0       	rjmp	.+18     	; 0x53b0 <vfprintf+0x50e>
    539e:	90 95       	com	r25
    53a0:	80 95       	com	r24
    53a2:	70 95       	com	r23
    53a4:	61 95       	neg	r22
    53a6:	7f 4f       	sbci	r23, 0xFF	; 255
    53a8:	8f 4f       	sbci	r24, 0xFF	; 255
    53aa:	9f 4f       	sbci	r25, 0xFF	; 255
    53ac:	20 68       	ori	r18, 0x80	; 128
    53ae:	32 2e       	mov	r3, r18
    53b0:	2a e0       	ldi	r18, 0x0A	; 10
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	a3 01       	movw	r20, r6
    53b6:	0e 94 34 32 	call	0x6468	; 0x6468 <__ultoa_invert>
    53ba:	e8 2e       	mov	r14, r24
    53bc:	e6 18       	sub	r14, r6
    53be:	3f c0       	rjmp	.+126    	; 0x543e <vfprintf+0x59c>
    53c0:	02 2f       	mov	r16, r18
    53c2:	85 37       	cpi	r24, 0x75	; 117
    53c4:	21 f4       	brne	.+8      	; 0x53ce <vfprintf+0x52c>
    53c6:	0f 7e       	andi	r16, 0xEF	; 239
    53c8:	2a e0       	ldi	r18, 0x0A	; 10
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	1d c0       	rjmp	.+58     	; 0x5408 <vfprintf+0x566>
    53ce:	09 7f       	andi	r16, 0xF9	; 249
    53d0:	8f 36       	cpi	r24, 0x6F	; 111
    53d2:	91 f0       	breq	.+36     	; 0x53f8 <vfprintf+0x556>
    53d4:	18 f4       	brcc	.+6      	; 0x53dc <vfprintf+0x53a>
    53d6:	88 35       	cpi	r24, 0x58	; 88
    53d8:	59 f0       	breq	.+22     	; 0x53f0 <vfprintf+0x54e>
    53da:	c5 c0       	rjmp	.+394    	; 0x5566 <vfprintf+0x6c4>
    53dc:	80 37       	cpi	r24, 0x70	; 112
    53de:	19 f0       	breq	.+6      	; 0x53e6 <vfprintf+0x544>
    53e0:	88 37       	cpi	r24, 0x78	; 120
    53e2:	11 f0       	breq	.+4      	; 0x53e8 <vfprintf+0x546>
    53e4:	c0 c0       	rjmp	.+384    	; 0x5566 <vfprintf+0x6c4>
    53e6:	00 61       	ori	r16, 0x10	; 16
    53e8:	04 ff       	sbrs	r16, 4
    53ea:	09 c0       	rjmp	.+18     	; 0x53fe <vfprintf+0x55c>
    53ec:	04 60       	ori	r16, 0x04	; 4
    53ee:	07 c0       	rjmp	.+14     	; 0x53fe <vfprintf+0x55c>
    53f0:	24 ff       	sbrs	r18, 4
    53f2:	08 c0       	rjmp	.+16     	; 0x5404 <vfprintf+0x562>
    53f4:	06 60       	ori	r16, 0x06	; 6
    53f6:	06 c0       	rjmp	.+12     	; 0x5404 <vfprintf+0x562>
    53f8:	28 e0       	ldi	r18, 0x08	; 8
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	05 c0       	rjmp	.+10     	; 0x5408 <vfprintf+0x566>
    53fe:	20 e1       	ldi	r18, 0x10	; 16
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	02 c0       	rjmp	.+4      	; 0x5408 <vfprintf+0x566>
    5404:	20 e1       	ldi	r18, 0x10	; 16
    5406:	32 e0       	ldi	r19, 0x02	; 2
    5408:	52 01       	movw	r10, r4
    540a:	07 ff       	sbrs	r16, 7
    540c:	09 c0       	rjmp	.+18     	; 0x5420 <vfprintf+0x57e>
    540e:	f4 e0       	ldi	r31, 0x04	; 4
    5410:	af 0e       	add	r10, r31
    5412:	b1 1c       	adc	r11, r1
    5414:	f2 01       	movw	r30, r4
    5416:	60 81       	ld	r22, Z
    5418:	71 81       	ldd	r23, Z+1	; 0x01
    541a:	82 81       	ldd	r24, Z+2	; 0x02
    541c:	93 81       	ldd	r25, Z+3	; 0x03
    541e:	08 c0       	rjmp	.+16     	; 0x5430 <vfprintf+0x58e>
    5420:	f2 e0       	ldi	r31, 0x02	; 2
    5422:	af 0e       	add	r10, r31
    5424:	b1 1c       	adc	r11, r1
    5426:	f2 01       	movw	r30, r4
    5428:	60 81       	ld	r22, Z
    542a:	71 81       	ldd	r23, Z+1	; 0x01
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	a3 01       	movw	r20, r6
    5432:	0e 94 34 32 	call	0x6468	; 0x6468 <__ultoa_invert>
    5436:	e8 2e       	mov	r14, r24
    5438:	e6 18       	sub	r14, r6
    543a:	0f 77       	andi	r16, 0x7F	; 127
    543c:	30 2e       	mov	r3, r16
    543e:	36 fe       	sbrs	r3, 6
    5440:	0b c0       	rjmp	.+22     	; 0x5458 <vfprintf+0x5b6>
    5442:	33 2d       	mov	r19, r3
    5444:	3e 7f       	andi	r19, 0xFE	; 254
    5446:	e1 16       	cp	r14, r17
    5448:	50 f4       	brcc	.+20     	; 0x545e <vfprintf+0x5bc>
    544a:	34 fe       	sbrs	r3, 4
    544c:	0a c0       	rjmp	.+20     	; 0x5462 <vfprintf+0x5c0>
    544e:	32 fc       	sbrc	r3, 2
    5450:	08 c0       	rjmp	.+16     	; 0x5462 <vfprintf+0x5c0>
    5452:	33 2d       	mov	r19, r3
    5454:	3e 7e       	andi	r19, 0xEE	; 238
    5456:	05 c0       	rjmp	.+10     	; 0x5462 <vfprintf+0x5c0>
    5458:	0e 2d       	mov	r16, r14
    545a:	33 2d       	mov	r19, r3
    545c:	03 c0       	rjmp	.+6      	; 0x5464 <vfprintf+0x5c2>
    545e:	0e 2d       	mov	r16, r14
    5460:	01 c0       	rjmp	.+2      	; 0x5464 <vfprintf+0x5c2>
    5462:	01 2f       	mov	r16, r17
    5464:	34 ff       	sbrs	r19, 4
    5466:	0c c0       	rjmp	.+24     	; 0x5480 <vfprintf+0x5de>
    5468:	fe 01       	movw	r30, r28
    546a:	ee 0d       	add	r30, r14
    546c:	f1 1d       	adc	r31, r1
    546e:	80 81       	ld	r24, Z
    5470:	80 33       	cpi	r24, 0x30	; 48
    5472:	11 f4       	brne	.+4      	; 0x5478 <vfprintf+0x5d6>
    5474:	39 7e       	andi	r19, 0xE9	; 233
    5476:	08 c0       	rjmp	.+16     	; 0x5488 <vfprintf+0x5e6>
    5478:	32 ff       	sbrs	r19, 2
    547a:	05 c0       	rjmp	.+10     	; 0x5486 <vfprintf+0x5e4>
    547c:	0e 5f       	subi	r16, 0xFE	; 254
    547e:	04 c0       	rjmp	.+8      	; 0x5488 <vfprintf+0x5e6>
    5480:	83 2f       	mov	r24, r19
    5482:	86 78       	andi	r24, 0x86	; 134
    5484:	09 f0       	breq	.+2      	; 0x5488 <vfprintf+0x5e6>
    5486:	0f 5f       	subi	r16, 0xFF	; 255
    5488:	33 fd       	sbrc	r19, 3
    548a:	13 c0       	rjmp	.+38     	; 0x54b2 <vfprintf+0x610>
    548c:	30 ff       	sbrs	r19, 0
    548e:	06 c0       	rjmp	.+12     	; 0x549c <vfprintf+0x5fa>
    5490:	1e 2d       	mov	r17, r14
    5492:	0f 15       	cp	r16, r15
    5494:	18 f4       	brcc	.+6      	; 0x549c <vfprintf+0x5fa>
    5496:	1f 0d       	add	r17, r15
    5498:	10 1b       	sub	r17, r16
    549a:	0f 2d       	mov	r16, r15
    549c:	0f 15       	cp	r16, r15
    549e:	68 f4       	brcc	.+26     	; 0x54ba <vfprintf+0x618>
    54a0:	b6 01       	movw	r22, r12
    54a2:	80 e2       	ldi	r24, 0x20	; 32
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	3b 8b       	std	Y+19, r19	; 0x13
    54a8:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    54ac:	0f 5f       	subi	r16, 0xFF	; 255
    54ae:	3b 89       	ldd	r19, Y+19	; 0x13
    54b0:	f5 cf       	rjmp	.-22     	; 0x549c <vfprintf+0x5fa>
    54b2:	0f 15       	cp	r16, r15
    54b4:	10 f4       	brcc	.+4      	; 0x54ba <vfprintf+0x618>
    54b6:	f0 1a       	sub	r15, r16
    54b8:	01 c0       	rjmp	.+2      	; 0x54bc <vfprintf+0x61a>
    54ba:	f1 2c       	mov	r15, r1
    54bc:	34 ff       	sbrs	r19, 4
    54be:	12 c0       	rjmp	.+36     	; 0x54e4 <vfprintf+0x642>
    54c0:	b6 01       	movw	r22, r12
    54c2:	80 e3       	ldi	r24, 0x30	; 48
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	3b 8b       	std	Y+19, r19	; 0x13
    54c8:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    54cc:	3b 89       	ldd	r19, Y+19	; 0x13
    54ce:	32 ff       	sbrs	r19, 2
    54d0:	17 c0       	rjmp	.+46     	; 0x5500 <vfprintf+0x65e>
    54d2:	31 fd       	sbrc	r19, 1
    54d4:	03 c0       	rjmp	.+6      	; 0x54dc <vfprintf+0x63a>
    54d6:	88 e7       	ldi	r24, 0x78	; 120
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <vfprintf+0x63e>
    54dc:	88 e5       	ldi	r24, 0x58	; 88
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	b6 01       	movw	r22, r12
    54e2:	0c c0       	rjmp	.+24     	; 0x54fc <vfprintf+0x65a>
    54e4:	83 2f       	mov	r24, r19
    54e6:	86 78       	andi	r24, 0x86	; 134
    54e8:	59 f0       	breq	.+22     	; 0x5500 <vfprintf+0x65e>
    54ea:	31 ff       	sbrs	r19, 1
    54ec:	02 c0       	rjmp	.+4      	; 0x54f2 <vfprintf+0x650>
    54ee:	8b e2       	ldi	r24, 0x2B	; 43
    54f0:	01 c0       	rjmp	.+2      	; 0x54f4 <vfprintf+0x652>
    54f2:	80 e2       	ldi	r24, 0x20	; 32
    54f4:	37 fd       	sbrc	r19, 7
    54f6:	8d e2       	ldi	r24, 0x2D	; 45
    54f8:	b6 01       	movw	r22, r12
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5500:	e1 16       	cp	r14, r17
    5502:	38 f4       	brcc	.+14     	; 0x5512 <vfprintf+0x670>
    5504:	b6 01       	movw	r22, r12
    5506:	80 e3       	ldi	r24, 0x30	; 48
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    550e:	11 50       	subi	r17, 0x01	; 1
    5510:	f7 cf       	rjmp	.-18     	; 0x5500 <vfprintf+0x65e>
    5512:	ea 94       	dec	r14
    5514:	f3 01       	movw	r30, r6
    5516:	ee 0d       	add	r30, r14
    5518:	f1 1d       	adc	r31, r1
    551a:	80 81       	ld	r24, Z
    551c:	b6 01       	movw	r22, r12
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5524:	e1 10       	cpse	r14, r1
    5526:	f5 cf       	rjmp	.-22     	; 0x5512 <vfprintf+0x670>
    5528:	14 c0       	rjmp	.+40     	; 0x5552 <vfprintf+0x6b0>
    552a:	f4 e0       	ldi	r31, 0x04	; 4
    552c:	ff 15       	cp	r31, r15
    552e:	58 f5       	brcc	.+86     	; 0x5586 <vfprintf+0x6e4>
    5530:	84 e0       	ldi	r24, 0x04	; 4
    5532:	f8 1a       	sub	r15, r24
    5534:	33 fe       	sbrs	r3, 3
    5536:	1e c0       	rjmp	.+60     	; 0x5574 <vfprintf+0x6d2>
    5538:	21 10       	cpse	r2, r1
    553a:	26 c0       	rjmp	.+76     	; 0x5588 <vfprintf+0x6e6>
    553c:	03 ff       	sbrs	r16, 3
    553e:	2a c0       	rjmp	.+84     	; 0x5594 <vfprintf+0x6f2>
    5540:	04 e8       	ldi	r16, 0x84	; 132
    5542:	11 e0       	ldi	r17, 0x01	; 1
    5544:	f3 2d       	mov	r31, r3
    5546:	f0 71       	andi	r31, 0x10	; 16
    5548:	3f 2e       	mov	r3, r31
    554a:	f8 01       	movw	r30, r16
    554c:	84 91       	lpm	r24, Z
    554e:	81 11       	cpse	r24, r1
    5550:	24 c0       	rjmp	.+72     	; 0x559a <vfprintf+0x6f8>
    5552:	ff 20       	and	r15, r15
    5554:	09 f4       	brne	.+2      	; 0x5558 <vfprintf+0x6b6>
    5556:	e5 cc       	rjmp	.-1590   	; 0x4f22 <vfprintf+0x80>
    5558:	b6 01       	movw	r22, r12
    555a:	80 e2       	ldi	r24, 0x20	; 32
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5562:	fa 94       	dec	r15
    5564:	f6 cf       	rjmp	.-20     	; 0x5552 <vfprintf+0x6b0>
    5566:	f6 01       	movw	r30, r12
    5568:	86 81       	ldd	r24, Z+6	; 0x06
    556a:	97 81       	ldd	r25, Z+7	; 0x07
    556c:	26 c0       	rjmp	.+76     	; 0x55ba <vfprintf+0x718>
    556e:	8f ef       	ldi	r24, 0xFF	; 255
    5570:	9f ef       	ldi	r25, 0xFF	; 255
    5572:	23 c0       	rjmp	.+70     	; 0x55ba <vfprintf+0x718>
    5574:	b6 01       	movw	r22, r12
    5576:	80 e2       	ldi	r24, 0x20	; 32
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    557e:	fa 94       	dec	r15
    5580:	f1 10       	cpse	r15, r1
    5582:	f8 cf       	rjmp	.-16     	; 0x5574 <vfprintf+0x6d2>
    5584:	d9 cf       	rjmp	.-78     	; 0x5538 <vfprintf+0x696>
    5586:	f1 2c       	mov	r15, r1
    5588:	b6 01       	movw	r22, r12
    558a:	82 2d       	mov	r24, r2
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    5592:	d4 cf       	rjmp	.-88     	; 0x553c <vfprintf+0x69a>
    5594:	08 e8       	ldi	r16, 0x88	; 136
    5596:	11 e0       	ldi	r17, 0x01	; 1
    5598:	d5 cf       	rjmp	.-86     	; 0x5544 <vfprintf+0x6a2>
    559a:	31 10       	cpse	r3, r1
    559c:	80 52       	subi	r24, 0x20	; 32
    559e:	b6 01       	movw	r22, r12
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	0e 94 cc 31 	call	0x6398	; 0x6398 <fputc>
    55a6:	0f 5f       	subi	r16, 0xFF	; 255
    55a8:	1f 4f       	sbci	r17, 0xFF	; 255
    55aa:	cf cf       	rjmp	.-98     	; 0x554a <vfprintf+0x6a8>
    55ac:	23 e0       	ldi	r18, 0x03	; 3
    55ae:	2f 15       	cp	r18, r15
    55b0:	10 f4       	brcc	.+4      	; 0x55b6 <vfprintf+0x714>
    55b2:	83 e0       	ldi	r24, 0x03	; 3
    55b4:	be cf       	rjmp	.-132    	; 0x5532 <vfprintf+0x690>
    55b6:	f1 2c       	mov	r15, r1
    55b8:	c1 cf       	rjmp	.-126    	; 0x553c <vfprintf+0x69a>
    55ba:	63 96       	adiw	r28, 0x13	; 19
    55bc:	0f b6       	in	r0, 0x3f	; 63
    55be:	f8 94       	cli
    55c0:	de bf       	out	0x3e, r29	; 62
    55c2:	0f be       	out	0x3f, r0	; 63
    55c4:	cd bf       	out	0x3d, r28	; 61
    55c6:	df 91       	pop	r29
    55c8:	cf 91       	pop	r28
    55ca:	1f 91       	pop	r17
    55cc:	0f 91       	pop	r16
    55ce:	ff 90       	pop	r15
    55d0:	ef 90       	pop	r14
    55d2:	df 90       	pop	r13
    55d4:	cf 90       	pop	r12
    55d6:	bf 90       	pop	r11
    55d8:	af 90       	pop	r10
    55da:	9f 90       	pop	r9
    55dc:	8f 90       	pop	r8
    55de:	7f 90       	pop	r7
    55e0:	6f 90       	pop	r6
    55e2:	5f 90       	pop	r5
    55e4:	4f 90       	pop	r4
    55e6:	3f 90       	pop	r3
    55e8:	2f 90       	pop	r2
    55ea:	08 95       	ret

000055ec <__subsf3>:
    55ec:	50 58       	subi	r21, 0x80	; 128

000055ee <__addsf3>:
    55ee:	bb 27       	eor	r27, r27
    55f0:	aa 27       	eor	r26, r26
    55f2:	0e 94 0e 2b 	call	0x561c	; 0x561c <__addsf3x>
    55f6:	0c 94 58 2c 	jmp	0x58b0	; 0x58b0 <__fp_round>
    55fa:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__fp_pscA>
    55fe:	38 f0       	brcs	.+14     	; 0x560e <__addsf3+0x20>
    5600:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <__fp_pscB>
    5604:	20 f0       	brcs	.+8      	; 0x560e <__addsf3+0x20>
    5606:	39 f4       	brne	.+14     	; 0x5616 <__addsf3+0x28>
    5608:	9f 3f       	cpi	r25, 0xFF	; 255
    560a:	19 f4       	brne	.+6      	; 0x5612 <__addsf3+0x24>
    560c:	26 f4       	brtc	.+8      	; 0x5616 <__addsf3+0x28>
    560e:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__fp_nan>
    5612:	0e f4       	brtc	.+2      	; 0x5616 <__addsf3+0x28>
    5614:	e0 95       	com	r30
    5616:	e7 fb       	bst	r30, 7
    5618:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__fp_inf>

0000561c <__addsf3x>:
    561c:	e9 2f       	mov	r30, r25
    561e:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fp_split3>
    5622:	58 f3       	brcs	.-42     	; 0x55fa <__addsf3+0xc>
    5624:	ba 17       	cp	r27, r26
    5626:	62 07       	cpc	r22, r18
    5628:	73 07       	cpc	r23, r19
    562a:	84 07       	cpc	r24, r20
    562c:	95 07       	cpc	r25, r21
    562e:	20 f0       	brcs	.+8      	; 0x5638 <__addsf3x+0x1c>
    5630:	79 f4       	brne	.+30     	; 0x5650 <__addsf3x+0x34>
    5632:	a6 f5       	brtc	.+104    	; 0x569c <__addsf3x+0x80>
    5634:	0c 94 8b 2c 	jmp	0x5916	; 0x5916 <__fp_zero>
    5638:	0e f4       	brtc	.+2      	; 0x563c <__addsf3x+0x20>
    563a:	e0 95       	com	r30
    563c:	0b 2e       	mov	r0, r27
    563e:	ba 2f       	mov	r27, r26
    5640:	a0 2d       	mov	r26, r0
    5642:	0b 01       	movw	r0, r22
    5644:	b9 01       	movw	r22, r18
    5646:	90 01       	movw	r18, r0
    5648:	0c 01       	movw	r0, r24
    564a:	ca 01       	movw	r24, r20
    564c:	a0 01       	movw	r20, r0
    564e:	11 24       	eor	r1, r1
    5650:	ff 27       	eor	r31, r31
    5652:	59 1b       	sub	r21, r25
    5654:	99 f0       	breq	.+38     	; 0x567c <__addsf3x+0x60>
    5656:	59 3f       	cpi	r21, 0xF9	; 249
    5658:	50 f4       	brcc	.+20     	; 0x566e <__addsf3x+0x52>
    565a:	50 3e       	cpi	r21, 0xE0	; 224
    565c:	68 f1       	brcs	.+90     	; 0x56b8 <__addsf3x+0x9c>
    565e:	1a 16       	cp	r1, r26
    5660:	f0 40       	sbci	r31, 0x00	; 0
    5662:	a2 2f       	mov	r26, r18
    5664:	23 2f       	mov	r18, r19
    5666:	34 2f       	mov	r19, r20
    5668:	44 27       	eor	r20, r20
    566a:	58 5f       	subi	r21, 0xF8	; 248
    566c:	f3 cf       	rjmp	.-26     	; 0x5654 <__addsf3x+0x38>
    566e:	46 95       	lsr	r20
    5670:	37 95       	ror	r19
    5672:	27 95       	ror	r18
    5674:	a7 95       	ror	r26
    5676:	f0 40       	sbci	r31, 0x00	; 0
    5678:	53 95       	inc	r21
    567a:	c9 f7       	brne	.-14     	; 0x566e <__addsf3x+0x52>
    567c:	7e f4       	brtc	.+30     	; 0x569c <__addsf3x+0x80>
    567e:	1f 16       	cp	r1, r31
    5680:	ba 0b       	sbc	r27, r26
    5682:	62 0b       	sbc	r22, r18
    5684:	73 0b       	sbc	r23, r19
    5686:	84 0b       	sbc	r24, r20
    5688:	ba f0       	brmi	.+46     	; 0x56b8 <__addsf3x+0x9c>
    568a:	91 50       	subi	r25, 0x01	; 1
    568c:	a1 f0       	breq	.+40     	; 0x56b6 <__addsf3x+0x9a>
    568e:	ff 0f       	add	r31, r31
    5690:	bb 1f       	adc	r27, r27
    5692:	66 1f       	adc	r22, r22
    5694:	77 1f       	adc	r23, r23
    5696:	88 1f       	adc	r24, r24
    5698:	c2 f7       	brpl	.-16     	; 0x568a <__addsf3x+0x6e>
    569a:	0e c0       	rjmp	.+28     	; 0x56b8 <__addsf3x+0x9c>
    569c:	ba 0f       	add	r27, r26
    569e:	62 1f       	adc	r22, r18
    56a0:	73 1f       	adc	r23, r19
    56a2:	84 1f       	adc	r24, r20
    56a4:	48 f4       	brcc	.+18     	; 0x56b8 <__addsf3x+0x9c>
    56a6:	87 95       	ror	r24
    56a8:	77 95       	ror	r23
    56aa:	67 95       	ror	r22
    56ac:	b7 95       	ror	r27
    56ae:	f7 95       	ror	r31
    56b0:	9e 3f       	cpi	r25, 0xFE	; 254
    56b2:	08 f0       	brcs	.+2      	; 0x56b6 <__addsf3x+0x9a>
    56b4:	b0 cf       	rjmp	.-160    	; 0x5616 <__addsf3+0x28>
    56b6:	93 95       	inc	r25
    56b8:	88 0f       	add	r24, r24
    56ba:	08 f0       	brcs	.+2      	; 0x56be <__addsf3x+0xa2>
    56bc:	99 27       	eor	r25, r25
    56be:	ee 0f       	add	r30, r30
    56c0:	97 95       	ror	r25
    56c2:	87 95       	ror	r24
    56c4:	08 95       	ret

000056c6 <__divsf3>:
    56c6:	0e 94 77 2b 	call	0x56ee	; 0x56ee <__divsf3x>
    56ca:	0c 94 58 2c 	jmp	0x58b0	; 0x58b0 <__fp_round>
    56ce:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <__fp_pscB>
    56d2:	58 f0       	brcs	.+22     	; 0x56ea <__divsf3+0x24>
    56d4:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__fp_pscA>
    56d8:	40 f0       	brcs	.+16     	; 0x56ea <__divsf3+0x24>
    56da:	29 f4       	brne	.+10     	; 0x56e6 <__divsf3+0x20>
    56dc:	5f 3f       	cpi	r21, 0xFF	; 255
    56de:	29 f0       	breq	.+10     	; 0x56ea <__divsf3+0x24>
    56e0:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__fp_inf>
    56e4:	51 11       	cpse	r21, r1
    56e6:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__fp_szero>
    56ea:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__fp_nan>

000056ee <__divsf3x>:
    56ee:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fp_split3>
    56f2:	68 f3       	brcs	.-38     	; 0x56ce <__divsf3+0x8>

000056f4 <__divsf3_pse>:
    56f4:	99 23       	and	r25, r25
    56f6:	b1 f3       	breq	.-20     	; 0x56e4 <__divsf3+0x1e>
    56f8:	55 23       	and	r21, r21
    56fa:	91 f3       	breq	.-28     	; 0x56e0 <__divsf3+0x1a>
    56fc:	95 1b       	sub	r25, r21
    56fe:	55 0b       	sbc	r21, r21
    5700:	bb 27       	eor	r27, r27
    5702:	aa 27       	eor	r26, r26
    5704:	62 17       	cp	r22, r18
    5706:	73 07       	cpc	r23, r19
    5708:	84 07       	cpc	r24, r20
    570a:	38 f0       	brcs	.+14     	; 0x571a <__divsf3_pse+0x26>
    570c:	9f 5f       	subi	r25, 0xFF	; 255
    570e:	5f 4f       	sbci	r21, 0xFF	; 255
    5710:	22 0f       	add	r18, r18
    5712:	33 1f       	adc	r19, r19
    5714:	44 1f       	adc	r20, r20
    5716:	aa 1f       	adc	r26, r26
    5718:	a9 f3       	breq	.-22     	; 0x5704 <__divsf3_pse+0x10>
    571a:	35 d0       	rcall	.+106    	; 0x5786 <__divsf3_pse+0x92>
    571c:	0e 2e       	mov	r0, r30
    571e:	3a f0       	brmi	.+14     	; 0x572e <__divsf3_pse+0x3a>
    5720:	e0 e8       	ldi	r30, 0x80	; 128
    5722:	32 d0       	rcall	.+100    	; 0x5788 <__divsf3_pse+0x94>
    5724:	91 50       	subi	r25, 0x01	; 1
    5726:	50 40       	sbci	r21, 0x00	; 0
    5728:	e6 95       	lsr	r30
    572a:	00 1c       	adc	r0, r0
    572c:	ca f7       	brpl	.-14     	; 0x5720 <__divsf3_pse+0x2c>
    572e:	2b d0       	rcall	.+86     	; 0x5786 <__divsf3_pse+0x92>
    5730:	fe 2f       	mov	r31, r30
    5732:	29 d0       	rcall	.+82     	; 0x5786 <__divsf3_pse+0x92>
    5734:	66 0f       	add	r22, r22
    5736:	77 1f       	adc	r23, r23
    5738:	88 1f       	adc	r24, r24
    573a:	bb 1f       	adc	r27, r27
    573c:	26 17       	cp	r18, r22
    573e:	37 07       	cpc	r19, r23
    5740:	48 07       	cpc	r20, r24
    5742:	ab 07       	cpc	r26, r27
    5744:	b0 e8       	ldi	r27, 0x80	; 128
    5746:	09 f0       	breq	.+2      	; 0x574a <__divsf3_pse+0x56>
    5748:	bb 0b       	sbc	r27, r27
    574a:	80 2d       	mov	r24, r0
    574c:	bf 01       	movw	r22, r30
    574e:	ff 27       	eor	r31, r31
    5750:	93 58       	subi	r25, 0x83	; 131
    5752:	5f 4f       	sbci	r21, 0xFF	; 255
    5754:	3a f0       	brmi	.+14     	; 0x5764 <__divsf3_pse+0x70>
    5756:	9e 3f       	cpi	r25, 0xFE	; 254
    5758:	51 05       	cpc	r21, r1
    575a:	78 f0       	brcs	.+30     	; 0x577a <__divsf3_pse+0x86>
    575c:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__fp_inf>
    5760:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__fp_szero>
    5764:	5f 3f       	cpi	r21, 0xFF	; 255
    5766:	e4 f3       	brlt	.-8      	; 0x5760 <__divsf3_pse+0x6c>
    5768:	98 3e       	cpi	r25, 0xE8	; 232
    576a:	d4 f3       	brlt	.-12     	; 0x5760 <__divsf3_pse+0x6c>
    576c:	86 95       	lsr	r24
    576e:	77 95       	ror	r23
    5770:	67 95       	ror	r22
    5772:	b7 95       	ror	r27
    5774:	f7 95       	ror	r31
    5776:	9f 5f       	subi	r25, 0xFF	; 255
    5778:	c9 f7       	brne	.-14     	; 0x576c <__divsf3_pse+0x78>
    577a:	88 0f       	add	r24, r24
    577c:	91 1d       	adc	r25, r1
    577e:	96 95       	lsr	r25
    5780:	87 95       	ror	r24
    5782:	97 f9       	bld	r25, 7
    5784:	08 95       	ret
    5786:	e1 e0       	ldi	r30, 0x01	; 1
    5788:	66 0f       	add	r22, r22
    578a:	77 1f       	adc	r23, r23
    578c:	88 1f       	adc	r24, r24
    578e:	bb 1f       	adc	r27, r27
    5790:	62 17       	cp	r22, r18
    5792:	73 07       	cpc	r23, r19
    5794:	84 07       	cpc	r24, r20
    5796:	ba 07       	cpc	r27, r26
    5798:	20 f0       	brcs	.+8      	; 0x57a2 <__divsf3_pse+0xae>
    579a:	62 1b       	sub	r22, r18
    579c:	73 0b       	sbc	r23, r19
    579e:	84 0b       	sbc	r24, r20
    57a0:	ba 0b       	sbc	r27, r26
    57a2:	ee 1f       	adc	r30, r30
    57a4:	88 f7       	brcc	.-30     	; 0x5788 <__divsf3_pse+0x94>
    57a6:	e0 95       	com	r30
    57a8:	08 95       	ret

000057aa <__fixunssfsi>:
    57aa:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__fp_splitA>
    57ae:	88 f0       	brcs	.+34     	; 0x57d2 <__fixunssfsi+0x28>
    57b0:	9f 57       	subi	r25, 0x7F	; 127
    57b2:	98 f0       	brcs	.+38     	; 0x57da <__fixunssfsi+0x30>
    57b4:	b9 2f       	mov	r27, r25
    57b6:	99 27       	eor	r25, r25
    57b8:	b7 51       	subi	r27, 0x17	; 23
    57ba:	b0 f0       	brcs	.+44     	; 0x57e8 <__fixunssfsi+0x3e>
    57bc:	e1 f0       	breq	.+56     	; 0x57f6 <__fixunssfsi+0x4c>
    57be:	66 0f       	add	r22, r22
    57c0:	77 1f       	adc	r23, r23
    57c2:	88 1f       	adc	r24, r24
    57c4:	99 1f       	adc	r25, r25
    57c6:	1a f0       	brmi	.+6      	; 0x57ce <__fixunssfsi+0x24>
    57c8:	ba 95       	dec	r27
    57ca:	c9 f7       	brne	.-14     	; 0x57be <__fixunssfsi+0x14>
    57cc:	14 c0       	rjmp	.+40     	; 0x57f6 <__fixunssfsi+0x4c>
    57ce:	b1 30       	cpi	r27, 0x01	; 1
    57d0:	91 f0       	breq	.+36     	; 0x57f6 <__fixunssfsi+0x4c>
    57d2:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__fp_zero>
    57d6:	b1 e0       	ldi	r27, 0x01	; 1
    57d8:	08 95       	ret
    57da:	0c 94 8b 2c 	jmp	0x5916	; 0x5916 <__fp_zero>
    57de:	67 2f       	mov	r22, r23
    57e0:	78 2f       	mov	r23, r24
    57e2:	88 27       	eor	r24, r24
    57e4:	b8 5f       	subi	r27, 0xF8	; 248
    57e6:	39 f0       	breq	.+14     	; 0x57f6 <__fixunssfsi+0x4c>
    57e8:	b9 3f       	cpi	r27, 0xF9	; 249
    57ea:	cc f3       	brlt	.-14     	; 0x57de <__fixunssfsi+0x34>
    57ec:	86 95       	lsr	r24
    57ee:	77 95       	ror	r23
    57f0:	67 95       	ror	r22
    57f2:	b3 95       	inc	r27
    57f4:	d9 f7       	brne	.-10     	; 0x57ec <__fixunssfsi+0x42>
    57f6:	3e f4       	brtc	.+14     	; 0x5806 <__fixunssfsi+0x5c>
    57f8:	90 95       	com	r25
    57fa:	80 95       	com	r24
    57fc:	70 95       	com	r23
    57fe:	61 95       	neg	r22
    5800:	7f 4f       	sbci	r23, 0xFF	; 255
    5802:	8f 4f       	sbci	r24, 0xFF	; 255
    5804:	9f 4f       	sbci	r25, 0xFF	; 255
    5806:	08 95       	ret

00005808 <__floatunsisf>:
    5808:	e8 94       	clt
    580a:	09 c0       	rjmp	.+18     	; 0x581e <__floatsisf+0x12>

0000580c <__floatsisf>:
    580c:	97 fb       	bst	r25, 7
    580e:	3e f4       	brtc	.+14     	; 0x581e <__floatsisf+0x12>
    5810:	90 95       	com	r25
    5812:	80 95       	com	r24
    5814:	70 95       	com	r23
    5816:	61 95       	neg	r22
    5818:	7f 4f       	sbci	r23, 0xFF	; 255
    581a:	8f 4f       	sbci	r24, 0xFF	; 255
    581c:	9f 4f       	sbci	r25, 0xFF	; 255
    581e:	99 23       	and	r25, r25
    5820:	a9 f0       	breq	.+42     	; 0x584c <__floatsisf+0x40>
    5822:	f9 2f       	mov	r31, r25
    5824:	96 e9       	ldi	r25, 0x96	; 150
    5826:	bb 27       	eor	r27, r27
    5828:	93 95       	inc	r25
    582a:	f6 95       	lsr	r31
    582c:	87 95       	ror	r24
    582e:	77 95       	ror	r23
    5830:	67 95       	ror	r22
    5832:	b7 95       	ror	r27
    5834:	f1 11       	cpse	r31, r1
    5836:	f8 cf       	rjmp	.-16     	; 0x5828 <__floatsisf+0x1c>
    5838:	fa f4       	brpl	.+62     	; 0x5878 <__floatsisf+0x6c>
    583a:	bb 0f       	add	r27, r27
    583c:	11 f4       	brne	.+4      	; 0x5842 <__floatsisf+0x36>
    583e:	60 ff       	sbrs	r22, 0
    5840:	1b c0       	rjmp	.+54     	; 0x5878 <__floatsisf+0x6c>
    5842:	6f 5f       	subi	r22, 0xFF	; 255
    5844:	7f 4f       	sbci	r23, 0xFF	; 255
    5846:	8f 4f       	sbci	r24, 0xFF	; 255
    5848:	9f 4f       	sbci	r25, 0xFF	; 255
    584a:	16 c0       	rjmp	.+44     	; 0x5878 <__floatsisf+0x6c>
    584c:	88 23       	and	r24, r24
    584e:	11 f0       	breq	.+4      	; 0x5854 <__floatsisf+0x48>
    5850:	96 e9       	ldi	r25, 0x96	; 150
    5852:	11 c0       	rjmp	.+34     	; 0x5876 <__floatsisf+0x6a>
    5854:	77 23       	and	r23, r23
    5856:	21 f0       	breq	.+8      	; 0x5860 <__floatsisf+0x54>
    5858:	9e e8       	ldi	r25, 0x8E	; 142
    585a:	87 2f       	mov	r24, r23
    585c:	76 2f       	mov	r23, r22
    585e:	05 c0       	rjmp	.+10     	; 0x586a <__floatsisf+0x5e>
    5860:	66 23       	and	r22, r22
    5862:	71 f0       	breq	.+28     	; 0x5880 <__floatsisf+0x74>
    5864:	96 e8       	ldi	r25, 0x86	; 134
    5866:	86 2f       	mov	r24, r22
    5868:	70 e0       	ldi	r23, 0x00	; 0
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	2a f0       	brmi	.+10     	; 0x5878 <__floatsisf+0x6c>
    586e:	9a 95       	dec	r25
    5870:	66 0f       	add	r22, r22
    5872:	77 1f       	adc	r23, r23
    5874:	88 1f       	adc	r24, r24
    5876:	da f7       	brpl	.-10     	; 0x586e <__floatsisf+0x62>
    5878:	88 0f       	add	r24, r24
    587a:	96 95       	lsr	r25
    587c:	87 95       	ror	r24
    587e:	97 f9       	bld	r25, 7
    5880:	08 95       	ret

00005882 <__fp_inf>:
    5882:	97 f9       	bld	r25, 7
    5884:	9f 67       	ori	r25, 0x7F	; 127
    5886:	80 e8       	ldi	r24, 0x80	; 128
    5888:	70 e0       	ldi	r23, 0x00	; 0
    588a:	60 e0       	ldi	r22, 0x00	; 0
    588c:	08 95       	ret

0000588e <__fp_nan>:
    588e:	9f ef       	ldi	r25, 0xFF	; 255
    5890:	80 ec       	ldi	r24, 0xC0	; 192
    5892:	08 95       	ret

00005894 <__fp_pscA>:
    5894:	00 24       	eor	r0, r0
    5896:	0a 94       	dec	r0
    5898:	16 16       	cp	r1, r22
    589a:	17 06       	cpc	r1, r23
    589c:	18 06       	cpc	r1, r24
    589e:	09 06       	cpc	r0, r25
    58a0:	08 95       	ret

000058a2 <__fp_pscB>:
    58a2:	00 24       	eor	r0, r0
    58a4:	0a 94       	dec	r0
    58a6:	12 16       	cp	r1, r18
    58a8:	13 06       	cpc	r1, r19
    58aa:	14 06       	cpc	r1, r20
    58ac:	05 06       	cpc	r0, r21
    58ae:	08 95       	ret

000058b0 <__fp_round>:
    58b0:	09 2e       	mov	r0, r25
    58b2:	03 94       	inc	r0
    58b4:	00 0c       	add	r0, r0
    58b6:	11 f4       	brne	.+4      	; 0x58bc <__fp_round+0xc>
    58b8:	88 23       	and	r24, r24
    58ba:	52 f0       	brmi	.+20     	; 0x58d0 <__fp_round+0x20>
    58bc:	bb 0f       	add	r27, r27
    58be:	40 f4       	brcc	.+16     	; 0x58d0 <__fp_round+0x20>
    58c0:	bf 2b       	or	r27, r31
    58c2:	11 f4       	brne	.+4      	; 0x58c8 <__fp_round+0x18>
    58c4:	60 ff       	sbrs	r22, 0
    58c6:	04 c0       	rjmp	.+8      	; 0x58d0 <__fp_round+0x20>
    58c8:	6f 5f       	subi	r22, 0xFF	; 255
    58ca:	7f 4f       	sbci	r23, 0xFF	; 255
    58cc:	8f 4f       	sbci	r24, 0xFF	; 255
    58ce:	9f 4f       	sbci	r25, 0xFF	; 255
    58d0:	08 95       	ret

000058d2 <__fp_split3>:
    58d2:	57 fd       	sbrc	r21, 7
    58d4:	90 58       	subi	r25, 0x80	; 128
    58d6:	44 0f       	add	r20, r20
    58d8:	55 1f       	adc	r21, r21
    58da:	59 f0       	breq	.+22     	; 0x58f2 <__fp_splitA+0x10>
    58dc:	5f 3f       	cpi	r21, 0xFF	; 255
    58de:	71 f0       	breq	.+28     	; 0x58fc <__fp_splitA+0x1a>
    58e0:	47 95       	ror	r20

000058e2 <__fp_splitA>:
    58e2:	88 0f       	add	r24, r24
    58e4:	97 fb       	bst	r25, 7
    58e6:	99 1f       	adc	r25, r25
    58e8:	61 f0       	breq	.+24     	; 0x5902 <__fp_splitA+0x20>
    58ea:	9f 3f       	cpi	r25, 0xFF	; 255
    58ec:	79 f0       	breq	.+30     	; 0x590c <__fp_splitA+0x2a>
    58ee:	87 95       	ror	r24
    58f0:	08 95       	ret
    58f2:	12 16       	cp	r1, r18
    58f4:	13 06       	cpc	r1, r19
    58f6:	14 06       	cpc	r1, r20
    58f8:	55 1f       	adc	r21, r21
    58fa:	f2 cf       	rjmp	.-28     	; 0x58e0 <__fp_split3+0xe>
    58fc:	46 95       	lsr	r20
    58fe:	f1 df       	rcall	.-30     	; 0x58e2 <__fp_splitA>
    5900:	08 c0       	rjmp	.+16     	; 0x5912 <__fp_splitA+0x30>
    5902:	16 16       	cp	r1, r22
    5904:	17 06       	cpc	r1, r23
    5906:	18 06       	cpc	r1, r24
    5908:	99 1f       	adc	r25, r25
    590a:	f1 cf       	rjmp	.-30     	; 0x58ee <__fp_splitA+0xc>
    590c:	86 95       	lsr	r24
    590e:	71 05       	cpc	r23, r1
    5910:	61 05       	cpc	r22, r1
    5912:	08 94       	sec
    5914:	08 95       	ret

00005916 <__fp_zero>:
    5916:	e8 94       	clt

00005918 <__fp_szero>:
    5918:	bb 27       	eor	r27, r27
    591a:	66 27       	eor	r22, r22
    591c:	77 27       	eor	r23, r23
    591e:	cb 01       	movw	r24, r22
    5920:	97 f9       	bld	r25, 7
    5922:	08 95       	ret

00005924 <__mulsf3>:
    5924:	0e 94 a5 2c 	call	0x594a	; 0x594a <__mulsf3x>
    5928:	0c 94 58 2c 	jmp	0x58b0	; 0x58b0 <__fp_round>
    592c:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__fp_pscA>
    5930:	38 f0       	brcs	.+14     	; 0x5940 <__mulsf3+0x1c>
    5932:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <__fp_pscB>
    5936:	20 f0       	brcs	.+8      	; 0x5940 <__mulsf3+0x1c>
    5938:	95 23       	and	r25, r21
    593a:	11 f0       	breq	.+4      	; 0x5940 <__mulsf3+0x1c>
    593c:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__fp_inf>
    5940:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__fp_nan>
    5944:	11 24       	eor	r1, r1
    5946:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__fp_szero>

0000594a <__mulsf3x>:
    594a:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fp_split3>
    594e:	70 f3       	brcs	.-36     	; 0x592c <__mulsf3+0x8>

00005950 <__mulsf3_pse>:
    5950:	95 9f       	mul	r25, r21
    5952:	c1 f3       	breq	.-16     	; 0x5944 <__mulsf3+0x20>
    5954:	95 0f       	add	r25, r21
    5956:	50 e0       	ldi	r21, 0x00	; 0
    5958:	55 1f       	adc	r21, r21
    595a:	62 9f       	mul	r22, r18
    595c:	f0 01       	movw	r30, r0
    595e:	72 9f       	mul	r23, r18
    5960:	bb 27       	eor	r27, r27
    5962:	f0 0d       	add	r31, r0
    5964:	b1 1d       	adc	r27, r1
    5966:	63 9f       	mul	r22, r19
    5968:	aa 27       	eor	r26, r26
    596a:	f0 0d       	add	r31, r0
    596c:	b1 1d       	adc	r27, r1
    596e:	aa 1f       	adc	r26, r26
    5970:	64 9f       	mul	r22, r20
    5972:	66 27       	eor	r22, r22
    5974:	b0 0d       	add	r27, r0
    5976:	a1 1d       	adc	r26, r1
    5978:	66 1f       	adc	r22, r22
    597a:	82 9f       	mul	r24, r18
    597c:	22 27       	eor	r18, r18
    597e:	b0 0d       	add	r27, r0
    5980:	a1 1d       	adc	r26, r1
    5982:	62 1f       	adc	r22, r18
    5984:	73 9f       	mul	r23, r19
    5986:	b0 0d       	add	r27, r0
    5988:	a1 1d       	adc	r26, r1
    598a:	62 1f       	adc	r22, r18
    598c:	83 9f       	mul	r24, r19
    598e:	a0 0d       	add	r26, r0
    5990:	61 1d       	adc	r22, r1
    5992:	22 1f       	adc	r18, r18
    5994:	74 9f       	mul	r23, r20
    5996:	33 27       	eor	r19, r19
    5998:	a0 0d       	add	r26, r0
    599a:	61 1d       	adc	r22, r1
    599c:	23 1f       	adc	r18, r19
    599e:	84 9f       	mul	r24, r20
    59a0:	60 0d       	add	r22, r0
    59a2:	21 1d       	adc	r18, r1
    59a4:	82 2f       	mov	r24, r18
    59a6:	76 2f       	mov	r23, r22
    59a8:	6a 2f       	mov	r22, r26
    59aa:	11 24       	eor	r1, r1
    59ac:	9f 57       	subi	r25, 0x7F	; 127
    59ae:	50 40       	sbci	r21, 0x00	; 0
    59b0:	9a f0       	brmi	.+38     	; 0x59d8 <__mulsf3_pse+0x88>
    59b2:	f1 f0       	breq	.+60     	; 0x59f0 <__mulsf3_pse+0xa0>
    59b4:	88 23       	and	r24, r24
    59b6:	4a f0       	brmi	.+18     	; 0x59ca <__mulsf3_pse+0x7a>
    59b8:	ee 0f       	add	r30, r30
    59ba:	ff 1f       	adc	r31, r31
    59bc:	bb 1f       	adc	r27, r27
    59be:	66 1f       	adc	r22, r22
    59c0:	77 1f       	adc	r23, r23
    59c2:	88 1f       	adc	r24, r24
    59c4:	91 50       	subi	r25, 0x01	; 1
    59c6:	50 40       	sbci	r21, 0x00	; 0
    59c8:	a9 f7       	brne	.-22     	; 0x59b4 <__mulsf3_pse+0x64>
    59ca:	9e 3f       	cpi	r25, 0xFE	; 254
    59cc:	51 05       	cpc	r21, r1
    59ce:	80 f0       	brcs	.+32     	; 0x59f0 <__mulsf3_pse+0xa0>
    59d0:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__fp_inf>
    59d4:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__fp_szero>
    59d8:	5f 3f       	cpi	r21, 0xFF	; 255
    59da:	e4 f3       	brlt	.-8      	; 0x59d4 <__mulsf3_pse+0x84>
    59dc:	98 3e       	cpi	r25, 0xE8	; 232
    59de:	d4 f3       	brlt	.-12     	; 0x59d4 <__mulsf3_pse+0x84>
    59e0:	86 95       	lsr	r24
    59e2:	77 95       	ror	r23
    59e4:	67 95       	ror	r22
    59e6:	b7 95       	ror	r27
    59e8:	f7 95       	ror	r31
    59ea:	e7 95       	ror	r30
    59ec:	9f 5f       	subi	r25, 0xFF	; 255
    59ee:	c1 f7       	brne	.-16     	; 0x59e0 <__mulsf3_pse+0x90>
    59f0:	fe 2b       	or	r31, r30
    59f2:	88 0f       	add	r24, r24
    59f4:	91 1d       	adc	r25, r1
    59f6:	96 95       	lsr	r25
    59f8:	87 95       	ror	r24
    59fa:	97 f9       	bld	r25, 7
    59fc:	08 95       	ret

000059fe <__udivmodhi4>:
    59fe:	aa 1b       	sub	r26, r26
    5a00:	bb 1b       	sub	r27, r27
    5a02:	51 e1       	ldi	r21, 0x11	; 17
    5a04:	07 c0       	rjmp	.+14     	; 0x5a14 <__udivmodhi4_ep>

00005a06 <__udivmodhi4_loop>:
    5a06:	aa 1f       	adc	r26, r26
    5a08:	bb 1f       	adc	r27, r27
    5a0a:	a6 17       	cp	r26, r22
    5a0c:	b7 07       	cpc	r27, r23
    5a0e:	10 f0       	brcs	.+4      	; 0x5a14 <__udivmodhi4_ep>
    5a10:	a6 1b       	sub	r26, r22
    5a12:	b7 0b       	sbc	r27, r23

00005a14 <__udivmodhi4_ep>:
    5a14:	88 1f       	adc	r24, r24
    5a16:	99 1f       	adc	r25, r25
    5a18:	5a 95       	dec	r21
    5a1a:	a9 f7       	brne	.-22     	; 0x5a06 <__udivmodhi4_loop>
    5a1c:	80 95       	com	r24
    5a1e:	90 95       	com	r25
    5a20:	bc 01       	movw	r22, r24
    5a22:	cd 01       	movw	r24, r26
    5a24:	08 95       	ret

00005a26 <__divmodhi4>:
    5a26:	97 fb       	bst	r25, 7
    5a28:	07 2e       	mov	r0, r23
    5a2a:	16 f4       	brtc	.+4      	; 0x5a30 <__divmodhi4+0xa>
    5a2c:	00 94       	com	r0
    5a2e:	07 d0       	rcall	.+14     	; 0x5a3e <__divmodhi4_neg1>
    5a30:	77 fd       	sbrc	r23, 7
    5a32:	09 d0       	rcall	.+18     	; 0x5a46 <__divmodhi4_neg2>
    5a34:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__udivmodhi4>
    5a38:	07 fc       	sbrc	r0, 7
    5a3a:	05 d0       	rcall	.+10     	; 0x5a46 <__divmodhi4_neg2>
    5a3c:	3e f4       	brtc	.+14     	; 0x5a4c <__divmodhi4_exit>

00005a3e <__divmodhi4_neg1>:
    5a3e:	90 95       	com	r25
    5a40:	81 95       	neg	r24
    5a42:	9f 4f       	sbci	r25, 0xFF	; 255
    5a44:	08 95       	ret

00005a46 <__divmodhi4_neg2>:
    5a46:	70 95       	com	r23
    5a48:	61 95       	neg	r22
    5a4a:	7f 4f       	sbci	r23, 0xFF	; 255

00005a4c <__divmodhi4_exit>:
    5a4c:	08 95       	ret

00005a4e <__udivmodsi4>:
    5a4e:	a1 e2       	ldi	r26, 0x21	; 33
    5a50:	1a 2e       	mov	r1, r26
    5a52:	aa 1b       	sub	r26, r26
    5a54:	bb 1b       	sub	r27, r27
    5a56:	fd 01       	movw	r30, r26
    5a58:	0d c0       	rjmp	.+26     	; 0x5a74 <__udivmodsi4_ep>

00005a5a <__udivmodsi4_loop>:
    5a5a:	aa 1f       	adc	r26, r26
    5a5c:	bb 1f       	adc	r27, r27
    5a5e:	ee 1f       	adc	r30, r30
    5a60:	ff 1f       	adc	r31, r31
    5a62:	a2 17       	cp	r26, r18
    5a64:	b3 07       	cpc	r27, r19
    5a66:	e4 07       	cpc	r30, r20
    5a68:	f5 07       	cpc	r31, r21
    5a6a:	20 f0       	brcs	.+8      	; 0x5a74 <__udivmodsi4_ep>
    5a6c:	a2 1b       	sub	r26, r18
    5a6e:	b3 0b       	sbc	r27, r19
    5a70:	e4 0b       	sbc	r30, r20
    5a72:	f5 0b       	sbc	r31, r21

00005a74 <__udivmodsi4_ep>:
    5a74:	66 1f       	adc	r22, r22
    5a76:	77 1f       	adc	r23, r23
    5a78:	88 1f       	adc	r24, r24
    5a7a:	99 1f       	adc	r25, r25
    5a7c:	1a 94       	dec	r1
    5a7e:	69 f7       	brne	.-38     	; 0x5a5a <__udivmodsi4_loop>
    5a80:	60 95       	com	r22
    5a82:	70 95       	com	r23
    5a84:	80 95       	com	r24
    5a86:	90 95       	com	r25
    5a88:	9b 01       	movw	r18, r22
    5a8a:	ac 01       	movw	r20, r24
    5a8c:	bd 01       	movw	r22, r26
    5a8e:	cf 01       	movw	r24, r30
    5a90:	08 95       	ret

00005a92 <__tablejump2__>:
    5a92:	ee 0f       	add	r30, r30
    5a94:	ff 1f       	adc	r31, r31
    5a96:	00 24       	eor	r0, r0
    5a98:	00 1c       	adc	r0, r0
    5a9a:	0b be       	out	0x3b, r0	; 59
    5a9c:	07 90       	elpm	r0, Z+
    5a9e:	f6 91       	elpm	r31, Z
    5aa0:	e0 2d       	mov	r30, r0
    5aa2:	09 94       	ijmp

00005aa4 <__ashrdi3>:
    5aa4:	97 fb       	bst	r25, 7
    5aa6:	10 f8       	bld	r1, 0

00005aa8 <__lshrdi3>:
    5aa8:	16 94       	lsr	r1
    5aaa:	00 08       	sbc	r0, r0
    5aac:	0f 93       	push	r16
    5aae:	08 30       	cpi	r16, 0x08	; 8
    5ab0:	98 f0       	brcs	.+38     	; 0x5ad8 <__lshrdi3+0x30>
    5ab2:	08 50       	subi	r16, 0x08	; 8
    5ab4:	23 2f       	mov	r18, r19
    5ab6:	34 2f       	mov	r19, r20
    5ab8:	45 2f       	mov	r20, r21
    5aba:	56 2f       	mov	r21, r22
    5abc:	67 2f       	mov	r22, r23
    5abe:	78 2f       	mov	r23, r24
    5ac0:	89 2f       	mov	r24, r25
    5ac2:	90 2d       	mov	r25, r0
    5ac4:	f4 cf       	rjmp	.-24     	; 0x5aae <__lshrdi3+0x6>
    5ac6:	05 94       	asr	r0
    5ac8:	97 95       	ror	r25
    5aca:	87 95       	ror	r24
    5acc:	77 95       	ror	r23
    5ace:	67 95       	ror	r22
    5ad0:	57 95       	ror	r21
    5ad2:	47 95       	ror	r20
    5ad4:	37 95       	ror	r19
    5ad6:	27 95       	ror	r18
    5ad8:	0a 95       	dec	r16
    5ada:	aa f7       	brpl	.-22     	; 0x5ac6 <__lshrdi3+0x1e>
    5adc:	0f 91       	pop	r16
    5ade:	08 95       	ret

00005ae0 <malloc>:
    5ae0:	cf 93       	push	r28
    5ae2:	df 93       	push	r29
    5ae4:	82 30       	cpi	r24, 0x02	; 2
    5ae6:	91 05       	cpc	r25, r1
    5ae8:	10 f4       	brcc	.+4      	; 0x5aee <malloc+0xe>
    5aea:	82 e0       	ldi	r24, 0x02	; 2
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	e0 91 ba 0c 	lds	r30, 0x0CBA	; 0x800cba <__flp>
    5af2:	f0 91 bb 0c 	lds	r31, 0x0CBB	; 0x800cbb <__flp+0x1>
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	c0 e0       	ldi	r28, 0x00	; 0
    5afc:	d0 e0       	ldi	r29, 0x00	; 0
    5afe:	30 97       	sbiw	r30, 0x00	; 0
    5b00:	11 f1       	breq	.+68     	; 0x5b46 <malloc+0x66>
    5b02:	40 81       	ld	r20, Z
    5b04:	51 81       	ldd	r21, Z+1	; 0x01
    5b06:	48 17       	cp	r20, r24
    5b08:	59 07       	cpc	r21, r25
    5b0a:	c0 f0       	brcs	.+48     	; 0x5b3c <malloc+0x5c>
    5b0c:	48 17       	cp	r20, r24
    5b0e:	59 07       	cpc	r21, r25
    5b10:	61 f4       	brne	.+24     	; 0x5b2a <malloc+0x4a>
    5b12:	82 81       	ldd	r24, Z+2	; 0x02
    5b14:	93 81       	ldd	r25, Z+3	; 0x03
    5b16:	20 97       	sbiw	r28, 0x00	; 0
    5b18:	19 f0       	breq	.+6      	; 0x5b20 <malloc+0x40>
    5b1a:	9b 83       	std	Y+3, r25	; 0x03
    5b1c:	8a 83       	std	Y+2, r24	; 0x02
    5b1e:	2b c0       	rjmp	.+86     	; 0x5b76 <malloc+0x96>
    5b20:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <__flp+0x1>
    5b24:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <__flp>
    5b28:	26 c0       	rjmp	.+76     	; 0x5b76 <malloc+0x96>
    5b2a:	21 15       	cp	r18, r1
    5b2c:	31 05       	cpc	r19, r1
    5b2e:	19 f0       	breq	.+6      	; 0x5b36 <malloc+0x56>
    5b30:	42 17       	cp	r20, r18
    5b32:	53 07       	cpc	r21, r19
    5b34:	18 f4       	brcc	.+6      	; 0x5b3c <malloc+0x5c>
    5b36:	9a 01       	movw	r18, r20
    5b38:	be 01       	movw	r22, r28
    5b3a:	df 01       	movw	r26, r30
    5b3c:	ef 01       	movw	r28, r30
    5b3e:	02 80       	ldd	r0, Z+2	; 0x02
    5b40:	f3 81       	ldd	r31, Z+3	; 0x03
    5b42:	e0 2d       	mov	r30, r0
    5b44:	dc cf       	rjmp	.-72     	; 0x5afe <malloc+0x1e>
    5b46:	21 15       	cp	r18, r1
    5b48:	31 05       	cpc	r19, r1
    5b4a:	09 f1       	breq	.+66     	; 0x5b8e <malloc+0xae>
    5b4c:	28 1b       	sub	r18, r24
    5b4e:	39 0b       	sbc	r19, r25
    5b50:	24 30       	cpi	r18, 0x04	; 4
    5b52:	31 05       	cpc	r19, r1
    5b54:	90 f4       	brcc	.+36     	; 0x5b7a <malloc+0x9a>
    5b56:	12 96       	adiw	r26, 0x02	; 2
    5b58:	8d 91       	ld	r24, X+
    5b5a:	9c 91       	ld	r25, X
    5b5c:	13 97       	sbiw	r26, 0x03	; 3
    5b5e:	61 15       	cp	r22, r1
    5b60:	71 05       	cpc	r23, r1
    5b62:	21 f0       	breq	.+8      	; 0x5b6c <malloc+0x8c>
    5b64:	fb 01       	movw	r30, r22
    5b66:	93 83       	std	Z+3, r25	; 0x03
    5b68:	82 83       	std	Z+2, r24	; 0x02
    5b6a:	04 c0       	rjmp	.+8      	; 0x5b74 <malloc+0x94>
    5b6c:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <__flp+0x1>
    5b70:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <__flp>
    5b74:	fd 01       	movw	r30, r26
    5b76:	32 96       	adiw	r30, 0x02	; 2
    5b78:	44 c0       	rjmp	.+136    	; 0x5c02 <malloc+0x122>
    5b7a:	fd 01       	movw	r30, r26
    5b7c:	e2 0f       	add	r30, r18
    5b7e:	f3 1f       	adc	r31, r19
    5b80:	81 93       	st	Z+, r24
    5b82:	91 93       	st	Z+, r25
    5b84:	22 50       	subi	r18, 0x02	; 2
    5b86:	31 09       	sbc	r19, r1
    5b88:	2d 93       	st	X+, r18
    5b8a:	3c 93       	st	X, r19
    5b8c:	3a c0       	rjmp	.+116    	; 0x5c02 <malloc+0x122>
    5b8e:	20 91 b8 0c 	lds	r18, 0x0CB8	; 0x800cb8 <__brkval>
    5b92:	30 91 b9 0c 	lds	r19, 0x0CB9	; 0x800cb9 <__brkval+0x1>
    5b96:	23 2b       	or	r18, r19
    5b98:	41 f4       	brne	.+16     	; 0x5baa <malloc+0xca>
    5b9a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b9e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5ba2:	30 93 b9 0c 	sts	0x0CB9, r19	; 0x800cb9 <__brkval+0x1>
    5ba6:	20 93 b8 0c 	sts	0x0CB8, r18	; 0x800cb8 <__brkval>
    5baa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5bae:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5bb2:	21 15       	cp	r18, r1
    5bb4:	31 05       	cpc	r19, r1
    5bb6:	41 f4       	brne	.+16     	; 0x5bc8 <malloc+0xe8>
    5bb8:	2d b7       	in	r18, 0x3d	; 61
    5bba:	3e b7       	in	r19, 0x3e	; 62
    5bbc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5bc0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5bc4:	24 1b       	sub	r18, r20
    5bc6:	35 0b       	sbc	r19, r21
    5bc8:	e0 91 b8 0c 	lds	r30, 0x0CB8	; 0x800cb8 <__brkval>
    5bcc:	f0 91 b9 0c 	lds	r31, 0x0CB9	; 0x800cb9 <__brkval+0x1>
    5bd0:	e2 17       	cp	r30, r18
    5bd2:	f3 07       	cpc	r31, r19
    5bd4:	a0 f4       	brcc	.+40     	; 0x5bfe <malloc+0x11e>
    5bd6:	2e 1b       	sub	r18, r30
    5bd8:	3f 0b       	sbc	r19, r31
    5bda:	28 17       	cp	r18, r24
    5bdc:	39 07       	cpc	r19, r25
    5bde:	78 f0       	brcs	.+30     	; 0x5bfe <malloc+0x11e>
    5be0:	ac 01       	movw	r20, r24
    5be2:	4e 5f       	subi	r20, 0xFE	; 254
    5be4:	5f 4f       	sbci	r21, 0xFF	; 255
    5be6:	24 17       	cp	r18, r20
    5be8:	35 07       	cpc	r19, r21
    5bea:	48 f0       	brcs	.+18     	; 0x5bfe <malloc+0x11e>
    5bec:	4e 0f       	add	r20, r30
    5bee:	5f 1f       	adc	r21, r31
    5bf0:	50 93 b9 0c 	sts	0x0CB9, r21	; 0x800cb9 <__brkval+0x1>
    5bf4:	40 93 b8 0c 	sts	0x0CB8, r20	; 0x800cb8 <__brkval>
    5bf8:	81 93       	st	Z+, r24
    5bfa:	91 93       	st	Z+, r25
    5bfc:	02 c0       	rjmp	.+4      	; 0x5c02 <malloc+0x122>
    5bfe:	e0 e0       	ldi	r30, 0x00	; 0
    5c00:	f0 e0       	ldi	r31, 0x00	; 0
    5c02:	cf 01       	movw	r24, r30
    5c04:	df 91       	pop	r29
    5c06:	cf 91       	pop	r28
    5c08:	08 95       	ret

00005c0a <free>:
    5c0a:	0f 93       	push	r16
    5c0c:	1f 93       	push	r17
    5c0e:	cf 93       	push	r28
    5c10:	df 93       	push	r29
    5c12:	00 97       	sbiw	r24, 0x00	; 0
    5c14:	09 f4       	brne	.+2      	; 0x5c18 <free+0xe>
    5c16:	8c c0       	rjmp	.+280    	; 0x5d30 <free+0x126>
    5c18:	fc 01       	movw	r30, r24
    5c1a:	32 97       	sbiw	r30, 0x02	; 2
    5c1c:	13 82       	std	Z+3, r1	; 0x03
    5c1e:	12 82       	std	Z+2, r1	; 0x02
    5c20:	00 91 ba 0c 	lds	r16, 0x0CBA	; 0x800cba <__flp>
    5c24:	10 91 bb 0c 	lds	r17, 0x0CBB	; 0x800cbb <__flp+0x1>
    5c28:	01 15       	cp	r16, r1
    5c2a:	11 05       	cpc	r17, r1
    5c2c:	81 f4       	brne	.+32     	; 0x5c4e <free+0x44>
    5c2e:	20 81       	ld	r18, Z
    5c30:	31 81       	ldd	r19, Z+1	; 0x01
    5c32:	82 0f       	add	r24, r18
    5c34:	93 1f       	adc	r25, r19
    5c36:	20 91 b8 0c 	lds	r18, 0x0CB8	; 0x800cb8 <__brkval>
    5c3a:	30 91 b9 0c 	lds	r19, 0x0CB9	; 0x800cb9 <__brkval+0x1>
    5c3e:	28 17       	cp	r18, r24
    5c40:	39 07       	cpc	r19, r25
    5c42:	79 f5       	brne	.+94     	; 0x5ca2 <free+0x98>
    5c44:	f0 93 b9 0c 	sts	0x0CB9, r31	; 0x800cb9 <__brkval+0x1>
    5c48:	e0 93 b8 0c 	sts	0x0CB8, r30	; 0x800cb8 <__brkval>
    5c4c:	71 c0       	rjmp	.+226    	; 0x5d30 <free+0x126>
    5c4e:	d8 01       	movw	r26, r16
    5c50:	40 e0       	ldi	r20, 0x00	; 0
    5c52:	50 e0       	ldi	r21, 0x00	; 0
    5c54:	ae 17       	cp	r26, r30
    5c56:	bf 07       	cpc	r27, r31
    5c58:	50 f4       	brcc	.+20     	; 0x5c6e <free+0x64>
    5c5a:	12 96       	adiw	r26, 0x02	; 2
    5c5c:	2d 91       	ld	r18, X+
    5c5e:	3c 91       	ld	r19, X
    5c60:	13 97       	sbiw	r26, 0x03	; 3
    5c62:	ad 01       	movw	r20, r26
    5c64:	21 15       	cp	r18, r1
    5c66:	31 05       	cpc	r19, r1
    5c68:	09 f1       	breq	.+66     	; 0x5cac <free+0xa2>
    5c6a:	d9 01       	movw	r26, r18
    5c6c:	f3 cf       	rjmp	.-26     	; 0x5c54 <free+0x4a>
    5c6e:	9d 01       	movw	r18, r26
    5c70:	da 01       	movw	r26, r20
    5c72:	33 83       	std	Z+3, r19	; 0x03
    5c74:	22 83       	std	Z+2, r18	; 0x02
    5c76:	60 81       	ld	r22, Z
    5c78:	71 81       	ldd	r23, Z+1	; 0x01
    5c7a:	86 0f       	add	r24, r22
    5c7c:	97 1f       	adc	r25, r23
    5c7e:	82 17       	cp	r24, r18
    5c80:	93 07       	cpc	r25, r19
    5c82:	69 f4       	brne	.+26     	; 0x5c9e <free+0x94>
    5c84:	ec 01       	movw	r28, r24
    5c86:	28 81       	ld	r18, Y
    5c88:	39 81       	ldd	r19, Y+1	; 0x01
    5c8a:	26 0f       	add	r18, r22
    5c8c:	37 1f       	adc	r19, r23
    5c8e:	2e 5f       	subi	r18, 0xFE	; 254
    5c90:	3f 4f       	sbci	r19, 0xFF	; 255
    5c92:	31 83       	std	Z+1, r19	; 0x01
    5c94:	20 83       	st	Z, r18
    5c96:	8a 81       	ldd	r24, Y+2	; 0x02
    5c98:	9b 81       	ldd	r25, Y+3	; 0x03
    5c9a:	93 83       	std	Z+3, r25	; 0x03
    5c9c:	82 83       	std	Z+2, r24	; 0x02
    5c9e:	45 2b       	or	r20, r21
    5ca0:	29 f4       	brne	.+10     	; 0x5cac <free+0xa2>
    5ca2:	f0 93 bb 0c 	sts	0x0CBB, r31	; 0x800cbb <__flp+0x1>
    5ca6:	e0 93 ba 0c 	sts	0x0CBA, r30	; 0x800cba <__flp>
    5caa:	42 c0       	rjmp	.+132    	; 0x5d30 <free+0x126>
    5cac:	13 96       	adiw	r26, 0x03	; 3
    5cae:	fc 93       	st	X, r31
    5cb0:	ee 93       	st	-X, r30
    5cb2:	12 97       	sbiw	r26, 0x02	; 2
    5cb4:	ed 01       	movw	r28, r26
    5cb6:	49 91       	ld	r20, Y+
    5cb8:	59 91       	ld	r21, Y+
    5cba:	9e 01       	movw	r18, r28
    5cbc:	24 0f       	add	r18, r20
    5cbe:	35 1f       	adc	r19, r21
    5cc0:	e2 17       	cp	r30, r18
    5cc2:	f3 07       	cpc	r31, r19
    5cc4:	71 f4       	brne	.+28     	; 0x5ce2 <free+0xd8>
    5cc6:	80 81       	ld	r24, Z
    5cc8:	91 81       	ldd	r25, Z+1	; 0x01
    5cca:	84 0f       	add	r24, r20
    5ccc:	95 1f       	adc	r25, r21
    5cce:	02 96       	adiw	r24, 0x02	; 2
    5cd0:	11 96       	adiw	r26, 0x01	; 1
    5cd2:	9c 93       	st	X, r25
    5cd4:	8e 93       	st	-X, r24
    5cd6:	82 81       	ldd	r24, Z+2	; 0x02
    5cd8:	93 81       	ldd	r25, Z+3	; 0x03
    5cda:	13 96       	adiw	r26, 0x03	; 3
    5cdc:	9c 93       	st	X, r25
    5cde:	8e 93       	st	-X, r24
    5ce0:	12 97       	sbiw	r26, 0x02	; 2
    5ce2:	e0 e0       	ldi	r30, 0x00	; 0
    5ce4:	f0 e0       	ldi	r31, 0x00	; 0
    5ce6:	d8 01       	movw	r26, r16
    5ce8:	12 96       	adiw	r26, 0x02	; 2
    5cea:	8d 91       	ld	r24, X+
    5cec:	9c 91       	ld	r25, X
    5cee:	13 97       	sbiw	r26, 0x03	; 3
    5cf0:	00 97       	sbiw	r24, 0x00	; 0
    5cf2:	19 f0       	breq	.+6      	; 0x5cfa <free+0xf0>
    5cf4:	f8 01       	movw	r30, r16
    5cf6:	8c 01       	movw	r16, r24
    5cf8:	f6 cf       	rjmp	.-20     	; 0x5ce6 <free+0xdc>
    5cfa:	8d 91       	ld	r24, X+
    5cfc:	9c 91       	ld	r25, X
    5cfe:	98 01       	movw	r18, r16
    5d00:	2e 5f       	subi	r18, 0xFE	; 254
    5d02:	3f 4f       	sbci	r19, 0xFF	; 255
    5d04:	82 0f       	add	r24, r18
    5d06:	93 1f       	adc	r25, r19
    5d08:	20 91 b8 0c 	lds	r18, 0x0CB8	; 0x800cb8 <__brkval>
    5d0c:	30 91 b9 0c 	lds	r19, 0x0CB9	; 0x800cb9 <__brkval+0x1>
    5d10:	28 17       	cp	r18, r24
    5d12:	39 07       	cpc	r19, r25
    5d14:	69 f4       	brne	.+26     	; 0x5d30 <free+0x126>
    5d16:	30 97       	sbiw	r30, 0x00	; 0
    5d18:	29 f4       	brne	.+10     	; 0x5d24 <free+0x11a>
    5d1a:	10 92 bb 0c 	sts	0x0CBB, r1	; 0x800cbb <__flp+0x1>
    5d1e:	10 92 ba 0c 	sts	0x0CBA, r1	; 0x800cba <__flp>
    5d22:	02 c0       	rjmp	.+4      	; 0x5d28 <free+0x11e>
    5d24:	13 82       	std	Z+3, r1	; 0x03
    5d26:	12 82       	std	Z+2, r1	; 0x02
    5d28:	10 93 b9 0c 	sts	0x0CB9, r17	; 0x800cb9 <__brkval+0x1>
    5d2c:	00 93 b8 0c 	sts	0x0CB8, r16	; 0x800cb8 <__brkval>
    5d30:	df 91       	pop	r29
    5d32:	cf 91       	pop	r28
    5d34:	1f 91       	pop	r17
    5d36:	0f 91       	pop	r16
    5d38:	08 95       	ret

00005d3a <do_rand>:
    5d3a:	8f 92       	push	r8
    5d3c:	9f 92       	push	r9
    5d3e:	af 92       	push	r10
    5d40:	bf 92       	push	r11
    5d42:	cf 92       	push	r12
    5d44:	df 92       	push	r13
    5d46:	ef 92       	push	r14
    5d48:	ff 92       	push	r15
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	ec 01       	movw	r28, r24
    5d50:	68 81       	ld	r22, Y
    5d52:	79 81       	ldd	r23, Y+1	; 0x01
    5d54:	8a 81       	ldd	r24, Y+2	; 0x02
    5d56:	9b 81       	ldd	r25, Y+3	; 0x03
    5d58:	61 15       	cp	r22, r1
    5d5a:	71 05       	cpc	r23, r1
    5d5c:	81 05       	cpc	r24, r1
    5d5e:	91 05       	cpc	r25, r1
    5d60:	21 f4       	brne	.+8      	; 0x5d6a <do_rand+0x30>
    5d62:	64 e2       	ldi	r22, 0x24	; 36
    5d64:	79 ed       	ldi	r23, 0xD9	; 217
    5d66:	8b e5       	ldi	r24, 0x5B	; 91
    5d68:	97 e0       	ldi	r25, 0x07	; 7
    5d6a:	2d e1       	ldi	r18, 0x1D	; 29
    5d6c:	33 ef       	ldi	r19, 0xF3	; 243
    5d6e:	41 e0       	ldi	r20, 0x01	; 1
    5d70:	50 e0       	ldi	r21, 0x00	; 0
    5d72:	0e 94 9f 34 	call	0x693e	; 0x693e <__divmodsi4>
    5d76:	49 01       	movw	r8, r18
    5d78:	5a 01       	movw	r10, r20
    5d7a:	9b 01       	movw	r18, r22
    5d7c:	ac 01       	movw	r20, r24
    5d7e:	a7 ea       	ldi	r26, 0xA7	; 167
    5d80:	b1 e4       	ldi	r27, 0x41	; 65
    5d82:	0e 94 be 34 	call	0x697c	; 0x697c <__muluhisi3>
    5d86:	6b 01       	movw	r12, r22
    5d88:	7c 01       	movw	r14, r24
    5d8a:	ac ee       	ldi	r26, 0xEC	; 236
    5d8c:	b4 ef       	ldi	r27, 0xF4	; 244
    5d8e:	a5 01       	movw	r20, r10
    5d90:	94 01       	movw	r18, r8
    5d92:	0e 94 cc 34 	call	0x6998	; 0x6998 <__mulohisi3>
    5d96:	dc 01       	movw	r26, r24
    5d98:	cb 01       	movw	r24, r22
    5d9a:	8c 0d       	add	r24, r12
    5d9c:	9d 1d       	adc	r25, r13
    5d9e:	ae 1d       	adc	r26, r14
    5da0:	bf 1d       	adc	r27, r15
    5da2:	b7 ff       	sbrs	r27, 7
    5da4:	03 c0       	rjmp	.+6      	; 0x5dac <do_rand+0x72>
    5da6:	01 97       	sbiw	r24, 0x01	; 1
    5da8:	a1 09       	sbc	r26, r1
    5daa:	b0 48       	sbci	r27, 0x80	; 128
    5dac:	88 83       	st	Y, r24
    5dae:	99 83       	std	Y+1, r25	; 0x01
    5db0:	aa 83       	std	Y+2, r26	; 0x02
    5db2:	bb 83       	std	Y+3, r27	; 0x03
    5db4:	9f 77       	andi	r25, 0x7F	; 127
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	ff 90       	pop	r15
    5dbc:	ef 90       	pop	r14
    5dbe:	df 90       	pop	r13
    5dc0:	cf 90       	pop	r12
    5dc2:	bf 90       	pop	r11
    5dc4:	af 90       	pop	r10
    5dc6:	9f 90       	pop	r9
    5dc8:	8f 90       	pop	r8
    5dca:	08 95       	ret

00005dcc <rand_r>:
    5dcc:	0c 94 9d 2e 	jmp	0x5d3a	; 0x5d3a <do_rand>

00005dd0 <rand>:
    5dd0:	86 e0       	ldi	r24, 0x06	; 6
    5dd2:	92 e0       	ldi	r25, 0x02	; 2
    5dd4:	0c 94 9d 2e 	jmp	0x5d3a	; 0x5d3a <do_rand>

00005dd8 <srand>:
    5dd8:	a0 e0       	ldi	r26, 0x00	; 0
    5dda:	b0 e0       	ldi	r27, 0x00	; 0
    5ddc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    5de0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5de4:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5de8:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5dec:	08 95       	ret

00005dee <strtoul>:
    5dee:	2f 92       	push	r2
    5df0:	3f 92       	push	r3
    5df2:	4f 92       	push	r4
    5df4:	5f 92       	push	r5
    5df6:	6f 92       	push	r6
    5df8:	7f 92       	push	r7
    5dfa:	8f 92       	push	r8
    5dfc:	9f 92       	push	r9
    5dfe:	af 92       	push	r10
    5e00:	bf 92       	push	r11
    5e02:	cf 92       	push	r12
    5e04:	df 92       	push	r13
    5e06:	ef 92       	push	r14
    5e08:	ff 92       	push	r15
    5e0a:	0f 93       	push	r16
    5e0c:	1f 93       	push	r17
    5e0e:	cf 93       	push	r28
    5e10:	df 93       	push	r29
    5e12:	00 d0       	rcall	.+0      	; 0x5e14 <strtoul+0x26>
    5e14:	00 d0       	rcall	.+0      	; 0x5e16 <strtoul+0x28>
    5e16:	00 d0       	rcall	.+0      	; 0x5e18 <strtoul+0x2a>
    5e18:	cd b7       	in	r28, 0x3d	; 61
    5e1a:	de b7       	in	r29, 0x3e	; 62
    5e1c:	5c 01       	movw	r10, r24
    5e1e:	6b 01       	movw	r12, r22
    5e20:	7a 01       	movw	r14, r20
    5e22:	61 15       	cp	r22, r1
    5e24:	71 05       	cpc	r23, r1
    5e26:	19 f0       	breq	.+6      	; 0x5e2e <strtoul+0x40>
    5e28:	db 01       	movw	r26, r22
    5e2a:	8d 93       	st	X+, r24
    5e2c:	9c 93       	st	X, r25
    5e2e:	e1 14       	cp	r14, r1
    5e30:	f1 04       	cpc	r15, r1
    5e32:	29 f0       	breq	.+10     	; 0x5e3e <strtoul+0x50>
    5e34:	c7 01       	movw	r24, r14
    5e36:	02 97       	sbiw	r24, 0x02	; 2
    5e38:	83 97       	sbiw	r24, 0x23	; 35
    5e3a:	08 f0       	brcs	.+2      	; 0x5e3e <strtoul+0x50>
    5e3c:	dc c0       	rjmp	.+440    	; 0x5ff6 <strtoul+0x208>
    5e3e:	35 01       	movw	r6, r10
    5e40:	bf ef       	ldi	r27, 0xFF	; 255
    5e42:	6b 1a       	sub	r6, r27
    5e44:	7b 0a       	sbc	r7, r27
    5e46:	f5 01       	movw	r30, r10
    5e48:	10 81       	ld	r17, Z
    5e4a:	81 2f       	mov	r24, r17
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	0e 94 29 31 	call	0x6252	; 0x6252 <isspace>
    5e52:	89 2b       	or	r24, r25
    5e54:	11 f0       	breq	.+4      	; 0x5e5a <strtoul+0x6c>
    5e56:	53 01       	movw	r10, r6
    5e58:	f2 cf       	rjmp	.-28     	; 0x5e3e <strtoul+0x50>
    5e5a:	1d 32       	cpi	r17, 0x2D	; 45
    5e5c:	49 f4       	brne	.+18     	; 0x5e70 <strtoul+0x82>
    5e5e:	35 01       	movw	r6, r10
    5e60:	f2 e0       	ldi	r31, 0x02	; 2
    5e62:	6f 0e       	add	r6, r31
    5e64:	71 1c       	adc	r7, r1
    5e66:	d5 01       	movw	r26, r10
    5e68:	11 96       	adiw	r26, 0x01	; 1
    5e6a:	1c 91       	ld	r17, X
    5e6c:	01 e0       	ldi	r16, 0x01	; 1
    5e6e:	09 c0       	rjmp	.+18     	; 0x5e82 <strtoul+0x94>
    5e70:	1b 32       	cpi	r17, 0x2B	; 43
    5e72:	31 f4       	brne	.+12     	; 0x5e80 <strtoul+0x92>
    5e74:	35 01       	movw	r6, r10
    5e76:	b2 e0       	ldi	r27, 0x02	; 2
    5e78:	6b 0e       	add	r6, r27
    5e7a:	71 1c       	adc	r7, r1
    5e7c:	f5 01       	movw	r30, r10
    5e7e:	11 81       	ldd	r17, Z+1	; 0x01
    5e80:	00 e0       	ldi	r16, 0x00	; 0
    5e82:	e1 14       	cp	r14, r1
    5e84:	f1 04       	cpc	r15, r1
    5e86:	09 f4       	brne	.+2      	; 0x5e8a <strtoul+0x9c>
    5e88:	c4 c0       	rjmp	.+392    	; 0x6012 <strtoul+0x224>
    5e8a:	f0 e1       	ldi	r31, 0x10	; 16
    5e8c:	ef 16       	cp	r14, r31
    5e8e:	f1 04       	cpc	r15, r1
    5e90:	89 f4       	brne	.+34     	; 0x5eb4 <strtoul+0xc6>
    5e92:	10 33       	cpi	r17, 0x30	; 48
    5e94:	99 f5       	brne	.+102    	; 0x5efc <strtoul+0x10e>
    5e96:	d3 01       	movw	r26, r6
    5e98:	8c 91       	ld	r24, X
    5e9a:	8f 7d       	andi	r24, 0xDF	; 223
    5e9c:	88 35       	cpi	r24, 0x58	; 88
    5e9e:	09 f0       	breq	.+2      	; 0x5ea2 <strtoul+0xb4>
    5ea0:	b2 c0       	rjmp	.+356    	; 0x6006 <strtoul+0x218>
    5ea2:	11 96       	adiw	r26, 0x01	; 1
    5ea4:	1c 91       	ld	r17, X
    5ea6:	b2 e0       	ldi	r27, 0x02	; 2
    5ea8:	6b 0e       	add	r6, r27
    5eaa:	71 1c       	adc	r7, r1
    5eac:	02 60       	ori	r16, 0x02	; 2
    5eae:	50 e1       	ldi	r21, 0x10	; 16
    5eb0:	e5 2e       	mov	r14, r21
    5eb2:	f1 2c       	mov	r15, r1
    5eb4:	ea e0       	ldi	r30, 0x0A	; 10
    5eb6:	ee 16       	cp	r14, r30
    5eb8:	f1 04       	cpc	r15, r1
    5eba:	09 f4       	brne	.+2      	; 0x5ebe <strtoul+0xd0>
    5ebc:	b0 c0       	rjmp	.+352    	; 0x601e <strtoul+0x230>
    5ebe:	f0 e1       	ldi	r31, 0x10	; 16
    5ec0:	ef 16       	cp	r14, r31
    5ec2:	f1 04       	cpc	r15, r1
    5ec4:	d9 f0       	breq	.+54     	; 0x5efc <strtoul+0x10e>
    5ec6:	28 e0       	ldi	r18, 0x08	; 8
    5ec8:	e2 16       	cp	r14, r18
    5eca:	f1 04       	cpc	r15, r1
    5ecc:	51 f4       	brne	.+20     	; 0x5ee2 <strtoul+0xf4>
    5ece:	38 e0       	ldi	r19, 0x08	; 8
    5ed0:	e3 2e       	mov	r14, r19
    5ed2:	f1 2c       	mov	r15, r1
    5ed4:	88 24       	eor	r8, r8
    5ed6:	8a 94       	dec	r8
    5ed8:	98 2c       	mov	r9, r8
    5eda:	a8 2c       	mov	r10, r8
    5edc:	4f e1       	ldi	r20, 0x1F	; 31
    5ede:	b4 2e       	mov	r11, r20
    5ee0:	13 c0       	rjmp	.+38     	; 0x5f08 <strtoul+0x11a>
    5ee2:	6f ef       	ldi	r22, 0xFF	; 255
    5ee4:	7f ef       	ldi	r23, 0xFF	; 255
    5ee6:	cb 01       	movw	r24, r22
    5ee8:	97 01       	movw	r18, r14
    5eea:	0f 2c       	mov	r0, r15
    5eec:	00 0c       	add	r0, r0
    5eee:	44 0b       	sbc	r20, r20
    5ef0:	55 0b       	sbc	r21, r21
    5ef2:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__udivmodsi4>
    5ef6:	49 01       	movw	r8, r18
    5ef8:	5a 01       	movw	r10, r20
    5efa:	06 c0       	rjmp	.+12     	; 0x5f08 <strtoul+0x11a>
    5efc:	88 24       	eor	r8, r8
    5efe:	8a 94       	dec	r8
    5f00:	98 2c       	mov	r9, r8
    5f02:	a8 2c       	mov	r10, r8
    5f04:	2f e0       	ldi	r18, 0x0F	; 15
    5f06:	b2 2e       	mov	r11, r18
    5f08:	7e 82       	std	Y+6, r7	; 0x06
    5f0a:	6d 82       	std	Y+5, r6	; 0x05
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	30 e0       	ldi	r19, 0x00	; 0
    5f12:	a9 01       	movw	r20, r18
    5f14:	27 01       	movw	r4, r14
    5f16:	0f 2c       	mov	r0, r15
    5f18:	00 0c       	add	r0, r0
    5f1a:	66 08       	sbc	r6, r6
    5f1c:	77 08       	sbc	r7, r7
    5f1e:	2d 80       	ldd	r2, Y+5	; 0x05
    5f20:	3e 80       	ldd	r3, Y+6	; 0x06
    5f22:	e0 ed       	ldi	r30, 0xD0	; 208
    5f24:	e1 0f       	add	r30, r17
    5f26:	ea 30       	cpi	r30, 0x0A	; 10
    5f28:	60 f0       	brcs	.+24     	; 0x5f42 <strtoul+0x154>
    5f2a:	8f eb       	ldi	r24, 0xBF	; 191
    5f2c:	81 0f       	add	r24, r17
    5f2e:	8a 31       	cpi	r24, 0x1A	; 26
    5f30:	10 f4       	brcc	.+4      	; 0x5f36 <strtoul+0x148>
    5f32:	e9 ec       	ldi	r30, 0xC9	; 201
    5f34:	05 c0       	rjmp	.+10     	; 0x5f40 <strtoul+0x152>
    5f36:	8f e9       	ldi	r24, 0x9F	; 159
    5f38:	81 0f       	add	r24, r17
    5f3a:	8a 31       	cpi	r24, 0x1A	; 26
    5f3c:	90 f5       	brcc	.+100    	; 0x5fa2 <strtoul+0x1b4>
    5f3e:	e9 ea       	ldi	r30, 0xA9	; 169
    5f40:	e1 0f       	add	r30, r17
    5f42:	8e 2f       	mov	r24, r30
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	8e 15       	cp	r24, r14
    5f48:	9f 05       	cpc	r25, r15
    5f4a:	5c f5       	brge	.+86     	; 0x5fa2 <strtoul+0x1b4>
    5f4c:	6f 3f       	cpi	r22, 0xFF	; 255
    5f4e:	09 f1       	breq	.+66     	; 0x5f92 <strtoul+0x1a4>
    5f50:	82 16       	cp	r8, r18
    5f52:	93 06       	cpc	r9, r19
    5f54:	a4 06       	cpc	r10, r20
    5f56:	b5 06       	cpc	r11, r21
    5f58:	d8 f0       	brcs	.+54     	; 0x5f90 <strtoul+0x1a2>
    5f5a:	c3 01       	movw	r24, r6
    5f5c:	b2 01       	movw	r22, r4
    5f5e:	0e 94 8f 34 	call	0x691e	; 0x691e <__mulsi3>
    5f62:	2e 2f       	mov	r18, r30
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	40 e0       	ldi	r20, 0x00	; 0
    5f68:	50 e0       	ldi	r21, 0x00	; 0
    5f6a:	29 83       	std	Y+1, r18	; 0x01
    5f6c:	3a 83       	std	Y+2, r19	; 0x02
    5f6e:	4b 83       	std	Y+3, r20	; 0x03
    5f70:	5c 83       	std	Y+4, r21	; 0x04
    5f72:	26 0f       	add	r18, r22
    5f74:	37 1f       	adc	r19, r23
    5f76:	48 1f       	adc	r20, r24
    5f78:	59 1f       	adc	r21, r25
    5f7a:	89 81       	ldd	r24, Y+1	; 0x01
    5f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f7e:	ab 81       	ldd	r26, Y+3	; 0x03
    5f80:	bc 81       	ldd	r27, Y+4	; 0x04
    5f82:	28 17       	cp	r18, r24
    5f84:	39 07       	cpc	r19, r25
    5f86:	4a 07       	cpc	r20, r26
    5f88:	5b 07       	cpc	r21, r27
    5f8a:	10 f0       	brcs	.+4      	; 0x5f90 <strtoul+0x1a2>
    5f8c:	61 e0       	ldi	r22, 0x01	; 1
    5f8e:	01 c0       	rjmp	.+2      	; 0x5f92 <strtoul+0x1a4>
    5f90:	6f ef       	ldi	r22, 0xFF	; 255
    5f92:	ed 81       	ldd	r30, Y+5	; 0x05
    5f94:	fe 81       	ldd	r31, Y+6	; 0x06
    5f96:	31 96       	adiw	r30, 0x01	; 1
    5f98:	fe 83       	std	Y+6, r31	; 0x06
    5f9a:	ed 83       	std	Y+5, r30	; 0x05
    5f9c:	d1 01       	movw	r26, r2
    5f9e:	1c 91       	ld	r17, X
    5fa0:	be cf       	rjmp	.-132    	; 0x5f1e <strtoul+0x130>
    5fa2:	c1 14       	cp	r12, r1
    5fa4:	d1 04       	cpc	r13, r1
    5fa6:	89 f0       	breq	.+34     	; 0x5fca <strtoul+0x1dc>
    5fa8:	66 23       	and	r22, r22
    5faa:	39 f0       	breq	.+14     	; 0x5fba <strtoul+0x1cc>
    5fac:	8d 81       	ldd	r24, Y+5	; 0x05
    5fae:	9e 81       	ldd	r25, Y+6	; 0x06
    5fb0:	01 97       	sbiw	r24, 0x01	; 1
    5fb2:	f6 01       	movw	r30, r12
    5fb4:	91 83       	std	Z+1, r25	; 0x01
    5fb6:	80 83       	st	Z, r24
    5fb8:	08 c0       	rjmp	.+16     	; 0x5fca <strtoul+0x1dc>
    5fba:	01 ff       	sbrs	r16, 1
    5fbc:	06 c0       	rjmp	.+12     	; 0x5fca <strtoul+0x1dc>
    5fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    5fc2:	02 97       	sbiw	r24, 0x02	; 2
    5fc4:	d6 01       	movw	r26, r12
    5fc6:	8d 93       	st	X+, r24
    5fc8:	9c 93       	st	X, r25
    5fca:	00 ff       	sbrs	r16, 0
    5fcc:	07 c0       	rjmp	.+14     	; 0x5fdc <strtoul+0x1ee>
    5fce:	50 95       	com	r21
    5fd0:	40 95       	com	r20
    5fd2:	30 95       	com	r19
    5fd4:	21 95       	neg	r18
    5fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd8:	4f 4f       	sbci	r20, 0xFF	; 255
    5fda:	5f 4f       	sbci	r21, 0xFF	; 255
    5fdc:	67 ff       	sbrs	r22, 7
    5fde:	10 c0       	rjmp	.+32     	; 0x6000 <strtoul+0x212>
    5fe0:	82 e2       	ldi	r24, 0x22	; 34
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <errno+0x1>
    5fe8:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <errno>
    5fec:	6f ef       	ldi	r22, 0xFF	; 255
    5fee:	7f ef       	ldi	r23, 0xFF	; 255
    5ff0:	8f ef       	ldi	r24, 0xFF	; 255
    5ff2:	9f ef       	ldi	r25, 0xFF	; 255
    5ff4:	1b c0       	rjmp	.+54     	; 0x602c <strtoul+0x23e>
    5ff6:	60 e0       	ldi	r22, 0x00	; 0
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	80 e0       	ldi	r24, 0x00	; 0
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	16 c0       	rjmp	.+44     	; 0x602c <strtoul+0x23e>
    6000:	b9 01       	movw	r22, r18
    6002:	ca 01       	movw	r24, r20
    6004:	13 c0       	rjmp	.+38     	; 0x602c <strtoul+0x23e>
    6006:	10 e3       	ldi	r17, 0x30	; 48
    6008:	e1 14       	cp	r14, r1
    600a:	f1 04       	cpc	r15, r1
    600c:	09 f4       	brne	.+2      	; 0x6010 <strtoul+0x222>
    600e:	5f cf       	rjmp	.-322    	; 0x5ece <strtoul+0xe0>
    6010:	51 cf       	rjmp	.-350    	; 0x5eb4 <strtoul+0xc6>
    6012:	10 33       	cpi	r17, 0x30	; 48
    6014:	09 f4       	brne	.+2      	; 0x6018 <strtoul+0x22a>
    6016:	3f cf       	rjmp	.-386    	; 0x5e96 <strtoul+0xa8>
    6018:	9a e0       	ldi	r25, 0x0A	; 10
    601a:	e9 2e       	mov	r14, r25
    601c:	f1 2c       	mov	r15, r1
    601e:	89 e9       	ldi	r24, 0x99	; 153
    6020:	88 2e       	mov	r8, r24
    6022:	98 2c       	mov	r9, r8
    6024:	a8 2c       	mov	r10, r8
    6026:	89 e1       	ldi	r24, 0x19	; 25
    6028:	b8 2e       	mov	r11, r24
    602a:	6e cf       	rjmp	.-292    	; 0x5f08 <strtoul+0x11a>
    602c:	26 96       	adiw	r28, 0x06	; 6
    602e:	0f b6       	in	r0, 0x3f	; 63
    6030:	f8 94       	cli
    6032:	de bf       	out	0x3e, r29	; 62
    6034:	0f be       	out	0x3f, r0	; 63
    6036:	cd bf       	out	0x3d, r28	; 61
    6038:	df 91       	pop	r29
    603a:	cf 91       	pop	r28
    603c:	1f 91       	pop	r17
    603e:	0f 91       	pop	r16
    6040:	ff 90       	pop	r15
    6042:	ef 90       	pop	r14
    6044:	df 90       	pop	r13
    6046:	cf 90       	pop	r12
    6048:	bf 90       	pop	r11
    604a:	af 90       	pop	r10
    604c:	9f 90       	pop	r9
    604e:	8f 90       	pop	r8
    6050:	7f 90       	pop	r7
    6052:	6f 90       	pop	r6
    6054:	5f 90       	pop	r5
    6056:	4f 90       	pop	r4
    6058:	3f 90       	pop	r3
    605a:	2f 90       	pop	r2
    605c:	08 95       	ret

0000605e <atof>:
    605e:	66 27       	eor	r22, r22
    6060:	77 27       	eor	r23, r23
    6062:	0c 94 92 32 	jmp	0x6524	; 0x6524 <strtod>

00006066 <atoi>:
    6066:	fc 01       	movw	r30, r24
    6068:	88 27       	eor	r24, r24
    606a:	99 27       	eor	r25, r25
    606c:	e8 94       	clt
    606e:	21 91       	ld	r18, Z+
    6070:	20 32       	cpi	r18, 0x20	; 32
    6072:	e9 f3       	breq	.-6      	; 0x606e <atoi+0x8>
    6074:	29 30       	cpi	r18, 0x09	; 9
    6076:	10 f0       	brcs	.+4      	; 0x607c <atoi+0x16>
    6078:	2e 30       	cpi	r18, 0x0E	; 14
    607a:	c8 f3       	brcs	.-14     	; 0x606e <atoi+0x8>
    607c:	2b 32       	cpi	r18, 0x2B	; 43
    607e:	41 f0       	breq	.+16     	; 0x6090 <atoi+0x2a>
    6080:	2d 32       	cpi	r18, 0x2D	; 45
    6082:	39 f4       	brne	.+14     	; 0x6092 <atoi+0x2c>
    6084:	68 94       	set
    6086:	04 c0       	rjmp	.+8      	; 0x6090 <atoi+0x2a>
    6088:	0e 94 a2 31 	call	0x6344	; 0x6344 <__mulhi_const_10>
    608c:	82 0f       	add	r24, r18
    608e:	91 1d       	adc	r25, r1
    6090:	21 91       	ld	r18, Z+
    6092:	20 53       	subi	r18, 0x30	; 48
    6094:	2a 30       	cpi	r18, 0x0A	; 10
    6096:	c0 f3       	brcs	.-16     	; 0x6088 <atoi+0x22>
    6098:	1e f4       	brtc	.+6      	; 0x60a0 <atoi+0x3a>
    609a:	90 95       	com	r25
    609c:	81 95       	neg	r24
    609e:	9f 4f       	sbci	r25, 0xFF	; 255
    60a0:	08 95       	ret

000060a2 <__ftoa_engine>:
    60a2:	28 30       	cpi	r18, 0x08	; 8
    60a4:	08 f0       	brcs	.+2      	; 0x60a8 <__ftoa_engine+0x6>
    60a6:	27 e0       	ldi	r18, 0x07	; 7
    60a8:	33 27       	eor	r19, r19
    60aa:	da 01       	movw	r26, r20
    60ac:	99 0f       	add	r25, r25
    60ae:	31 1d       	adc	r19, r1
    60b0:	87 fd       	sbrc	r24, 7
    60b2:	91 60       	ori	r25, 0x01	; 1
    60b4:	00 96       	adiw	r24, 0x00	; 0
    60b6:	61 05       	cpc	r22, r1
    60b8:	71 05       	cpc	r23, r1
    60ba:	39 f4       	brne	.+14     	; 0x60ca <__ftoa_engine+0x28>
    60bc:	32 60       	ori	r19, 0x02	; 2
    60be:	2e 5f       	subi	r18, 0xFE	; 254
    60c0:	3d 93       	st	X+, r19
    60c2:	30 e3       	ldi	r19, 0x30	; 48
    60c4:	2a 95       	dec	r18
    60c6:	e1 f7       	brne	.-8      	; 0x60c0 <__ftoa_engine+0x1e>
    60c8:	08 95       	ret
    60ca:	9f 3f       	cpi	r25, 0xFF	; 255
    60cc:	30 f0       	brcs	.+12     	; 0x60da <__ftoa_engine+0x38>
    60ce:	80 38       	cpi	r24, 0x80	; 128
    60d0:	71 05       	cpc	r23, r1
    60d2:	61 05       	cpc	r22, r1
    60d4:	09 f0       	breq	.+2      	; 0x60d8 <__ftoa_engine+0x36>
    60d6:	3c 5f       	subi	r19, 0xFC	; 252
    60d8:	3c 5f       	subi	r19, 0xFC	; 252
    60da:	3d 93       	st	X+, r19
    60dc:	91 30       	cpi	r25, 0x01	; 1
    60de:	08 f0       	brcs	.+2      	; 0x60e2 <__ftoa_engine+0x40>
    60e0:	80 68       	ori	r24, 0x80	; 128
    60e2:	91 1d       	adc	r25, r1
    60e4:	df 93       	push	r29
    60e6:	cf 93       	push	r28
    60e8:	1f 93       	push	r17
    60ea:	0f 93       	push	r16
    60ec:	ff 92       	push	r15
    60ee:	ef 92       	push	r14
    60f0:	19 2f       	mov	r17, r25
    60f2:	98 7f       	andi	r25, 0xF8	; 248
    60f4:	96 95       	lsr	r25
    60f6:	e9 2f       	mov	r30, r25
    60f8:	96 95       	lsr	r25
    60fa:	96 95       	lsr	r25
    60fc:	e9 0f       	add	r30, r25
    60fe:	ff 27       	eor	r31, r31
    6100:	ea 51       	subi	r30, 0x1A	; 26
    6102:	fe 4f       	sbci	r31, 0xFE	; 254
    6104:	99 27       	eor	r25, r25
    6106:	33 27       	eor	r19, r19
    6108:	ee 24       	eor	r14, r14
    610a:	ff 24       	eor	r15, r15
    610c:	a7 01       	movw	r20, r14
    610e:	e7 01       	movw	r28, r14
    6110:	05 90       	lpm	r0, Z+
    6112:	08 94       	sec
    6114:	07 94       	ror	r0
    6116:	28 f4       	brcc	.+10     	; 0x6122 <__ftoa_engine+0x80>
    6118:	36 0f       	add	r19, r22
    611a:	e7 1e       	adc	r14, r23
    611c:	f8 1e       	adc	r15, r24
    611e:	49 1f       	adc	r20, r25
    6120:	51 1d       	adc	r21, r1
    6122:	66 0f       	add	r22, r22
    6124:	77 1f       	adc	r23, r23
    6126:	88 1f       	adc	r24, r24
    6128:	99 1f       	adc	r25, r25
    612a:	06 94       	lsr	r0
    612c:	a1 f7       	brne	.-24     	; 0x6116 <__ftoa_engine+0x74>
    612e:	05 90       	lpm	r0, Z+
    6130:	07 94       	ror	r0
    6132:	28 f4       	brcc	.+10     	; 0x613e <__ftoa_engine+0x9c>
    6134:	e7 0e       	add	r14, r23
    6136:	f8 1e       	adc	r15, r24
    6138:	49 1f       	adc	r20, r25
    613a:	56 1f       	adc	r21, r22
    613c:	c1 1d       	adc	r28, r1
    613e:	77 0f       	add	r23, r23
    6140:	88 1f       	adc	r24, r24
    6142:	99 1f       	adc	r25, r25
    6144:	66 1f       	adc	r22, r22
    6146:	06 94       	lsr	r0
    6148:	a1 f7       	brne	.-24     	; 0x6132 <__ftoa_engine+0x90>
    614a:	05 90       	lpm	r0, Z+
    614c:	07 94       	ror	r0
    614e:	28 f4       	brcc	.+10     	; 0x615a <__ftoa_engine+0xb8>
    6150:	f8 0e       	add	r15, r24
    6152:	49 1f       	adc	r20, r25
    6154:	56 1f       	adc	r21, r22
    6156:	c7 1f       	adc	r28, r23
    6158:	d1 1d       	adc	r29, r1
    615a:	88 0f       	add	r24, r24
    615c:	99 1f       	adc	r25, r25
    615e:	66 1f       	adc	r22, r22
    6160:	77 1f       	adc	r23, r23
    6162:	06 94       	lsr	r0
    6164:	a1 f7       	brne	.-24     	; 0x614e <__ftoa_engine+0xac>
    6166:	05 90       	lpm	r0, Z+
    6168:	07 94       	ror	r0
    616a:	20 f4       	brcc	.+8      	; 0x6174 <__ftoa_engine+0xd2>
    616c:	49 0f       	add	r20, r25
    616e:	56 1f       	adc	r21, r22
    6170:	c7 1f       	adc	r28, r23
    6172:	d8 1f       	adc	r29, r24
    6174:	99 0f       	add	r25, r25
    6176:	66 1f       	adc	r22, r22
    6178:	77 1f       	adc	r23, r23
    617a:	88 1f       	adc	r24, r24
    617c:	06 94       	lsr	r0
    617e:	a9 f7       	brne	.-22     	; 0x616a <__ftoa_engine+0xc8>
    6180:	84 91       	lpm	r24, Z
    6182:	10 95       	com	r17
    6184:	17 70       	andi	r17, 0x07	; 7
    6186:	41 f0       	breq	.+16     	; 0x6198 <__ftoa_engine+0xf6>
    6188:	d6 95       	lsr	r29
    618a:	c7 95       	ror	r28
    618c:	57 95       	ror	r21
    618e:	47 95       	ror	r20
    6190:	f7 94       	ror	r15
    6192:	e7 94       	ror	r14
    6194:	1a 95       	dec	r17
    6196:	c1 f7       	brne	.-16     	; 0x6188 <__ftoa_engine+0xe6>
    6198:	ec e8       	ldi	r30, 0x8C	; 140
    619a:	f1 e0       	ldi	r31, 0x01	; 1
    619c:	68 94       	set
    619e:	15 90       	lpm	r1, Z+
    61a0:	15 91       	lpm	r17, Z+
    61a2:	35 91       	lpm	r19, Z+
    61a4:	65 91       	lpm	r22, Z+
    61a6:	95 91       	lpm	r25, Z+
    61a8:	05 90       	lpm	r0, Z+
    61aa:	7f e2       	ldi	r23, 0x2F	; 47
    61ac:	73 95       	inc	r23
    61ae:	e1 18       	sub	r14, r1
    61b0:	f1 0a       	sbc	r15, r17
    61b2:	43 0b       	sbc	r20, r19
    61b4:	56 0b       	sbc	r21, r22
    61b6:	c9 0b       	sbc	r28, r25
    61b8:	d0 09       	sbc	r29, r0
    61ba:	c0 f7       	brcc	.-16     	; 0x61ac <__ftoa_engine+0x10a>
    61bc:	e1 0c       	add	r14, r1
    61be:	f1 1e       	adc	r15, r17
    61c0:	43 1f       	adc	r20, r19
    61c2:	56 1f       	adc	r21, r22
    61c4:	c9 1f       	adc	r28, r25
    61c6:	d0 1d       	adc	r29, r0
    61c8:	7e f4       	brtc	.+30     	; 0x61e8 <__ftoa_engine+0x146>
    61ca:	70 33       	cpi	r23, 0x30	; 48
    61cc:	11 f4       	brne	.+4      	; 0x61d2 <__ftoa_engine+0x130>
    61ce:	8a 95       	dec	r24
    61d0:	e6 cf       	rjmp	.-52     	; 0x619e <__ftoa_engine+0xfc>
    61d2:	e8 94       	clt
    61d4:	01 50       	subi	r16, 0x01	; 1
    61d6:	30 f0       	brcs	.+12     	; 0x61e4 <__ftoa_engine+0x142>
    61d8:	08 0f       	add	r16, r24
    61da:	0a f4       	brpl	.+2      	; 0x61de <__ftoa_engine+0x13c>
    61dc:	00 27       	eor	r16, r16
    61de:	02 17       	cp	r16, r18
    61e0:	08 f4       	brcc	.+2      	; 0x61e4 <__ftoa_engine+0x142>
    61e2:	20 2f       	mov	r18, r16
    61e4:	23 95       	inc	r18
    61e6:	02 2f       	mov	r16, r18
    61e8:	7a 33       	cpi	r23, 0x3A	; 58
    61ea:	28 f0       	brcs	.+10     	; 0x61f6 <__ftoa_engine+0x154>
    61ec:	79 e3       	ldi	r23, 0x39	; 57
    61ee:	7d 93       	st	X+, r23
    61f0:	2a 95       	dec	r18
    61f2:	e9 f7       	brne	.-6      	; 0x61ee <__ftoa_engine+0x14c>
    61f4:	10 c0       	rjmp	.+32     	; 0x6216 <__ftoa_engine+0x174>
    61f6:	7d 93       	st	X+, r23
    61f8:	2a 95       	dec	r18
    61fa:	89 f6       	brne	.-94     	; 0x619e <__ftoa_engine+0xfc>
    61fc:	06 94       	lsr	r0
    61fe:	97 95       	ror	r25
    6200:	67 95       	ror	r22
    6202:	37 95       	ror	r19
    6204:	17 95       	ror	r17
    6206:	17 94       	ror	r1
    6208:	e1 18       	sub	r14, r1
    620a:	f1 0a       	sbc	r15, r17
    620c:	43 0b       	sbc	r20, r19
    620e:	56 0b       	sbc	r21, r22
    6210:	c9 0b       	sbc	r28, r25
    6212:	d0 09       	sbc	r29, r0
    6214:	98 f0       	brcs	.+38     	; 0x623c <__ftoa_engine+0x19a>
    6216:	23 95       	inc	r18
    6218:	7e 91       	ld	r23, -X
    621a:	73 95       	inc	r23
    621c:	7a 33       	cpi	r23, 0x3A	; 58
    621e:	08 f0       	brcs	.+2      	; 0x6222 <__ftoa_engine+0x180>
    6220:	70 e3       	ldi	r23, 0x30	; 48
    6222:	7c 93       	st	X, r23
    6224:	20 13       	cpse	r18, r16
    6226:	b8 f7       	brcc	.-18     	; 0x6216 <__ftoa_engine+0x174>
    6228:	7e 91       	ld	r23, -X
    622a:	70 61       	ori	r23, 0x10	; 16
    622c:	7d 93       	st	X+, r23
    622e:	30 f0       	brcs	.+12     	; 0x623c <__ftoa_engine+0x19a>
    6230:	83 95       	inc	r24
    6232:	71 e3       	ldi	r23, 0x31	; 49
    6234:	7d 93       	st	X+, r23
    6236:	70 e3       	ldi	r23, 0x30	; 48
    6238:	2a 95       	dec	r18
    623a:	e1 f7       	brne	.-8      	; 0x6234 <__ftoa_engine+0x192>
    623c:	11 24       	eor	r1, r1
    623e:	ef 90       	pop	r14
    6240:	ff 90       	pop	r15
    6242:	0f 91       	pop	r16
    6244:	1f 91       	pop	r17
    6246:	cf 91       	pop	r28
    6248:	df 91       	pop	r29
    624a:	99 27       	eor	r25, r25
    624c:	87 fd       	sbrc	r24, 7
    624e:	90 95       	com	r25
    6250:	08 95       	ret

00006252 <isspace>:
    6252:	91 11       	cpse	r25, r1
    6254:	0c 94 01 34 	jmp	0x6802	; 0x6802 <__ctype_isfalse>
    6258:	80 32       	cpi	r24, 0x20	; 32
    625a:	19 f0       	breq	.+6      	; 0x6262 <isspace+0x10>
    625c:	89 50       	subi	r24, 0x09	; 9
    625e:	85 50       	subi	r24, 0x05	; 5
    6260:	c8 f7       	brcc	.-14     	; 0x6254 <isspace+0x2>
    6262:	08 95       	ret

00006264 <strnlen_P>:
    6264:	fc 01       	movw	r30, r24
    6266:	05 90       	lpm	r0, Z+
    6268:	61 50       	subi	r22, 0x01	; 1
    626a:	70 40       	sbci	r23, 0x00	; 0
    626c:	01 10       	cpse	r0, r1
    626e:	d8 f7       	brcc	.-10     	; 0x6266 <strnlen_P+0x2>
    6270:	80 95       	com	r24
    6272:	90 95       	com	r25
    6274:	8e 0f       	add	r24, r30
    6276:	9f 1f       	adc	r25, r31
    6278:	08 95       	ret

0000627a <memcmp>:
    627a:	fb 01       	movw	r30, r22
    627c:	dc 01       	movw	r26, r24
    627e:	04 c0       	rjmp	.+8      	; 0x6288 <memcmp+0xe>
    6280:	8d 91       	ld	r24, X+
    6282:	01 90       	ld	r0, Z+
    6284:	80 19       	sub	r24, r0
    6286:	21 f4       	brne	.+8      	; 0x6290 <memcmp+0x16>
    6288:	41 50       	subi	r20, 0x01	; 1
    628a:	50 40       	sbci	r21, 0x00	; 0
    628c:	c8 f7       	brcc	.-14     	; 0x6280 <memcmp+0x6>
    628e:	88 1b       	sub	r24, r24
    6290:	99 0b       	sbc	r25, r25
    6292:	08 95       	ret

00006294 <memcpy>:
    6294:	fb 01       	movw	r30, r22
    6296:	dc 01       	movw	r26, r24
    6298:	02 c0       	rjmp	.+4      	; 0x629e <memcpy+0xa>
    629a:	01 90       	ld	r0, Z+
    629c:	0d 92       	st	X+, r0
    629e:	41 50       	subi	r20, 0x01	; 1
    62a0:	50 40       	sbci	r21, 0x00	; 0
    62a2:	d8 f7       	brcc	.-10     	; 0x629a <memcpy+0x6>
    62a4:	08 95       	ret

000062a6 <strchr>:
    62a6:	fc 01       	movw	r30, r24
    62a8:	81 91       	ld	r24, Z+
    62aa:	86 17       	cp	r24, r22
    62ac:	21 f0       	breq	.+8      	; 0x62b6 <strchr+0x10>
    62ae:	88 23       	and	r24, r24
    62b0:	d9 f7       	brne	.-10     	; 0x62a8 <strchr+0x2>
    62b2:	99 27       	eor	r25, r25
    62b4:	08 95       	ret
    62b6:	31 97       	sbiw	r30, 0x01	; 1
    62b8:	cf 01       	movw	r24, r30
    62ba:	08 95       	ret

000062bc <strcmp>:
    62bc:	fb 01       	movw	r30, r22
    62be:	dc 01       	movw	r26, r24
    62c0:	8d 91       	ld	r24, X+
    62c2:	01 90       	ld	r0, Z+
    62c4:	80 19       	sub	r24, r0
    62c6:	01 10       	cpse	r0, r1
    62c8:	d9 f3       	breq	.-10     	; 0x62c0 <strcmp+0x4>
    62ca:	99 0b       	sbc	r25, r25
    62cc:	08 95       	ret

000062ce <strcpy>:
    62ce:	fb 01       	movw	r30, r22
    62d0:	dc 01       	movw	r26, r24
    62d2:	01 90       	ld	r0, Z+
    62d4:	0d 92       	st	X+, r0
    62d6:	00 20       	and	r0, r0
    62d8:	e1 f7       	brne	.-8      	; 0x62d2 <strcpy+0x4>
    62da:	08 95       	ret

000062dc <strncpy>:
    62dc:	fb 01       	movw	r30, r22
    62de:	dc 01       	movw	r26, r24
    62e0:	41 50       	subi	r20, 0x01	; 1
    62e2:	50 40       	sbci	r21, 0x00	; 0
    62e4:	48 f0       	brcs	.+18     	; 0x62f8 <strncpy+0x1c>
    62e6:	01 90       	ld	r0, Z+
    62e8:	0d 92       	st	X+, r0
    62ea:	00 20       	and	r0, r0
    62ec:	c9 f7       	brne	.-14     	; 0x62e0 <strncpy+0x4>
    62ee:	01 c0       	rjmp	.+2      	; 0x62f2 <strncpy+0x16>
    62f0:	1d 92       	st	X+, r1
    62f2:	41 50       	subi	r20, 0x01	; 1
    62f4:	50 40       	sbci	r21, 0x00	; 0
    62f6:	e0 f7       	brcc	.-8      	; 0x62f0 <strncpy+0x14>
    62f8:	08 95       	ret

000062fa <strnlen>:
    62fa:	fc 01       	movw	r30, r24
    62fc:	61 50       	subi	r22, 0x01	; 1
    62fe:	70 40       	sbci	r23, 0x00	; 0
    6300:	01 90       	ld	r0, Z+
    6302:	01 10       	cpse	r0, r1
    6304:	d8 f7       	brcc	.-10     	; 0x62fc <strnlen+0x2>
    6306:	80 95       	com	r24
    6308:	90 95       	com	r25
    630a:	8e 0f       	add	r24, r30
    630c:	9f 1f       	adc	r25, r31
    630e:	08 95       	ret

00006310 <strstr>:
    6310:	fb 01       	movw	r30, r22
    6312:	51 91       	ld	r21, Z+
    6314:	55 23       	and	r21, r21
    6316:	a9 f0       	breq	.+42     	; 0x6342 <strstr+0x32>
    6318:	bf 01       	movw	r22, r30
    631a:	dc 01       	movw	r26, r24
    631c:	4d 91       	ld	r20, X+
    631e:	45 17       	cp	r20, r21
    6320:	41 11       	cpse	r20, r1
    6322:	e1 f7       	brne	.-8      	; 0x631c <strstr+0xc>
    6324:	59 f4       	brne	.+22     	; 0x633c <strstr+0x2c>
    6326:	cd 01       	movw	r24, r26
    6328:	01 90       	ld	r0, Z+
    632a:	00 20       	and	r0, r0
    632c:	49 f0       	breq	.+18     	; 0x6340 <strstr+0x30>
    632e:	4d 91       	ld	r20, X+
    6330:	40 15       	cp	r20, r0
    6332:	41 11       	cpse	r20, r1
    6334:	c9 f3       	breq	.-14     	; 0x6328 <strstr+0x18>
    6336:	fb 01       	movw	r30, r22
    6338:	41 11       	cpse	r20, r1
    633a:	ef cf       	rjmp	.-34     	; 0x631a <strstr+0xa>
    633c:	81 e0       	ldi	r24, 0x01	; 1
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	01 97       	sbiw	r24, 0x01	; 1
    6342:	08 95       	ret

00006344 <__mulhi_const_10>:
    6344:	7a e0       	ldi	r23, 0x0A	; 10
    6346:	97 9f       	mul	r25, r23
    6348:	90 2d       	mov	r25, r0
    634a:	87 9f       	mul	r24, r23
    634c:	80 2d       	mov	r24, r0
    634e:	91 0d       	add	r25, r1
    6350:	11 24       	eor	r1, r1
    6352:	08 95       	ret

00006354 <__ultoa_ncheck>:
    6354:	bb 27       	eor	r27, r27

00006356 <__ultoa_common>:
    6356:	fa 01       	movw	r30, r20
    6358:	a6 2f       	mov	r26, r22
    635a:	62 17       	cp	r22, r18
    635c:	71 05       	cpc	r23, r1
    635e:	81 05       	cpc	r24, r1
    6360:	91 05       	cpc	r25, r1
    6362:	33 0b       	sbc	r19, r19
    6364:	30 fb       	bst	r19, 0
    6366:	66 f0       	brts	.+24     	; 0x6380 <__ultoa_common+0x2a>
    6368:	aa 27       	eor	r26, r26
    636a:	66 0f       	add	r22, r22
    636c:	77 1f       	adc	r23, r23
    636e:	88 1f       	adc	r24, r24
    6370:	99 1f       	adc	r25, r25
    6372:	aa 1f       	adc	r26, r26
    6374:	a2 17       	cp	r26, r18
    6376:	10 f0       	brcs	.+4      	; 0x637c <__ultoa_common+0x26>
    6378:	a2 1b       	sub	r26, r18
    637a:	63 95       	inc	r22
    637c:	38 50       	subi	r19, 0x08	; 8
    637e:	a9 f7       	brne	.-22     	; 0x636a <__ultoa_common+0x14>
    6380:	a0 5d       	subi	r26, 0xD0	; 208
    6382:	aa 33       	cpi	r26, 0x3A	; 58
    6384:	08 f0       	brcs	.+2      	; 0x6388 <__ultoa_common+0x32>
    6386:	a9 5d       	subi	r26, 0xD9	; 217
    6388:	a1 93       	st	Z+, r26
    638a:	36 f7       	brtc	.-52     	; 0x6358 <__ultoa_common+0x2>
    638c:	b1 11       	cpse	r27, r1
    638e:	b1 93       	st	Z+, r27
    6390:	10 82       	st	Z, r1
    6392:	ca 01       	movw	r24, r20
    6394:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <strrev>

00006398 <fputc>:
    6398:	0f 93       	push	r16
    639a:	1f 93       	push	r17
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	fb 01       	movw	r30, r22
    63a2:	23 81       	ldd	r18, Z+3	; 0x03
    63a4:	21 fd       	sbrc	r18, 1
    63a6:	03 c0       	rjmp	.+6      	; 0x63ae <fputc+0x16>
    63a8:	8f ef       	ldi	r24, 0xFF	; 255
    63aa:	9f ef       	ldi	r25, 0xFF	; 255
    63ac:	28 c0       	rjmp	.+80     	; 0x63fe <fputc+0x66>
    63ae:	22 ff       	sbrs	r18, 2
    63b0:	16 c0       	rjmp	.+44     	; 0x63de <fputc+0x46>
    63b2:	46 81       	ldd	r20, Z+6	; 0x06
    63b4:	57 81       	ldd	r21, Z+7	; 0x07
    63b6:	24 81       	ldd	r18, Z+4	; 0x04
    63b8:	35 81       	ldd	r19, Z+5	; 0x05
    63ba:	42 17       	cp	r20, r18
    63bc:	53 07       	cpc	r21, r19
    63be:	44 f4       	brge	.+16     	; 0x63d0 <fputc+0x38>
    63c0:	a0 81       	ld	r26, Z
    63c2:	b1 81       	ldd	r27, Z+1	; 0x01
    63c4:	9d 01       	movw	r18, r26
    63c6:	2f 5f       	subi	r18, 0xFF	; 255
    63c8:	3f 4f       	sbci	r19, 0xFF	; 255
    63ca:	31 83       	std	Z+1, r19	; 0x01
    63cc:	20 83       	st	Z, r18
    63ce:	8c 93       	st	X, r24
    63d0:	26 81       	ldd	r18, Z+6	; 0x06
    63d2:	37 81       	ldd	r19, Z+7	; 0x07
    63d4:	2f 5f       	subi	r18, 0xFF	; 255
    63d6:	3f 4f       	sbci	r19, 0xFF	; 255
    63d8:	37 83       	std	Z+7, r19	; 0x07
    63da:	26 83       	std	Z+6, r18	; 0x06
    63dc:	10 c0       	rjmp	.+32     	; 0x63fe <fputc+0x66>
    63de:	eb 01       	movw	r28, r22
    63e0:	09 2f       	mov	r16, r25
    63e2:	18 2f       	mov	r17, r24
    63e4:	00 84       	ldd	r0, Z+8	; 0x08
    63e6:	f1 85       	ldd	r31, Z+9	; 0x09
    63e8:	e0 2d       	mov	r30, r0
    63ea:	09 95       	icall
    63ec:	89 2b       	or	r24, r25
    63ee:	e1 f6       	brne	.-72     	; 0x63a8 <fputc+0x10>
    63f0:	8e 81       	ldd	r24, Y+6	; 0x06
    63f2:	9f 81       	ldd	r25, Y+7	; 0x07
    63f4:	01 96       	adiw	r24, 0x01	; 1
    63f6:	9f 83       	std	Y+7, r25	; 0x07
    63f8:	8e 83       	std	Y+6, r24	; 0x06
    63fa:	81 2f       	mov	r24, r17
    63fc:	90 2f       	mov	r25, r16
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	1f 91       	pop	r17
    6404:	0f 91       	pop	r16
    6406:	08 95       	ret

00006408 <sprintf>:
    6408:	0f 93       	push	r16
    640a:	1f 93       	push	r17
    640c:	cf 93       	push	r28
    640e:	df 93       	push	r29
    6410:	cd b7       	in	r28, 0x3d	; 61
    6412:	de b7       	in	r29, 0x3e	; 62
    6414:	2e 97       	sbiw	r28, 0x0e	; 14
    6416:	0f b6       	in	r0, 0x3f	; 63
    6418:	f8 94       	cli
    641a:	de bf       	out	0x3e, r29	; 62
    641c:	0f be       	out	0x3f, r0	; 63
    641e:	cd bf       	out	0x3d, r28	; 61
    6420:	0d 89       	ldd	r16, Y+21	; 0x15
    6422:	1e 89       	ldd	r17, Y+22	; 0x16
    6424:	86 e0       	ldi	r24, 0x06	; 6
    6426:	8c 83       	std	Y+4, r24	; 0x04
    6428:	1a 83       	std	Y+2, r17	; 0x02
    642a:	09 83       	std	Y+1, r16	; 0x01
    642c:	8f ef       	ldi	r24, 0xFF	; 255
    642e:	9f e7       	ldi	r25, 0x7F	; 127
    6430:	9e 83       	std	Y+6, r25	; 0x06
    6432:	8d 83       	std	Y+5, r24	; 0x05
    6434:	ae 01       	movw	r20, r28
    6436:	47 5e       	subi	r20, 0xE7	; 231
    6438:	5f 4f       	sbci	r21, 0xFF	; 255
    643a:	6f 89       	ldd	r22, Y+23	; 0x17
    643c:	78 8d       	ldd	r23, Y+24	; 0x18
    643e:	ce 01       	movw	r24, r28
    6440:	01 96       	adiw	r24, 0x01	; 1
    6442:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <vfprintf>
    6446:	2f 81       	ldd	r18, Y+7	; 0x07
    6448:	38 85       	ldd	r19, Y+8	; 0x08
    644a:	f8 01       	movw	r30, r16
    644c:	e2 0f       	add	r30, r18
    644e:	f3 1f       	adc	r31, r19
    6450:	10 82       	st	Z, r1
    6452:	2e 96       	adiw	r28, 0x0e	; 14
    6454:	0f b6       	in	r0, 0x3f	; 63
    6456:	f8 94       	cli
    6458:	de bf       	out	0x3e, r29	; 62
    645a:	0f be       	out	0x3f, r0	; 63
    645c:	cd bf       	out	0x3d, r28	; 61
    645e:	df 91       	pop	r29
    6460:	cf 91       	pop	r28
    6462:	1f 91       	pop	r17
    6464:	0f 91       	pop	r16
    6466:	08 95       	ret

00006468 <__ultoa_invert>:
    6468:	fa 01       	movw	r30, r20
    646a:	aa 27       	eor	r26, r26
    646c:	28 30       	cpi	r18, 0x08	; 8
    646e:	51 f1       	breq	.+84     	; 0x64c4 <__ultoa_invert+0x5c>
    6470:	20 31       	cpi	r18, 0x10	; 16
    6472:	81 f1       	breq	.+96     	; 0x64d4 <__ultoa_invert+0x6c>
    6474:	e8 94       	clt
    6476:	6f 93       	push	r22
    6478:	6e 7f       	andi	r22, 0xFE	; 254
    647a:	6e 5f       	subi	r22, 0xFE	; 254
    647c:	7f 4f       	sbci	r23, 0xFF	; 255
    647e:	8f 4f       	sbci	r24, 0xFF	; 255
    6480:	9f 4f       	sbci	r25, 0xFF	; 255
    6482:	af 4f       	sbci	r26, 0xFF	; 255
    6484:	b1 e0       	ldi	r27, 0x01	; 1
    6486:	3e d0       	rcall	.+124    	; 0x6504 <__ultoa_invert+0x9c>
    6488:	b4 e0       	ldi	r27, 0x04	; 4
    648a:	3c d0       	rcall	.+120    	; 0x6504 <__ultoa_invert+0x9c>
    648c:	67 0f       	add	r22, r23
    648e:	78 1f       	adc	r23, r24
    6490:	89 1f       	adc	r24, r25
    6492:	9a 1f       	adc	r25, r26
    6494:	a1 1d       	adc	r26, r1
    6496:	68 0f       	add	r22, r24
    6498:	79 1f       	adc	r23, r25
    649a:	8a 1f       	adc	r24, r26
    649c:	91 1d       	adc	r25, r1
    649e:	a1 1d       	adc	r26, r1
    64a0:	6a 0f       	add	r22, r26
    64a2:	71 1d       	adc	r23, r1
    64a4:	81 1d       	adc	r24, r1
    64a6:	91 1d       	adc	r25, r1
    64a8:	a1 1d       	adc	r26, r1
    64aa:	20 d0       	rcall	.+64     	; 0x64ec <__ultoa_invert+0x84>
    64ac:	09 f4       	brne	.+2      	; 0x64b0 <__ultoa_invert+0x48>
    64ae:	68 94       	set
    64b0:	3f 91       	pop	r19
    64b2:	2a e0       	ldi	r18, 0x0A	; 10
    64b4:	26 9f       	mul	r18, r22
    64b6:	11 24       	eor	r1, r1
    64b8:	30 19       	sub	r19, r0
    64ba:	30 5d       	subi	r19, 0xD0	; 208
    64bc:	31 93       	st	Z+, r19
    64be:	de f6       	brtc	.-74     	; 0x6476 <__ultoa_invert+0xe>
    64c0:	cf 01       	movw	r24, r30
    64c2:	08 95       	ret
    64c4:	46 2f       	mov	r20, r22
    64c6:	47 70       	andi	r20, 0x07	; 7
    64c8:	40 5d       	subi	r20, 0xD0	; 208
    64ca:	41 93       	st	Z+, r20
    64cc:	b3 e0       	ldi	r27, 0x03	; 3
    64ce:	0f d0       	rcall	.+30     	; 0x64ee <__ultoa_invert+0x86>
    64d0:	c9 f7       	brne	.-14     	; 0x64c4 <__ultoa_invert+0x5c>
    64d2:	f6 cf       	rjmp	.-20     	; 0x64c0 <__ultoa_invert+0x58>
    64d4:	46 2f       	mov	r20, r22
    64d6:	4f 70       	andi	r20, 0x0F	; 15
    64d8:	40 5d       	subi	r20, 0xD0	; 208
    64da:	4a 33       	cpi	r20, 0x3A	; 58
    64dc:	18 f0       	brcs	.+6      	; 0x64e4 <__ultoa_invert+0x7c>
    64de:	49 5d       	subi	r20, 0xD9	; 217
    64e0:	31 fd       	sbrc	r19, 1
    64e2:	40 52       	subi	r20, 0x20	; 32
    64e4:	41 93       	st	Z+, r20
    64e6:	02 d0       	rcall	.+4      	; 0x64ec <__ultoa_invert+0x84>
    64e8:	a9 f7       	brne	.-22     	; 0x64d4 <__ultoa_invert+0x6c>
    64ea:	ea cf       	rjmp	.-44     	; 0x64c0 <__ultoa_invert+0x58>
    64ec:	b4 e0       	ldi	r27, 0x04	; 4
    64ee:	a6 95       	lsr	r26
    64f0:	97 95       	ror	r25
    64f2:	87 95       	ror	r24
    64f4:	77 95       	ror	r23
    64f6:	67 95       	ror	r22
    64f8:	ba 95       	dec	r27
    64fa:	c9 f7       	brne	.-14     	; 0x64ee <__ultoa_invert+0x86>
    64fc:	00 97       	sbiw	r24, 0x00	; 0
    64fe:	61 05       	cpc	r22, r1
    6500:	71 05       	cpc	r23, r1
    6502:	08 95       	ret
    6504:	9b 01       	movw	r18, r22
    6506:	ac 01       	movw	r20, r24
    6508:	0a 2e       	mov	r0, r26
    650a:	06 94       	lsr	r0
    650c:	57 95       	ror	r21
    650e:	47 95       	ror	r20
    6510:	37 95       	ror	r19
    6512:	27 95       	ror	r18
    6514:	ba 95       	dec	r27
    6516:	c9 f7       	brne	.-14     	; 0x650a <__ultoa_invert+0xa2>
    6518:	62 0f       	add	r22, r18
    651a:	73 1f       	adc	r23, r19
    651c:	84 1f       	adc	r24, r20
    651e:	95 1f       	adc	r25, r21
    6520:	a0 1d       	adc	r26, r0
    6522:	08 95       	ret

00006524 <strtod>:
    6524:	6f 92       	push	r6
    6526:	7f 92       	push	r7
    6528:	8f 92       	push	r8
    652a:	9f 92       	push	r9
    652c:	af 92       	push	r10
    652e:	bf 92       	push	r11
    6530:	cf 92       	push	r12
    6532:	df 92       	push	r13
    6534:	ef 92       	push	r14
    6536:	ff 92       	push	r15
    6538:	0f 93       	push	r16
    653a:	1f 93       	push	r17
    653c:	cf 93       	push	r28
    653e:	df 93       	push	r29
    6540:	ec 01       	movw	r28, r24
    6542:	7b 01       	movw	r14, r22
    6544:	61 15       	cp	r22, r1
    6546:	71 05       	cpc	r23, r1
    6548:	19 f0       	breq	.+6      	; 0x6550 <strtod+0x2c>
    654a:	db 01       	movw	r26, r22
    654c:	8d 93       	st	X+, r24
    654e:	9c 93       	st	X, r25
    6550:	8e 01       	movw	r16, r28
    6552:	0f 5f       	subi	r16, 0xFF	; 255
    6554:	1f 4f       	sbci	r17, 0xFF	; 255
    6556:	78 80       	ld	r7, Y
    6558:	87 2d       	mov	r24, r7
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	0e 94 29 31 	call	0x6252	; 0x6252 <isspace>
    6560:	89 2b       	or	r24, r25
    6562:	11 f0       	breq	.+4      	; 0x6568 <strtod+0x44>
    6564:	e8 01       	movw	r28, r16
    6566:	f4 cf       	rjmp	.-24     	; 0x6550 <strtod+0x2c>
    6568:	bd e2       	ldi	r27, 0x2D	; 45
    656a:	7b 12       	cpse	r7, r27
    656c:	05 c0       	rjmp	.+10     	; 0x6578 <strtod+0x54>
    656e:	0f 5f       	subi	r16, 0xFF	; 255
    6570:	1f 4f       	sbci	r17, 0xFF	; 255
    6572:	79 80       	ldd	r7, Y+1	; 0x01
    6574:	c1 e0       	ldi	r28, 0x01	; 1
    6576:	08 c0       	rjmp	.+16     	; 0x6588 <strtod+0x64>
    6578:	eb e2       	ldi	r30, 0x2B	; 43
    657a:	7e 12       	cpse	r7, r30
    657c:	04 c0       	rjmp	.+8      	; 0x6586 <strtod+0x62>
    657e:	8e 01       	movw	r16, r28
    6580:	0e 5f       	subi	r16, 0xFE	; 254
    6582:	1f 4f       	sbci	r17, 0xFF	; 255
    6584:	79 80       	ldd	r7, Y+1	; 0x01
    6586:	c0 e0       	ldi	r28, 0x00	; 0
    6588:	68 01       	movw	r12, r16
    658a:	f1 e0       	ldi	r31, 0x01	; 1
    658c:	cf 1a       	sub	r12, r31
    658e:	d1 08       	sbc	r13, r1
    6590:	43 e0       	ldi	r20, 0x03	; 3
    6592:	50 e0       	ldi	r21, 0x00	; 0
    6594:	6e e8       	ldi	r22, 0x8E	; 142
    6596:	72 e0       	ldi	r23, 0x02	; 2
    6598:	c6 01       	movw	r24, r12
    659a:	0e 94 04 34 	call	0x6808	; 0x6808 <strncasecmp_P>
    659e:	89 2b       	or	r24, r25
    65a0:	f1 f4       	brne	.+60     	; 0x65de <strtod+0xba>
    65a2:	68 01       	movw	r12, r16
    65a4:	22 e0       	ldi	r18, 0x02	; 2
    65a6:	c2 0e       	add	r12, r18
    65a8:	d1 1c       	adc	r13, r1
    65aa:	45 e0       	ldi	r20, 0x05	; 5
    65ac:	50 e0       	ldi	r21, 0x00	; 0
    65ae:	69 e8       	ldi	r22, 0x89	; 137
    65b0:	72 e0       	ldi	r23, 0x02	; 2
    65b2:	c6 01       	movw	r24, r12
    65b4:	0e 94 04 34 	call	0x6808	; 0x6808 <strncasecmp_P>
    65b8:	89 2b       	or	r24, r25
    65ba:	21 f4       	brne	.+8      	; 0x65c4 <strtod+0xa0>
    65bc:	68 01       	movw	r12, r16
    65be:	87 e0       	ldi	r24, 0x07	; 7
    65c0:	c8 0e       	add	r12, r24
    65c2:	d1 1c       	adc	r13, r1
    65c4:	e1 14       	cp	r14, r1
    65c6:	f1 04       	cpc	r15, r1
    65c8:	19 f0       	breq	.+6      	; 0x65d0 <strtod+0xac>
    65ca:	d7 01       	movw	r26, r14
    65cc:	cd 92       	st	X+, r12
    65ce:	dc 92       	st	X, r13
    65d0:	c1 11       	cpse	r28, r1
    65d2:	ff c0       	rjmp	.+510    	; 0x67d2 <strtod+0x2ae>
    65d4:	60 e0       	ldi	r22, 0x00	; 0
    65d6:	70 e0       	ldi	r23, 0x00	; 0
    65d8:	80 e8       	ldi	r24, 0x80	; 128
    65da:	9f e7       	ldi	r25, 0x7F	; 127
    65dc:	03 c1       	rjmp	.+518    	; 0x67e4 <strtod+0x2c0>
    65de:	43 e0       	ldi	r20, 0x03	; 3
    65e0:	50 e0       	ldi	r21, 0x00	; 0
    65e2:	66 e8       	ldi	r22, 0x86	; 134
    65e4:	72 e0       	ldi	r23, 0x02	; 2
    65e6:	c6 01       	movw	r24, r12
    65e8:	0e 94 04 34 	call	0x6808	; 0x6808 <strncasecmp_P>
    65ec:	89 2b       	or	r24, r25
    65ee:	51 f4       	brne	.+20     	; 0x6604 <strtod+0xe0>
    65f0:	e1 14       	cp	r14, r1
    65f2:	f1 04       	cpc	r15, r1
    65f4:	09 f4       	brne	.+2      	; 0x65f8 <strtod+0xd4>
    65f6:	f2 c0       	rjmp	.+484    	; 0x67dc <strtod+0x2b8>
    65f8:	0e 5f       	subi	r16, 0xFE	; 254
    65fa:	1f 4f       	sbci	r17, 0xFF	; 255
    65fc:	f7 01       	movw	r30, r14
    65fe:	11 83       	std	Z+1, r17	; 0x01
    6600:	00 83       	st	Z, r16
    6602:	ec c0       	rjmp	.+472    	; 0x67dc <strtod+0x2b8>
    6604:	68 01       	movw	r12, r16
    6606:	60 e0       	ldi	r22, 0x00	; 0
    6608:	70 e0       	ldi	r23, 0x00	; 0
    660a:	cb 01       	movw	r24, r22
    660c:	00 e0       	ldi	r16, 0x00	; 0
    660e:	10 e0       	ldi	r17, 0x00	; 0
    6610:	f6 01       	movw	r30, r12
    6612:	d0 ed       	ldi	r29, 0xD0	; 208
    6614:	d7 0d       	add	r29, r7
    6616:	da 30       	cpi	r29, 0x0A	; 10
    6618:	58 f5       	brcc	.+86     	; 0x6670 <strtod+0x14c>
    661a:	2c 2f       	mov	r18, r28
    661c:	22 60       	ori	r18, 0x02	; 2
    661e:	62 2e       	mov	r6, r18
    6620:	2c 2f       	mov	r18, r28
    6622:	28 70       	andi	r18, 0x08	; 8
    6624:	c2 ff       	sbrs	r28, 2
    6626:	05 c0       	rjmp	.+10     	; 0x6632 <strtod+0x10e>
    6628:	21 11       	cpse	r18, r1
    662a:	28 c0       	rjmp	.+80     	; 0x667c <strtod+0x158>
    662c:	0f 5f       	subi	r16, 0xFF	; 255
    662e:	1f 4f       	sbci	r17, 0xFF	; 255
    6630:	25 c0       	rjmp	.+74     	; 0x667c <strtod+0x158>
    6632:	22 23       	and	r18, r18
    6634:	11 f0       	breq	.+4      	; 0x663a <strtod+0x116>
    6636:	01 50       	subi	r16, 0x01	; 1
    6638:	11 09       	sbc	r17, r1
    663a:	a5 e0       	ldi	r26, 0x05	; 5
    663c:	b0 e0       	ldi	r27, 0x00	; 0
    663e:	9b 01       	movw	r18, r22
    6640:	ac 01       	movw	r20, r24
    6642:	0e 94 be 34 	call	0x697c	; 0x697c <__muluhisi3>
    6646:	4b 01       	movw	r8, r22
    6648:	5c 01       	movw	r10, r24
    664a:	88 0c       	add	r8, r8
    664c:	99 1c       	adc	r9, r9
    664e:	aa 1c       	adc	r10, r10
    6650:	bb 1c       	adc	r11, r11
    6652:	c5 01       	movw	r24, r10
    6654:	b4 01       	movw	r22, r8
    6656:	6d 0f       	add	r22, r29
    6658:	71 1d       	adc	r23, r1
    665a:	81 1d       	adc	r24, r1
    665c:	91 1d       	adc	r25, r1
    665e:	68 39       	cpi	r22, 0x98	; 152
    6660:	a9 e9       	ldi	r26, 0x99	; 153
    6662:	7a 07       	cpc	r23, r26
    6664:	8a 07       	cpc	r24, r26
    6666:	a9 e1       	ldi	r26, 0x19	; 25
    6668:	9a 07       	cpc	r25, r26
    666a:	40 f0       	brcs	.+16     	; 0x667c <strtod+0x158>
    666c:	c6 60       	ori	r28, 0x06	; 6
    666e:	05 c0       	rjmp	.+10     	; 0x667a <strtod+0x156>
    6670:	de 3f       	cpi	r29, 0xFE	; 254
    6672:	51 f4       	brne	.+20     	; 0x6688 <strtod+0x164>
    6674:	c3 fd       	sbrc	r28, 3
    6676:	44 c0       	rjmp	.+136    	; 0x6700 <strtod+0x1dc>
    6678:	c8 60       	ori	r28, 0x08	; 8
    667a:	6c 2e       	mov	r6, r28
    667c:	bf ef       	ldi	r27, 0xFF	; 255
    667e:	cb 1a       	sub	r12, r27
    6680:	db 0a       	sbc	r13, r27
    6682:	70 80       	ld	r7, Z
    6684:	c6 2d       	mov	r28, r6
    6686:	c4 cf       	rjmp	.-120    	; 0x6610 <strtod+0xec>
    6688:	2d 2f       	mov	r18, r29
    668a:	2f 7d       	andi	r18, 0xDF	; 223
    668c:	25 31       	cpi	r18, 0x15	; 21
    668e:	c1 f5       	brne	.+112    	; 0x6700 <strtod+0x1dc>
    6690:	40 81       	ld	r20, Z
    6692:	4d 32       	cpi	r20, 0x2D	; 45
    6694:	11 f4       	brne	.+4      	; 0x669a <strtod+0x176>
    6696:	c0 61       	ori	r28, 0x10	; 16
    6698:	06 c0       	rjmp	.+12     	; 0x66a6 <strtod+0x182>
    669a:	4b 32       	cpi	r20, 0x2B	; 43
    669c:	21 f0       	breq	.+8      	; 0x66a6 <strtod+0x182>
    669e:	31 96       	adiw	r30, 0x01	; 1
    66a0:	21 e0       	ldi	r18, 0x01	; 1
    66a2:	30 e0       	ldi	r19, 0x00	; 0
    66a4:	06 c0       	rjmp	.+12     	; 0x66b2 <strtod+0x18e>
    66a6:	32 96       	adiw	r30, 0x02	; 2
    66a8:	d6 01       	movw	r26, r12
    66aa:	11 96       	adiw	r26, 0x01	; 1
    66ac:	4c 91       	ld	r20, X
    66ae:	22 e0       	ldi	r18, 0x02	; 2
    66b0:	30 e0       	ldi	r19, 0x00	; 0
    66b2:	a0 ed       	ldi	r26, 0xD0	; 208
    66b4:	a4 0f       	add	r26, r20
    66b6:	aa 30       	cpi	r26, 0x0A	; 10
    66b8:	18 f0       	brcs	.+6      	; 0x66c0 <strtod+0x19c>
    66ba:	e2 1b       	sub	r30, r18
    66bc:	f3 0b       	sbc	r31, r19
    66be:	20 c0       	rjmp	.+64     	; 0x6700 <strtod+0x1dc>
    66c0:	40 e0       	ldi	r20, 0x00	; 0
    66c2:	50 e0       	ldi	r21, 0x00	; 0
    66c4:	40 38       	cpi	r20, 0x80	; 128
    66c6:	bc e0       	ldi	r27, 0x0C	; 12
    66c8:	5b 07       	cpc	r21, r27
    66ca:	5c f4       	brge	.+22     	; 0x66e2 <strtod+0x1be>
    66cc:	9a 01       	movw	r18, r20
    66ce:	22 0f       	add	r18, r18
    66d0:	33 1f       	adc	r19, r19
    66d2:	22 0f       	add	r18, r18
    66d4:	33 1f       	adc	r19, r19
    66d6:	42 0f       	add	r20, r18
    66d8:	53 1f       	adc	r21, r19
    66da:	44 0f       	add	r20, r20
    66dc:	55 1f       	adc	r21, r21
    66de:	4a 0f       	add	r20, r26
    66e0:	51 1d       	adc	r21, r1
    66e2:	31 96       	adiw	r30, 0x01	; 1
    66e4:	df 01       	movw	r26, r30
    66e6:	11 97       	sbiw	r26, 0x01	; 1
    66e8:	2c 91       	ld	r18, X
    66ea:	a0 ed       	ldi	r26, 0xD0	; 208
    66ec:	a2 0f       	add	r26, r18
    66ee:	aa 30       	cpi	r26, 0x0A	; 10
    66f0:	48 f3       	brcs	.-46     	; 0x66c4 <strtod+0x1a0>
    66f2:	c4 ff       	sbrs	r28, 4
    66f4:	03 c0       	rjmp	.+6      	; 0x66fc <strtod+0x1d8>
    66f6:	51 95       	neg	r21
    66f8:	41 95       	neg	r20
    66fa:	51 09       	sbc	r21, r1
    66fc:	04 0f       	add	r16, r20
    66fe:	15 1f       	adc	r17, r21
    6700:	c1 ff       	sbrs	r28, 1
    6702:	07 c0       	rjmp	.+14     	; 0x6712 <strtod+0x1ee>
    6704:	e1 14       	cp	r14, r1
    6706:	f1 04       	cpc	r15, r1
    6708:	21 f0       	breq	.+8      	; 0x6712 <strtod+0x1ee>
    670a:	31 97       	sbiw	r30, 0x01	; 1
    670c:	d7 01       	movw	r26, r14
    670e:	ed 93       	st	X+, r30
    6710:	fc 93       	st	X, r31
    6712:	0e 94 04 2c 	call	0x5808	; 0x5808 <__floatunsisf>
    6716:	c3 70       	andi	r28, 0x03	; 3
    6718:	c3 30       	cpi	r28, 0x03	; 3
    671a:	19 f0       	breq	.+6      	; 0x6722 <strtod+0x1fe>
    671c:	6b 01       	movw	r12, r22
    671e:	7c 01       	movw	r14, r24
    6720:	06 c0       	rjmp	.+12     	; 0x672e <strtod+0x20a>
    6722:	6b 01       	movw	r12, r22
    6724:	7c 01       	movw	r14, r24
    6726:	f7 fa       	bst	r15, 7
    6728:	f0 94       	com	r15
    672a:	f7 f8       	bld	r15, 7
    672c:	f0 94       	com	r15
    672e:	20 e0       	ldi	r18, 0x00	; 0
    6730:	30 e0       	ldi	r19, 0x00	; 0
    6732:	a9 01       	movw	r20, r18
    6734:	c7 01       	movw	r24, r14
    6736:	b6 01       	movw	r22, r12
    6738:	0e 94 2c 34 	call	0x6858	; 0x6858 <__cmpsf2>
    673c:	88 23       	and	r24, r24
    673e:	09 f4       	brne	.+2      	; 0x6742 <strtod+0x21e>
    6740:	45 c0       	rjmp	.+138    	; 0x67cc <strtod+0x2a8>
    6742:	17 ff       	sbrs	r17, 7
    6744:	06 c0       	rjmp	.+12     	; 0x6752 <strtod+0x22e>
    6746:	11 95       	neg	r17
    6748:	01 95       	neg	r16
    674a:	11 09       	sbc	r17, r1
    674c:	c5 ea       	ldi	r28, 0xA5	; 165
    674e:	d2 e0       	ldi	r29, 0x02	; 2
    6750:	02 c0       	rjmp	.+4      	; 0x6756 <strtod+0x232>
    6752:	cd eb       	ldi	r28, 0xBD	; 189
    6754:	d2 e0       	ldi	r29, 0x02	; 2
    6756:	5e 01       	movw	r10, r28
    6758:	b8 e1       	ldi	r27, 0x18	; 24
    675a:	ab 1a       	sub	r10, r27
    675c:	b1 08       	sbc	r11, r1
    675e:	46 01       	movw	r8, r12
    6760:	be 2d       	mov	r27, r14
    6762:	af 2d       	mov	r26, r15
    6764:	90 e2       	ldi	r25, 0x20	; 32
    6766:	e9 2e       	mov	r14, r25
    6768:	f1 2c       	mov	r15, r1
    676a:	0e 15       	cp	r16, r14
    676c:	1f 05       	cpc	r17, r15
    676e:	84 f0       	brlt	.+32     	; 0x6790 <strtod+0x26c>
    6770:	fe 01       	movw	r30, r28
    6772:	25 91       	lpm	r18, Z+
    6774:	35 91       	lpm	r19, Z+
    6776:	45 91       	lpm	r20, Z+
    6778:	54 91       	lpm	r21, Z
    677a:	b4 01       	movw	r22, r8
    677c:	8b 2f       	mov	r24, r27
    677e:	9a 2f       	mov	r25, r26
    6780:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulsf3>
    6784:	4b 01       	movw	r8, r22
    6786:	b8 2f       	mov	r27, r24
    6788:	a9 2f       	mov	r26, r25
    678a:	0e 19       	sub	r16, r14
    678c:	1f 09       	sbc	r17, r15
    678e:	ed cf       	rjmp	.-38     	; 0x676a <strtod+0x246>
    6790:	24 97       	sbiw	r28, 0x04	; 4
    6792:	f5 94       	asr	r15
    6794:	e7 94       	ror	r14
    6796:	ca 15       	cp	r28, r10
    6798:	db 05       	cpc	r29, r11
    679a:	39 f7       	brne	.-50     	; 0x676a <strtod+0x246>
    679c:	64 01       	movw	r12, r8
    679e:	eb 2e       	mov	r14, r27
    67a0:	fa 2e       	mov	r15, r26
    67a2:	8e 2d       	mov	r24, r14
    67a4:	88 0f       	add	r24, r24
    67a6:	8f 2d       	mov	r24, r15
    67a8:	88 1f       	adc	r24, r24
    67aa:	8f 3f       	cpi	r24, 0xFF	; 255
    67ac:	49 f0       	breq	.+18     	; 0x67c0 <strtod+0x29c>
    67ae:	20 e0       	ldi	r18, 0x00	; 0
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	a9 01       	movw	r20, r18
    67b4:	c7 01       	movw	r24, r14
    67b6:	b6 01       	movw	r22, r12
    67b8:	0e 94 2c 34 	call	0x6858	; 0x6858 <__cmpsf2>
    67bc:	81 11       	cpse	r24, r1
    67be:	06 c0       	rjmp	.+12     	; 0x67cc <strtod+0x2a8>
    67c0:	82 e2       	ldi	r24, 0x22	; 34
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <errno+0x1>
    67c8:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <errno>
    67cc:	c7 01       	movw	r24, r14
    67ce:	b6 01       	movw	r22, r12
    67d0:	09 c0       	rjmp	.+18     	; 0x67e4 <strtod+0x2c0>
    67d2:	60 e0       	ldi	r22, 0x00	; 0
    67d4:	70 e0       	ldi	r23, 0x00	; 0
    67d6:	80 e8       	ldi	r24, 0x80	; 128
    67d8:	9f ef       	ldi	r25, 0xFF	; 255
    67da:	04 c0       	rjmp	.+8      	; 0x67e4 <strtod+0x2c0>
    67dc:	60 e0       	ldi	r22, 0x00	; 0
    67de:	70 e0       	ldi	r23, 0x00	; 0
    67e0:	80 ec       	ldi	r24, 0xC0	; 192
    67e2:	9f e7       	ldi	r25, 0x7F	; 127
    67e4:	df 91       	pop	r29
    67e6:	cf 91       	pop	r28
    67e8:	1f 91       	pop	r17
    67ea:	0f 91       	pop	r16
    67ec:	ff 90       	pop	r15
    67ee:	ef 90       	pop	r14
    67f0:	df 90       	pop	r13
    67f2:	cf 90       	pop	r12
    67f4:	bf 90       	pop	r11
    67f6:	af 90       	pop	r10
    67f8:	9f 90       	pop	r9
    67fa:	8f 90       	pop	r8
    67fc:	7f 90       	pop	r7
    67fe:	6f 90       	pop	r6
    6800:	08 95       	ret

00006802 <__ctype_isfalse>:
    6802:	99 27       	eor	r25, r25
    6804:	88 27       	eor	r24, r24

00006806 <__ctype_istrue>:
    6806:	08 95       	ret

00006808 <strncasecmp_P>:
    6808:	fb 01       	movw	r30, r22
    680a:	dc 01       	movw	r26, r24
    680c:	41 50       	subi	r20, 0x01	; 1
    680e:	50 40       	sbci	r21, 0x00	; 0
    6810:	88 f0       	brcs	.+34     	; 0x6834 <strncasecmp_P+0x2c>
    6812:	8d 91       	ld	r24, X+
    6814:	81 34       	cpi	r24, 0x41	; 65
    6816:	1c f0       	brlt	.+6      	; 0x681e <strncasecmp_P+0x16>
    6818:	8b 35       	cpi	r24, 0x5B	; 91
    681a:	0c f4       	brge	.+2      	; 0x681e <strncasecmp_P+0x16>
    681c:	80 5e       	subi	r24, 0xE0	; 224
    681e:	65 91       	lpm	r22, Z+
    6820:	61 34       	cpi	r22, 0x41	; 65
    6822:	1c f0       	brlt	.+6      	; 0x682a <strncasecmp_P+0x22>
    6824:	6b 35       	cpi	r22, 0x5B	; 91
    6826:	0c f4       	brge	.+2      	; 0x682a <strncasecmp_P+0x22>
    6828:	60 5e       	subi	r22, 0xE0	; 224
    682a:	86 1b       	sub	r24, r22
    682c:	61 11       	cpse	r22, r1
    682e:	71 f3       	breq	.-36     	; 0x680c <strncasecmp_P+0x4>
    6830:	99 0b       	sbc	r25, r25
    6832:	08 95       	ret
    6834:	88 1b       	sub	r24, r24
    6836:	fc cf       	rjmp	.-8      	; 0x6830 <strncasecmp_P+0x28>

00006838 <strrev>:
    6838:	dc 01       	movw	r26, r24
    683a:	fc 01       	movw	r30, r24
    683c:	67 2f       	mov	r22, r23
    683e:	71 91       	ld	r23, Z+
    6840:	77 23       	and	r23, r23
    6842:	e1 f7       	brne	.-8      	; 0x683c <strrev+0x4>
    6844:	32 97       	sbiw	r30, 0x02	; 2
    6846:	04 c0       	rjmp	.+8      	; 0x6850 <strrev+0x18>
    6848:	7c 91       	ld	r23, X
    684a:	6d 93       	st	X+, r22
    684c:	70 83       	st	Z, r23
    684e:	62 91       	ld	r22, -Z
    6850:	ae 17       	cp	r26, r30
    6852:	bf 07       	cpc	r27, r31
    6854:	c8 f3       	brcs	.-14     	; 0x6848 <strrev+0x10>
    6856:	08 95       	ret

00006858 <__cmpsf2>:
    6858:	0e 94 31 34 	call	0x6862	; 0x6862 <__fp_cmp>
    685c:	08 f4       	brcc	.+2      	; 0x6860 <__cmpsf2+0x8>
    685e:	81 e0       	ldi	r24, 0x01	; 1
    6860:	08 95       	ret

00006862 <__fp_cmp>:
    6862:	99 0f       	add	r25, r25
    6864:	00 08       	sbc	r0, r0
    6866:	55 0f       	add	r21, r21
    6868:	aa 0b       	sbc	r26, r26
    686a:	e0 e8       	ldi	r30, 0x80	; 128
    686c:	fe ef       	ldi	r31, 0xFE	; 254
    686e:	16 16       	cp	r1, r22
    6870:	17 06       	cpc	r1, r23
    6872:	e8 07       	cpc	r30, r24
    6874:	f9 07       	cpc	r31, r25
    6876:	c0 f0       	brcs	.+48     	; 0x68a8 <__fp_cmp+0x46>
    6878:	12 16       	cp	r1, r18
    687a:	13 06       	cpc	r1, r19
    687c:	e4 07       	cpc	r30, r20
    687e:	f5 07       	cpc	r31, r21
    6880:	98 f0       	brcs	.+38     	; 0x68a8 <__fp_cmp+0x46>
    6882:	62 1b       	sub	r22, r18
    6884:	73 0b       	sbc	r23, r19
    6886:	84 0b       	sbc	r24, r20
    6888:	95 0b       	sbc	r25, r21
    688a:	39 f4       	brne	.+14     	; 0x689a <__fp_cmp+0x38>
    688c:	0a 26       	eor	r0, r26
    688e:	61 f0       	breq	.+24     	; 0x68a8 <__fp_cmp+0x46>
    6890:	23 2b       	or	r18, r19
    6892:	24 2b       	or	r18, r20
    6894:	25 2b       	or	r18, r21
    6896:	21 f4       	brne	.+8      	; 0x68a0 <__fp_cmp+0x3e>
    6898:	08 95       	ret
    689a:	0a 26       	eor	r0, r26
    689c:	09 f4       	brne	.+2      	; 0x68a0 <__fp_cmp+0x3e>
    689e:	a1 40       	sbci	r26, 0x01	; 1
    68a0:	a6 95       	lsr	r26
    68a2:	8f ef       	ldi	r24, 0xFF	; 255
    68a4:	81 1d       	adc	r24, r1
    68a6:	81 1d       	adc	r24, r1
    68a8:	08 95       	ret

000068aa <eeprom_read_block>:
    68aa:	dc 01       	movw	r26, r24
    68ac:	cb 01       	movw	r24, r22

000068ae <eeprom_read_blraw>:
    68ae:	fc 01       	movw	r30, r24
    68b0:	f9 99       	sbic	0x1f, 1	; 31
    68b2:	fe cf       	rjmp	.-4      	; 0x68b0 <eeprom_read_blraw+0x2>
    68b4:	06 c0       	rjmp	.+12     	; 0x68c2 <eeprom_read_blraw+0x14>
    68b6:	f2 bd       	out	0x22, r31	; 34
    68b8:	e1 bd       	out	0x21, r30	; 33
    68ba:	f8 9a       	sbi	0x1f, 0	; 31
    68bc:	31 96       	adiw	r30, 0x01	; 1
    68be:	00 b4       	in	r0, 0x20	; 32
    68c0:	0d 92       	st	X+, r0
    68c2:	41 50       	subi	r20, 0x01	; 1
    68c4:	50 40       	sbci	r21, 0x00	; 0
    68c6:	b8 f7       	brcc	.-18     	; 0x68b6 <eeprom_read_blraw+0x8>
    68c8:	08 95       	ret

000068ca <eeprom_update_byte>:
    68ca:	26 2f       	mov	r18, r22

000068cc <eeprom_update_r18>:
    68cc:	f9 99       	sbic	0x1f, 1	; 31
    68ce:	fe cf       	rjmp	.-4      	; 0x68cc <eeprom_update_r18>
    68d0:	92 bd       	out	0x22, r25	; 34
    68d2:	81 bd       	out	0x21, r24	; 33
    68d4:	f8 9a       	sbi	0x1f, 0	; 31
    68d6:	01 97       	sbiw	r24, 0x01	; 1
    68d8:	00 b4       	in	r0, 0x20	; 32
    68da:	02 16       	cp	r0, r18
    68dc:	39 f0       	breq	.+14     	; 0x68ec <eeprom_update_r18+0x20>
    68de:	1f ba       	out	0x1f, r1	; 31
    68e0:	20 bd       	out	0x20, r18	; 32
    68e2:	0f b6       	in	r0, 0x3f	; 63
    68e4:	f8 94       	cli
    68e6:	fa 9a       	sbi	0x1f, 2	; 31
    68e8:	f9 9a       	sbi	0x1f, 1	; 31
    68ea:	0f be       	out	0x3f, r0	; 63
    68ec:	08 95       	ret

000068ee <eeprom_write_block>:
    68ee:	dc 01       	movw	r26, r24
    68f0:	cb 01       	movw	r24, r22
    68f2:	03 c0       	rjmp	.+6      	; 0x68fa <eeprom_write_block+0xc>
    68f4:	2d 91       	ld	r18, X+
    68f6:	0e 94 82 34 	call	0x6904	; 0x6904 <eeprom_write_r18>
    68fa:	41 50       	subi	r20, 0x01	; 1
    68fc:	50 40       	sbci	r21, 0x00	; 0
    68fe:	d0 f7       	brcc	.-12     	; 0x68f4 <eeprom_write_block+0x6>
    6900:	08 95       	ret

00006902 <eeprom_write_byte>:
    6902:	26 2f       	mov	r18, r22

00006904 <eeprom_write_r18>:
    6904:	f9 99       	sbic	0x1f, 1	; 31
    6906:	fe cf       	rjmp	.-4      	; 0x6904 <eeprom_write_r18>
    6908:	1f ba       	out	0x1f, r1	; 31
    690a:	92 bd       	out	0x22, r25	; 34
    690c:	81 bd       	out	0x21, r24	; 33
    690e:	20 bd       	out	0x20, r18	; 32
    6910:	0f b6       	in	r0, 0x3f	; 63
    6912:	f8 94       	cli
    6914:	fa 9a       	sbi	0x1f, 2	; 31
    6916:	f9 9a       	sbi	0x1f, 1	; 31
    6918:	0f be       	out	0x3f, r0	; 63
    691a:	01 96       	adiw	r24, 0x01	; 1
    691c:	08 95       	ret

0000691e <__mulsi3>:
    691e:	db 01       	movw	r26, r22
    6920:	8f 93       	push	r24
    6922:	9f 93       	push	r25
    6924:	0e 94 be 34 	call	0x697c	; 0x697c <__muluhisi3>
    6928:	bf 91       	pop	r27
    692a:	af 91       	pop	r26
    692c:	a2 9f       	mul	r26, r18
    692e:	80 0d       	add	r24, r0
    6930:	91 1d       	adc	r25, r1
    6932:	a3 9f       	mul	r26, r19
    6934:	90 0d       	add	r25, r0
    6936:	b2 9f       	mul	r27, r18
    6938:	90 0d       	add	r25, r0
    693a:	11 24       	eor	r1, r1
    693c:	08 95       	ret

0000693e <__divmodsi4>:
    693e:	05 2e       	mov	r0, r21
    6940:	97 fb       	bst	r25, 7
    6942:	1e f4       	brtc	.+6      	; 0x694a <__divmodsi4+0xc>
    6944:	00 94       	com	r0
    6946:	0e 94 b6 34 	call	0x696c	; 0x696c <__negsi2>
    694a:	57 fd       	sbrc	r21, 7
    694c:	07 d0       	rcall	.+14     	; 0x695c <__divmodsi4_neg2>
    694e:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__udivmodsi4>
    6952:	07 fc       	sbrc	r0, 7
    6954:	03 d0       	rcall	.+6      	; 0x695c <__divmodsi4_neg2>
    6956:	4e f4       	brtc	.+18     	; 0x696a <__divmodsi4_exit>
    6958:	0c 94 b6 34 	jmp	0x696c	; 0x696c <__negsi2>

0000695c <__divmodsi4_neg2>:
    695c:	50 95       	com	r21
    695e:	40 95       	com	r20
    6960:	30 95       	com	r19
    6962:	21 95       	neg	r18
    6964:	3f 4f       	sbci	r19, 0xFF	; 255
    6966:	4f 4f       	sbci	r20, 0xFF	; 255
    6968:	5f 4f       	sbci	r21, 0xFF	; 255

0000696a <__divmodsi4_exit>:
    696a:	08 95       	ret

0000696c <__negsi2>:
    696c:	90 95       	com	r25
    696e:	80 95       	com	r24
    6970:	70 95       	com	r23
    6972:	61 95       	neg	r22
    6974:	7f 4f       	sbci	r23, 0xFF	; 255
    6976:	8f 4f       	sbci	r24, 0xFF	; 255
    6978:	9f 4f       	sbci	r25, 0xFF	; 255
    697a:	08 95       	ret

0000697c <__muluhisi3>:
    697c:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <__umulhisi3>
    6980:	a5 9f       	mul	r26, r21
    6982:	90 0d       	add	r25, r0
    6984:	b4 9f       	mul	r27, r20
    6986:	90 0d       	add	r25, r0
    6988:	a4 9f       	mul	r26, r20
    698a:	80 0d       	add	r24, r0
    698c:	91 1d       	adc	r25, r1
    698e:	11 24       	eor	r1, r1
    6990:	08 95       	ret

00006992 <__mulshisi3>:
    6992:	b7 ff       	sbrs	r27, 7
    6994:	0c 94 be 34 	jmp	0x697c	; 0x697c <__muluhisi3>

00006998 <__mulohisi3>:
    6998:	0e 94 be 34 	call	0x697c	; 0x697c <__muluhisi3>
    699c:	82 1b       	sub	r24, r18
    699e:	93 0b       	sbc	r25, r19
    69a0:	08 95       	ret

000069a2 <__umulhisi3>:
    69a2:	a2 9f       	mul	r26, r18
    69a4:	b0 01       	movw	r22, r0
    69a6:	b3 9f       	mul	r27, r19
    69a8:	c0 01       	movw	r24, r0
    69aa:	a3 9f       	mul	r26, r19
    69ac:	70 0d       	add	r23, r0
    69ae:	81 1d       	adc	r24, r1
    69b0:	11 24       	eor	r1, r1
    69b2:	91 1d       	adc	r25, r1
    69b4:	b2 9f       	mul	r27, r18
    69b6:	70 0d       	add	r23, r0
    69b8:	81 1d       	adc	r24, r1
    69ba:	11 24       	eor	r1, r1
    69bc:	91 1d       	adc	r25, r1
    69be:	08 95       	ret

000069c0 <_exit>:
    69c0:	f8 94       	cli

000069c2 <__stop_program>:
    69c2:	ff cf       	rjmp	.-2      	; 0x69c2 <__stop_program>
