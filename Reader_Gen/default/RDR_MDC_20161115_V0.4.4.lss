
RDR_MDC_20161115_V0.4.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000374  00800200  000069d6  00006a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000074c  00800574  00800574  00006dde  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006dde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00006e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000110b8  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048e2  00000000  00000000  00018a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000add8  00000000  00000000  0001d342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e24  00000000  00000000  0002811c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00021bda  00000000  00000000  00029f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006839  00000000  00000000  0004bb1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  00052353  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bee1  00000000  00000000  00052ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__ctors_end>
       4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
       8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
       c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      10:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      14:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      18:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      20:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      24:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      28:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      30:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <__vector_12>
      34:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      38:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      3c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      40:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      44:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      48:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      4c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      50:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      54:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__vector_21>
      58:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      5c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      60:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      64:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      68:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      6c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      70:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      74:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      78:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      7c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      80:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <__vector_32>
      84:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      88:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      8c:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__vector_35>
      90:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__vector_36>
      94:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <__vector_37>
      98:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      9c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      ac:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      bc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      cc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      dc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      ec:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__vector_59>
      f0:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__vector_60>
      f4:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__vector_61>
      f8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      fc:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__vector_63>
     100:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     104:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     108:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     10c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     110:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     114:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     118:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     11c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     120:	18 1b       	sub	r17, r24
     122:	79 1b       	sub	r23, r25
     124:	76 1b       	sub	r23, r22
     126:	73 1b       	sub	r23, r19
     128:	0a 1b       	sub	r16, r26
     12a:	31 1b       	sub	r19, r17
     12c:	11 1b       	sub	r17, r17
     12e:	3c 1b       	sub	r19, r28
     130:	44 1b       	sub	r20, r20
     132:	6b 1b       	sub	r22, r27
     134:	78 24       	eor	r7, r8
     136:	7f 24       	eor	r7, r15
     138:	4a 27       	eor	r20, r26
     13a:	4a 27       	eor	r20, r26
     13c:	4a 27       	eor	r20, r26
     13e:	4a 27       	eor	r20, r26
     140:	6c 25       	eor	r22, r12
     142:	3e 26       	eor	r3, r30
     144:	4a 27       	eor	r20, r26
     146:	c2 26       	eor	r12, r18
     148:	4a 27       	eor	r20, r26
     14a:	c6 24       	eor	r12, r6
     14c:	3d 27       	eor	r19, r29
     14e:	4a 27       	eor	r20, r26
     150:	4f 26       	eor	r4, r31
     152:	42 27       	eor	r20, r18
     154:	4a 27       	eor	r20, r26
     156:	4a 27       	eor	r20, r26
     158:	49 24       	eor	r4, r9
     15a:	d2 26       	eor	r13, r18
     15c:	4a 27       	eor	r20, r26
     15e:	4a 27       	eor	r20, r26
     160:	4a 27       	eor	r20, r26
     162:	4a 27       	eor	r20, r26
     164:	4a 27       	eor	r20, r26
     166:	44 27       	eor	r20, r20
     168:	4a 27       	eor	r20, r26
     16a:	4a 27       	eor	r20, r26
     16c:	4a 27       	eor	r20, r26
     16e:	4a 27       	eor	r20, r26
     170:	6c 25       	eor	r22, r12
     172:	48 27       	eor	r20, r24
     174:	4a 27       	eor	r20, r26
     176:	4a 27       	eor	r20, r26
     178:	4a 27       	eor	r20, r26
     17a:	4a 27       	eor	r20, r26
     17c:	4a 27       	eor	r20, r26
     17e:	4a 27       	eor	r20, r26
     180:	42 27       	eor	r20, r18
     182:	64 25       	eor	r22, r4

00000184 <__trampolines_end>:
     184:	6e 61       	ori	r22, 0x1E	; 30
     186:	6e 00       	.word	0x006e	; ????

00000188 <__c.2240>:
     188:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     198:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1a8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1b8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1c8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1d8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1e8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1f8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     208:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     218:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     228:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     238:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     248:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     258:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     268:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     278:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000286 <pstr_nan>:
     286:	4e 41 4e                                            NAN

00000289 <pstr_inity>:
     289:	49 4e 49 54 59                                      INITY

0000028e <pstr_inf>:
     28e:	49 4e 46                                            INF

00000291 <pwr_m10>:
     291:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2a1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002a9 <pwr_p10>:
     2a9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2b9:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002c2 <__ctors_end>:
     2c2:	11 24       	eor	r1, r1
     2c4:	1f be       	out	0x3f, r1	; 63
     2c6:	cf ef       	ldi	r28, 0xFF	; 255
     2c8:	d1 e4       	ldi	r29, 0x41	; 65
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61

000002ce <__do_copy_data>:
     2ce:	15 e0       	ldi	r17, 0x05	; 5
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b2 e0       	ldi	r27, 0x02	; 2
     2d4:	e6 ed       	ldi	r30, 0xD6	; 214
     2d6:	f9 e6       	ldi	r31, 0x69	; 105
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0b bf       	out	0x3b, r16	; 59
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__do_copy_data+0x14>
     2de:	07 90       	elpm	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	a4 37       	cpi	r26, 0x74	; 116
     2e4:	b1 07       	cpc	r27, r17
     2e6:	d9 f7       	brne	.-10     	; 0x2de <__do_copy_data+0x10>

000002e8 <__do_clear_bss>:
     2e8:	2c e0       	ldi	r18, 0x0C	; 12
     2ea:	a4 e7       	ldi	r26, 0x74	; 116
     2ec:	b5 e0       	ldi	r27, 0x05	; 5
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <.do_clear_bss_start>

000002f0 <.do_clear_bss_loop>:
     2f0:	1d 92       	st	X+, r1

000002f2 <.do_clear_bss_start>:
     2f2:	a0 3c       	cpi	r26, 0xC0	; 192
     2f4:	b2 07       	cpc	r27, r18
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <.do_clear_bss_loop>
     2f8:	0e 94 0d 14 	call	0x281a	; 0x281a <main>
     2fc:	0c 94 e9 34 	jmp	0x69d2	; 0x69d2 <_exit>

00000300 <__bad_interrupt>:
     300:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000304 <timeoutWaitingForOLTReponse>:
   
   constructOutgoingString(REQUEST_KEYPAD_ACCOUNT, tmp);
   macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
   
   return true;
}
     304:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <timeout>
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <timeout>
     30e:	08 95       	ret

00000310 <asciiStringToNibble>:
     310:	9f 92       	push	r9
     312:	af 92       	push	r10
     314:	bf 92       	push	r11
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	7c 01       	movw	r14, r24
     328:	6b 01       	movw	r12, r22
     32a:	fc 01       	movw	r30, r24
     32c:	01 90       	ld	r0, Z+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <asciiStringToNibble+0x1c>
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	ef 01       	movw	r28, r30
     336:	c8 1b       	sub	r28, r24
     338:	d9 0b       	sbc	r29, r25
     33a:	0c 2f       	mov	r16, r28
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	10 17       	cp	r17, r16
     340:	a8 f4       	brcc	.+42     	; 0x36c <asciiStringToNibble+0x5c>
     342:	57 01       	movw	r10, r14
     344:	a1 0e       	add	r10, r17
     346:	b1 1c       	adc	r11, r1
     348:	f5 01       	movw	r30, r10
     34a:	80 81       	ld	r24, Z
     34c:	0e 94 1d 21 	call	0x423a	; 0x423a <Ascii_to_nible>
     350:	98 2e       	mov	r9, r24
     352:	f5 01       	movw	r30, r10
     354:	81 81       	ldd	r24, Z+1	; 0x01
     356:	0e 94 1d 21 	call	0x423a	; 0x423a <Ascii_to_nible>
     35a:	f0 e1       	ldi	r31, 0x10	; 16
     35c:	9f 9e       	mul	r9, r31
     35e:	80 0d       	add	r24, r0
     360:	11 24       	eor	r1, r1
     362:	f6 01       	movw	r30, r12
     364:	81 93       	st	Z+, r24
     366:	6f 01       	movw	r12, r30
     368:	1e 5f       	subi	r17, 0xFE	; 254
     36a:	e9 cf       	rjmp	.-46     	; 0x33e <asciiStringToNibble+0x2e>
     36c:	8c 2f       	mov	r24, r28
     36e:	86 95       	lsr	r24
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	08 95       	ret

00000388 <constructOutgoingString>:
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	8b 01       	movw	r16, r22
     392:	eb 01       	movw	r28, r22
     394:	21 96       	adiw	r28, 0x01	; 1
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	09 f4       	brne	.+2      	; 0x39c <constructOutgoingString+0x14>
     39a:	4e c0       	rjmp	.+156    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     39c:	50 f5       	brcc	.+84     	; 0x3f2 <constructOutgoingString+0x6a>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	71 f1       	breq	.+92     	; 0x3fe <constructOutgoingString+0x76>
     3a2:	82 30       	cpi	r24, 0x02	; 2
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <constructOutgoingString+0x20>
     3a6:	7f c0       	rjmp	.+254    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     3a8:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
     3ac:	1f 92       	push	r1
     3ae:	8f 93       	push	r24
     3b0:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
     3b4:	1f 92       	push	r1
     3b6:	8f 93       	push	r24
     3b8:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <ReaderSetup+0x5>
     3bc:	8f 93       	push	r24
     3be:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <ReaderSetup+0x4>
     3c2:	8f 93       	push	r24
     3c4:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <ReaderSetup+0x7>
     3c8:	8f 93       	push	r24
     3ca:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <ReaderSetup+0x6>
     3ce:	8f 93       	push	r24
     3d0:	8a e7       	ldi	r24, 0x7A	; 122
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	0e 94 0d 32 	call	0x641a	; 0x641a <sprintf>
     3e0:	ad b7       	in	r26, 0x3d	; 61
     3e2:	be b7       	in	r27, 0x3e	; 62
     3e4:	1c 96       	adiw	r26, 0x0c	; 12
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	be bf       	out	0x3e, r27	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	ad bf       	out	0x3d, r26	; 61
     3f0:	5a c0       	rjmp	.+180    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     3f2:	85 30       	cpi	r24, 0x05	; 5
     3f4:	71 f1       	breq	.+92     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3f6:	30 f1       	brcs	.+76     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3f8:	86 30       	cpi	r24, 0x06	; 6
     3fa:	b1 f1       	breq	.+108    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     3fc:	54 c0       	rjmp	.+168    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     3fe:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
     402:	1f 92       	push	r1
     404:	8f 93       	push	r24
     406:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
     40a:	1f 92       	push	r1
     40c:	8f 93       	push	r24
     40e:	87 e3       	ldi	r24, 0x37	; 55
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	81 e4       	ldi	r24, 0x41	; 65
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	0e 94 0d 32 	call	0x641a	; 0x641a <sprintf>
     426:	ad b7       	in	r26, 0x3d	; 61
     428:	be b7       	in	r27, 0x3e	; 62
     42a:	1a 96       	adiw	r26, 0x0a	; 10
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	be bf       	out	0x3e, r27	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	ad bf       	out	0x3d, r26	; 61
     436:	37 c0       	rjmp	.+110    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     438:	61 ee       	ldi	r22, 0xE1	; 225
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 70 31 	call	0x62e0	; 0x62e0 <strcpy>
     442:	31 c0       	rjmp	.+98     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     444:	84 ed       	ldi	r24, 0xD4	; 212
     446:	98 e0       	ldi	r25, 0x08	; 8
     448:	9f 93       	push	r25
     44a:	8f 93       	push	r24
     44c:	85 ef       	ldi	r24, 0xF5	; 245
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	1e c0       	rjmp	.+60     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     452:	81 ea       	ldi	r24, 0xA1	; 161
     454:	98 e0       	ldi	r25, 0x08	; 8
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	8f e0       	ldi	r24, 0x0F	; 15
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	9f 93       	push	r25
     460:	8f 93       	push	r24
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	17 c0       	rjmp	.+46     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     468:	40 ea       	ldi	r20, 0xA0	; 160
     46a:	58 e0       	ldi	r21, 0x08	; 8
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
     476:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     47a:	8f 3f       	cpi	r24, 0xFF	; 255
     47c:	11 f4       	brne	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47e:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <ReaderSetup+0x9>
     482:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     486:	1f 92       	push	r1
     488:	8f 93       	push	r24
     48a:	8f e2       	ldi	r24, 0x2F	; 47
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	0e 94 0d 32 	call	0x641a	; 0x641a <sprintf>
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	fe 01       	movw	r30, r28
     4a8:	01 90       	ld	r0, Z+
     4aa:	00 20       	and	r0, r0
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4ae:	ec 1b       	sub	r30, r28
     4b0:	d8 01       	movw	r26, r16
     4b2:	ec 93       	st	X, r30
     4b4:	8e 2f       	mov	r24, r30
     4b6:	80 95       	com	r24
     4b8:	88 1f       	adc	r24, r24
     4ba:	88 27       	eor	r24, r24
     4bc:	88 1f       	adc	r24, r24
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <sendReaderFirmwareVersion>:
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	c0 58       	subi	r28, 0x80	; 128
     4d4:	d1 09       	sbc	r29, r1
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	be 01       	movw	r22, r28
     4e2:	6f 5f       	subi	r22, 0xFF	; 255
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	fb 01       	movw	r30, r22
     4ea:	11 92       	st	Z+, r1
     4ec:	8a 95       	dec	r24
     4ee:	e9 f7       	brne	.-6      	; 0x4ea <sendReaderFirmwareVersion+0x22>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     4f6:	18 2f       	mov	r17, r24
     4f8:	88 23       	and	r24, r24
     4fa:	41 f0       	breq	.+16     	; 0x50c <sendReaderFirmwareVersion+0x44>
     4fc:	ae 01       	movw	r20, r28
     4fe:	4e 5f       	subi	r20, 0xFE	; 254
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	69 81       	ldd	r22, Y+1	; 0x01
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
     50c:	81 2f       	mov	r24, r17
     50e:	c0 58       	subi	r28, 0x80	; 128
     510:	df 4f       	sbci	r29, 0xFF	; 255
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <sendSetupRequest>:
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	c0 58       	subi	r28, 0x80	; 128
     52e:	d1 09       	sbc	r29, r1
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	80 e8       	ldi	r24, 0x80	; 128
     542:	fb 01       	movw	r30, r22
     544:	11 92       	st	Z+, r1
     546:	8a 95       	dec	r24
     548:	e9 f7       	brne	.-6      	; 0x544 <sendSetupRequest+0x20>
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     550:	ae 01       	movw	r20, r28
     552:	4e 5f       	subi	r20, 0xFE	; 254
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	69 81       	ldd	r22, Y+1	; 0x01
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	c0 58       	subi	r28, 0x80	; 128
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <sendValidationRequest>:
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	69 97       	sbiw	r28, 0x19	; 25
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	be 01       	movw	r22, r28
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	89 e1       	ldi	r24, 0x19	; 25
     592:	fb 01       	movw	r30, r22
     594:	11 92       	st	Z+, r1
     596:	8a 95       	dec	r24
     598:	e9 f7       	brne	.-6      	; 0x594 <sendValidationRequest+0x1e>
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     5a0:	ae 01       	movw	r20, r28
     5a2:	4e 5f       	subi	r20, 0xFE	; 254
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	69 81       	ldd	r22, Y+1	; 0x01
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	69 96       	adiw	r28, 0x19	; 25
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <sendMachineLabel>:
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	a3 97       	sbiw	r28, 0x23	; 35
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	be 01       	movw	r22, r28
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	83 e2       	ldi	r24, 0x23	; 35
     5e0:	fb 01       	movw	r30, r22
     5e2:	11 92       	st	Z+, r1
     5e4:	8a 95       	dec	r24
     5e6:	e9 f7       	brne	.-6      	; 0x5e2 <sendMachineLabel+0x1e>
     5e8:	84 e0       	ldi	r24, 0x04	; 4
     5ea:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     5ee:	ae 01       	movw	r20, r28
     5f0:	4e 5f       	subi	r20, 0xFE	; 254
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	69 81       	ldd	r22, Y+1	; 0x01
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	a3 96       	adiw	r28, 0x23	; 35
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <sendMachineDescription>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	c5 55       	subi	r28, 0x55	; 85
     61c:	d1 09       	sbc	r29, r1
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	be 01       	movw	r22, r28
     62a:	6f 5f       	subi	r22, 0xFF	; 255
     62c:	7f 4f       	sbci	r23, 0xFF	; 255
     62e:	85 e5       	ldi	r24, 0x55	; 85
     630:	fb 01       	movw	r30, r22
     632:	11 92       	st	Z+, r1
     634:	8a 95       	dec	r24
     636:	e9 f7       	brne	.-6      	; 0x632 <sendMachineDescription+0x20>
     638:	85 e0       	ldi	r24, 0x05	; 5
     63a:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     63e:	ae 01       	movw	r20, r28
     640:	4e 5f       	subi	r20, 0xFE	; 254
     642:	5f 4f       	sbci	r21, 0xFF	; 255
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	cb 5a       	subi	r28, 0xAB	; 171
     652:	df 4f       	sbci	r29, 0xFF	; 255
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <sendNumberOfOLT>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	a3 97       	sbiw	r28, 0x23	; 35
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	83 e2       	ldi	r24, 0x23	; 35
     680:	fb 01       	movw	r30, r22
     682:	11 92       	st	Z+, r1
     684:	8a 95       	dec	r24
     686:	e9 f7       	brne	.-6      	; 0x682 <sendNumberOfOLT+0x1e>
     688:	86 e0       	ldi	r24, 0x06	; 6
     68a:	0e 94 c4 01 	call	0x388	; 0x388 <constructOutgoingString>
     68e:	ae 01       	movw	r20, r28
     690:	4e 5f       	subi	r20, 0xFE	; 254
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	69 81       	ldd	r22, Y+1	; 0x01
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	a3 96       	adiw	r28, 0x23	; 35
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <extractIncomingMessage>:

	return true;
}

u8 extractIncomingMessage(char *dataBuffer)
{
     6b2:	8f 92       	push	r8
     6b4:	9f 92       	push	r9
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	cd 54       	subi	r28, 0x4D	; 77
     6ce:	d1 09       	sbc	r29, r1
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	2e 96       	adiw	r28, 0x0e	; 14
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	8e af       	std	Y+62, r24	; 0x3e
     6e0:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
     6e2:	6e 01       	movw	r12, r28
     6e4:	83 e4       	ldi	r24, 0x43	; 67
     6e6:	c8 0e       	add	r12, r24
     6e8:	d1 1c       	adc	r13, r1
     6ea:	88 e0       	ldi	r24, 0x08	; 8
     6ec:	f6 01       	movw	r30, r12
     6ee:	98 2f       	mov	r25, r24
     6f0:	11 92       	st	Z+, r1
     6f2:	9a 95       	dec	r25
     6f4:	e9 f7       	brne	.-6      	; 0x6f0 <extractIncomingMessage+0x3e>
	u8 MaclongAddr[8]  = {0};
     6f6:	5e 01       	movw	r10, r28
     6f8:	eb e3       	ldi	r30, 0x3B	; 59
     6fa:	ae 0e       	add	r10, r30
     6fc:	b1 1c       	adc	r11, r1
     6fe:	f5 01       	movw	r30, r10
     700:	11 92       	st	Z+, r1
     702:	8a 95       	dec	r24
     704:	e9 f7       	brne	.-6      	; 0x700 <extractIncomingMessage+0x4e>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	4c 01       	movw	r8, r24
     70c:	82 e3       	ldi	r24, 0x32	; 50
     70e:	f4 01       	movw	r30, r8
     710:	11 92       	st	Z+, r1
     712:	8a 95       	dec	r24
     714:	e9 f7       	brne	.-6      	; 0x710 <extractIncomingMessage+0x5e>
	u8 i = 0;
     716:	2c 96       	adiw	r28, 0x0c	; 12
     718:	1f ae       	std	Y+63, r1	; 0x3f
     71a:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;	
	u8 returnCode = OP;
     71c:	f0 90 95 08 	lds	r15, 0x0895	; 0x800895 <OP>
*******************************************************************
*************  Extract SetupString from INcomming String **********
******************************************************************* */
            
			
	if(strstr(dataBuffer, "SetupPackage") != NULL)
     720:	2e 96       	adiw	r28, 0x0e	; 14
     722:	0e ad       	ldd	r16, Y+62	; 0x3e
     724:	1f ad       	ldd	r17, Y+63	; 0x3f
     726:	2e 97       	sbiw	r28, 0x0e	; 14
     728:	6d e3       	ldi	r22, 0x3D	; 61
     72a:	73 e0       	ldi	r23, 0x03	; 3
     72c:	c8 01       	movw	r24, r16
     72e:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     732:	89 2b       	or	r24, r25
     734:	09 f4       	brne	.+2      	; 0x738 <extractIncomingMessage+0x86>
     736:	9a c0       	rjmp	.+308    	; 0x86c <extractIncomingMessage+0x1ba>
	{
		if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)
     738:	4a e4       	ldi	r20, 0x4A	; 74
     73a:	53 e0       	ldi	r21, 0x03	; 3
     73c:	6c e4       	ldi	r22, 0x4C	; 76
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	c8 01       	movw	r24, r16
     742:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
     746:	00 97       	sbiw	r24, 0x00	; 0
     748:	29 f1       	breq	.+74     	; 0x794 <extractIncomingMessage+0xe2>
		{ 
			n = asciiStringToNibble(ptr, nibbleStr);
     74a:	b4 01       	movw	r22, r8
     74c:	0e 94 88 01 	call	0x310	; 0x310 <asciiStringToNibble>
     750:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n-1, (u8*)nibbleStr); //write machine setup string to eeprom minus "number of offline transactions"
     752:	6f ef       	ldi	r22, 0xFF	; 255
     754:	68 0f       	add	r22, r24
     756:	a4 01       	movw	r20, r8
     758:	84 e2       	ldi	r24, 0x24	; 36
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
            
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];
     760:	8b a9       	ldd	r24, Y+51	; 0x33
     762:	fe 01       	movw	r30, r28
     764:	e8 0f       	add	r30, r24
     766:	f1 1d       	adc	r31, r1
     768:	80 81       	ld	r24, Z
     76a:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <ReaderSetup+0x8>
			halPutEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"            
     76e:	4f e9       	ldi	r20, 0x9F	; 159
     770:	58 e0       	ldi	r21, 0x08	; 8
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	81 e6       	ldi	r24, 0x61	; 97
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
     77c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     780:	8d 7f       	andi	r24, 0xFD	; 253
     782:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     786:	43 e9       	ldi	r20, 0x93	; 147
     788:	58 e0       	ldi	r21, 0x08	; 8
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	82 e2       	ldi	r24, 0x22	; 34
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ValidationCode from INcomming String ********
	******************************************************************* */
            
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
     794:	4a e4       	ldi	r20, 0x4A	; 74
     796:	53 e0       	ldi	r21, 0x03	; 3
     798:	6a e5       	ldi	r22, 0x5A	; 90
     79a:	73 e0       	ldi	r23, 0x03	; 3
     79c:	2e 96       	adiw	r28, 0x0e	; 14
     79e:	8e ad       	ldd	r24, Y+62	; 0x3e
     7a0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a2:	2e 97       	sbiw	r28, 0x0e	; 14
     7a4:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	91 f0       	breq	.+36     	; 0x7d0 <extractIncomingMessage+0x11e>
		{      
	
			n = asciiStringToNibble(ptr, nibbleStr);	
     7ac:	b4 01       	movw	r22, r8
     7ae:	0e 94 88 01 	call	0x310	; 0x310 <asciiStringToNibble>
     7b2:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
     7b4:	ae 01       	movw	r20, r28
     7b6:	4d 5c       	subi	r20, 0xCD	; 205
     7b8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	87 e5       	ldi	r24, 0x57	; 87
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
     7c4:	a4 01       	movw	r20, r8
     7c6:	6b a9       	ldd	r22, Y+51	; 0x33
     7c8:	88 e5       	ldi	r24, 0x58	; 88
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ReaderID from INcomming String *************
	******************************************************************* */
           
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
     7d0:	4a e4       	ldi	r20, 0x4A	; 74
     7d2:	53 e0       	ldi	r21, 0x03	; 3
     7d4:	6b e6       	ldi	r22, 0x6B	; 107
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	2e 96       	adiw	r28, 0x0e	; 14
     7da:	8e ad       	ldd	r24, Y+62	; 0x3e
     7dc:	9f ad       	ldd	r25, Y+63	; 0x3f
     7de:	2e 97       	sbiw	r28, 0x0e	; 14
     7e0:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	81 f1       	breq	.+96     	; 0x848 <extractIncomingMessage+0x196>
	{ //1

					tmp = atoi(ptr);         
     7e8:	0e 94 3c 30 	call	0x6078	; 0x6078 <atoi>
     7ec:	2c 96       	adiw	r28, 0x0c	; 12
     7ee:	3f ad       	ldd	r19, Y+63	; 0x3f
     7f0:	2c 97       	sbiw	r28, 0x0c	; 12
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
	u8 i = 0;
	u8 Nibble = 0;	
     7f2:	20 e0       	ldi	r18, 0x00	; 0
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
	{ //1

					tmp = atoi(ptr);         
	
				while (tmp> 0)
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	c9 f0       	breq	.+50     	; 0x82a <extractIncomingMessage+0x178>
     7f8:	e3 2f       	mov	r30, r19
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
							Nibble = highNibble;
						break;

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
     7fc:	ec 0d       	add	r30, r12
     7fe:	fd 1d       	adc	r31, r13
					tmp = atoi(ptr);         
	
				while (tmp> 0)
				{

					switch(Nibble)
     800:	21 30       	cpi	r18, 0x01	; 1
     802:	29 f0       	breq	.+10     	; 0x80e <extractIncomingMessage+0x15c>
					{
			
						case lowNibble:

							TemplongAddr[i] = (tmp % 16); 
     804:	28 2f       	mov	r18, r24
     806:	2f 70       	andi	r18, 0x0F	; 15
     808:	20 83       	st	Z, r18
							Nibble = highNibble;
     80a:	21 e0       	ldi	r18, 0x01	; 1
						break;
     80c:	08 c0       	rjmp	.+16     	; 0x81e <extractIncomingMessage+0x16c>

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
     80e:	40 81       	ld	r20, Z
     810:	28 2f       	mov	r18, r24
     812:	22 95       	swap	r18
     814:	20 7f       	andi	r18, 0xF0	; 240
     816:	24 2b       	or	r18, r20
     818:	20 83       	st	Z, r18
							i++;
     81a:	3f 5f       	subi	r19, 0xFF	; 255
							Nibble = lowNibble;
     81c:	20 e0       	ldi	r18, 0x00	; 0
						break;

					}
			
						tmp = tmp / 16;
     81e:	64 e0       	ldi	r22, 0x04	; 4
     820:	96 95       	lsr	r25
     822:	87 95       	ror	r24
     824:	6a 95       	dec	r22
     826:	e1 f7       	brne	.-8      	; 0x820 <extractIncomingMessage+0x16e>
     828:	e5 cf       	rjmp	.-54     	; 0x7f4 <extractIncomingMessage+0x142>
     82a:	2c 96       	adiw	r28, 0x0c	; 12
     82c:	3f af       	std	Y+63, r19	; 0x3f
     82e:	2c 97       	sbiw	r28, 0x0c	; 12
				}

					//Update Reader to eeprom in Hex format
					halPutMacAddr(TemplongAddr);
     830:	a6 01       	movw	r20, r12
     832:	68 e0       	ldi	r22, 0x08	; 8
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>

					// Verifry write opertaion
					halGetMacAddr(MaclongAddr);
     83c:	a5 01       	movw	r20, r10
     83e:	68 e0       	ldi	r22, 0x08	; 8
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>




		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
     848:	b5 01       	movw	r22, r10
     84a:	c6 01       	movw	r24, r12
     84c:	0e 94 67 31 	call	0x62ce	; 0x62ce <strcmp>
     850:	89 2b       	or	r24, r25
     852:	09 f0       	breq	.+2      	; 0x856 <extractIncomingMessage+0x1a4>
     854:	53 c1       	rjmp	.+678    	; 0xafc <extractIncomingMessage+0x44a>
				#if (DEBUG)
					Beeps(5);// Beeps 5x
				#endif
		                    

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;                                        
     856:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     85a:	8e 7f       	andi	r24, 0xFE	; 254
     85c:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     860:	43 e9       	ldi	r20, 0x93	; 147
     862:	58 e0       	ldi	r21, 0x08	; 8
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	82 e2       	ldi	r24, 0x22	; 34
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	30 c0       	rjmp	.+96     	; 0x8cc <extractIncomingMessage+0x21a>
			//appInit();
			returnCode = APP_INIT;	
		}

	}
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
     86c:	66 e7       	ldi	r22, 0x76	; 118
     86e:	73 e0       	ldi	r23, 0x03	; 3
     870:	c8 01       	movw	r24, r16
     872:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     876:	89 2b       	or	r24, r25
     878:	09 f0       	breq	.+2      	; 0x87c <extractIncomingMessage+0x1ca>
     87a:	38 c1       	rjmp	.+624    	; 0xaec <extractIncomingMessage+0x43a>
	{		
		returnCode = SETUP_REQUEST;
	}
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
     87c:	63 e8       	ldi	r22, 0x83	; 131
     87e:	73 e0       	ldi	r23, 0x03	; 3
     880:	c8 01       	movw	r24, r16
     882:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     886:	89 2b       	or	r24, r25
     888:	09 f0       	breq	.+2      	; 0x88c <extractIncomingMessage+0x1da>
     88a:	33 c1       	rjmp	.+614    	; 0xaf2 <extractIncomingMessage+0x440>
	{
		returnCode = VALIDATE_SETUP;
	}
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
     88c:	66 e9       	ldi	r22, 0x96	; 150
     88e:	73 e0       	ldi	r23, 0x03	; 3
     890:	c8 01       	movw	r24, r16
     892:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     896:	89 2b       	or	r24, r25
     898:	19 f0       	breq	.+6      	; 0x8a0 <extractIncomingMessage+0x1ee>
	{
		sendReaderFirmwareVersion();
     89a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <sendReaderFirmwareVersion>
     89e:	2e c1       	rjmp	.+604    	; 0xafc <extractIncomingMessage+0x44a>
				
	}	
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
     8a0:	69 ea       	ldi	r22, 0xA9	; 169
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	c8 01       	movw	r24, r16
     8a6:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     8aa:	89 2b       	or	r24, r25
     8ac:	a1 f0       	breq	.+40     	; 0x8d6 <extractIncomingMessage+0x224>
	{
		 unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	e1 e2       	ldi	r30, 0x21	; 33
     8b2:	f2 e0       	ldi	r31, 0x02	; 2
     8b4:	de 01       	movw	r26, r28
     8b6:	d3 96       	adiw	r26, 0x33	; 51
     8b8:	01 90       	ld	r0, Z+
     8ba:	0d 92       	st	X+, r0
     8bc:	8a 95       	dec	r24
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <extractIncomingMessage+0x206>
		 halPutEeprom(0,8,(u8*)reset_eeprom);
     8c0:	ae 01       	movw	r20, r28
     8c2:	4d 5c       	subi	r20, 0xCD	; 205
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	68 e0       	ldi	r22, 0x08	; 8
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		 
		 
		 // re-associate
		 //appInit();
		 returnCode = APP_INIT;		
     8d0:	50 e2       	ldi	r21, 0x20	; 32
     8d2:	f5 2e       	mov	r15, r21
     8d4:	13 c1       	rjmp	.+550    	; 0xafc <extractIncomingMessage+0x44a>
	}
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
     8d6:	65 eb       	ldi	r22, 0xB5	; 181
     8d8:	73 e0       	ldi	r23, 0x03	; 3
     8da:	c8 01       	movw	r24, r16
     8dc:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     8e0:	89 2b       	or	r24, r25
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <extractIncomingMessage+0x234>
     8e4:	3b c0       	rjmp	.+118    	; 0x95c <extractIncomingMessage+0x2aa>
	{


		// Store Active CHANNEL to EEPROM Address 0xFF2
		// eeprom_write(CHANNEL_ADDR, macConfig.currentChannel[0]);
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
     8e6:	42 e5       	ldi	r20, 0x52	; 82
     8e8:	5b e0       	ldi	r21, 0x0B	; 11
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	82 ef       	ldi	r24, 0xF2	; 242
     8ee:	9f e0       	ldi	r25, 0x0F	; 15
     8f0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
     8f4:	49 e4       	ldi	r20, 0x49	; 73
     8f6:	5b e0       	ldi	r21, 0x0B	; 11
     8f8:	62 e0       	ldi	r22, 0x02	; 2
     8fa:	84 ef       	ldi	r24, 0xF4	; 244
     8fc:	9f e0       	ldi	r25, 0x0F	; 15
     8fe:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
     902:	4b e4       	ldi	r20, 0x4B	; 75
     904:	5b e0       	ldi	r21, 0x0B	; 11
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	86 ef       	ldi	r24, 0xF6	; 246
     90a:	9f e0       	ldi	r25, 0x0F	; 15
     90c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>

		// Store Active DESTINATION ADDR to EEPROM Address 0xFF8
		// halPutEeprom(DESTADDR_ADDR, 2, &MdcStatus.MachineType);

		i = 0x01;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	2c 96       	adiw	r28, 0x0c	; 12
     914:	8f af       	std	Y+63, r24	; 0x3f
     916:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
     918:	ae 01       	movw	r20, r28
     91a:	45 5b       	subi	r20, 0xB5	; 181
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	80 ef       	ldi	r24, 0xF0	; 240
     922:	9f e0       	ldi	r25, 0x0F	; 15
     924:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
				
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
     928:	2e 96       	adiw	r28, 0x0e	; 14
     92a:	ee ad       	ldd	r30, Y+62	; 0x3e
     92c:	ff ad       	ldd	r31, Y+63	; 0x3f
     92e:	2e 97       	sbiw	r28, 0x0e	; 14
     930:	11 82       	std	Z+1, r1	; 0x01
     932:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
     934:	ae 01       	movw	r20, r28
     936:	44 5b       	subi	r20, 0xB4	; 180
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	8a ef       	ldi	r24, 0xFA	; 250
     93e:	9f e0       	ldi	r25, 0x0F	; 15
     940:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>

				
		// Initiate watchdog timer
		cli();
     944:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     946:	9f e0       	ldi	r25, 0x0F	; 15
     948:	88 e1       	ldi	r24, 0x18	; 24
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	a8 95       	wdr
     950:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     954:	0f be       	out	0x3f, r0	; 63
     956:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
     95a:	ff cf       	rjmp	.-2      	; 0x95a <extractIncomingMessage+0x2a8>

	}
	else if(strstr(dataBuffer, "SetD") != NULL)
     95c:	65 ec       	ldi	r22, 0xC5	; 197
     95e:	73 e0       	ldi	r23, 0x03	; 3
     960:	c8 01       	movw	r24, r16
     962:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     966:	89 2b       	or	r24, r25
     968:	51 f1       	breq	.+84     	; 0x9be <extractIncomingMessage+0x30c>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
     96a:	4a e4       	ldi	r20, 0x4A	; 74
     96c:	53 e0       	ldi	r21, 0x03	; 3
     96e:	6a ec       	ldi	r22, 0xCA	; 202
     970:	73 e0       	ldi	r23, 0x03	; 3
     972:	c8 01       	movw	r24, r16
     974:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	09 f4       	brne	.+2      	; 0x97e <extractIncomingMessage+0x2cc>
     97c:	bf c0       	rjmp	.+382    	; 0xafc <extractIncomingMessage+0x44a>
		{				
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
     97e:	fc 01       	movw	r30, r24
     980:	01 90       	ld	r0, Z+
     982:	00 20       	and	r0, r0
     984:	e9 f7       	brne	.-6      	; 0x980 <extractIncomingMessage+0x2ce>
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	8f 01       	movw	r16, r30
     98a:	08 1b       	sub	r16, r24
     98c:	19 0b       	sbc	r17, r25
     98e:	0b ab       	std	Y+51, r16	; 0x33
     990:	03 33       	cpi	r16, 0x33	; 51
     992:	08 f0       	brcs	.+2      	; 0x996 <extractIncomingMessage+0x2e4>
     994:	b3 c0       	rjmp	.+358    	; 0xafc <extractIncomingMessage+0x44a>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);				
     996:	bc 01       	movw	r22, r24
     998:	81 ea       	ldi	r24, 0xA1	; 161
     99a:	98 e0       	ldi	r25, 0x08	; 8
     99c:	0e 94 70 31 	call	0x62e0	; 0x62e0 <strcpy>
				n++;//add null terminator to string
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	60 0f       	add	r22, r16
     9a4:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
     9a6:	41 ea       	ldi	r20, 0xA1	; 161
     9a8:	58 e0       	ldi	r21, 0x08	; 8
     9aa:	87 e7       	ldi	r24, 0x77	; 119
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
     9b2:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     9b6:	8f 77       	andi	r24, 0x7F	; 127
     9b8:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
     9bc:	3a c0       	rjmp	.+116    	; 0xa32 <extractIncomingMessage+0x380>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
			}		
		}
	}	
	else if(strstr(dataBuffer, "GetD") != NULL)
     9be:	61 ed       	ldi	r22, 0xD1	; 209
     9c0:	73 e0       	ldi	r23, 0x03	; 3
     9c2:	c8 01       	movw	r24, r16
     9c4:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     9c8:	89 2b       	or	r24, r25
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <extractIncomingMessage+0x320>
	{
		sendMachineDescription();
     9cc:	0e 94 09 03 	call	0x612	; 0x612 <sendMachineDescription>
     9d0:	95 c0       	rjmp	.+298    	; 0xafc <extractIncomingMessage+0x44a>
		
	}	
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
     9d2:	66 ed       	ldi	r22, 0xD6	; 214
     9d4:	73 e0       	ldi	r23, 0x03	; 3
     9d6:	c8 01       	movw	r24, r16
     9d8:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     9dc:	89 2b       	or	r24, r25
     9de:	89 f1       	breq	.+98     	; 0xa42 <extractIncomingMessage+0x390>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
     9e0:	4a e4       	ldi	r20, 0x4A	; 74
     9e2:	53 e0       	ldi	r21, 0x03	; 3
     9e4:	66 ee       	ldi	r22, 0xE6	; 230
     9e6:	73 e0       	ldi	r23, 0x03	; 3
     9e8:	c8 01       	movw	r24, r16
     9ea:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <extractIncomingMessage+0x342>
     9f2:	84 c0       	rjmp	.+264    	; 0xafc <extractIncomingMessage+0x44a>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
     9f4:	fc 01       	movw	r30, r24
     9f6:	01 90       	ld	r0, Z+
     9f8:	00 20       	and	r0, r0
     9fa:	e9 f7       	brne	.-6      	; 0x9f6 <extractIncomingMessage+0x344>
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	8f 01       	movw	r16, r30
     a00:	08 1b       	sub	r16, r24
     a02:	19 0b       	sbc	r17, r25
     a04:	0b ab       	std	Y+51, r16	; 0x33
     a06:	0b 30       	cpi	r16, 0x0B	; 11
     a08:	08 f0       	brcs	.+2      	; 0xa0c <extractIncomingMessage+0x35a>
     a0a:	78 c0       	rjmp	.+240    	; 0xafc <extractIncomingMessage+0x44a>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
     a0c:	bc 01       	movw	r22, r24
     a0e:	84 ed       	ldi	r24, 0xD4	; 212
     a10:	98 e0       	ldi	r25, 0x08	; 8
     a12:	0e 94 70 31 	call	0x62e0	; 0x62e0 <strcpy>
				n++;//add null terminator to string
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	60 0f       	add	r22, r16
     a1a:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
     a1c:	44 ed       	ldi	r20, 0xD4	; 212
     a1e:	58 e0       	ldi	r21, 0x08	; 8
     a20:	8c e6       	ldi	r24, 0x6C	; 108
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
     a28:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <ReaderStateFlag+0x1>
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     a32:	43 e9       	ldi	r20, 0x93	; 147
     a34:	58 e0       	ldi	r21, 0x08	; 8
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	82 e2       	ldi	r24, 0x22	; 34
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
     a40:	5d c0       	rjmp	.+186    	; 0xafc <extractIncomingMessage+0x44a>
			}
			
		}
	}
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
     a42:	68 ef       	ldi	r22, 0xF8	; 248
     a44:	73 e0       	ldi	r23, 0x03	; 3
     a46:	c8 01       	movw	r24, r16
     a48:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     a4c:	89 2b       	or	r24, r25
     a4e:	19 f0       	breq	.+6      	; 0xa56 <extractIncomingMessage+0x3a4>
	{
		sendMachineLabel();			
     a50:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sendMachineLabel>
     a54:	53 c0       	rjmp	.+166    	; 0xafc <extractIncomingMessage+0x44a>
	}
	else if (strstr(dataBuffer, "GetOLT") != NULL)
     a56:	68 e0       	ldi	r22, 0x08	; 8
     a58:	74 e0       	ldi	r23, 0x04	; 4
     a5a:	c8 01       	movw	r24, r16
     a5c:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     a60:	89 2b       	or	r24, r25
     a62:	69 f0       	breq	.+26     	; 0xa7e <extractIncomingMessage+0x3cc>
	{
		sendNumberOfOLT();
     a64:	0e 94 32 03 	call	0x664	; 0x664 <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
     a68:	62 e8       	ldi	r22, 0x82	; 130
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	8c e3       	ldi	r24, 0x3C	; 60
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <macSetLongAlarm>
     a74:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <__data_end>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
     a78:	48 e2       	ldi	r20, 0x28	; 40
     a7a:	f4 2e       	mov	r15, r20
     a7c:	3f c0       	rjmp	.+126    	; 0xafc <extractIncomingMessage+0x44a>
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
     a7e:	6f e0       	ldi	r22, 0x0F	; 15
     a80:	74 e0       	ldi	r23, 0x04	; 4
     a82:	c8 01       	movw	r24, r16
     a84:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     a88:	89 2b       	or	r24, r25
     a8a:	b1 f5       	brne	.+108    	; 0xaf8 <extractIncomingMessage+0x446>
	{
		returnCode = SHOW_BALANCE_REQUEST;		
	}
	else if (strstr(dataBuffer, "faultcode") != NULL)
     a8c:	6b e1       	ldi	r22, 0x1B	; 27
     a8e:	74 e0       	ldi	r23, 0x04	; 4
     a90:	c8 01       	movw	r24, r16
     a92:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
     a96:	89 2b       	or	r24, r25
     a98:	89 f1       	breq	.+98     	; 0xafc <extractIncomingMessage+0x44a>
	{
		char errCode = 0;
     a9a:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
     a9c:	4a e4       	ldi	r20, 0x4A	; 74
     a9e:	53 e0       	ldi	r21, 0x03	; 3
     aa0:	65 e2       	ldi	r22, 0x25	; 37
     aa2:	74 e0       	ldi	r23, 0x04	; 4
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	39 f1       	breq	.+78     	; 0xafc <extractIncomingMessage+0x44a>
		{
			asciiStringToNibble(ptr, &errCode);
     aae:	be 01       	movw	r22, r28
     ab0:	6d 5c       	subi	r22, 0xCD	; 205
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	0e 94 88 01 	call	0x310	; 0x310 <asciiStringToNibble>
			
			switch(errCode)
     ab8:	8b a9       	ldd	r24, Y+51	; 0x33
     aba:	86 30       	cpi	r24, 0x06	; 6
     abc:	f9 f4       	brne	.+62     	; 0xafc <extractIncomingMessage+0x44a>
			{
				case TRANSACTION_SUCCESSFUL:
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
     abe:	f8 e2       	ldi	r31, 0x28	; 40
     ac0:	ff 12       	cpse	r15, r31
     ac2:	1c c0       	rjmp	.+56     	; 0xafc <extractIncomingMessage+0x44a>
					{
						macTimerEnd(oLTTimerId);
     ac4:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <__data_end>
     ac8:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <macTimerEnd>
						if( !sendStoredTransaction() )
     acc:	0e 94 62 07 	call	0xec4	; 0xec4 <sendStoredTransaction>
     ad0:	88 23       	and	r24, r24
     ad2:	49 f0       	breq	.+18     	; 0xae6 <extractIncomingMessage+0x434>
						{ //All stored transactions have been sent
							returnCode = IDLE;
						}
						else
						{	//set new timer while waiting for next response
							oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
     ad4:	62 e8       	ldi	r22, 0x82	; 130
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	8c e3       	ldi	r24, 0x3C	; 60
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <macSetLongAlarm>
     ae0:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <__data_end>
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <extractIncomingMessage+0x44a>
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
					{
						macTimerEnd(oLTTimerId);
						if( !sendStoredTransaction() )
						{ //All stored transactions have been sent
							returnCode = IDLE;
     ae6:	37 e2       	ldi	r19, 0x27	; 39
     ae8:	f3 2e       	mov	r15, r19
     aea:	08 c0       	rjmp	.+16     	; 0xafc <extractIncomingMessage+0x44a>
		}

	}
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
	{		
		returnCode = SETUP_REQUEST;
     aec:	2a e0       	ldi	r18, 0x0A	; 10
     aee:	f2 2e       	mov	r15, r18
     af0:	05 c0       	rjmp	.+10     	; 0xafc <extractIncomingMessage+0x44a>
	}
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
	{
		returnCode = VALIDATE_SETUP;
     af2:	94 e1       	ldi	r25, 0x14	; 20
     af4:	f9 2e       	mov	r15, r25
     af6:	02 c0       	rjmp	.+4      	; 0xafc <extractIncomingMessage+0x44a>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
	{
		returnCode = SHOW_BALANCE_REQUEST;		
     af8:	8f e1       	ldi	r24, 0x1F	; 31
     afa:	f8 2e       	mov	r15, r24
	}
	


	return returnCode;
}
     afc:	8f 2d       	mov	r24, r15
     afe:	c3 5b       	subi	r28, 0xB3	; 179
     b00:	df 4f       	sbci	r29, 0xFF	; 255
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	08 95       	ret

00000b24 <sendCCTransaction>:

bool sendCCTransaction(structTransaction *transRecord)
{
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	ca 58       	subi	r28, 0x8A	; 138
     b36:	d1 09       	sbc	r29, r1
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
     b44:	7e 01       	movw	r14, r28
     b46:	81 e8       	ldi	r24, 0x81	; 129
     b48:	e8 0e       	add	r14, r24
     b4a:	f1 1c       	adc	r15, r1
     b4c:	8a e0       	ldi	r24, 0x0A	; 10
     b4e:	d7 01       	movw	r26, r14
     b50:	1d 92       	st	X+, r1
     b52:	8a 95       	dec	r24
     b54:	e9 f7       	brne	.-6      	; 0xb50 <sendCCTransaction+0x2c>
	char tempStr[128] = {0};
     b56:	fe 01       	movw	r30, r28
     b58:	31 96       	adiw	r30, 0x01	; 1
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	df 01       	movw	r26, r30
     b5e:	1d 92       	st	X+, r1
     b60:	8a 95       	dec	r24
     b62:	e9 f7       	brne	.-6      	; 0xb5e <sendCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
     b64:	f8 01       	movw	r30, r16
     b66:	61 85       	ldd	r22, Z+9	; 0x09
     b68:	72 85       	ldd	r23, Z+10	; 0x0a
     b6a:	83 85       	ldd	r24, Z+11	; 0x0b
     b6c:	94 85       	ldd	r25, Z+12	; 0x0c
     b6e:	2a e0       	ldi	r18, 0x0A	; 10
     b70:	a7 01       	movw	r20, r14
     b72:	0e 94 b3 31 	call	0x6366	; 0x6366 <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
     b76:	d8 01       	movw	r26, r16
     b78:	54 96       	adiw	r26, 0x14	; 20
     b7a:	8c 91       	ld	r24, X
     b7c:	54 97       	sbiw	r26, 0x14	; 20
     b7e:	1f 92       	push	r1
     b80:	8f 93       	push	r24
     b82:	13 96       	adiw	r26, 0x03	; 3
     b84:	8c 91       	ld	r24, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	1f 92       	push	r1
     b8a:	8f 93       	push	r24
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	8c 91       	ld	r24, X
     b90:	12 97       	sbiw	r26, 0x02	; 2
     b92:	1f 92       	push	r1
     b94:	8f 93       	push	r24
     b96:	15 96       	adiw	r26, 0x05	; 5
     b98:	8c 91       	ld	r24, X
     b9a:	15 97       	sbiw	r26, 0x05	; 5
     b9c:	8f 93       	push	r24
     b9e:	14 96       	adiw	r26, 0x04	; 4
     ba0:	8c 91       	ld	r24, X
     ba2:	14 97       	sbiw	r26, 0x04	; 4
     ba4:	8f 93       	push	r24
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	8c 91       	ld	r24, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	8f 93       	push	r24
     bae:	8c 91       	ld	r24, X
     bb0:	8f 93       	push	r24
     bb2:	17 96       	adiw	r26, 0x07	; 7
     bb4:	6d 91       	ld	r22, X+
     bb6:	7c 91       	ld	r23, X
     bb8:	18 97       	sbiw	r26, 0x08	; 8
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	48 ec       	ldi	r20, 0xC8	; 200
     bc8:	52 e4       	ldi	r21, 0x42	; 66
     bca:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__divsf3>
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	7f 93       	push	r23
     bd4:	6f 93       	push	r22
     bd6:	ff 92       	push	r15
     bd8:	ef 92       	push	r14
     bda:	81 e3       	ldi	r24, 0x31	; 49
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	8e 01       	movw	r16, r28
     be4:	0e 5f       	subi	r16, 0xFE	; 254
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	1f 93       	push	r17
     bea:	0f 93       	push	r16
     bec:	0e 94 0d 32 	call	0x641a	; 0x641a <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
     bf0:	f8 01       	movw	r30, r16
     bf2:	01 90       	ld	r0, Z+
     bf4:	00 20       	and	r0, r0
     bf6:	e9 f7       	brne	.-6      	; 0xbf2 <sendCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
     bf8:	6e 2f       	mov	r22, r30
     bfa:	60 1b       	sub	r22, r16
     bfc:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	67 fd       	sbrc	r22, 7
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <sendCCTransaction+0xf6>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
     c0c:	a8 01       	movw	r20, r16
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
	
	return true;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <sendCCTransaction+0xf8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
	
	return true;
}
     c1c:	c6 57       	subi	r28, 0x76	; 118
     c1e:	df 4f       	sbci	r29, 0xFF	; 255
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	08 95       	ret

00000c38 <displayMsg>:
Led1 to led4 are limited to values defined in "display.h"
***********************************************************************************************
*/

void displayMsg( u8 msg ) 
{
     c38:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	19 f4       	brne	.+6      	; 0xc44 <displayMsg+0xc>
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}

}
     c3e:	0f 91       	pop	r16

void displayMsg( u8 msg ) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
     c40:	0c 94 45 0c 	jmp	0x188a	; 0x188a <displaySQCardError>
	}
	else if (msg == SETUP_MSG)
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	29 f4       	brne	.+10     	; 0xc52 <displayMsg+0x1a>
	{
		sendSQDisplayCommand(LED_BLANK,LED_S,LED_U,LED_BLANK,5);
     c48:	05 e0       	ldi	r16, 0x05	; 5
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	4c e7       	ldi	r20, 0x7C	; 124
     c4e:	6a ed       	ldi	r22, 0xDA	; 218
     c50:	16 c0       	rjmp	.+44     	; 0xc7e <displayMsg+0x46>
	}
	else if (msg == BUSY_MSG)
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	31 f4       	brne	.+12     	; 0xc62 <displayMsg+0x2a>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y, 5);
     c56:	05 e0       	ldi	r16, 0x05	; 5
     c58:	2c ed       	ldi	r18, 0xDC	; 220
     c5a:	4a ed       	ldi	r20, 0xDA	; 218
     c5c:	6c e7       	ldi	r22, 0x7C	; 124
     c5e:	88 ef       	ldi	r24, 0xF8	; 248
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <displayMsg+0x48>
	}
	else if (msg == SERVICE_MSG)
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	31 f4       	brne	.+12     	; 0xc72 <displayMsg+0x3a>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,5);
     c66:	05 e0       	ldi	r16, 0x05	; 5
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	40 ea       	ldi	r20, 0xA0	; 160
     c6c:	62 ef       	ldi	r22, 0xF2	; 242
     c6e:	8a ed       	ldi	r24, 0xDA	; 218
     c70:	07 c0       	rjmp	.+14     	; 0xc80 <displayMsg+0x48>
	}
	else if (msg == BLANK_MSG)
     c72:	85 30       	cpi	r24, 0x05	; 5
     c74:	39 f4       	brne	.+14     	; 0xc84 <displayMsg+0x4c>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
     c76:	00 e0       	ldi	r16, 0x00	; 0
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 06 0c 	call	0x180c	; 0x180c <sendSQDisplayCommand>
	}

}
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <displayVersion>:

*/

void displayVersion(void)
{	
	displaySQReaderVersion();
     c88:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <displaySQReaderVersion>

00000c8c <initReader>:
*
*/
void initReader(void)
{

halGetEeprom(READER_STATE_ADDR, READER_STATE_FLAG_SIZE, (u8*)&ReaderStateFlag); 
     c8c:	43 e9       	ldi	r20, 0x93	; 147
     c8e:	58 e0       	ldi	r21, 0x08	; 8
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	82 e2       	ldi	r24, 0x22	; 34
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
halGetEeprom(MACHINE_TYPE_ADDR, MACHINE_TYPE_SIZE, (u8*)&deviceStatus.deviceType);
     c9a:	40 ea       	ldi	r20, 0xA0	; 160
     c9c:	59 e0       	ldi	r21, 0x09	; 9
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	8e e1       	ldi	r24, 0x1E	; 30
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
	
ReaderSetup.customerId = 0;
     ca8:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <ReaderSetup>
     cac:	10 92 98 08 	sts	0x0898, r1	; 0x800898 <ReaderSetup+0x1>
     cb0:	10 92 99 08 	sts	0x0899, r1	; 0x800899 <ReaderSetup+0x2>
     cb4:	10 92 9a 08 	sts	0x089A, r1	; 0x80089a <ReaderSetup+0x3>
ReaderSetup.manufacturerId = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	90 93 9c 08 	sts	0x089C, r25	; 0x80089c <ReaderSetup+0x5>
     cc0:	80 93 9b 08 	sts	0x089B, r24	; 0x80089b <ReaderSetup+0x4>
ReaderSetup.locationId = 1;
     cc4:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <ReaderSetup+0x7>
     cc8:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <ReaderSetup+0x6>
//ReaderSetup.MaxOfflineTransaction = MAX_NUM_OFFLINE_TRANS; // to become variable once setup is done.
ReaderStateFlag.Busy = false;
     ccc:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     cd0:	8f 7b       	andi	r24, 0xBF	; 191
     cd2:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
//check setup status then set reader state flag
	
#if (DEVICE_CONNECTED == MDC_MACHINE)
	//Init machine variables

	if (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE)
     cd6:	81 fd       	sbrc	r24, 1
     cd8:	47 c0       	rjmp	.+142    	; 0xd68 <initReader+0xdc>
	{
        //a valid reader ID has been detected. check for valid setup
        getSQSetupData();  
     cda:	0e 94 c3 07 	call	0xf86	; 0xf86 <getSQSetupData>
		ReaderStateFlag.ValidateSetup = VALIDATE_READER_SETUP;
     cde:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
		halGetEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction);
     ce8:	4f e9       	ldi	r20, 0x9F	; 159
     cea:	58 e0       	ldi	r21, 0x08	; 8
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	81 e6       	ldi	r24, 0x61	; 97
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
		if (ReaderSetup.maxOfflineTransaction)
     cf6:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <ReaderSetup+0x8>
     cfa:	88 23       	and	r24, r24
     cfc:	c9 f0       	breq	.+50     	; 0xd30 <initReader+0xa4>
		{
			ReaderStateFlag.EnableOfflineTransaction = true;
     cfe:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     d02:	88 60       	ori	r24, 0x08	; 8
     d04:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     d08:	40 ea       	ldi	r20, 0xA0	; 160
     d0a:	58 e0       	ldi	r21, 0x08	; 8
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
     d16:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     d1a:	8f 3f       	cpi	r24, 0xFF	; 255
     d1c:	49 f4       	brne	.+18     	; 0xd30 <initReader+0xa4>
			{
				ReaderSetup.numOfSavedTransactions = 0;
     d1e:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <ReaderSetup+0x9>
				halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     d22:	40 ea       	ldi	r20, 0xA0	; 160
     d24:	58 e0       	ldi	r21, 0x08	; 8
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
			}
			 
		}
		//clear buffers
		memset(ReaderSetup.machineLabel,0,MACHINE_LABEL_SIZE+1);
     d30:	8b e0       	ldi	r24, 0x0B	; 11
     d32:	e4 ed       	ldi	r30, 0xD4	; 212
     d34:	f8 e0       	ldi	r31, 0x08	; 8
     d36:	df 01       	movw	r26, r30
     d38:	1d 92       	st	X+, r1
     d3a:	8a 95       	dec	r24
     d3c:	e9 f7       	brne	.-6      	; 0xd38 <initReader+0xac>
		memset(ReaderSetup.machineDescription,0,MACHINE_NAME_SIZE+1);
     d3e:	83 e3       	ldi	r24, 0x33	; 51
     d40:	e1 ea       	ldi	r30, 0xA1	; 161
     d42:	f8 e0       	ldi	r31, 0x08	; 8
     d44:	df 01       	movw	r26, r30
     d46:	1d 92       	st	X+, r1
     d48:	8a 95       	dec	r24
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <initReader+0xba>
		halGetEeprom(MACHINE_LABEL_ADDR, MACHINE_LABEL_SIZE, (u8*)&ReaderSetup.machineLabel);
     d4c:	44 ed       	ldi	r20, 0xD4	; 212
     d4e:	58 e0       	ldi	r21, 0x08	; 8
     d50:	6a e0       	ldi	r22, 0x0A	; 10
     d52:	8c e6       	ldi	r24, 0x6C	; 108
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
		halGetEeprom(MACHINE_DESCRIPTION_ADDR, MACHINE_NAME_SIZE, (u8*)&ReaderSetup.machineDescription);
     d5a:	41 ea       	ldi	r20, 0xA1	; 161
     d5c:	58 e0       	ldi	r21, 0x08	; 8
     d5e:	62 e3       	ldi	r22, 0x32	; 50
     d60:	87 e7       	ldi	r24, 0x77	; 119
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <halGetEeprom>
	}
	else{
		SetDefaultMachineSetup();
     d68:	0c 94 07 20 	jmp	0x400e	; 0x400e <SetDefaultMachineSetup>

00000d6c <storeOfflineTransaction>:
Store transactions,that occur when server is off line, in EEPROM.
*/

#if(DEVICE_CONNECTED == MDC_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	67 97       	sbiw	r28, 0x17	; 23
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
	u8 addr[2];
	u16 temp;
	structTransaction OfflineTransaction;
	
	temp  = (u16)OFFLINE_TRANSACTION_ADDR_START;
	addr[1] = temp >> 8;
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	2f 8b       	std	Y+23, r18	; 0x17
	addr[0] = temp;
     d84:	38 e1       	ldi	r19, 0x18	; 24
     d86:	3e 8b       	std	Y+22, r19	; 0x16
	
	OfflineTransaction.CardId		= cardNum;	
     d88:	6a 87       	std	Y+10, r22	; 0x0a
     d8a:	7b 87       	std	Y+11, r23	; 0x0b
     d8c:	8c 87       	std	Y+12, r24	; 0x0c
     d8e:	9d 87       	std	Y+13, r25	; 0x0d
	OfflineTransaction.LocationId	= ReaderSetup.locationId;	
     d90:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <ReaderSetup+0x6>
     d94:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <ReaderSetup+0x7>
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
	OfflineTransaction.MachineId[0] = MdcStatus.MachineType[0];
     d9c:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <MdcStatus>
     da0:	8b 83       	std	Y+3, r24	; 0x03
	OfflineTransaction.MachineId[1] = MdcStatus.MachineType[1];
     da2:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
     da6:	8c 83       	std	Y+4, r24	; 0x04
	OfflineTransaction.CycleType	= MdcStatus.CycleType;
     da8:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <MdcStatus+0x4>
     dac:	8f 83       	std	Y+7, r24	; 0x07
	
	OfflineTransaction.ManufactureId = ReaderSetup.manufacturerId;
     dae:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <ReaderSetup+0x4>
     db2:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <ReaderSetup+0x5>
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
	OfflineTransaction.vendPrice = MachineSetupData.VendPrice[0];
	OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | MachineSetupData.VendPrice[1];
     dba:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	99 87       	std	Y+9, r25	; 0x09
     dc2:	88 87       	std	Y+8, r24	; 0x08
	
	OfflineTransaction.Date[0] = 0x00;
     dc4:	1e 86       	std	Y+14, r1	; 0x0e
	OfflineTransaction.Date[1] = 0x00;
     dc6:	1f 86       	std	Y+15, r1	; 0x0f
	OfflineTransaction.Date[2] = 0x00;
     dc8:	18 8a       	std	Y+16, r1	; 0x10
	OfflineTransaction.Date[3] = 0x00;
     dca:	19 8a       	std	Y+17, r1	; 0x11
	
	OfflineTransaction.Time[0] = 0x00;	
     dcc:	1a 8a       	std	Y+18, r1	; 0x12
	OfflineTransaction.Time[1] = 0x00;	
     dce:	1b 8a       	std	Y+19, r1	; 0x13
	OfflineTransaction.Time[2] = 0x00;
     dd0:	1c 8a       	std	Y+20, r1	; 0x14
	
	OfflineTransaction.isOffline = true;
     dd2:	2d 8b       	std	Y+21, r18	; 0x15
	//get number of stored records
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     dd4:	40 ea       	ldi	r20, 0xA0	; 160
     dd6:	58 e0       	ldi	r21, 0x08	; 8
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
	//store structure in the next EEPROM record address
	if ((ReaderSetup.numOfSavedTransactions == 0xff) || (ReaderSetup.numOfSavedTransactions < ReaderSetup.maxOfflineTransaction))
     de2:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	29 f0       	breq	.+10     	; 0xdf4 <storeOfflineTransaction+0x88>
     dea:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <ReaderSetup+0x8>
     dee:	89 17       	cp	r24, r25
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <storeOfflineTransaction+0x88>
     df2:	48 c0       	rjmp	.+144    	; 0xe84 <storeOfflineTransaction+0x118>
	{	
		if (ReaderSetup.numOfSavedTransactions == 0xff || ReaderSetup.numOfSavedTransactions == 0x00)
     df4:	81 50       	subi	r24, 0x01	; 1
     df6:	8e 3f       	cpi	r24, 0xFE	; 254
     df8:	50 f0       	brcs	.+20     	; 0xe0e <storeOfflineTransaction+0xa2>
		{
			ReaderSetup.numOfSavedTransactions = 0;
     dfa:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <ReaderSetup+0x9>
			//halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR,1, &num_of_trans);
			//store first transaction records address.
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);
     dfe:	ae 01       	movw	r20, r28
     e00:	4a 5e       	subi	r20, 0xEA	; 234
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	62 e0       	ldi	r22, 0x02	; 2
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
/*		else{
			//start at end of existing records
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);  
		}	*/		
					
		halPutEeprom((u8*)(OFFLINE_TRANSACTION_ADDR_START + (ReaderSetup.numOfSavedTransactions * OFFLINE_TRANSACTION_NUM_BYTE)), OFFLINE_TRANSACTION_NUM_BYTE, (u8*)&OfflineTransaction);
     e0e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     e12:	25 e1       	ldi	r18, 0x15	; 21
     e14:	82 9f       	mul	r24, r18
     e16:	c0 01       	movw	r24, r0
     e18:	11 24       	eor	r1, r1
     e1a:	ae 01       	movw	r20, r28
     e1c:	4f 5f       	subi	r20, 0xFF	; 255
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	65 e1       	ldi	r22, 0x15	; 21
     e22:	88 5e       	subi	r24, 0xE8	; 232
     e24:	9e 4f       	sbci	r25, 0xFE	; 254
     e26:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		ReaderSetup.numOfSavedTransactions++;
     e2a:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <ReaderSetup+0x9>
		halPutEeprom((u8*)OFFLINE_TRANSACTION_RECORD_ADDR,1,&ReaderSetup.numOfSavedTransactions);
     e34:	40 ea       	ldi	r20, 0xA0	; 160
     e36:	58 e0       	ldi	r21, 0x08	; 8
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		if(ReaderStateFlag.OfflineTransactionExist == false)
     e42:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     e46:	85 fd       	sbrc	r24, 5
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <storeOfflineTransaction+0xf2>
		{
			ReaderStateFlag.OfflineTransactionExist = true;
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);	
     e50:	43 e9       	ldi	r20, 0x93	; 147
     e52:	58 e0       	ldi	r21, 0x08	; 8
     e54:	62 e0       	ldi	r22, 0x02	; 2
     e56:	82 e2       	ldi	r24, 0x22	; 34
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		}
		if (ReaderSetup.numOfSavedTransactions == ReaderSetup.maxOfflineTransaction)
     e5e:	90 91 a0 08 	lds	r25, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     e62:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <ReaderSetup+0x8>
     e66:	98 13       	cpse	r25, r24
     e68:	23 c0       	rjmp	.+70     	; 0xeb0 <storeOfflineTransaction+0x144>
		{
			ReaderStateFlag.MaxNumTransReached = true;
     e6a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);
     e74:	43 e9       	ldi	r20, 0x93	; 147
     e76:	58 e0       	ldi	r21, 0x08	; 8
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	82 e2       	ldi	r24, 0x22	; 34
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <storeOfflineTransaction+0x144>
		}
	}
	else if(ReaderSetup.numOfSavedTransactions >= ReaderSetup.maxOfflineTransaction){
		halGetEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
     e84:	43 e9       	ldi	r20, 0x93	; 147
     e86:	58 e0       	ldi	r21, 0x08	; 8
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	82 e2       	ldi	r24, 0x22	; 34
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
		ReaderStateFlag.EnableOfflineTransaction = false; // stop conducting off line transaction, EEPROM is full.
     e92:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = true;
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	80 61       	ori	r24, 0x10	; 16
     e9a:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     e9e:	43 e9       	ldi	r20, 0x93	; 147
     ea0:	58 e0       	ldi	r21, 0x08	; 8
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	82 e2       	ldi	r24, 0x22	; 34
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		return_code = 0;
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <storeOfflineTransaction+0x146>
*/

#if(DEVICE_CONNECTED == MDC_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
	u8 return_code = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
		ReaderStateFlag.MaxNumTransReached = true;
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
		return_code = 0;
	}
	return return_code;	
}
     eb2:	67 96       	adiw	r28, 0x17	; 23
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <sendStoredTransaction>:

u8 sendStoredTransaction(void)
{	
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	67 97       	sbiw	r28, 0x17	; 23
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
	//get total number of stored off line transactions from EEPROM.
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     ed8:	40 ea       	ldi	r20, 0xA0	; 160
     eda:	58 e0       	ldi	r21, 0x08	; 8
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
	
	//build buffer of transactions to be transmitted.
	if (ReaderSetup.numOfSavedTransactions > 0 && ReaderSetup.numOfSavedTransactions < 0xFF) // valid number of transactions stored, prepare to send to BOW
     ee6:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	8e 3f       	cpi	r24, 0xFE	; 254
     eee:	78 f5       	brcc	.+94     	; 0xf4e <sendStoredTransaction+0x8a>
		structTransaction record;
		u16 addr;
		
		//send data to BOW

		halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);		
     ef0:	ae 01       	movw	r20, r28
     ef2:	4a 5e       	subi	r20, 0xEA	; 234
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	62 e0       	ldi	r22, 0x02	; 2
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
		halGetEeprom((void*)addr,OFFLINE_TRANSACTION_NUM_BYTE,(u8*)&record); // get transaction record
     f00:	ae 01       	movw	r20, r28
     f02:	4f 5f       	subi	r20, 0xFF	; 255
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	65 e1       	ldi	r22, 0x15	; 21
     f08:	8e 89       	ldd	r24, Y+22	; 0x16
     f0a:	9f 89       	ldd	r25, Y+23	; 0x17
     f0c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
			
		if( sendCCTransaction(&record) )
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	0e 94 92 05 	call	0xb24	; 0xb24 <sendCCTransaction>
     f18:	88 23       	and	r24, r24
     f1a:	c9 f0       	breq	.+50     	; 0xf4e <sendStoredTransaction+0x8a>
		{//update current record address
			addr = addr + OFFLINE_TRANSACTION_NUM_BYTE;
     f1c:	8e 89       	ldd	r24, Y+22	; 0x16
     f1e:	9f 89       	ldd	r25, Y+23	; 0x17
     f20:	45 96       	adiw	r24, 0x15	; 21
     f22:	9f 8b       	std	Y+23, r25	; 0x17
     f24:	8e 8b       	std	Y+22, r24	; 0x16
			
			ReaderSetup.numOfSavedTransactions--;
     f26:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     f2a:	81 50       	subi	r24, 0x01	; 1
     f2c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <ReaderSetup+0x9>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);
     f30:	ae 01       	movw	r20, r28
     f32:	4a 5e       	subi	r20, 0xEA	; 234
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	62 e0       	ldi	r22, 0x02	; 2
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
     f40:	40 ea       	ldi	r20, 0xA0	; 160
     f42:	58 e0       	ldi	r21, 0x08	; 8
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
		}
	}
	if (ReaderSetup.numOfSavedTransactions == 0)
     f4e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     f52:	81 11       	cpse	r24, r1
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <sendStoredTransaction+0xac>
	{
		ReaderStateFlag.OfflineTransactionExist = false;
     f56:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = false;
     f5a:	8f 7d       	andi	r24, 0xDF	; 223
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     f62:	43 e9       	ldi	r20, 0x93	; 147
     f64:	58 e0       	ldi	r21, 0x08	; 8
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	82 e2       	ldi	r24, 0x22	; 34
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
	}
	
	return ReaderSetup.numOfSavedTransactions;
}
     f70:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <ReaderSetup+0x9>
     f74:	67 96       	adiw	r28, 0x17	; 23
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <getSQSetupData>:
	temp[0] = AUDIO_BEEP_REQUEST_SIZE;
	temp[1] = AUDIO_BEEP_REQUEST;
	temp[2] = beepLength;
	
	return (sendSQData(temp) );		
}
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	e2 97       	sbiw	r28, 0x32	; 50
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	ae 01       	movw	r20, r28
     fa0:	4f 5f       	subi	r20, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	82 e3       	ldi	r24, 0x32	; 50
     fa6:	fa 01       	movw	r30, r20
     fa8:	11 92       	st	Z+, r1
     faa:	8a 95       	dec	r24
     fac:	e9 f7       	brne	.-6      	; 0xfa8 <getSQSetupData+0x22>
     fae:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
     fb2:	9f ed       	ldi	r25, 0xDF	; 223
     fb4:	98 0f       	add	r25, r24
     fb6:	92 30       	cpi	r25, 0x02	; 2
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <getSQSetupData+0x3a>
     fba:	84 32       	cpi	r24, 0x24	; 36
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <getSQSetupData+0x3a>
     fbe:	d1 c0       	rjmp	.+418    	; 0x1162 <getSQSetupData+0x1dc>
     fc0:	60 e1       	ldi	r22, 0x10	; 16
     fc2:	84 e2       	ldi	r24, 0x24	; 36
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
     fca:	0a 81       	ldd	r16, Y+2	; 0x02
     fcc:	1b 81       	ldd	r17, Y+3	; 0x03
     fce:	60 2f       	mov	r22, r16
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	76 2f       	mov	r23, r22
     fd4:	66 27       	eor	r22, r22
     fd6:	61 0f       	add	r22, r17
     fd8:	71 1d       	adc	r23, r1
     fda:	07 2e       	mov	r0, r23
     fdc:	00 0c       	add	r0, r0
     fde:	88 0b       	sbc	r24, r24
     fe0:	99 0b       	sbc	r25, r25
     fe2:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 ec       	ldi	r20, 0xC8	; 200
     fec:	52 e4       	ldi	r21, 0x42	; 66
     fee:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__divsf3>
     ff2:	60 93 ce 0b 	sts	0x0BCE, r22	; 0x800bce <vendPrice>
     ff6:	70 93 cf 0b 	sts	0x0BCF, r23	; 0x800bcf <vendPrice+0x1>
     ffa:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <vendPrice+0x2>
     ffe:	90 93 d1 0b 	sts	0x0BD1, r25	; 0x800bd1 <vendPrice+0x3>
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <MachineSetupData>
    1008:	00 93 ce 09 	sts	0x09CE, r16	; 0x8009ce <MachineSetupData+0x4>
    100c:	10 93 cf 09 	sts	0x09CF, r17	; 0x8009cf <MachineSetupData+0x5>
    1010:	10 92 f5 09 	sts	0x09F5, r1	; 0x8009f5 <MachineSetupData+0x2b>
    1014:	39 e1       	ldi	r19, 0x19	; 25
    1016:	30 93 f6 09 	sts	0x09F6, r19	; 0x8009f6 <MachineSetupData+0x2c>
    101a:	10 92 f7 09 	sts	0x09F7, r1	; 0x8009f7 <MachineSetupData+0x2d>
    101e:	84 e6       	ldi	r24, 0x64	; 100
    1020:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <MachineSetupData+0x2e>
    1024:	9c 85       	ldd	r25, Y+12	; 0x0c
    1026:	90 93 f9 09 	sts	0x09F9, r25	; 0x8009f9 <MachineSetupData+0x2f>
    102a:	9d 85       	ldd	r25, Y+13	; 0x0d
    102c:	90 93 fa 09 	sts	0x09FA, r25	; 0x8009fa <MachineSetupData+0x30>
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <MachineSetupData+0x31>
    1036:	9f 85       	ldd	r25, Y+15	; 0x0f
    1038:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <MachineSetupData+0x32>
    103c:	28 89       	ldd	r18, Y+16	; 0x10
    103e:	20 93 fd 09 	sts	0x09FD, r18	; 0x8009fd <MachineSetupData+0x33>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	20 93 05 0a 	sts	0x0A05, r18	; 0x800a05 <MachineSetupData+0x3b>
    1048:	2d 81       	ldd	r18, Y+5	; 0x05
    104a:	20 93 06 0a 	sts	0x0A06, r18	; 0x800a06 <MachineSetupData+0x3c>
    104e:	20 91 a1 09 	lds	r18, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	09 f0       	breq	.+2      	; 0x1058 <getSQSetupData+0xd2>
    1056:	02 c1       	rjmp	.+516    	; 0x125c <getSQSetupData+0x2d6>
    1058:	10 92 d0 09 	sts	0x09D0, r1	; 0x8009d0 <MachineSetupData+0x6>
    105c:	80 93 d1 09 	sts	0x09D1, r24	; 0x8009d1 <MachineSetupData+0x7>
    1060:	10 92 d2 09 	sts	0x09D2, r1	; 0x8009d2 <MachineSetupData+0x8>
    1064:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <MachineSetupData+0x9>
    1068:	10 92 d4 09 	sts	0x09D4, r1	; 0x8009d4 <MachineSetupData+0xa>
    106c:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <MachineSetupData+0xb>
    1070:	10 92 d6 09 	sts	0x09D6, r1	; 0x8009d6 <MachineSetupData+0xc>
    1074:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <MachineSetupData+0xd>
    1078:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <MachineSetupData+0xe>
    107c:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <MachineSetupData+0xf>
    1080:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <MachineSetupData+0x10>
    1084:	80 93 db 09 	sts	0x09DB, r24	; 0x8009db <MachineSetupData+0x11>
    1088:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <MachineSetupData+0x12>
    108c:	80 93 dd 09 	sts	0x09DD, r24	; 0x8009dd <MachineSetupData+0x13>
    1090:	10 92 de 09 	sts	0x09DE, r1	; 0x8009de <MachineSetupData+0x14>
    1094:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <MachineSetupData+0x15>
    1098:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
    109c:	81 32       	cpi	r24, 0x21	; 33
    109e:	59 f5       	brne	.+86     	; 0x10f6 <getSQSetupData+0x170>
    10a0:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <MachineSetupData+0x16>
    10a4:	30 93 e1 09 	sts	0x09E1, r19	; 0x8009e1 <MachineSetupData+0x17>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <MachineSetupData+0x18>
    10ae:	8a e0       	ldi	r24, 0x0A	; 10
    10b0:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <MachineSetupData+0x1a>
    10b4:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <MachineSetupData+0x1b>
    10b8:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <MachineSetupData+0x19>
    10bc:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <MachineSetupData+0x1f>
    10c0:	24 e0       	ldi	r18, 0x04	; 4
    10c2:	20 93 ea 09 	sts	0x09EA, r18	; 0x8009ea <MachineSetupData+0x20>
    10c6:	10 92 eb 09 	sts	0x09EB, r1	; 0x8009eb <MachineSetupData+0x21>
    10ca:	37 e0       	ldi	r19, 0x07	; 7
    10cc:	30 93 ec 09 	sts	0x09EC, r19	; 0x8009ec <MachineSetupData+0x22>
    10d0:	80 93 ed 09 	sts	0x09ED, r24	; 0x8009ed <MachineSetupData+0x23>
    10d4:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <MachineSetupData+0x24>
    10d8:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <MachineSetupData+0x25>
    10dc:	36 e0       	ldi	r19, 0x06	; 6
    10de:	30 93 f0 09 	sts	0x09F0, r19	; 0x8009f0 <MachineSetupData+0x26>
    10e2:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <MachineSetupData+0x27>
    10e6:	20 93 f2 09 	sts	0x09F2, r18	; 0x8009f2 <MachineSetupData+0x28>
    10ea:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <MachineSetupData+0x29>
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <MachineSetupData+0x2a>
    10f4:	2a c0       	rjmp	.+84     	; 0x114a <getSQSetupData+0x1c4>
    10f6:	82 32       	cpi	r24, 0x22	; 34
    10f8:	89 f4       	brne	.+34     	; 0x111c <getSQSetupData+0x196>
    10fa:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <MachineSetupData+0x16>
    10fe:	82 e3       	ldi	r24, 0x32	; 50
    1100:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <MachineSetupData+0x17>
    1104:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <MachineSetupData+0x1c>
    1108:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <MachineSetupData+0x1d>
    110c:	20 93 e8 09 	sts	0x09E8, r18	; 0x8009e8 <MachineSetupData+0x1e>
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <MachineSetupData+0x18>
    1116:	20 93 0d 0a 	sts	0x0A0D, r18	; 0x800a0d <MachineSetupData+0x43>
    111a:	17 c0       	rjmp	.+46     	; 0x114a <getSQSetupData+0x1c4>
    111c:	84 32       	cpi	r24, 0x24	; 36
    111e:	a9 f4       	brne	.+42     	; 0x114a <getSQSetupData+0x1c4>
    1120:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <MachineSetupData+0x16>
    1124:	82 e3       	ldi	r24, 0x32	; 50
    1126:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <MachineSetupData+0x17>
    112a:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <MachineSetupData+0x1c>
    112e:	30 93 e7 09 	sts	0x09E7, r19	; 0x8009e7 <MachineSetupData+0x1d>
    1132:	20 93 e8 09 	sts	0x09E8, r18	; 0x8009e8 <MachineSetupData+0x1e>
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <MachineSetupData+0x18>
    113c:	20 93 e9 09 	sts	0x09E9, r18	; 0x8009e9 <MachineSetupData+0x1f>
    1140:	84 e0       	ldi	r24, 0x04	; 4
    1142:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <MachineSetupData+0x20>
    1146:	10 92 eb 09 	sts	0x09EB, r1	; 0x8009eb <MachineSetupData+0x21>
    114a:	93 ff       	sbrs	r25, 3
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <getSQSetupData+0x1d0>
    114e:	8d e1       	ldi	r24, 0x1D	; 29
    1150:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <MachineSetupData+0x41>
    1154:	02 c0       	rjmp	.+4      	; 0x115a <getSQSetupData+0x1d4>
    1156:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <MachineSetupData+0x41>
    115a:	90 72       	andi	r25, 0x20	; 32
    115c:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <MachineSetupData+0x42>
    1160:	7d c0       	rjmp	.+250    	; 0x125c <getSQSetupData+0x2d6>
    1162:	88 52       	subi	r24, 0x28	; 40
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	08 f0       	brcs	.+2      	; 0x116a <getSQSetupData+0x1e4>
    1168:	79 c0       	rjmp	.+242    	; 0x125c <getSQSetupData+0x2d6>
    116a:	62 e1       	ldi	r22, 0x12	; 18
    116c:	84 e2       	ldi	r24, 0x24	; 36
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
    1174:	0a 81       	ldd	r16, Y+2	; 0x02
    1176:	1b 81       	ldd	r17, Y+3	; 0x03
    1178:	60 2f       	mov	r22, r16
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	76 2f       	mov	r23, r22
    117e:	66 27       	eor	r22, r22
    1180:	61 0f       	add	r22, r17
    1182:	71 1d       	adc	r23, r1
    1184:	07 2e       	mov	r0, r23
    1186:	00 0c       	add	r0, r0
    1188:	88 0b       	sbc	r24, r24
    118a:	99 0b       	sbc	r25, r25
    118c:	0e 94 0f 2c 	call	0x581e	; 0x581e <__floatsisf>
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	48 ec       	ldi	r20, 0xC8	; 200
    1196:	52 e4       	ldi	r21, 0x42	; 66
    1198:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__divsf3>
    119c:	60 93 ce 0b 	sts	0x0BCE, r22	; 0x800bce <vendPrice>
    11a0:	70 93 cf 0b 	sts	0x0BCF, r23	; 0x800bcf <vendPrice+0x1>
    11a4:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <vendPrice+0x2>
    11a8:	90 93 d1 0b 	sts	0x0BD1, r25	; 0x800bd1 <vendPrice+0x3>
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <MachineSetupData>
    11b2:	00 93 ce 09 	sts	0x09CE, r16	; 0x8009ce <MachineSetupData+0x4>
    11b6:	10 93 cf 09 	sts	0x09CF, r17	; 0x8009cf <MachineSetupData+0x5>
    11ba:	2e 81       	ldd	r18, Y+6	; 0x06
    11bc:	20 93 f5 09 	sts	0x09F5, r18	; 0x8009f5 <MachineSetupData+0x2b>
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <MachineSetupData+0x2c>
    11c6:	20 93 f7 09 	sts	0x09F7, r18	; 0x8009f7 <MachineSetupData+0x2d>
    11ca:	90 93 f8 09 	sts	0x09F8, r25	; 0x8009f8 <MachineSetupData+0x2e>
    11ce:	88 85       	ldd	r24, Y+8	; 0x08
    11d0:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <MachineSetupData+0x2f>
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <MachineSetupData+0x30>
    11da:	8a 85       	ldd	r24, Y+10	; 0x0a
    11dc:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <MachineSetupData+0x31>
    11e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e2:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <MachineSetupData+0x32>
    11e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    11e8:	30 93 fd 09 	sts	0x09FD, r19	; 0x8009fd <MachineSetupData+0x33>
    11ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ee:	30 93 fe 09 	sts	0x09FE, r19	; 0x8009fe <MachineSetupData+0x34>
    11f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f4:	30 93 ff 09 	sts	0x09FF, r19	; 0x8009ff <MachineSetupData+0x35>
    11f8:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <MachineSetupData+0x36>
    11fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    11fe:	30 93 01 0a 	sts	0x0A01, r19	; 0x800a01 <MachineSetupData+0x37>
    1202:	38 89       	ldd	r19, Y+16	; 0x10
    1204:	30 93 02 0a 	sts	0x0A02, r19	; 0x800a02 <MachineSetupData+0x38>
    1208:	39 89       	ldd	r19, Y+17	; 0x11
    120a:	30 93 03 0a 	sts	0x0A03, r19	; 0x800a03 <MachineSetupData+0x39>
    120e:	3a 89       	ldd	r19, Y+18	; 0x12
    1210:	30 93 04 0a 	sts	0x0A04, r19	; 0x800a04 <MachineSetupData+0x3a>
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	30 93 05 0a 	sts	0x0A05, r19	; 0x800a05 <MachineSetupData+0x3b>
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	30 93 06 0a 	sts	0x0A06, r19	; 0x800a06 <MachineSetupData+0x3c>
    1220:	30 91 a1 09 	lds	r19, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    1224:	32 30       	cpi	r19, 0x02	; 2
    1226:	d1 f4       	brne	.+52     	; 0x125c <getSQSetupData+0x2d6>
    1228:	00 93 d0 09 	sts	0x09D0, r16	; 0x8009d0 <MachineSetupData+0x6>
    122c:	10 93 d1 09 	sts	0x09D1, r17	; 0x8009d1 <MachineSetupData+0x7>
    1230:	20 93 d2 09 	sts	0x09D2, r18	; 0x8009d2 <MachineSetupData+0x8>
    1234:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <MachineSetupData+0x9>
    1238:	90 91 08 0a 	lds	r25, 0x0A08	; 0x800a08 <MachineSetupData+0x3e>
    123c:	99 23       	and	r25, r25
    123e:	19 f0       	breq	.+6      	; 0x1246 <getSQSetupData+0x2c0>
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	90 93 07 0a 	sts	0x0A07, r25	; 0x800a07 <MachineSetupData+0x3d>
    1246:	83 ff       	sbrs	r24, 3
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <getSQSetupData+0x2cc>
    124a:	9d e1       	ldi	r25, 0x1D	; 29
    124c:	90 93 0b 0a 	sts	0x0A0B, r25	; 0x800a0b <MachineSetupData+0x41>
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <getSQSetupData+0x2d0>
    1252:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <MachineSetupData+0x41>
    1256:	80 72       	andi	r24, 0x20	; 32
    1258:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <MachineSetupData+0x42>
    125c:	e2 96       	adiw	r28, 0x32	; 50
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	08 95       	ret

00001272 <sendSQData>:
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24
    1288:	98 e0       	ldi	r25, 0x08	; 8
    128a:	f9 2e       	mov	r15, r25
    128c:	c0 2e       	mov	r12, r16
    128e:	0e 94 37 20 	call	0x406e	; 0x406e <init_rx_buf>
    1292:	f8 01       	movw	r30, r16
    1294:	d0 80       	ld	r13, Z
    1296:	d3 94       	inc	r13
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <serial_putchar>
    129e:	c0 2f       	mov	r28, r16
    12a0:	d1 2f       	mov	r29, r17
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	e8 2e       	mov	r14, r24
    12a6:	8c 2f       	mov	r24, r28
    12a8:	8c 19       	sub	r24, r12
    12aa:	8d 15       	cp	r24, r13
    12ac:	40 f4       	brcc	.+16     	; 0x12be <sendSQData+0x4c>
    12ae:	5e 01       	movw	r10, r28
    12b0:	89 91       	ld	r24, Y+
    12b2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <serial_putchar>
    12b6:	f5 01       	movw	r30, r10
    12b8:	80 81       	ld	r24, Z
    12ba:	e8 26       	eor	r14, r24
    12bc:	f4 cf       	rjmp	.-24     	; 0x12a6 <sendSQData+0x34>
    12be:	8e 2d       	mov	r24, r14
    12c0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <serial_putchar>
    12c4:	10 92 cd 0b 	sts	0x0BCD, r1	; 0x800bcd <ucTimerCount>
    12c8:	78 94       	sei
    12ca:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <StartTimerZero>
    12ce:	80 91 cd 0b 	lds	r24, 0x0BCD	; 0x800bcd <ucTimerCount>
    12d2:	86 34       	cpi	r24, 0x46	; 70
    12d4:	20 f4       	brcc	.+8      	; 0x12de <sendSQData+0x6c>
    12d6:	0e 94 83 20 	call	0x4106	; 0x4106 <rx_buf_count>
    12da:	88 23       	and	r24, r24
    12dc:	39 f0       	breq	.+14     	; 0x12ec <sendSQData+0x7a>
    12de:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <StopTimerZero>
    12e2:	80 91 cd 0b 	lds	r24, 0x0BCD	; 0x800bcd <ucTimerCount>
    12e6:	86 34       	cpi	r24, 0x46	; 70
    12e8:	40 f0       	brcs	.+16     	; 0x12fa <sendSQData+0x88>
    12ea:	0d c0       	rjmp	.+26     	; 0x1306 <sendSQData+0x94>
    12ec:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_event_pending>
    12f0:	88 23       	and	r24, r24
    12f2:	69 f3       	breq	.-38     	; 0x12ce <sendSQData+0x5c>
    12f4:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <macTask>
    12f8:	ea cf       	rjmp	.-44     	; 0x12ce <sendSQData+0x5c>
    12fa:	0e 94 8f 20 	call	0x411e	; 0x411e <serial_getchar>
    12fe:	86 30       	cpi	r24, 0x06	; 6
    1300:	69 f0       	breq	.+26     	; 0x131c <sendSQData+0xaa>
    1302:	89 30       	cpi	r24, 0x09	; 9
    1304:	49 f0       	breq	.+18     	; 0x1318 <sendSQData+0xa6>
    1306:	8f ed       	ldi	r24, 0xDF	; 223
    1308:	9e e2       	ldi	r25, 0x2E	; 46
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <sendSQData+0x98>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <sendSQData+0x9e>
    1310:	00 00       	nop
    1312:	fa 94       	dec	r15
    1314:	f1 10       	cpse	r15, r1
    1316:	bb cf       	rjmp	.-138    	; 0x128e <sendSQData+0x1c>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	01 c0       	rjmp	.+2      	; 0x131e <sendSQData+0xac>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	08 95       	ret

00001334 <sendSQVendPrice>:
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	28 97       	sbiw	r28, 0x08	; 8
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	90 91 11 0a 	lds	r25, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    134c:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <MdcStatus+0x4>
    1350:	92 30       	cpi	r25, 0x02	; 2
    1352:	f9 f4       	brne	.+62     	; 0x1392 <sendSQVendPrice+0x5e>
    1354:	97 e0       	ldi	r25, 0x07	; 7
    1356:	99 83       	std	Y+1, r25	; 0x01
    1358:	98 e1       	ldi	r25, 0x18	; 24
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	81 11       	cpse	r24, r1
    135e:	0a c0       	rjmp	.+20     	; 0x1374 <sendSQVendPrice+0x40>
    1360:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <ReaderStateFlag+0x1>
    1364:	81 ff       	sbrs	r24, 1
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <sendSQVendPrice+0x40>
    1368:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MachineSetupData+0x3b>
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MachineSetupData+0x3c>
    1372:	05 c0       	rjmp	.+10     	; 0x137e <sendSQVendPrice+0x4a>
    1374:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    137e:	8c 83       	std	Y+4, r24	; 0x04
    1380:	1d 82       	std	Y+5, r1	; 0x05
    1382:	1e 82       	std	Y+6, r1	; 0x06
    1384:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <MachineSetupData+0x3e>
    1388:	8f 83       	std	Y+7, r24	; 0x07
    138a:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <MachineSetupData+0x3f>
    138e:	88 87       	std	Y+8, r24	; 0x08
    1390:	19 c0       	rjmp	.+50     	; 0x13c4 <sendSQVendPrice+0x90>
    1392:	94 e0       	ldi	r25, 0x04	; 4
    1394:	99 83       	std	Y+1, r25	; 0x01
    1396:	92 e1       	ldi	r25, 0x12	; 18
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	81 11       	cpse	r24, r1
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <sendSQVendPrice+0x7e>
    139e:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <ReaderStateFlag+0x1>
    13a2:	81 ff       	sbrs	r24, 1
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <sendSQVendPrice+0x7e>
    13a6:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MachineSetupData+0x3b>
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MachineSetupData+0x3c>
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <sendSQVendPrice+0x88>
    13b2:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    13bc:	8c 83       	std	Y+4, r24	; 0x04
    13be:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <MachineSetupData+0x40>
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    13cc:	28 96       	adiw	r28, 0x08	; 8
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <getSQData>:
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	7c 01       	movw	r14, r24
    13ee:	0e 94 8f 20 	call	0x411e	; 0x411e <serial_getchar>
    13f2:	c8 2f       	mov	r28, r24
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	09 f5       	brne	.+66     	; 0x143a <getSQData+0x5c>
    13f8:	0e 94 8f 20 	call	0x411e	; 0x411e <serial_getchar>
    13fc:	d8 2f       	mov	r29, r24
    13fe:	f7 01       	movw	r30, r14
    1400:	80 81       	ld	r24, Z
    1402:	8d 17       	cp	r24, r29
    1404:	d0 f0       	brcs	.+52     	; 0x143a <getSQData+0x5c>
    1406:	cd 27       	eor	r28, r29
    1408:	de 2c       	mov	r13, r14
    140a:	87 01       	movw	r16, r14
    140c:	80 2f       	mov	r24, r16
    140e:	8d 19       	sub	r24, r13
    1410:	8d 17       	cp	r24, r29
    1412:	38 f4       	brcc	.+14     	; 0x1422 <getSQData+0x44>
    1414:	0e 94 8f 20 	call	0x411e	; 0x411e <serial_getchar>
    1418:	f8 01       	movw	r30, r16
    141a:	81 93       	st	Z+, r24
    141c:	8f 01       	movw	r16, r30
    141e:	c8 27       	eor	r28, r24
    1420:	f5 cf       	rjmp	.-22     	; 0x140c <getSQData+0x2e>
    1422:	0e 94 8f 20 	call	0x411e	; 0x411e <serial_getchar>
    1426:	c8 13       	cpse	r28, r24
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <getSQData+0x56>
    142a:	86 e0       	ldi	r24, 0x06	; 6
    142c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <serial_putchar>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	04 c0       	rjmp	.+8      	; 0x143c <getSQData+0x5e>
    1434:	85 e1       	ldi	r24, 0x15	; 21
    1436:	0e 94 54 20 	call	0x40a8	; 0x40a8 <serial_putchar>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	08 95       	ret

0000144c <getSQStatusData>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	62 97       	sbiw	r28, 0x12	; 18
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	c1 f5       	brne	.+112    	; 0x14d8 <getSQStatusData+0x8c>
    1468:	22 e1       	ldi	r18, 0x12	; 18
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	fc 01       	movw	r30, r24
    1470:	32 2f       	mov	r19, r18
    1472:	11 92       	st	Z+, r1
    1474:	3a 95       	dec	r19
    1476:	e9 f7       	brne	.-6      	; 0x1472 <getSQStatusData+0x26>
    1478:	29 83       	std	Y+1, r18	; 0x01
    147a:	0e 94 ef 09 	call	0x13de	; 0x13de <getSQData>
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <getSQStatusData+0x38>
    1482:	56 c0       	rjmp	.+172    	; 0x1530 <getSQStatusData+0xe4>
    1484:	99 81       	ldd	r25, Y+1	; 0x01
    1486:	97 31       	cpi	r25, 0x17	; 23
    1488:	09 f0       	breq	.+2      	; 0x148c <getSQStatusData+0x40>
    148a:	52 c0       	rjmp	.+164    	; 0x1530 <getSQStatusData+0xe4>
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	90 5e       	subi	r25, 0xE0	; 224
    1490:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <MdcStatus>
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <MdcStatus+0x4>
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <MdcStatus+0x5>
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <MdcStatus+0x6>
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <MdcStatus+0x7>
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <MdcStatus+0x8>
    14b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b4:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <MdcStatus+0x9>
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <MdcStatus+0x2>
    14be:	9f 85       	ldd	r25, Y+15	; 0x0f
    14c0:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <MdcStatus+0x3>
    14c4:	98 89       	ldd	r25, Y+16	; 0x10
    14c6:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <MdcStatus+0xa>
    14ca:	99 89       	ldd	r25, Y+17	; 0x11
    14cc:	90 93 1b 0a 	sts	0x0A1B, r25	; 0x800a1b <MdcStatus+0xb>
    14d0:	9a 89       	ldd	r25, Y+18	; 0x12
    14d2:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <MdcStatus+0xc>
    14d6:	2d c0       	rjmp	.+90     	; 0x1532 <getSQStatusData+0xe6>
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	51 f5       	brne	.+84     	; 0x1530 <getSQStatusData+0xe4>
    14dc:	2b e0       	ldi	r18, 0x0B	; 11
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	fc 01       	movw	r30, r24
    14e4:	32 2f       	mov	r19, r18
    14e6:	11 92       	st	Z+, r1
    14e8:	3a 95       	dec	r19
    14ea:	e9 f7       	brne	.-6      	; 0x14e6 <getSQStatusData+0x9a>
    14ec:	29 83       	std	Y+1, r18	; 0x01
    14ee:	0e 94 ef 09 	call	0x13de	; 0x13de <getSQData>
    14f2:	88 23       	and	r24, r24
    14f4:	e9 f0       	breq	.+58     	; 0x1530 <getSQStatusData+0xe4>
    14f6:	99 81       	ldd	r25, Y+1	; 0x01
    14f8:	91 31       	cpi	r25, 0x11	; 17
    14fa:	d1 f4       	brne	.+52     	; 0x1530 <getSQStatusData+0xe4>
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	90 5e       	subi	r25, 0xE0	; 224
    1500:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <MdcStatus>
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <MdcStatus+0x2>
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <MdcStatus+0x4>
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <MdcStatus+0x5>
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <MdcStatus+0x6>
    151c:	9f 81       	ldd	r25, Y+7	; 0x07
    151e:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <MdcStatus+0x7>
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <MdcStatus+0x8>
    1528:	9b 85       	ldd	r25, Y+11	; 0x0b
    152a:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <MdcStatus+0x9>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <getSQStatusData+0xe6>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	62 96       	adiw	r28, 0x12	; 18
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <getSQMachineStatus>:
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	00 d0       	rcall	.+0      	; 0x154c <getSQMachineStatus+0x8>
    154c:	1f 92       	push	r1
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	11 f4       	brne	.+4      	; 0x1562 <getSQMachineStatus+0x1e>
    155e:	86 e1       	ldi	r24, 0x16	; 22
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <getSQMachineStatus+0x20>
    1562:	80 e1       	ldi	r24, 0x10	; 16
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <CurrentAccount+0x9>
    156a:	8b 83       	std	Y+3, r24	; 0x03
    156c:	ce 01       	movw	r24, r28
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1574:	81 11       	cpse	r24, r1
    1576:	02 c0       	rjmp	.+4      	; 0x157c <getSQMachineStatus+0x38>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	15 c0       	rjmp	.+42     	; 0x15a6 <getSQMachineStatus+0x62>
    157c:	0e 94 26 0a 	call	0x144c	; 0x144c <getSQStatusData>
    1580:	18 2f       	mov	r17, r24
    1582:	88 23       	and	r24, r24
    1584:	c9 f3       	breq	.-14     	; 0x1578 <getSQMachineStatus+0x34>
    1586:	90 91 93 08 	lds	r25, 0x0893	; 0x800893 <ReaderStateFlag>
    158a:	91 fb       	bst	r25, 1
    158c:	88 27       	eor	r24, r24
    158e:	80 f9       	bld	r24, 0
    1590:	91 fd       	sbrc	r25, 1
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <getSQMachineStatus+0x62>
    1594:	8f ed       	ldi	r24, 0xDF	; 223
    1596:	9e e2       	ldi	r25, 0x2E	; 46
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <getSQMachineStatus+0x54>
    159c:	00 c0       	rjmp	.+0      	; 0x159e <getSQMachineStatus+0x5a>
    159e:	00 00       	nop
    15a0:	0e 94 9a 09 	call	0x1334	; 0x1334 <sendSQVendPrice>
    15a4:	81 2f       	mov	r24, r17
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	08 95       	ret

000015b4 <getSQInitData>:
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2a 97       	sbiw	r28, 0x0a	; 10
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	8a e0       	ldi	r24, 0x0A	; 10
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	ce 01       	movw	r24, r28
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	0e 94 ef 09 	call	0x13de	; 0x13de <getSQData>
    15d4:	88 23       	and	r24, r24
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <getSQInitData+0x3c>
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <MachineSetupData+0x1>
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <MachineSetupData+0x2>
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	90 93 cd 09 	sts	0x09CD, r25	; 0x8009cd <MachineSetupData+0x3>
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <MachineSetupData+0x32>
    15f0:	2a 96       	adiw	r28, 0x0a	; 10
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <isQuantum>:
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	28 97       	sbiw	r28, 0x08	; 8
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	88 e0       	ldi	r24, 0x08	; 8
    1618:	e9 e2       	ldi	r30, 0x29	; 41
    161a:	f2 e0       	ldi	r31, 0x02	; 2
    161c:	de 01       	movw	r26, r28
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	01 90       	ld	r0, Z+
    1622:	0d 92       	st	X+, r0
    1624:	8a 95       	dec	r24
    1626:	e1 f7       	brne	.-8      	; 0x1620 <isQuantum+0x1e>
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	8f 83       	std	Y+7, r24	; 0x07
    162e:	ce 01       	movw	r24, r28
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1636:	81 11       	cpse	r24, r1
    1638:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <getSQInitData>
    163c:	28 96       	adiw	r28, 0x08	; 8
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <waitSQStartKey>:
    164e:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	19 f4       	brne	.+6      	; 0x165c <waitSQStartKey+0xe>
    1656:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <MdcStatus+0x6>
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <waitSQStartKey+0x16>
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	79 f4       	brne	.+30     	; 0x167e <waitSQStartKey+0x30>
    1660:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <MdcStatus+0x7>
    1664:	81 fd       	sbrc	r24, 1
    1666:	09 c0       	rjmp	.+18     	; 0x167a <waitSQStartKey+0x2c>
    1668:	80 31       	cpi	r24, 0x10	; 16
    166a:	49 f4       	brne	.+18     	; 0x167e <waitSQStartKey+0x30>
    166c:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <MdcStatus>
    1670:	98 52       	subi	r25, 0x28	; 40
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	92 30       	cpi	r25, 0x02	; 2
    1676:	20 f0       	brcs	.+8      	; 0x1680 <waitSQStartKey+0x32>
    1678:	02 c0       	rjmp	.+4      	; 0x167e <waitSQStartKey+0x30>
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	08 95       	ret
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	08 95       	ret

00001682 <isSQCycleRunning>:
    1682:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <MdcStatus+0x6>
    1686:	80 31       	cpi	r24, 0x10	; 16
    1688:	39 f0       	breq	.+14     	; 0x1698 <isSQCycleRunning+0x16>
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <MdcStatus+0x7>
    1690:	90 31       	cpi	r25, 0x10	; 16
    1692:	19 f0       	breq	.+6      	; 0x169a <isSQCycleRunning+0x18>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	01 c0       	rjmp	.+2      	; 0x169a <isSQCycleRunning+0x18>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	81 70       	andi	r24, 0x01	; 1
    169c:	08 95       	ret

0000169e <sendSQCashCardInserted>:
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <sendSQCashCardInserted+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <sendSQCashCardInserted+0x8>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <sendSQCashCardInserted+0xa>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	ce 01       	movw	r24, r28
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	26 e0       	ldi	r18, 0x06	; 6
    16b2:	fc 01       	movw	r30, r24
    16b4:	11 92       	st	Z+, r1
    16b6:	2a 95       	dec	r18
    16b8:	e9 f7       	brne	.-6      	; 0x16b4 <sendSQCashCardInserted+0x16>
    16ba:	40 91 11 0a 	lds	r20, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    16be:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <CurrentAccount+0x7>
    16c2:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <CurrentAccount+0x8>
    16c6:	42 30       	cpi	r20, 0x02	; 2
    16c8:	39 f4       	brne	.+14     	; 0x16d8 <sendSQCashCardInserted+0x3a>
    16ca:	43 e0       	ldi	r20, 0x03	; 3
    16cc:	49 83       	std	Y+1, r20	; 0x01
    16ce:	40 e4       	ldi	r20, 0x40	; 64
    16d0:	4a 83       	std	Y+2, r20	; 0x02
    16d2:	3b 83       	std	Y+3, r19	; 0x03
    16d4:	2c 83       	std	Y+4, r18	; 0x04
    16d6:	0c c0       	rjmp	.+24     	; 0x16f0 <sendSQCashCardInserted+0x52>
    16d8:	45 e0       	ldi	r20, 0x05	; 5
    16da:	49 83       	std	Y+1, r20	; 0x01
    16dc:	40 e4       	ldi	r20, 0x40	; 64
    16de:	4a 83       	std	Y+2, r20	; 0x02
    16e0:	3b 83       	std	Y+3, r19	; 0x03
    16e2:	2c 83       	std	Y+4, r18	; 0x04
    16e4:	20 91 ce 09 	lds	r18, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    16e8:	2d 83       	std	Y+5, r18	; 0x05
    16ea:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    16ee:	2e 83       	std	Y+6, r18	; 0x06
    16f0:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    16f4:	26 96       	adiw	r28, 0x06	; 6
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <sendSQCashCardInsetedForTopoff>:
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	27 97       	sbiw	r28, 0x07	; 7
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	ce 01       	movw	r24, r28
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	27 e0       	ldi	r18, 0x07	; 7
    1720:	fc 01       	movw	r30, r24
    1722:	11 92       	st	Z+, r1
    1724:	2a 95       	dec	r18
    1726:	e9 f7       	brne	.-6      	; 0x1722 <sendSQCashCardInsetedForTopoff+0x1c>
    1728:	40 91 11 0a 	lds	r20, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    172c:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <CurrentAccount+0x7>
    1730:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <CurrentAccount+0x8>
    1734:	42 30       	cpi	r20, 0x02	; 2
    1736:	39 f4       	brne	.+14     	; 0x1746 <sendSQCashCardInsetedForTopoff+0x40>
    1738:	43 e0       	ldi	r20, 0x03	; 3
    173a:	49 83       	std	Y+1, r20	; 0x01
    173c:	42 e4       	ldi	r20, 0x42	; 66
    173e:	4a 83       	std	Y+2, r20	; 0x02
    1740:	3b 83       	std	Y+3, r19	; 0x03
    1742:	2c 83       	std	Y+4, r18	; 0x04
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <sendSQCashCardInsetedForTopoff+0x5e>
    1746:	46 e0       	ldi	r20, 0x06	; 6
    1748:	49 83       	std	Y+1, r20	; 0x01
    174a:	42 e4       	ldi	r20, 0x42	; 66
    174c:	4a 83       	std	Y+2, r20	; 0x02
    174e:	3b 83       	std	Y+3, r19	; 0x03
    1750:	2c 83       	std	Y+4, r18	; 0x04
    1752:	20 91 ce 09 	lds	r18, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1756:	2d 83       	std	Y+5, r18	; 0x05
    1758:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    175c:	2e 83       	std	Y+6, r18	; 0x06
    175e:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MachineSetupData+0x35>
    1762:	2f 83       	std	Y+7, r18	; 0x07
    1764:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1768:	27 96       	adiw	r28, 0x07	; 7
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <sendSQCardRemoved>:
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	00 d0       	rcall	.+0      	; 0x1780 <sendSQCardRemoved+0x6>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	81 e4       	ldi	r24, 0x41	; 65
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <sendSQCashCardRemoved>:
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	27 97       	sbiw	r28, 0x07	; 7
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	ce 01       	movw	r24, r28
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	27 e0       	ldi	r18, 0x07	; 7
    17b8:	fc 01       	movw	r30, r24
    17ba:	11 92       	st	Z+, r1
    17bc:	2a 95       	dec	r18
    17be:	e9 f7       	brne	.-6      	; 0x17ba <sendSQCashCardRemoved+0x1c>
    17c0:	40 91 11 0a 	lds	r20, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    17c4:	20 91 8f 08 	lds	r18, 0x088F	; 0x80088f <CurrentAccount+0x7>
    17c8:	30 91 90 08 	lds	r19, 0x0890	; 0x800890 <CurrentAccount+0x8>
    17cc:	42 30       	cpi	r20, 0x02	; 2
    17ce:	39 f4       	brne	.+14     	; 0x17de <sendSQCashCardRemoved+0x40>
    17d0:	43 e0       	ldi	r20, 0x03	; 3
    17d2:	49 83       	std	Y+1, r20	; 0x01
    17d4:	41 e4       	ldi	r20, 0x41	; 65
    17d6:	4a 83       	std	Y+2, r20	; 0x02
    17d8:	3b 83       	std	Y+3, r19	; 0x03
    17da:	2c 83       	std	Y+4, r18	; 0x04
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <sendSQCashCardRemoved+0x58>
    17de:	45 e0       	ldi	r20, 0x05	; 5
    17e0:	49 83       	std	Y+1, r20	; 0x01
    17e2:	41 e4       	ldi	r20, 0x41	; 65
    17e4:	4a 83       	std	Y+2, r20	; 0x02
    17e6:	3b 83       	std	Y+3, r19	; 0x03
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	20 91 ce 09 	lds	r18, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    17ee:	2d 83       	std	Y+5, r18	; 0x05
    17f0:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    17f4:	2e 83       	std	Y+6, r18	; 0x06
    17f6:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
    17fa:	27 96       	adiw	r28, 0x07	; 7
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <sendSQDisplayCommand>:
Led1 to led4 are limited to values defined in "display.h"
***********************************************************************************************
*/

bool sendSQDisplayCommand( u8 led1, u8 led2,u8 led3, u8 led4, u8 duration) 
{
    180c:	0f 93       	push	r16
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	2a 97       	sbiw	r28, 0x0a	; 10
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
	u8 temp[10]={0};
    1822:	fe 01       	movw	r30, r28
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	9a e0       	ldi	r25, 0x0A	; 10
    1828:	df 01       	movw	r26, r30
    182a:	1d 92       	st	X+, r1
    182c:	9a 95       	dec	r25
    182e:	e9 f7       	brne	.-6      	; 0x182a <sendSQDisplayCommand+0x1e>
	
	temp[0] = DISPLAY_REQUEST_SIZE;	//Number of actual data bytes to be transferred to the MDC including command data exclude bbc byte
    1830:	96 e0       	ldi	r25, 0x06	; 6
    1832:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = DISPLAY_REQUEST;		//MDC command to be requested 
    1834:	90 e6       	ldi	r25, 0x60	; 96
    1836:	9a 83       	std	Y+2, r25	; 0x02
	temp[2] = led1;				//Left most digit display character 4
    1838:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = led2;				//Display character 3
    183a:	6c 83       	std	Y+4, r22	; 0x04
	temp[4] = led3;				//Display character 2
    183c:	4d 83       	std	Y+5, r20	; 0x05
	temp[5] = led4;				//Display character 1
    183e:	2e 83       	std	Y+6, r18	; 0x06
	temp[6] = duration;			//Duration of display in seconds
    1840:	0f 83       	std	Y+7, r16	; 0x07
															
	return (sendSQData(temp) );
    1842:	cf 01       	movw	r24, r30
    1844:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
}
    1848:	2a 96       	adiw	r28, 0x0a	; 10
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <displaySQReaderVersion>:
on the MDC display for a minimum of 2 seconds.

*/

bool displaySQReaderVersion(void)
{	
    185c:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_r, msgNumber[__APP_MAJOR__],msgNumber[__APP_MINOR__],msgNumber[__APP_REVISION__],5) )
    185e:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <msgNumber+0x4>
    1862:	05 e0       	ldi	r16, 0x05	; 5
    1864:	24 2f       	mov	r18, r20
    1866:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <msgNumber>
    186a:	80 ea       	ldi	r24, 0xA0	; 160
    186c:	0e 94 06 0c 	call	0x180c	; 0x180c <sendSQDisplayCommand>
    1870:	88 23       	and	r24, r24
    1872:	49 f0       	breq	.+18     	; 0x1886 <displaySQReaderVersion+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1874:	2f ef       	ldi	r18, 0xFF	; 255
    1876:	37 ea       	ldi	r19, 0xA7	; 167
    1878:	91 e6       	ldi	r25, 0x61	; 97
    187a:	21 50       	subi	r18, 0x01	; 1
    187c:	30 40       	sbci	r19, 0x00	; 0
    187e:	90 40       	sbci	r25, 0x00	; 0
    1880:	e1 f7       	brne	.-8      	; 0x187a <displaySQReaderVersion+0x1e>
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <displaySQReaderVersion+0x28>
    1884:	00 00       	nop
	{
		_delay_ms(2000);
		return true;	
	}
	return false;	
}	
    1886:	0f 91       	pop	r16
    1888:	08 95       	ret

0000188a <displaySQCardError>:

bool displaySQCardError(void)
{
    188a:	0f 93       	push	r16
    188c:	cf 93       	push	r28
	if( sendSQDisplayCommand(LED_C, LED_A,LED_r,LED_d,4) )
    188e:	04 e0       	ldi	r16, 0x04	; 4
    1890:	2c eb       	ldi	r18, 0xBC	; 188
    1892:	40 ea       	ldi	r20, 0xA0	; 160
    1894:	6e ee       	ldi	r22, 0xEE	; 238
    1896:	82 e7       	ldi	r24, 0x72	; 114
    1898:	0e 94 06 0c 	call	0x180c	; 0x180c <sendSQDisplayCommand>
    189c:	c8 2f       	mov	r28, r24
    189e:	88 23       	and	r24, r24
    18a0:	e1 f0       	breq	.+56     	; 0x18da <displaySQCardError+0x50>
    18a2:	2f ef       	ldi	r18, 0xFF	; 255
    18a4:	37 ea       	ldi	r19, 0xA7	; 167
    18a6:	81 e6       	ldi	r24, 0x61	; 97
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	30 40       	sbci	r19, 0x00	; 0
    18ac:	80 40       	sbci	r24, 0x00	; 0
    18ae:	e1 f7       	brne	.-8      	; 0x18a8 <displaySQCardError+0x1e>
    18b0:	00 c0       	rjmp	.+0      	; 0x18b2 <displaySQCardError+0x28>
    18b2:	00 00       	nop
	{
		_delay_ms(2000);
		if( sendSQDisplayCommand(LED_E, LED_r,LED_r,LED_BLANK,3) )
    18b4:	03 e0       	ldi	r16, 0x03	; 3
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	40 ea       	ldi	r20, 0xA0	; 160
    18ba:	60 ea       	ldi	r22, 0xA0	; 160
    18bc:	82 ef       	ldi	r24, 0xF2	; 242
    18be:	0e 94 06 0c 	call	0x180c	; 0x180c <sendSQDisplayCommand>
    18c2:	88 23       	and	r24, r24
    18c4:	51 f0       	breq	.+20     	; 0x18da <displaySQCardError+0x50>
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	27 ea       	ldi	r18, 0xA7	; 167
    18ca:	31 e6       	ldi	r19, 0x61	; 97
    18cc:	91 50       	subi	r25, 0x01	; 1
    18ce:	20 40       	sbci	r18, 0x00	; 0
    18d0:	30 40       	sbci	r19, 0x00	; 0
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <displaySQCardError+0x42>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <displaySQCardError+0x4c>
    18d6:	00 00       	nop
			_delay_ms(2000);
			
		return true;	
    18d8:	c8 2f       	mov	r28, r24
	}
	return false;	
}	
    18da:	8c 2f       	mov	r24, r28
    18dc:	cf 91       	pop	r28
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <cardRemoved>:

bool cardRemoved(u8 cardType)
{
	if( cardType == CASH_CARD ) 
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	51 f4       	brne	.+20     	; 0x18fa <cardRemoved+0x18>
	{
		if( sendSQCashCardRemoved() )
    18e6:	0e 94 cf 0b 	call	0x179e	; 0x179e <sendSQCashCardRemoved>
    18ea:	81 11       	cpse	r24, r1
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <cardRemoved+0x10>
		{
			CurrentAccount.CardState = CARD_OUT;
			return true;
		}
	}		
	return false;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret
{
	if( cardType == CASH_CARD ) 
	{
		if( sendSQCashCardRemoved() )
		{
			CurrentAccount.CardState = CARD_OUT;
    18f2:	10 92 91 08 	sts	0x0891, r1	; 0x800891 <CurrentAccount+0x9>
			return true;			
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	08 95       	ret
		
	}
	else
	{
	
		if ( sendSQCardRemoved() )
    18fa:	0e 94 bd 0b 	call	0x177a	; 0x177a <sendSQCardRemoved>
    18fe:	f5 cf       	rjmp	.-22     	; 0x18ea <cardRemoved+0x8>

00001900 <cardInserted>:
	}		
	return false;
}			
bool cardInserted(u8 cardType)
{
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	59 f4       	brne	.+22     	; 0x191a <cardInserted+0x1a>
    1904:	0e 94 4f 0b 	call	0x169e	; 0x169e <sendSQCashCardInserted>
    1908:	81 11       	cpse	r24, r1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <cardInserted+0x10>
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
	{
		CurrentAccount.CardState = CARD_IN;
		return true;
	}
	return false;
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	08 95       	ret
}			
bool cardInserted(u8 cardType)
{
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
	{
		CurrentAccount.CardState = CARD_IN;
    1910:	80 e8       	ldi	r24, 0x80	; 128
    1912:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <CurrentAccount+0x9>
		return true;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret
	}
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	b9 f7       	brne	.-18     	; 0x190c <cardInserted+0xc>
    191e:	0e 94 83 0b 	call	0x1706	; 0x1706 <sendSQCashCardInsetedForTopoff>
    1922:	f2 cf       	rjmp	.-28     	; 0x1908 <cardInserted+0x8>

00001924 <isMachineCycleRunning>:
	deviceStatus.deviceType[1] = MdcStatus.MachineType[1];
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
    1924:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <isSQCycleRunning>

00001928 <waitForMachineStartKey>:
}
bool waitForMachineStartKey()
{
	
	return waitSQStartKey();
    1928:	0c 94 27 0b 	jmp	0x164e	; 0x164e <waitSQStartKey>

0000192c <MachineStatus>:
}

void MachineStatus(void)
{
  
	if( getSQMachineStatus() )
    192c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <getSQMachineStatus>
    1930:	88 23       	and	r24, r24
    1932:	19 f0       	breq	.+6      	; 0x193a <MachineStatus+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = DEVICE_STATUS_ONLINE; //machine status has been done
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <ucDeviceStateFlag>
    193a:	08 95       	ret

0000193c <initMachine>:
	}
	return false;
}
void initMachine(void)
{
	if( isQuantum() )
    193c:	0e 94 01 0b 	call	0x1602	; 0x1602 <isQuantum>
    1940:	88 23       	and	r24, r24
    1942:	11 f0       	breq	.+4      	; 0x1948 <initMachine+0xc>
	{
		//set q flag
		MdcStatus.MachineType[1] = QUANTUM_SERIES;
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	01 c0       	rjmp	.+2      	; 0x194a <initMachine+0xe>
		
	}
	else //if (isMDC())
	{
		//set MDC flag
		MdcStatus.MachineType[1] = MDC_SERIES;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <MdcStatus+0x1>
    194e:	8f e3       	ldi	r24, 0x3F	; 63
    1950:	9f e1       	ldi	r25, 0x1F	; 31
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <initMachine+0x16>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <initMachine+0x1c>
    1958:	00 00       	nop
		
	}
	
	_delay_ms(2);
	MachineStatus();
    195a:	0e 94 96 0c 	call	0x192c	; 0x192c <MachineStatus>
	deviceStatus.deviceType[0] = MdcStatus.MachineType[0];
    195e:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <MdcStatus>
    1962:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <deviceStatus>
	deviceStatus.deviceType[1] = MdcStatus.MachineType[1];
    1966:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <MdcStatus+0x1>
    196a:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <deviceStatus+0x1>
    196e:	08 95       	ret

00001970 <setupMachine>:
	}
	
}

bool setupMachine(void)
{
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	e2 97       	sbiw	r28, 0x32	; 50
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
	u8 temp[MDC_MAX_PACKET_SIZE] = {0};
    1984:	fe 01       	movw	r30, r28
    1986:	31 96       	adiw	r30, 0x01	; 1
    1988:	82 e3       	ldi	r24, 0x32	; 50
    198a:	df 01       	movw	r26, r30
    198c:	1d 92       	st	X+, r1
    198e:	8a 95       	dec	r24
    1990:	e9 f7       	brne	.-6      	; 0x198c <setupMachine+0x1c>
	
	//getSQSetupData(); 
	if( deviceStatus.deviceType[1] == QUANTUM_SERIES)
    1992:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	09 f0       	breq	.+2      	; 0x199c <setupMachine+0x2c>
    199a:	a4 c1       	rjmp	.+840    	; 0x1ce4 <setupMachine+0x374>
	{
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_TOPLOAD )
    199c:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <deviceStatus>
    19a0:	91 32       	cpi	r25, 0x21	; 33
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <setupMachine+0x36>
    19a4:	7e c0       	rjmp	.+252    	; 0x1aa2 <setupMachine+0x132>
		{
			temp[0] = QTL_PROGRAMMING_DATA_SIZE;
    19a6:	8d e2       	ldi	r24, 0x2D	; 45
    19a8:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    19aa:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    19ac:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    19b0:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    19b2:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    19b6:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    19b8:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    19bc:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = 0;
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    19be:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    19c2:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    19c4:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    19c8:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    19ca:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    19ce:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    19d0:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    19d4:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    19d6:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    19da:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    19dc:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    19e0:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    19e2:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0xa>
    19e6:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    19e8:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    19ea:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0xd>
    19ee:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    19f0:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0xc>
    19f4:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    19f6:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0xf>
    19fa:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    19fc:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0xe>
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    1a02:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <MachineSetupData+0x10>
    1a06:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    1a08:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <MachineSetupData+0x11>
    1a0c:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    1a0e:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MachineSetupData+0x12>
    1a12:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    1a14:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x13>
    1a18:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    1a1a:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x14>
    1a1e:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    1a20:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x15>
    1a24:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.HeavyCycle_vendPrice[0];
    1a26:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x16>
    1a2a:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.HeavyCycle_vendPrice[1];
    1a2c:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x17>
    1a30:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.HeavyCycle_option;
    1a32:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x18>
    1a36:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.HeavyCycle_extraWashTime;
    1a38:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <MachineSetupData+0x1a>
    1a3c:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.HeavyCycle_extraRiseTime;
    1a3e:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <MachineSetupData+0x1b>
    1a42:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.HeavyCycle_warmRinseOption;
    1a44:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <MachineSetupData+0x19>
    1a48:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.NormalCycle_washAgitateTime;
    1a4a:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <MachineSetupData+0x1f>
    1a4e:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.NormalCycle_rinseAgitateTime;
    1a50:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <MachineSetupData+0x20>
    1a54:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.NormalCycle_rinseAgitateTime;
    1a56:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.NormalCycle_finalSpinTime;
    1a58:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <MachineSetupData+0x22>
    1a5c:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = MachineSetupData.PermPressCycle_washAgitateTime;
    1a5e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <MachineSetupData+0x23>
    1a62:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = MachineSetupData.PermPressCycle_extraRinseAgitateTime;
    1a64:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <MachineSetupData+0x25>
    1a68:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = MachineSetupData.PermPressCycle_rinseAgitateTime;
    1a6a:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <MachineSetupData+0x24>
    1a6e:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = MachineSetupData.PermPressCycle_finalSpinTime;
    1a70:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <MachineSetupData+0x26>
    1a74:	8f a3       	std	Y+39, r24	; 0x27
			temp[39] = MachineSetupData.DelicateCycle_washAgitateTime;
    1a76:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <MachineSetupData+0x27>
    1a7a:	88 a7       	std	Y+40, r24	; 0x28
			temp[40] = MachineSetupData.DelicateCycle_extraRinseAgitateTime;
    1a7c:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <MachineSetupData+0x29>
    1a80:	89 a7       	std	Y+41, r24	; 0x29
			temp[41] = MachineSetupData.DelicateCycle_rinseAgitateTime;
    1a82:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <MachineSetupData+0x28>
    1a86:	8a a7       	std	Y+42, r24	; 0x2a
			temp[42] = MachineSetupData.DelicateCycle_finalSpinTime;
    1a88:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <MachineSetupData+0x2a>
    1a8c:	8b a7       	std	Y+43, r24	; 0x2b
			temp[43] = MachineSetupData.DefaultCycle;
    1a8e:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1a92:	8c a7       	std	Y+44, r24	; 0x2c
			temp[44] = MachineSetupData.AudioSetting;
    1a94:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1a98:	8d a7       	std	Y+45, r24	; 0x2d
			temp[45] = MachineSetupData.CardReaderDisplayControl;
    1a9a:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1a9e:	8e a7       	std	Y+46, r24	; 0x2e
    1aa0:	cd c0       	rjmp	.+410    	; 0x1c3c <setupMachine+0x2cc>
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_FRONTLOAD )
    1aa2:	92 32       	cpi	r25, 0x22	; 34
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <setupMachine+0x138>
    1aa6:	5e c0       	rjmp	.+188    	; 0x1b64 <setupMachine+0x1f4>
		{
			temp[0] = QFL_PROGRAMMING_DATA_SIZE;
    1aa8:	99 83       	std	Y+1, r25	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    1aac:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    1ab2:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    1ab6:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    1ab8:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    1abc:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = 0;
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    1abe:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1ac2:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    1ac4:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1ac8:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    1aca:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    1ace:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    1ad0:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    1ad6:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    1ada:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    1adc:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    1ae0:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    1ae2:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0xa>
    1ae6:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    1ae8:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    1aea:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0xd>
    1aee:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    1af0:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0xc>
    1af4:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    1af6:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0xf>
    1afa:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    1afc:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0xe>
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    1b02:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <MachineSetupData+0x10>
    1b06:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    1b08:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <MachineSetupData+0x11>
    1b0c:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    1b0e:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MachineSetupData+0x12>
    1b12:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    1b14:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x13>
    1b18:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    1b1a:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x14>
    1b1e:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    1b20:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x15>
    1b24:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.MediumCycle_vendPrice[0];
    1b26:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <MachineSetupData+0x1c>
    1b2a:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.MediumCycle_vendPrice[1];
    1b2c:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x1d>
    1b30:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.HeavyCycle_vendPrice[0];
    1b32:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x16>
    1b36:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.HeavyCycle_vendPrice[1];
    1b38:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x17>
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.MediumCycle_option;
    1b3e:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x1e>
    1b42:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.HeavyCycle_option;
    1b44:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x18>
    1b48:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.CycleModifierExtraWashTime;
    1b4a:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <MachineSetupData+0x43>
    1b4e:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.DefaultCycle;
    1b50:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1b54:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.AudioSetting;
    1b56:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1b5a:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.CardReaderDisplayControl;
    1b5c:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1b60:	8b a3       	std	Y+35, r24	; 0x23
    1b62:	6c c0       	rjmp	.+216    	; 0x1c3c <setupMachine+0x2cc>
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_WASHER_EXTRACTOR )
    1b64:	94 32       	cpi	r25, 0x24	; 36
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <setupMachine+0x1fa>
    1b68:	69 c0       	rjmp	.+210    	; 0x1c3c <setupMachine+0x2cc>
		{
			temp[0] = QWE_PROGRAMMING_DATA_SIZE;
    1b6a:	86 e2       	ldi	r24, 0x26	; 38
    1b6c:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    1b70:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    1b74:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    1b76:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    1b7a:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    1b7c:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    1b80:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = MachineSetupData.ControlConfig;
    1b82:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <MachineSetupData+0x32>
    1b86:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    1b88:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1b8c:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    1b8e:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1b92:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    1b94:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    1b98:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    1b9a:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    1b9e:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    1ba0:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    1ba4:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    1ba6:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    1baa:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    1bac:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0xa>
    1bb0:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    1bb2:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    1bb4:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0xd>
    1bb8:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    1bba:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0xc>
    1bbe:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    1bc0:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0xf>
    1bc4:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    1bc6:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0xe>
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    1bcc:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <MachineSetupData+0x10>
    1bd0:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    1bd2:	80 91 db 09 	lds	r24, 0x09DB	; 0x8009db <MachineSetupData+0x11>
    1bd6:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    1bd8:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MachineSetupData+0x12>
    1bdc:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    1bde:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x13>
    1be2:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    1be4:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x14>
    1be8:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    1bea:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x15>
    1bee:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.ModifiedCycleVendPrice[0];
    1bf0:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MachineSetupData+0x3b>
    1bf4:	2a 8f       	std	Y+26, r18	; 0x1a
			temp[26] = MachineSetupData.ModifiedCycleVendPrice[1];
    1bf6:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MachineSetupData+0x3c>
    1bfa:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.ModifiedCycleVendPrice[0];
    1bfc:	2c 8f       	std	Y+28, r18	; 0x1c
			temp[28] = MachineSetupData.ModifiedCycleVendPrice[1];
    1bfe:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.MediumCycle_vendPrice[0];
    1c00:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <MachineSetupData+0x1c>
    1c04:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.MediumCycle_vendPrice[1];
    1c06:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x1d>
    1c0a:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.HeavyCycle_vendPrice[0];
    1c0c:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x16>
    1c10:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.HeavyCycle_vendPrice[1];
    1c12:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x17>
    1c16:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.MediumCycle_option;
    1c18:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x1e>
    1c1c:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.HeavyCycle_option;
    1c1e:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x18>
    1c22:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = MachineSetupData.CycleModifierExtraWashTime;
    1c24:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <MachineSetupData+0x43>
    1c28:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = MachineSetupData.DefaultCycle;
    1c2a:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1c2e:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = MachineSetupData.AudioSetting;
    1c30:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1c34:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = MachineSetupData.CardReaderDisplayControl;
    1c36:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1c3a:	8f a3       	std	Y+39, r24	; 0x27
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_DRYER || deviceStatus.deviceType[0] == PROGRAMMING_DATA_TUMBLER )
    1c3c:	88 ed       	ldi	r24, 0xD8	; 216
    1c3e:	89 0f       	add	r24, r25
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <setupMachine+0x2d6>
    1c44:	95 c0       	rjmp	.+298    	; 0x1d70 <setupMachine+0x400>
		{
			temp[0] = QDT_PROGRAMMING_DATA_SIZE;
    1c46:	81 e2       	ldi	r24, 0x21	; 33
    1c48:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    1c4c:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x1>
    1c50:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    1c52:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x2>
    1c56:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    1c58:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x3>
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = MachineSetupData.ControlConfig;
    1c5e:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <MachineSetupData+0x32>
    1c62:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = 0;
    1c64:	1f 82       	std	Y+7, r1	; 0x07
			temp[7] = MachineSetupData.VendPrice[0]; //heat vend price
    1c66:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1c6a:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    1c6c:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1c70:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];// no heat vend price
    1c72:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x6>
    1c76:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    1c78:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x7>
    1c7c:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0]; //topoff vend price
    1c7e:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x8>
    1c82:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    1c84:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x9>
    1c88:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.CycleLength; //heat cycle time in minutes
    1c8a:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <MachineSetupData+0x31>
    1c8e:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = 0; //heat cycle time in seconds
    1c90:	1f 86       	std	Y+15, r1	; 0x0f
			temp[15] = MachineSetupData.CycleLength; //no heat cycle time in minutes
    1c92:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = 0; //no heat cycle time in seconds
    1c94:	19 8a       	std	Y+17, r1	; 0x11
			temp[17] = MachineSetupData.CoolDownTime;
    1c96:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <MachineSetupData+0x34>
    1c9a:	9a 8b       	std	Y+18, r25	; 0x12
			temp[18] = MachineSetupData.CoolDownTime;
    1c9c:	9b 8b       	std	Y+19, r25	; 0x13
			temp[19] = MachineSetupData.CoolDownTime;
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
			temp[20] = MachineSetupData.CoolDownTime;
    1ca0:	9d 8b       	std	Y+21, r25	; 0x15
			temp[21] = MachineSetupData.TopoffOn;
    1ca2:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <MachineSetupData+0x3d>
    1ca6:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.TopoffTime;
    1ca8:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <MachineSetupData+0x3e>
    1cac:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = 0; //seconds
    1cae:	18 8e       	std	Y+24, r1	; 0x18
			temp[24] = MachineSetupData.HighTempSetting;
    1cb0:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <MachineSetupData+0x37>
    1cb4:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.MediumTempSetting;
    1cb6:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <MachineSetupData+0x38>
    1cba:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.LowTempSetting;
    1cbc:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <MachineSetupData+0x39>
    1cc0:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.DelicateTempSetting;
    1cc2:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <MachineSetupData+0x3a>
    1cc6:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.DefaultCycle;
    1cc8:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.AudioSetting;
    1cce:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <MachineSetupData+0x41>
    1cd2:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.CardReaderDisplayControl;
    1cd4:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <MachineSetupData+0x42>
    1cd8:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = 0; //fahrenheit
    1cda:	18 a2       	std	Y+32, r1	; 0x20
			temp[32] = 1; //display minutes only
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = 0; //disable reversing mode
    1ce0:	1a a2       	std	Y+34, r1	; 0x22
    1ce2:	46 c0       	rjmp	.+140    	; 0x1d70 <setupMachine+0x400>
		}		
	}
	else if( deviceStatus.deviceType[1] == MDC_SERIES /*|| MdcStatus.MachineType[1] == QUANTUM_SERIES */)
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <setupMachine+0x37a>
    1ce8:	43 c0       	rjmp	.+134    	; 0x1d70 <setupMachine+0x400>
	{
		temp[0] = PROGRAMMING_DATA_SIZE;
    1cea:	8b e2       	ldi	r24, 0x2B	; 43
    1cec:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];
    1cee:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
		temp[2] = MachineSetupData.VendPrice[0];
    1cf4:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x4>
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = MachineSetupData.VendPrice[1];
    1cfa:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x5>
    1cfe:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = MachineSetupData.Coin1[0];
    1d00:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <MachineSetupData+0x2b>
    1d04:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = MachineSetupData.Coin1[1];	
    1d06:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <MachineSetupData+0x2c>
    1d0a:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = MachineSetupData.Coin2[0];
    1d0c:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <MachineSetupData+0x2d>
    1d10:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = MachineSetupData.Coin2[1];	
    1d12:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <MachineSetupData+0x2e>
    1d16:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = MachineSetupData.StartPulse[0];
    1d18:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <MachineSetupData+0x2f>
    1d1c:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = MachineSetupData.StartPulse[1];
    1d1e:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <MachineSetupData+0x30>
    1d22:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = MachineSetupData.CycleLength;
    1d24:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <MachineSetupData+0x31>
    1d28:	8b 87       	std	Y+11, r24	; 0x0b
	
		if(MdcStatus.MachineType[0] == PROGRAMMING_DATA_DRYER || MdcStatus.MachineType[0] == PROGRAMMING_DATA_TUMBLER)
    1d2a:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <MdcStatus>
    1d2e:	98 52       	subi	r25, 0x28	; 40
    1d30:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <MachineSetupData+0x33>
    1d34:	20 91 fc 09 	lds	r18, 0x09FC	; 0x8009fc <MachineSetupData+0x32>
    1d38:	92 30       	cpi	r25, 0x02	; 2
    1d3a:	c0 f4       	brcc	.+48     	; 0x1d6c <setupMachine+0x3fc>
		{
			temp[11] = MachineSetupData.CoolDownTime;
    1d3c:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <MachineSetupData+0x34>
    1d40:	9c 87       	std	Y+12, r25	; 0x0c
			temp[12] = MachineSetupData.Coin1TopoffTime;
    1d42:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <MachineSetupData+0x35>
    1d46:	9d 87       	std	Y+13, r25	; 0x0d
			temp[13] = MachineSetupData.Coin2TopoffTime;
    1d48:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <MachineSetupData+0x36>
    1d4c:	9e 87       	std	Y+14, r25	; 0x0e
			temp[14] = MachineSetupData.HighTempSetting;
    1d4e:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <MachineSetupData+0x37>
    1d52:	9f 87       	std	Y+15, r25	; 0x0f
			temp[15] = MachineSetupData.MediumTempSetting;
    1d54:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <MachineSetupData+0x38>
    1d58:	98 8b       	std	Y+16, r25	; 0x10
			temp[16] = MachineSetupData.LowTempSetting;
    1d5a:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <MachineSetupData+0x39>
    1d5e:	99 8b       	std	Y+17, r25	; 0x11
			temp[17] = MachineSetupData.DelicateTempSetting;
    1d60:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <MachineSetupData+0x3a>
    1d64:	9a 8b       	std	Y+18, r25	; 0x12
			temp[18] = MachineSetupData.ControlConfig;
    1d66:	2b 8b       	std	Y+19, r18	; 0x13
			temp[19] = MachineSetupData.DefaultCycle;
    1d68:	8c 8b       	std	Y+20, r24	; 0x14
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <setupMachine+0x400>
		}
		else
		{
			temp[11] = MachineSetupData.ControlConfig;
    1d6c:	2c 87       	std	Y+12, r18	; 0x0c
			temp[12] = MachineSetupData.DefaultCycle;
    1d6e:	8d 87       	std	Y+13, r24	; 0x0d
		}
	}
	return (sendSQData(temp) );		
    1d70:	cf 01       	movw	r24, r30
    1d72:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
}
    1d76:	e2 96       	adiw	r28, 0x32	; 50
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <startMachineCycle>:

bool startMachineCycle()
{
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <startMachineCycle+0x6>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
	u8 temp[2];
	
	temp[0] = MACHINE_START_PACKET_SIZE;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = MACHINE_START_COMMAND;
    1d96:	88 e4       	ldi	r24, 0x48	; 72
    1d98:	8a 83       	std	Y+2, r24	; 0x02
	
	return (sendSQData(temp) );	
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	0e 94 39 09 	call	0x1272	; 0x1272 <sendSQData>
}
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	1f 92       	push	r1
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	64 e6       	ldi	r22, 0x64	; 100
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <__udivmodhi4>
    1dc0:	16 2f       	mov	r17, r22
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	8a e2       	ldi	r24, 0x2A	; 42
    1dc8:	79 83       	std	Y+1, r23	; 0x01
    1dca:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    1dce:	66 ea       	ldi	r22, 0xA6	; 166
    1dd0:	8b e2       	ldi	r24, 0x2B	; 43
    1dd2:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1dd6:	8a e2       	ldi	r24, 0x2A	; 42
    1dd8:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1ddc:	80 7f       	andi	r24, 0xF0	; 240
    1dde:	68 2f       	mov	r22, r24
    1de0:	62 60       	ori	r22, 0x02	; 2
    1de2:	8a e2       	ldi	r24, 0x2A	; 42
    1de4:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1de8:	61 2f       	mov	r22, r17
    1dea:	8d e2       	ldi	r24, 0x2D	; 45
    1dec:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1df0:	79 81       	ldd	r23, Y+1	; 0x01
    1df2:	67 2f       	mov	r22, r23
    1df4:	8c e2       	ldi	r24, 0x2C	; 44
    1df6:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0f 90       	pop	r0
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	08 95       	ret

00001e08 <Rc522Init>:
    1e08:	6f e0       	ldi	r22, 0x0F	; 15
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e10:	60 e4       	ldi	r22, 0x40	; 64
    1e12:	85 e1       	ldi	r24, 0x15	; 21
    1e14:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e18:	48 e0       	ldi	r20, 0x08	; 8
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	88 e0       	ldi	r24, 0x08	; 8
    1e1e:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    1e22:	82 e1       	ldi	r24, 0x12	; 18
    1e24:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1e28:	88 70       	andi	r24, 0x08	; 8
    1e2a:	68 2f       	mov	r22, r24
    1e2c:	60 68       	ori	r22, 0x80	; 128
    1e2e:	82 e1       	ldi	r24, 0x12	; 18
    1e30:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e34:	83 e1       	ldi	r24, 0x13	; 19
    1e36:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1e3a:	88 70       	andi	r24, 0x08	; 8
    1e3c:	68 2f       	mov	r22, r24
    1e3e:	60 68       	ori	r22, 0x80	; 128
    1e40:	83 e1       	ldi	r24, 0x13	; 19
    1e42:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e46:	6d e6       	ldi	r22, 0x6D	; 109
    1e48:	89 e1       	ldi	r24, 0x19	; 25
    1e4a:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e4e:	68 e4       	ldi	r22, 0x48	; 72
    1e50:	86 e2       	ldi	r24, 0x26	; 38
    1e52:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e56:	65 e5       	ldi	r22, 0x55	; 85
    1e58:	88 e1       	ldi	r24, 0x18	; 24
    1e5a:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e5e:	66 e2       	ldi	r22, 0x26	; 38
    1e60:	84 e2       	ldi	r24, 0x24	; 36
    1e62:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e66:	64 ef       	ldi	r22, 0xF4	; 244
    1e68:	87 e2       	ldi	r24, 0x27	; 39
    1e6a:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e6e:	88 e8       	ldi	r24, 0x88	; 136
    1e70:	93 e1       	ldi	r25, 0x13	; 19
    1e72:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    1e76:	43 e0       	ldi	r20, 0x03	; 3
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	84 e1       	ldi	r24, 0x14	; 20
    1e7c:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    1e80:	40 e4       	ldi	r20, 0x40	; 64
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	8c e0       	ldi	r24, 0x0C	; 12
    1e86:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    1e8a:	84 e0       	ldi	r24, 0x04	; 4
    1e8c:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1e90:	80 ff       	sbrs	r24, 0
    1e92:	fb cf       	rjmp	.-10     	; 0x1e8a <Rc522Init+0x82>
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	84 e0       	ldi	r24, 0x04	; 4
    1e98:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1e9c:	88 e8       	ldi	r24, 0x88	; 136
    1e9e:	93 e1       	ldi	r25, 0x13	; 19
    1ea0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    1ea4:	6a e1       	ldi	r22, 0x1A	; 26
    1ea6:	8b e0       	ldi	r24, 0x0B	; 11
    1ea8:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1eac:	60 e1       	ldi	r22, 0x10	; 16
    1eae:	86 e1       	ldi	r24, 0x16	; 22
    1eb0:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1eb4:	64 e8       	ldi	r22, 0x84	; 132
    1eb6:	87 e1       	ldi	r24, 0x17	; 23
    1eb8:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1ec4:	80 ed       	ldi	r24, 0xD0	; 208
    1ec6:	97 e0       	ldi	r25, 0x07	; 7
    1ec8:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <SetTimeOut>

00001ecc <M522PcdCmd>:
    1ecc:	9f 92       	push	r9
    1ece:	af 92       	push	r10
    1ed0:	bf 92       	push	r11
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	18 2f       	mov	r17, r24
    1ee4:	7b 01       	movw	r14, r22
    1ee6:	ea 01       	movw	r28, r20
    1ee8:	62 e4       	ldi	r22, 0x42	; 66
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	85 e0       	ldi	r24, 0x05	; 5
    1ef4:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1ef8:	60 e8       	ldi	r22, 0x80	; 128
    1efa:	8a e0       	ldi	r24, 0x0A	; 10
    1efc:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1f06:	68 2f       	mov	r22, r24
    1f08:	60 7f       	andi	r22, 0xF0	; 240
    1f0a:	1c 30       	cpi	r17, 0x0C	; 12
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <M522PcdCmd+0x44>
    1f0e:	6c 60       	ori	r22, 0x0C	; 12
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1f16:	d0 93 76 05 	sts	0x0576, r29	; 0x800576 <MpIsrInfo+0x1>
    1f1a:	c0 93 75 05 	sts	0x0575, r28	; 0x800575 <MpIsrInfo>
    1f1e:	10 31       	cpi	r17, 0x10	; 16
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <M522PcdCmd+0x58>
    1f22:	63 c0       	rjmp	.+198    	; 0x1fea <M522PcdCmd+0x11e>
    1f24:	81 2f       	mov	r24, r17
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	fc 01       	movw	r30, r24
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	e2 5f       	subi	r30, 0xF2	; 242
    1f30:	fa 4f       	sbci	r31, 0xFA	; 250
    1f32:	c0 81       	ld	r28, Z
    1f34:	d1 81       	ldd	r29, Z+1	; 0x01
    1f36:	fc 01       	movw	r30, r24
    1f38:	e2 50       	subi	r30, 0x02	; 2
    1f3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f3c:	c0 80       	ld	r12, Z
    1f3e:	fc 01       	movw	r30, r24
    1f40:	e2 51       	subi	r30, 0x12	; 18
    1f42:	fb 4f       	sbci	r31, 0xFB	; 251
    1f44:	00 81       	ld	r16, Z
    1f46:	fc 01       	movw	r30, r24
    1f48:	e2 52       	subi	r30, 0x22	; 34
    1f4a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f4c:	90 80       	ld	r9, Z
    1f4e:	20 97       	sbiw	r28, 0x00	; 0
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <M522PcdCmd+0x88>
    1f52:	50 c0       	rjmp	.+160    	; 0x1ff4 <M522PcdCmd+0x128>
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1f5a:	68 2f       	mov	r22, r24
    1f5c:	6c 29       	or	r22, r12
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1f6a:	68 2f       	mov	r22, r24
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1f72:	d1 2c       	mov	r13, r1
    1f74:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    1f78:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    1f7c:	83 81       	ldd	r24, Z+3	; 0x03
    1f7e:	d8 16       	cp	r13, r24
    1f80:	48 f4       	brcc	.+18     	; 0x1f94 <M522PcdCmd+0xc8>
    1f82:	f7 01       	movw	r30, r14
    1f84:	ed 0d       	add	r30, r13
    1f86:	f1 1d       	adc	r31, r1
    1f88:	60 81       	ld	r22, Z
    1f8a:	89 e0       	ldi	r24, 0x09	; 9
    1f8c:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1f90:	d3 94       	inc	r13
    1f92:	f0 cf       	rjmp	.-32     	; 0x1f74 <M522PcdCmd+0xa8>
    1f94:	1c 30       	cpi	r17, 0x0C	; 12
    1f96:	31 f4       	brne	.+12     	; 0x1fa4 <M522PcdCmd+0xd8>
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	8d e0       	ldi	r24, 0x0D	; 13
    1f9e:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    1fa2:	09 c0       	rjmp	.+18     	; 0x1fb6 <M522PcdCmd+0xea>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1faa:	80 7f       	andi	r24, 0xF0	; 240
    1fac:	68 2f       	mov	r22, r24
    1fae:	61 2b       	or	r22, r17
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    1fb6:	aa 24       	eor	r10, r10
    1fb8:	a3 94       	inc	r10
    1fba:	ba 2c       	mov	r11, r10
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
    1fbe:	00 23       	and	r16, r16
    1fc0:	71 f0       	breq	.+28     	; 0x1fde <M522PcdCmd+0x112>
    1fc2:	81 2f       	mov	r24, r17
    1fc4:	80 23       	and	r24, r16
    1fc6:	59 f4       	brne	.+22     	; 0x1fde <M522PcdCmd+0x112>
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1fce:	18 2f       	mov	r17, r24
    1fd0:	85 e0       	ldi	r24, 0x05	; 5
    1fd2:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	a8 1a       	sub	r10, r24
    1fda:	b1 08       	sbc	r11, r1
    1fdc:	81 f7       	brne	.-32     	; 0x1fbe <M522PcdCmd+0xf2>
    1fde:	01 23       	and	r16, r17
    1fe0:	11 70       	andi	r17, 0x01	; 1
    1fe2:	c1 2f       	mov	r28, r17
    1fe4:	e0 e0       	ldi	r30, 0x00	; 0
    1fe6:	de 2f       	mov	r29, r30
    1fe8:	05 c0       	rjmp	.+10     	; 0x1ff4 <M522PcdCmd+0x128>
    1fea:	91 2c       	mov	r9, r1
    1fec:	c1 2c       	mov	r12, r1
    1fee:	02 e4       	ldi	r16, 0x42	; 66
    1ff0:	c3 e0       	ldi	r28, 0x03	; 3
    1ff2:	d1 e0       	ldi	r29, 0x01	; 1
    1ff4:	4c 2d       	mov	r20, r12
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    2008:	99 20       	and	r9, r9
    200a:	09 f4       	brne	.+2      	; 0x200e <M522PcdCmd+0x142>
    200c:	7e c0       	rjmp	.+252    	; 0x210a <M522PcdCmd+0x23e>
    200e:	20 97       	sbiw	r28, 0x00	; 0
    2010:	09 f0       	breq	.+2      	; 0x2014 <M522PcdCmd+0x148>
    2012:	7b c0       	rjmp	.+246    	; 0x210a <M522PcdCmd+0x23e>
    2014:	c0 90 75 05 	lds	r12, 0x0575	; 0x800575 <MpIsrInfo>
    2018:	d0 90 76 05 	lds	r13, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    201c:	8a e0       	ldi	r24, 0x0A	; 10
    201e:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    2022:	f6 01       	movw	r30, r12
    2024:	84 83       	std	Z+4, r24	; 0x04
    2026:	8c e0       	ldi	r24, 0x0C	; 12
    2028:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    202c:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    2030:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    2034:	87 70       	andi	r24, 0x07	; 7
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	96 83       	std	Z+6, r25	; 0x06
    203a:	85 83       	std	Z+5, r24	; 0x05
    203c:	86 e0       	ldi	r24, 0x06	; 6
    203e:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    2042:	18 2f       	mov	r17, r24
    2044:	88 23       	and	r24, r24
    2046:	09 f4       	brne	.+2      	; 0x204a <M522PcdCmd+0x17e>
    2048:	46 c0       	rjmp	.+140    	; 0x20d6 <M522PcdCmd+0x20a>
    204a:	83 fd       	sbrc	r24, 3
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <M522PcdCmd+0x18c>
    204e:	81 ff       	sbrs	r24, 1
    2050:	05 c0       	rjmp	.+10     	; 0x205c <M522PcdCmd+0x190>
    2052:	c3 e0       	ldi	r28, 0x03	; 3
    2054:	d0 e0       	ldi	r29, 0x00	; 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <M522PcdCmd+0x190>
    2058:	c6 e0       	ldi	r28, 0x06	; 6
    205a:	d0 e0       	ldi	r29, 0x00	; 0
    205c:	10 fd       	sbrc	r17, 0
    205e:	22 c0       	rjmp	.+68     	; 0x20a4 <M522PcdCmd+0x1d8>
    2060:	14 fd       	sbrc	r17, 4
    2062:	23 c0       	rjmp	.+70     	; 0x20aa <M522PcdCmd+0x1de>
    2064:	12 ff       	sbrs	r17, 2
    2066:	19 c0       	rjmp	.+50     	; 0x209a <M522PcdCmd+0x1ce>
    2068:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    206c:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    2070:	c4 81       	ldd	r28, Z+4	; 0x04
    2072:	c1 30       	cpi	r28, 0x01	; 1
    2074:	e9 f4       	brne	.+58     	; 0x20b0 <M522PcdCmd+0x1e4>
    2076:	85 81       	ldd	r24, Z+5	; 0x05
    2078:	96 81       	ldd	r25, Z+6	; 0x06
    207a:	8b 7f       	andi	r24, 0xFB	; 251
    207c:	89 2b       	or	r24, r25
    207e:	c1 f4       	brne	.+48     	; 0x20b0 <M522PcdCmd+0x1e4>
    2080:	89 e0       	ldi	r24, 0x09	; 9
    2082:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    2086:	f7 01       	movw	r30, r14
    2088:	80 83       	st	Z, r24
    208a:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    208e:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    2092:	c4 83       	std	Z+4, r28	; 0x04
    2094:	c2 e0       	ldi	r28, 0x02	; 2
    2096:	d2 e0       	ldi	r29, 0x02	; 2
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <M522PcdCmd+0x1e8>
    209a:	16 ff       	sbrs	r17, 6
    209c:	0b c0       	rjmp	.+22     	; 0x20b4 <M522PcdCmd+0x1e8>
    209e:	c4 e0       	ldi	r28, 0x04	; 4
    20a0:	de e7       	ldi	r29, 0x7E	; 126
    20a2:	08 c0       	rjmp	.+16     	; 0x20b4 <M522PcdCmd+0x1e8>
    20a4:	cb e0       	ldi	r28, 0x0B	; 11
    20a6:	d0 e0       	ldi	r29, 0x00	; 0
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <M522PcdCmd+0x1e8>
    20aa:	c9 e0       	ldi	r28, 0x09	; 9
    20ac:	d0 e0       	ldi	r29, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <M522PcdCmd+0x1e8>
    20b0:	c2 e0       	ldi	r28, 0x02	; 2
    20b2:	d0 e0       	ldi	r29, 0x00	; 0
    20b4:	17 fd       	sbrc	r17, 7
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <M522PcdCmd+0x1f6>
    20b8:	20 97       	sbiw	r28, 0x00	; 0
    20ba:	29 f4       	brne	.+10     	; 0x20c6 <M522PcdCmd+0x1fa>
    20bc:	cc e0       	ldi	r28, 0x0C	; 12
    20be:	d0 e0       	ldi	r29, 0x00	; 0
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <M522PcdCmd+0x1fa>
    20c2:	cd e0       	ldi	r28, 0x0D	; 13
    20c4:	d0 e0       	ldi	r29, 0x00	; 0
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	86 e0       	ldi	r24, 0x06	; 6
    20ca:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    20ce:	c2 30       	cpi	r28, 0x02	; 2
    20d0:	f2 e0       	ldi	r31, 0x02	; 2
    20d2:	df 07       	cpc	r29, r31
    20d4:	d1 f0       	breq	.+52     	; 0x210a <M522PcdCmd+0x23e>
    20d6:	10 e0       	ldi	r17, 0x00	; 0
    20d8:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <MpIsrInfo>
    20dc:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <MpIsrInfo+0x1>
    20e0:	84 81       	ldd	r24, Z+4	; 0x04
    20e2:	18 17       	cp	r17, r24
    20e4:	50 f4       	brcc	.+20     	; 0x20fa <M522PcdCmd+0x22e>
    20e6:	67 01       	movw	r12, r14
    20e8:	c1 0e       	add	r12, r17
    20ea:	d1 1c       	adc	r13, r1
    20ec:	89 e0       	ldi	r24, 0x09	; 9
    20ee:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    20f2:	f6 01       	movw	r30, r12
    20f4:	80 83       	st	Z, r24
    20f6:	1f 5f       	subi	r17, 0xFF	; 255
    20f8:	ef cf       	rjmp	.-34     	; 0x20d8 <M522PcdCmd+0x20c>
    20fa:	25 81       	ldd	r18, Z+5	; 0x05
    20fc:	36 81       	ldd	r19, Z+6	; 0x06
    20fe:	23 2b       	or	r18, r19
    2100:	21 f0       	breq	.+8      	; 0x210a <M522PcdCmd+0x23e>
    2102:	88 23       	and	r24, r24
    2104:	11 f0       	breq	.+4      	; 0x210a <M522PcdCmd+0x23e>
    2106:	81 50       	subi	r24, 0x01	; 1
    2108:	84 83       	std	Z+4, r24	; 0x04
    210a:	60 2f       	mov	r22, r16
    210c:	84 e0       	ldi	r24, 0x04	; 4
    210e:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	85 e0       	ldi	r24, 0x05	; 5
    2116:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    211a:	60 e8       	ldi	r22, 0x80	; 128
    211c:	8a e0       	ldi	r24, 0x0A	; 10
    211e:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	84 e0       	ldi	r24, 0x04	; 4
    2126:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	8d e0       	ldi	r24, 0x0D	; 13
    212e:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    2132:	ce 01       	movw	r24, r28
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	bf 90       	pop	r11
    2146:	af 90       	pop	r10
    2148:	9f 90       	pop	r9
    214a:	08 95       	ret

0000214c <Request>:
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	18 2f       	mov	r17, r24
    2154:	eb 01       	movw	r28, r22
    2156:	48 e0       	ldi	r20, 0x08	; 8
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	88 e0       	ldi	r24, 0x08	; 8
    215c:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    2160:	60 e8       	ldi	r22, 0x80	; 128
    2162:	8e e0       	ldi	r24, 0x0E	; 14
    2164:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	82 e1       	ldi	r24, 0x12	; 18
    216e:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	83 e1       	ldi	r24, 0x13	; 19
    2178:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    217c:	67 e0       	ldi	r22, 0x07	; 7
    217e:	8d e0       	ldi	r24, 0x0D	; 13
    2180:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    2184:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo>
    2188:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <MInfo+0x1>
    218c:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x2>
    2190:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x4>
    2194:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <MInfo+0x6>
    2198:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x5>
    219c:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <MInfo+0x7>
    21a0:	10 93 1e 0a 	sts	0x0A1E, r17	; 0x800a1e <SerBuffer>
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <MInfo+0x3>
    21aa:	80 e9       	ldi	r24, 0x90	; 144
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    21b2:	42 e3       	ldi	r20, 0x32	; 50
    21b4:	5a e0       	ldi	r21, 0x0A	; 10
    21b6:	6e e1       	ldi	r22, 0x1E	; 30
    21b8:	7a e0       	ldi	r23, 0x0A	; 10
    21ba:	8c e0       	ldi	r24, 0x0C	; 12
    21bc:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <M522PcdCmd>
    21c0:	88 23       	and	r24, r24
    21c2:	11 f0       	breq	.+4      	; 0x21c8 <Request+0x7c>
    21c4:	86 30       	cpi	r24, 0x06	; 6
    21c6:	89 f4       	brne	.+34     	; 0x21ea <Request+0x9e>
    21c8:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <MInfo+0x4>
    21cc:	92 30       	cpi	r25, 0x02	; 2
    21ce:	81 f4       	brne	.+32     	; 0x21f0 <Request+0xa4>
    21d0:	20 91 37 0a 	lds	r18, 0x0A37	; 0x800a37 <MInfo+0x5>
    21d4:	30 91 38 0a 	lds	r19, 0x0A38	; 0x800a38 <MInfo+0x6>
    21d8:	23 2b       	or	r18, r19
    21da:	51 f4       	brne	.+20     	; 0x21f0 <Request+0xa4>
    21dc:	20 91 1e 0a 	lds	r18, 0x0A1E	; 0x800a1e <SerBuffer>
    21e0:	30 91 1f 0a 	lds	r19, 0x0A1F	; 0x800a1f <SerBuffer+0x1>
    21e4:	39 83       	std	Y+1, r19	; 0x01
    21e6:	28 83       	st	Y, r18
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <Request+0xa6>
    21ea:	18 82       	st	Y, r1
    21ec:	19 82       	std	Y+1, r1	; 0x01
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <Request+0xa6>
    21f0:	8b e0       	ldi	r24, 0x0B	; 11
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	08 95       	ret

000021fc <CascAnticoll>:
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	9f 92       	push	r9
    2202:	af 92       	push	r10
    2204:	bf 92       	push	r11
    2206:	cf 92       	push	r12
    2208:	df 92       	push	r13
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	1f 92       	push	r1
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	e8 2e       	mov	r14, r24
    221e:	f6 2e       	mov	r15, r22
    2220:	3a 01       	movw	r6, r20
    2222:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <SerBuffer+0x2>
    2226:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <SerBuffer+0x3>
    222a:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <SerBuffer+0x4>
    222e:	10 92 23 0a 	sts	0x0A23, r1	; 0x800a23 <SerBuffer+0x5>
    2232:	10 92 24 0a 	sts	0x0A24, r1	; 0x800a24 <SerBuffer+0x6>
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	82 e1       	ldi	r24, 0x12	; 18
    223c:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	83 e1       	ldi	r24, 0x13	; 19
    2246:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	8e e0       	ldi	r24, 0x0E	; 14
    224e:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    2252:	b6 2c       	mov	r11, r6
    2254:	84 e0       	ldi	r24, 0x04	; 4
    2256:	c8 2e       	mov	r12, r24
    2258:	d1 2c       	mov	r13, r1
    225a:	30 e2       	ldi	r19, 0x20	; 32
    225c:	3f 15       	cp	r19, r15
    225e:	08 f4       	brcc	.+2      	; 0x2262 <CascAnticoll+0x66>
    2260:	a9 c0       	rjmp	.+338    	; 0x23b4 <CascAnticoll+0x1b8>
    2262:	2f 2d       	mov	r18, r15
    2264:	27 70       	andi	r18, 0x07	; 7
    2266:	9f 2d       	mov	r25, r15
    2268:	96 95       	lsr	r25
    226a:	96 95       	lsr	r25
    226c:	96 95       	lsr	r25
    226e:	22 23       	and	r18, r18
    2270:	21 f0       	breq	.+8      	; 0x227a <CascAnticoll+0x7e>
    2272:	aa 24       	eor	r10, r10
    2274:	a3 94       	inc	r10
    2276:	a9 0e       	add	r10, r25
    2278:	01 c0       	rjmp	.+2      	; 0x227c <CascAnticoll+0x80>
    227a:	a9 2e       	mov	r10, r25
    227c:	e0 92 1e 0a 	sts	0x0A1E, r14	; 0x800a1e <SerBuffer>
    2280:	80 e2       	ldi	r24, 0x20	; 32
    2282:	82 0f       	add	r24, r18
    2284:	e0 e1       	ldi	r30, 0x10	; 16
    2286:	9e 9f       	mul	r25, r30
    2288:	80 0d       	add	r24, r0
    228a:	11 24       	eor	r1, r1
    228c:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SerBuffer+0x1>
    2290:	a0 e2       	ldi	r26, 0x20	; 32
    2292:	ba e0       	ldi	r27, 0x0A	; 10
    2294:	f3 01       	movw	r30, r6
    2296:	8e 2f       	mov	r24, r30
    2298:	8b 19       	sub	r24, r11
    229a:	8a 15       	cp	r24, r10
    229c:	18 f4       	brcc	.+6      	; 0x22a4 <CascAnticoll+0xa8>
    229e:	81 91       	ld	r24, Z+
    22a0:	8d 93       	st	X+, r24
    22a2:	f9 cf       	rjmp	.-14     	; 0x2296 <CascAnticoll+0x9a>
    22a4:	f0 e1       	ldi	r31, 0x10	; 16
    22a6:	2f 9f       	mul	r18, r31
    22a8:	b0 01       	movw	r22, r0
    22aa:	11 24       	eor	r1, r1
    22ac:	62 2b       	or	r22, r18
    22ae:	8d e0       	ldi	r24, 0x0D	; 13
    22b0:	29 83       	std	Y+1, r18	; 0x01
    22b2:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    22b6:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo>
    22ba:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <MInfo+0x1>
    22be:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x2>
    22c2:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x4>
    22c6:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <MInfo+0x6>
    22ca:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x5>
    22ce:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <MInfo+0x7>
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	8a 0d       	add	r24, r10
    22d6:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <MInfo+0x3>
    22da:	80 e1       	ldi	r24, 0x10	; 16
    22dc:	97 e2       	ldi	r25, 0x27	; 39
    22de:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    22e2:	42 e3       	ldi	r20, 0x32	; 50
    22e4:	5a e0       	ldi	r21, 0x0A	; 10
    22e6:	6e e1       	ldi	r22, 0x1E	; 30
    22e8:	7a e0       	ldi	r23, 0x0A	; 10
    22ea:	8c e0       	ldi	r24, 0x0C	; 12
    22ec:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <M522PcdCmd>
    22f0:	8c 01       	movw	r16, r24
    22f2:	29 81       	ldd	r18, Y+1	; 0x01
    22f4:	86 30       	cpi	r24, 0x06	; 6
    22f6:	91 05       	cpc	r25, r1
    22f8:	19 f0       	breq	.+6      	; 0x2300 <CascAnticoll+0x104>
    22fa:	89 2b       	or	r24, r25
    22fc:	09 f0       	breq	.+2      	; 0x2300 <CascAnticoll+0x104>
    22fe:	5f c0       	rjmp	.+190    	; 0x23be <CascAnticoll+0x1c2>
    2300:	60 91 37 0a 	lds	r22, 0x0A37	; 0x800a37 <MInfo+0x5>
    2304:	70 91 38 0a 	lds	r23, 0x0A38	; 0x800a38 <MInfo+0x6>
    2308:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <MInfo+0x4>
    230c:	a6 2f       	mov	r26, r22
    230e:	38 e0       	ldi	r19, 0x08	; 8
    2310:	83 9f       	mul	r24, r19
    2312:	a0 0d       	add	r26, r0
    2314:	11 24       	eor	r1, r1
    2316:	a2 1b       	sub	r26, r18
    2318:	4f 2d       	mov	r20, r15
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	4a 0f       	add	r20, r26
    231e:	51 1d       	adc	r21, r1
    2320:	49 32       	cpi	r20, 0x29	; 41
    2322:	51 05       	cpc	r21, r1
    2324:	0c f0       	brlt	.+2      	; 0x2328 <CascAnticoll+0x12c>
    2326:	49 c0       	rjmp	.+146    	; 0x23ba <CascAnticoll+0x1be>
    2328:	67 2b       	or	r22, r23
    232a:	19 f0       	breq	.+6      	; 0x2332 <CascAnticoll+0x136>
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <MInfo+0x4>
    2332:	4a 2d       	mov	r20, r10
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	22 23       	and	r18, r18
    2338:	59 f0       	breq	.+22     	; 0x2350 <CascAnticoll+0x154>
    233a:	fa 01       	movw	r30, r20
    233c:	31 97       	sbiw	r30, 0x01	; 1
    233e:	e6 0d       	add	r30, r6
    2340:	f7 1d       	adc	r31, r7
    2342:	90 81       	ld	r25, Z
    2344:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SerBuffer>
    2348:	89 2b       	or	r24, r25
    234a:	80 83       	st	Z, r24
    234c:	b1 e0       	ldi	r27, 0x01	; 1
    234e:	01 c0       	rjmp	.+2      	; 0x2352 <CascAnticoll+0x156>
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	a1 2c       	mov	r10, r1
    2354:	c6 01       	movw	r24, r12
    2356:	84 1b       	sub	r24, r20
    2358:	95 0b       	sbc	r25, r21
    235a:	6b 2f       	mov	r22, r27
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	2a 2d       	mov	r18, r10
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	74 f4       	brge	.+28     	; 0x2384 <CascAnticoll+0x188>
    2368:	f9 01       	movw	r30, r18
    236a:	e2 5e       	subi	r30, 0xE2	; 226
    236c:	f5 4f       	sbci	r31, 0xF5	; 245
    236e:	e6 0f       	add	r30, r22
    2370:	f7 1f       	adc	r31, r23
    2372:	90 80       	ld	r9, Z
    2374:	26 0d       	add	r18, r6
    2376:	37 1d       	adc	r19, r7
    2378:	f9 01       	movw	r30, r18
    237a:	e4 0f       	add	r30, r20
    237c:	f5 1f       	adc	r31, r21
    237e:	90 82       	st	Z, r9
    2380:	a3 94       	inc	r10
    2382:	ed cf       	rjmp	.-38     	; 0x235e <CascAnticoll+0x162>
    2384:	06 30       	cpi	r16, 0x06	; 6
    2386:	11 05       	cpc	r17, r1
    2388:	11 f4       	brne	.+4      	; 0x238e <CascAnticoll+0x192>
    238a:	fa 0e       	add	r15, r26
    238c:	66 cf       	rjmp	.-308    	; 0x225a <CascAnticoll+0x5e>
    238e:	f3 01       	movw	r30, r6
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	80 81       	ld	r24, Z
    2394:	89 27       	eor	r24, r25
    2396:	92 81       	ldd	r25, Z+2	; 0x02
    2398:	89 27       	eor	r24, r25
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	89 27       	eor	r24, r25
    239e:	22 5e       	subi	r18, 0xE2	; 226
    23a0:	35 4f       	sbci	r19, 0xF5	; 245
    23a2:	f9 01       	movw	r30, r18
    23a4:	eb 0f       	add	r30, r27
    23a6:	f1 1d       	adc	r31, r1
    23a8:	90 81       	ld	r25, Z
    23aa:	89 17       	cp	r24, r25
    23ac:	41 f0       	breq	.+16     	; 0x23be <CascAnticoll+0x1c2>
    23ae:	01 e0       	ldi	r16, 0x01	; 1
    23b0:	15 e0       	ldi	r17, 0x05	; 5
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <CascAnticoll+0x1c2>
    23b4:	01 e0       	ldi	r16, 0x01	; 1
    23b6:	11 e0       	ldi	r17, 0x01	; 1
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <CascAnticoll+0x1c2>
    23ba:	04 e0       	ldi	r16, 0x04	; 4
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	8d e0       	ldi	r24, 0x0D	; 13
    23c2:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    23c6:	60 e8       	ldi	r22, 0x80	; 128
    23c8:	8e e0       	ldi	r24, 0x0E	; 14
    23ca:	0e 94 aa 13 	call	0x2754	; 0x2754 <RcSetReg>
    23ce:	c8 01       	movw	r24, r16
    23d0:	0f 90       	pop	r0
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	df 90       	pop	r13
    23e0:	cf 90       	pop	r12
    23e2:	bf 90       	pop	r11
    23e4:	af 90       	pop	r10
    23e6:	9f 90       	pop	r9
    23e8:	7f 90       	pop	r7
    23ea:	6f 90       	pop	r6
    23ec:	08 95       	ret

000023ee <Select>:
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	f8 2e       	mov	r15, r24
    23fa:	eb 01       	movw	r28, r22
    23fc:	8a 01       	movw	r16, r20
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	82 e1       	ldi	r24, 0x12	; 18
    2404:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	83 e1       	ldi	r24, 0x13	; 19
    240e:	0e 94 c8 13 	call	0x2790	; 0x2790 <RcModifyReg>
    2412:	f0 92 1e 0a 	sts	0x0A1E, r15	; 0x800a1e <SerBuffer>
    2416:	80 e7       	ldi	r24, 0x70	; 112
    2418:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SerBuffer+0x1>
    241c:	fe 01       	movw	r30, r28
    241e:	a0 e2       	ldi	r26, 0x20	; 32
    2420:	ba e0       	ldi	r27, 0x0A	; 10
    2422:	ce 01       	movw	r24, r28
    2424:	04 96       	adiw	r24, 0x04	; 4
    2426:	21 91       	ld	r18, Z+
    2428:	2d 93       	st	X+, r18
    242a:	e8 17       	cp	r30, r24
    242c:	f9 07       	cpc	r31, r25
    242e:	d9 f7       	brne	.-10     	; 0x2426 <Select+0x38>
    2430:	99 81       	ldd	r25, Y+1	; 0x01
    2432:	88 81       	ld	r24, Y
    2434:	89 27       	eor	r24, r25
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	89 27       	eor	r24, r25
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	89 27       	eor	r24, r25
    243e:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SerBuffer+0x6>
    2442:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo>
    2446:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <MInfo+0x1>
    244a:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x2>
    244e:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x4>
    2452:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <MInfo+0x6>
    2456:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x5>
    245a:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <MInfo+0x7>
    245e:	87 e0       	ldi	r24, 0x07	; 7
    2460:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <MInfo+0x3>
    2464:	80 ed       	ldi	r24, 0xD0	; 208
    2466:	97 e0       	ldi	r25, 0x07	; 7
    2468:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    246c:	42 e3       	ldi	r20, 0x32	; 50
    246e:	5a e0       	ldi	r21, 0x0A	; 10
    2470:	6e e1       	ldi	r22, 0x1E	; 30
    2472:	7a e0       	ldi	r23, 0x0A	; 10
    2474:	8c e0       	ldi	r24, 0x0C	; 12
    2476:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <M522PcdCmd>
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	89 f4       	brne	.+34     	; 0x24a0 <Select+0xb2>
    247e:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <MInfo+0x4>
    2482:	21 30       	cpi	r18, 0x01	; 1
    2484:	59 f4       	brne	.+22     	; 0x249c <Select+0xae>
    2486:	20 91 37 0a 	lds	r18, 0x0A37	; 0x800a37 <MInfo+0x5>
    248a:	30 91 38 0a 	lds	r19, 0x0A38	; 0x800a38 <MInfo+0x6>
    248e:	23 2b       	or	r18, r19
    2490:	29 f4       	brne	.+10     	; 0x249c <Select+0xae>
    2492:	20 91 1e 0a 	lds	r18, 0x0A1E	; 0x800a1e <SerBuffer>
    2496:	f8 01       	movw	r30, r16
    2498:	20 83       	st	Z, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <Select+0xb2>
    249c:	84 e0       	ldi	r24, 0x04	; 4
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	08 95       	ret

000024ac <AnticollSelect>:
    24ac:	6f 92       	push	r6
    24ae:	7f 92       	push	r7
    24b0:	8f 92       	push	r8
    24b2:	9f 92       	push	r9
    24b4:	af 92       	push	r10
    24b6:	bf 92       	push	r11
    24b8:	cf 92       	push	r12
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	2d 97       	sbiw	r28, 0x0d	; 13
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	7b 01       	movw	r14, r22
    24da:	6a 01       	movw	r12, r20
    24dc:	9e 01       	movw	r18, r28
    24de:	2f 5f       	subi	r18, 0xFF	; 255
    24e0:	3f 4f       	sbci	r19, 0xFF	; 255
    24e2:	59 01       	movw	r10, r18
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	10 e0       	ldi	r17, 0x00	; 0
    24ea:	88 23       	and	r24, r24
    24ec:	a1 f0       	breq	.+40     	; 0x2516 <AnticollSelect+0x6a>
    24ee:	81 32       	cpi	r24, 0x21	; 33
    24f0:	40 f0       	brcs	.+16     	; 0x2502 <AnticollSelect+0x56>
    24f2:	00 ee       	ldi	r16, 0xE0	; 224
    24f4:	08 0f       	add	r16, r24
    24f6:	11 30       	cpi	r17, 0x01	; 1
    24f8:	61 f0       	breq	.+24     	; 0x2512 <AnticollSelect+0x66>
    24fa:	12 30       	cpi	r17, 0x02	; 2
    24fc:	71 f5       	brne	.+92     	; 0x255a <AnticollSelect+0xae>
    24fe:	80 e2       	ldi	r24, 0x20	; 32
    2500:	05 c0       	rjmp	.+10     	; 0x250c <AnticollSelect+0x60>
    2502:	11 30       	cpi	r17, 0x01	; 1
    2504:	51 f0       	breq	.+20     	; 0x251a <AnticollSelect+0x6e>
    2506:	12 30       	cpi	r17, 0x02	; 2
    2508:	99 f4       	brne	.+38     	; 0x2530 <AnticollSelect+0x84>
    250a:	00 e0       	ldi	r16, 0x00	; 0
    250c:	67 e9       	ldi	r22, 0x97	; 151
    250e:	96 2e       	mov	r9, r22
    2510:	12 c0       	rjmp	.+36     	; 0x2536 <AnticollSelect+0x8a>
    2512:	80 e2       	ldi	r24, 0x20	; 32
    2514:	03 c0       	rjmp	.+6      	; 0x251c <AnticollSelect+0x70>
    2516:	11 30       	cpi	r17, 0x01	; 1
    2518:	89 f4       	brne	.+34     	; 0x253c <AnticollSelect+0x90>
    251a:	00 e0       	ldi	r16, 0x00	; 0
    251c:	6a 80       	ldd	r6, Y+2	; 0x02
    251e:	7b 80       	ldd	r7, Y+3	; 0x03
    2520:	8c 80       	ldd	r8, Y+4	; 0x04
    2522:	f7 01       	movw	r30, r14
    2524:	60 82       	st	Z, r6
    2526:	71 82       	std	Z+1, r7	; 0x01
    2528:	82 82       	std	Z+2, r8	; 0x02
    252a:	55 e9       	ldi	r21, 0x95	; 149
    252c:	95 2e       	mov	r9, r21
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <AnticollSelect+0x8a>
    2530:	00 e0       	ldi	r16, 0x00	; 0
    2532:	43 e9       	ldi	r20, 0x93	; 147
    2534:	94 2e       	mov	r9, r20
    2536:	80 32       	cpi	r24, 0x20	; 32
    2538:	31 f4       	brne	.+12     	; 0x2546 <AnticollSelect+0x9a>
    253a:	11 c0       	rjmp	.+34     	; 0x255e <AnticollSelect+0xb2>
    253c:	12 30       	cpi	r17, 0x02	; 2
    253e:	29 f3       	breq	.-54     	; 0x250a <AnticollSelect+0x5e>
    2540:	00 e0       	ldi	r16, 0x00	; 0
    2542:	93 e9       	ldi	r25, 0x93	; 147
    2544:	99 2e       	mov	r9, r25
    2546:	21 15       	cp	r18, r1
    2548:	31 05       	cpc	r19, r1
    254a:	09 f5       	brne	.+66     	; 0x258e <AnticollSelect+0xe2>
    254c:	a5 01       	movw	r20, r10
    254e:	68 2f       	mov	r22, r24
    2550:	89 2d       	mov	r24, r9
    2552:	0e 94 fe 10 	call	0x21fc	; 0x21fc <CascAnticoll>
    2556:	9c 01       	movw	r18, r24
    2558:	02 c0       	rjmp	.+4      	; 0x255e <AnticollSelect+0xb2>
    255a:	83 e9       	ldi	r24, 0x93	; 147
    255c:	98 2e       	mov	r9, r24
    255e:	21 15       	cp	r18, r1
    2560:	31 05       	cpc	r19, r1
    2562:	a9 f4       	brne	.+42     	; 0x258e <AnticollSelect+0xe2>
    2564:	ae 01       	movw	r20, r28
    2566:	43 5f       	subi	r20, 0xF3	; 243
    2568:	5f 4f       	sbci	r21, 0xFF	; 255
    256a:	b5 01       	movw	r22, r10
    256c:	89 2d       	mov	r24, r9
    256e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Select>
    2572:	9c 01       	movw	r18, r24
    2574:	89 2b       	or	r24, r25
    2576:	19 f4       	brne	.+6      	; 0x257e <AnticollSelect+0xd2>
    2578:	8d 85       	ldd	r24, Y+13	; 0x0d
    257a:	82 ff       	sbrs	r24, 2
    257c:	08 c0       	rjmp	.+16     	; 0x258e <AnticollSelect+0xe2>
    257e:	1f 5f       	subi	r17, 0xFF	; 255
    2580:	f4 e0       	ldi	r31, 0x04	; 4
    2582:	af 0e       	add	r10, r31
    2584:	b1 1c       	adc	r11, r1
    2586:	13 30       	cpi	r17, 0x03	; 3
    2588:	d1 f0       	breq	.+52     	; 0x25be <AnticollSelect+0x112>
    258a:	80 2f       	mov	r24, r16
    258c:	ae cf       	rjmp	.-164    	; 0x24ea <AnticollSelect+0x3e>
    258e:	11 30       	cpi	r17, 0x01	; 1
    2590:	61 f0       	breq	.+24     	; 0x25aa <AnticollSelect+0xfe>
    2592:	12 30       	cpi	r17, 0x02	; 2
    2594:	a1 f4       	brne	.+40     	; 0x25be <AnticollSelect+0x112>
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	af 81       	ldd	r26, Y+7	; 0x07
    259c:	b8 85       	ldd	r27, Y+8	; 0x08
    259e:	f7 01       	movw	r30, r14
    25a0:	86 83       	std	Z+6, r24	; 0x06
    25a2:	97 83       	std	Z+7, r25	; 0x07
    25a4:	a0 87       	std	Z+8, r26	; 0x08
    25a6:	b1 87       	std	Z+9, r27	; 0x09
    25a8:	13 c0       	rjmp	.+38     	; 0x25d0 <AnticollSelect+0x124>
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	af 81       	ldd	r26, Y+7	; 0x07
    25b0:	b8 85       	ldd	r27, Y+8	; 0x08
    25b2:	f7 01       	movw	r30, r14
    25b4:	83 83       	std	Z+3, r24	; 0x03
    25b6:	94 83       	std	Z+4, r25	; 0x04
    25b8:	a5 83       	std	Z+5, r26	; 0x05
    25ba:	b6 83       	std	Z+6, r27	; 0x06
    25bc:	09 c0       	rjmp	.+18     	; 0x25d0 <AnticollSelect+0x124>
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	9a 81       	ldd	r25, Y+2	; 0x02
    25c2:	ab 81       	ldd	r26, Y+3	; 0x03
    25c4:	bc 81       	ldd	r27, Y+4	; 0x04
    25c6:	f7 01       	movw	r30, r14
    25c8:	80 83       	st	Z, r24
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	a2 83       	std	Z+2, r26	; 0x02
    25ce:	b3 83       	std	Z+3, r27	; 0x03
    25d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d2:	f6 01       	movw	r30, r12
    25d4:	80 83       	st	Z, r24
    25d6:	c9 01       	movw	r24, r18
    25d8:	2d 96       	adiw	r28, 0x0d	; 13
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	df 90       	pop	r13
    25f2:	cf 90       	pop	r12
    25f4:	bf 90       	pop	r11
    25f6:	af 90       	pop	r10
    25f8:	9f 90       	pop	r9
    25fa:	8f 90       	pop	r8
    25fc:	7f 90       	pop	r7
    25fe:	6f 90       	pop	r6
    2600:	08 95       	ret

00002602 <Authentication>:
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo>
    260a:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <MInfo+0x1>
    260e:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x2>
    2612:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <MInfo+0x3>
    2616:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x4>
    261a:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <MInfo+0x6>
    261e:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x5>
    2622:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <MInfo+0x7>
    2626:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <SerBuffer>
    262a:	20 93 1f 0a 	sts	0x0A1F, r18	; 0x800a1f <SerBuffer+0x1>
    262e:	86 e0       	ldi	r24, 0x06	; 6
    2630:	fb 01       	movw	r30, r22
    2632:	a0 e2       	ldi	r26, 0x20	; 32
    2634:	ba e0       	ldi	r27, 0x0A	; 10
    2636:	01 90       	ld	r0, Z+
    2638:	0d 92       	st	X+, r0
    263a:	8a 95       	dec	r24
    263c:	e1 f7       	brne	.-8      	; 0x2636 <Authentication+0x34>
    263e:	fa 01       	movw	r30, r20
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	a2 81       	ldd	r26, Z+2	; 0x02
    2646:	b3 81       	ldd	r27, Z+3	; 0x03
    2648:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <SerBuffer+0x8>
    264c:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <SerBuffer+0x9>
    2650:	a0 93 28 0a 	sts	0x0A28, r26	; 0x800a28 <SerBuffer+0xa>
    2654:	b0 93 29 0a 	sts	0x0A29, r27	; 0x800a29 <SerBuffer+0xb>
    2658:	8c e0       	ldi	r24, 0x0C	; 12
    265a:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <MInfo+0x3>
    265e:	80 ed       	ldi	r24, 0xD0	; 208
    2660:	97 e0       	ldi	r25, 0x07	; 7
    2662:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    2666:	42 e3       	ldi	r20, 0x32	; 50
    2668:	5a e0       	ldi	r21, 0x0A	; 10
    266a:	6e e1       	ldi	r22, 0x1E	; 30
    266c:	7a e0       	ldi	r23, 0x0A	; 10
    266e:	8e e0       	ldi	r24, 0x0E	; 14
    2670:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <M522PcdCmd>
    2674:	ec 01       	movw	r28, r24
    2676:	89 2b       	or	r24, r25
    2678:	41 f4       	brne	.+16     	; 0x268a <Authentication+0x88>
    267a:	88 e0       	ldi	r24, 0x08	; 8
    267c:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    2680:	8f 70       	andi	r24, 0x0F	; 15
    2682:	88 30       	cpi	r24, 0x08	; 8
    2684:	11 f0       	breq	.+4      	; 0x268a <Authentication+0x88>
    2686:	c1 e0       	ldi	r28, 0x01	; 1
    2688:	d2 e0       	ldi	r29, 0x02	; 2
    268a:	ce 01       	movw	r24, r28
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	08 95       	ret

00002692 <Read>:
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	eb 01       	movw	r28, r22
    2698:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <MInfo>
    269c:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <MInfo+0x1>
    26a0:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <MInfo+0x2>
    26a4:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <MInfo+0x4>
    26a8:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <MInfo+0x6>
    26ac:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <MInfo+0x5>
    26b0:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <MInfo+0x7>
    26b4:	90 e3       	ldi	r25, 0x30	; 48
    26b6:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <SerBuffer>
    26ba:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SerBuffer+0x1>
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <MInfo+0x3>
    26c4:	80 e1       	ldi	r24, 0x10	; 16
    26c6:	97 e2       	ldi	r25, 0x27	; 39
    26c8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SetTimeOut>
    26cc:	42 e3       	ldi	r20, 0x32	; 50
    26ce:	5a e0       	ldi	r21, 0x0A	; 10
    26d0:	6e e1       	ldi	r22, 0x1E	; 30
    26d2:	7a e0       	ldi	r23, 0x0A	; 10
    26d4:	8c e0       	ldi	r24, 0x0C	; 12
    26d6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <M522PcdCmd>
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	e9 f0       	breq	.+58     	; 0x2718 <Read+0x86>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	a1 f0       	breq	.+40     	; 0x270c <Read+0x7a>
    26e4:	20 91 37 0a 	lds	r18, 0x0A37	; 0x800a37 <MInfo+0x5>
    26e8:	30 91 38 0a 	lds	r19, 0x0A38	; 0x800a38 <MInfo+0x6>
    26ec:	24 30       	cpi	r18, 0x04	; 4
    26ee:	31 05       	cpc	r19, r1
    26f0:	69 f4       	brne	.+26     	; 0x270c <Read+0x7a>
    26f2:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SerBuffer>
    26f6:	98 2f       	mov	r25, r24
    26f8:	9f 70       	andi	r25, 0x0F	; 15
    26fa:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <SerBuffer>
    26fe:	8a 70       	andi	r24, 0x0A	; 10
    2700:	19 f0       	breq	.+6      	; 0x2708 <Read+0x76>
    2702:	85 e0       	ldi	r24, 0x05	; 5
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	02 c0       	rjmp	.+4      	; 0x270c <Read+0x7a>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	92 e0       	ldi	r25, 0x02	; 2
    270c:	20 e1       	ldi	r18, 0x10	; 16
    270e:	fe 01       	movw	r30, r28
    2710:	11 92       	st	Z+, r1
    2712:	2a 95       	dec	r18
    2714:	e9 f7       	brne	.-6      	; 0x2710 <Read+0x7e>
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <Read+0xae>
    2718:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <MInfo+0x4>
    271c:	20 31       	cpi	r18, 0x10	; 16
    271e:	41 f0       	breq	.+16     	; 0x2730 <Read+0x9e>
    2720:	80 e1       	ldi	r24, 0x10	; 16
    2722:	fe 01       	movw	r30, r28
    2724:	11 92       	st	Z+, r1
    2726:	8a 95       	dec	r24
    2728:	e9 f7       	brne	.-6      	; 0x2724 <Read+0x92>
    272a:	88 e0       	ldi	r24, 0x08	; 8
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	08 c0       	rjmp	.+16     	; 0x2740 <Read+0xae>
    2730:	20 e1       	ldi	r18, 0x10	; 16
    2732:	ee e1       	ldi	r30, 0x1E	; 30
    2734:	fa e0       	ldi	r31, 0x0A	; 10
    2736:	de 01       	movw	r26, r28
    2738:	01 90       	ld	r0, Z+
    273a:	0d 92       	st	X+, r0
    273c:	2a 95       	dec	r18
    273e:	e1 f7       	brne	.-8      	; 0x2738 <Read+0xa6>
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    2746:	88 30       	cpi	r24, 0x08	; 8
    2748:	11 f4       	brne	.+4      	; 0x274e <readCardID+0x8>
	{
		zone = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    274e:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    2750:	0c 94 49 13 	jmp	0x2692	; 0x2692 <Read>

00002754 <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	1f 92       	push	r1
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    275e:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    2760:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    2762:	8e 77       	andi	r24, 0x7E	; 126
    2764:	69 83       	std	Y+1, r22	; 0x01
    2766:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Spi_send>
	Spi_send(RegVal);
    276a:	69 81       	ldd	r22, Y+1	; 0x01
    276c:	86 2f       	mov	r24, r22
    276e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Spi_send>

	Spi_ss_high;
    2772:	71 9a       	sbi	0x0e, 1	; 14

}
    2774:	0f 90       	pop	r0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	08 95       	ret

0000277c <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    277c:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    277e:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    2780:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    2782:	80 68       	ori	r24, 0x80	; 128
    2784:	0e 94 fd 13 	call	0x27fa	; 0x27fa <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    2788:	0e 94 02 14 	call	0x2804	; 0x2804 <Spi_receive>
	
	Spi_ss_high;
    278c:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    278e:	08 95       	ret

00002790 <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	00 d0       	rcall	.+0      	; 0x2798 <RcModifyReg+0x8>
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    279e:	4a 83       	std	Y+2, r20	; 0x02
    27a0:	69 83       	std	Y+1, r22	; 0x01
    27a2:	0e 94 be 13 	call	0x277c	; 0x277c <RcGetReg>
    if(ModifyVal)
    27a6:	69 81       	ldd	r22, Y+1	; 0x01
    27a8:	4a 81       	ldd	r20, Y+2	; 0x02
    27aa:	66 23       	and	r22, r22
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <RcModifyReg+0x24>
    {
        RegVal |= MaskByte;
    27ae:	68 2f       	mov	r22, r24
    27b0:	64 2b       	or	r22, r20
    27b2:	03 c0       	rjmp	.+6      	; 0x27ba <RcModifyReg+0x2a>
    }
    else
    {
        RegVal &= (~MaskByte);
    27b4:	64 2f       	mov	r22, r20
    27b6:	60 95       	com	r22
    27b8:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    27ba:	81 2f       	mov	r24, r17
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    27c6:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <RcSetReg>

000027ca <Spi_initialize>:
 * \param ucData is data to be sent.
 * \return ucData1 is received data from SPI
 */
void Spi_send_only ( uint8_t ucData )
{
   Spi_send_and_receive(ucData);
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	1f 92       	push	r1
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	84 b1       	in	r24, 0x04	; 4
    27d6:	87 60       	ori	r24, 0x07	; 7
    27d8:	84 b9       	out	0x04, r24	; 4
    27da:	23 98       	cbi	0x04, 3	; 4
    27dc:	28 9a       	sbi	0x05, 0	; 5
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	8d b9       	out	0x0d, r24	; 13
    27e2:	71 9a       	sbi	0x0e, 1	; 14
    27e4:	29 98       	cbi	0x05, 1	; 5
    27e6:	82 e5       	ldi	r24, 0x52	; 82
    27e8:	8c bd       	out	0x2c, r24	; 44
    27ea:	8d b5       	in	r24, 0x2d	; 45
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	8e b5       	in	r24, 0x2e	; 46
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	0f 90       	pop	r0
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret

000027fa <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    27fa:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    27fc:	0d b4       	in	r0, 0x2d	; 45
    27fe:	07 fe       	sbrs	r0, 7
    2800:	fd cf       	rjmp	.-6      	; 0x27fc <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    2802:	08 95       	ret

00002804 <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    2804:	8f ef       	ldi	r24, 0xFF	; 255
    2806:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    2808:	0d b4       	in	r0, 0x2d	; 45
    280a:	07 fe       	sbrs	r0, 7
    280c:	fd cf       	rjmp	.-6      	; 0x2808 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    280e:	8e b5       	in	r24, 0x2e	; 46
}
    2810:	08 95       	ret

00002812 <mifareInit>:
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    2812:	0e 94 e5 13 	call	0x27ca	; 0x27ca <Spi_initialize>
	Rc522Init();
    2816:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <Rc522Init>

0000281a <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    281a:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	a8 95       	wdr
    2822:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2826:	88 61       	ori	r24, 0x18	; 24
    2828:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    282c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2830:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 3c 20 	call	0x4078	; 0x4078 <serial_init>
	#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
	#endif

	// Init the timer system for the MAC
	timerInit();
    283a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <timerInit>

	#if (DEVICE_CONNECTED == MDC_MACHINE)
	InitTimerZero();	//timer for MDC machine comm.
    283e:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <InitTimerZero>
	#endif

	sei();
    2842:	78 94       	sei
	{
	getPressedKey();
	_delay_ms(1000);
	}*/
	// Init the (sample) application
	appInit();
    2844:	0e 94 b8 22 	call	0x4570	; 0x4570 <appInit>
	#if( DEBUG )
	Beeps(2);
	#endif
	
	// Initialize mifare
	mifareInit();
    2848:	0e 94 09 14 	call	0x2812	; 0x2812 <mifareInit>
	for(;;)
	{
		// Turn interrupts on if they are off.  They should always be on
		// at this point in the loop, so just turn them on every time, in
		// case interrupts were inadvertently turned off elsewhere.
		sei();
    284c:	78 94       	sei

		// Task functions called from main loop.  Either add your own task loop
		// or edit the example appTask().			
		//appTask();	
		APP_TaskHandler();	
    284e:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <APP_TaskHandler>
		macTask();
    2852:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <macTask>

	}
    2856:	fa cf       	rjmp	.-12     	; 0x284c <main+0x32>

00002858 <nodeSleep>:
}


#else  // if (NODETYPE != COORD)
// For coord, provide dummy function so that code compiles
void nodeSleep(u16 seconds) {}
    2858:	08 95       	ret

0000285a <isSleeping>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    285a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    285e:	86 95       	lsr	r24
    2860:	81 70       	andi	r24, 0x01	; 1
    2862:	08 95       	ret

00002864 <radioGetPartnum>:
    2864:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <radio_part_number.3586>
    2868:	81 11       	cpse	r24, r1
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <radioGetPartnum+0x10>
    286c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    2870:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <radio_part_number.3586>
    2874:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <radio_part_number.3586>
    2878:	08 95       	ret

0000287a <radioRxStartEvent>:
    287a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    287e:	8f 71       	andi	r24, 0x1F	; 31
    2880:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <rssi_val>
    2884:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <macConfig+0x17>
    2888:	08 95       	ret

0000288a <radioGetSavedRssiValue>:
    288a:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    288e:	82 30       	cpi	r24, 0x02	; 2
    2890:	19 f0       	breq	.+6      	; 0x2898 <radioGetSavedRssiValue+0xe>
    2892:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <rssi_val>
    2896:	08 95       	ret
    2898:	86 e1       	ldi	r24, 0x16	; 22
    289a:	08 95       	ret

0000289c <radioGetSavedLqiValue>:
    289c:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <mac_buffer_rx+0x80>
    28a0:	08 95       	ret

000028a2 <radioSetOperatingChannel>:
    28a2:	cf 93       	push	r28
    28a4:	95 ef       	ldi	r25, 0xF5	; 245
    28a6:	98 0f       	add	r25, r24
    28a8:	90 31       	cpi	r25, 0x10	; 16
    28aa:	18 f5       	brcc	.+70     	; 0x28f2 <radioSetOperatingChannel+0x50>
    28ac:	c8 2f       	mov	r28, r24
    28ae:	0e 94 2d 14 	call	0x285a	; 0x285a <isSleeping>
    28b2:	81 11       	cpse	r24, r1
    28b4:	20 c0       	rjmp	.+64     	; 0x28f6 <radioSetOperatingChannel+0x54>
    28b6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28ba:	8f 71       	andi	r24, 0x1F	; 31
    28bc:	8c 17       	cp	r24, r28
    28be:	e9 f0       	breq	.+58     	; 0x28fa <radioSetOperatingChannel+0x58>
    28c0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28c4:	80 7e       	andi	r24, 0xE0	; 224
    28c6:	9c 2f       	mov	r25, r28
    28c8:	9f 71       	andi	r25, 0x1F	; 31
    28ca:	89 2b       	or	r24, r25
    28cc:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    28d4:	8f 71       	andi	r24, 0x1F	; 31
    28d6:	86 30       	cpi	r24, 0x06	; 6
    28d8:	11 f0       	breq	.+4      	; 0x28de <radioSetOperatingChannel+0x3c>
    28da:	89 30       	cpi	r24, 0x09	; 9
    28dc:	21 f4       	brne	.+8      	; 0x28e6 <radioSetOperatingChannel+0x44>
    28de:	8d e2       	ldi	r24, 0x2D	; 45
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <radioSetOperatingChannel+0x40>
    28e6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    28ea:	8f 71       	andi	r24, 0x1F	; 31
    28ec:	8c 13       	cpse	r24, r28
    28ee:	07 c0       	rjmp	.+14     	; 0x28fe <radioSetOperatingChannel+0x5c>
    28f0:	04 c0       	rjmp	.+8      	; 0x28fa <radioSetOperatingChannel+0x58>
    28f2:	82 e4       	ldi	r24, 0x42	; 66
    28f4:	05 c0       	rjmp	.+10     	; 0x2900 <radioSetOperatingChannel+0x5e>
    28f6:	84 e4       	ldi	r24, 0x44	; 68
    28f8:	03 c0       	rjmp	.+6      	; 0x2900 <radioSetOperatingChannel+0x5e>
    28fa:	80 e4       	ldi	r24, 0x40	; 64
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <radioSetOperatingChannel+0x5e>
    28fe:	83 e4       	ldi	r24, 0x43	; 67
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <radioSetClockSpeed>:
    2904:	66 30       	cpi	r22, 0x06	; 6
    2906:	98 f4       	brcc	.+38     	; 0x292e <radioSetClockSpeed+0x2a>
    2908:	81 11       	cpse	r24, r1
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <radioSetClockSpeed+0x10>
    290c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    2910:	88 60       	ori	r24, 0x08	; 8
    2912:	03 c0       	rjmp	.+6      	; 0x291a <radioSetClockSpeed+0x16>
    2914:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    2918:	87 7f       	andi	r24, 0xF7	; 247
    291a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    291e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    2922:	88 7f       	andi	r24, 0xF8	; 248
    2924:	68 2b       	or	r22, r24
    2926:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    292a:	80 e4       	ldi	r24, 0x40	; 64
    292c:	08 95       	ret
    292e:	82 e4       	ldi	r24, 0x42	; 66
    2930:	08 95       	ret

00002932 <radioGetTrxState>:
    2932:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2936:	8f 71       	andi	r24, 0x1F	; 31
    2938:	08 95       	ret

0000293a <radioResetStateMachine>:
    293a:	e9 e3       	ldi	r30, 0x39	; 57
    293c:	f1 e0       	ldi	r31, 0x01	; 1
    293e:	80 81       	ld	r24, Z
    2940:	8d 7f       	andi	r24, 0xFD	; 253
    2942:	80 83       	st	Z, r24
    2944:	8d e0       	ldi	r24, 0x0D	; 13
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <radioResetStateMachine+0xe>
    294c:	e2 e4       	ldi	r30, 0x42	; 66
    294e:	f1 e0       	ldi	r31, 0x01	; 1
    2950:	80 81       	ld	r24, Z
    2952:	80 7e       	andi	r24, 0xE0	; 224
    2954:	83 60       	ori	r24, 0x03	; 3
    2956:	80 83       	st	Z, r24
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <radioResetStateMachine+0x22>
    2960:	08 95       	ret

00002962 <radioResetTrx>:
    2962:	e9 e3       	ldi	r30, 0x39	; 57
    2964:	f1 e0       	ldi	r31, 0x01	; 1
    2966:	80 81       	ld	r24, Z
    2968:	81 60       	ori	r24, 0x01	; 1
    296a:	80 83       	st	Z, r24
    296c:	80 81       	ld	r24, Z
    296e:	8d 7f       	andi	r24, 0xFD	; 253
    2970:	80 83       	st	Z, r24
    2972:	8d e0       	ldi	r24, 0x0D	; 13
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <radioResetTrx+0x14>
    297a:	80 81       	ld	r24, Z
    297c:	8e 7f       	andi	r24, 0xFE	; 254
    297e:	80 83       	st	Z, r24
    2980:	08 95       	ret

00002982 <radioInit>:
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	1f 92       	push	r1
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	0d ef       	ldi	r16, 0xFD	; 253
    2992:	13 e0       	ldi	r17, 0x03	; 3
    2994:	f8 01       	movw	r30, r16
    2996:	31 97       	sbiw	r30, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <radioInit+0x14>
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	0e 94 b1 14 	call	0x2962	; 0x2962 <radioResetTrx>
    29a0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    29a4:	90 7e       	andi	r25, 0xE0	; 224
    29a6:	93 60       	ori	r25, 0x03	; 3
    29a8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    29ac:	f8 01       	movw	r30, r16
    29ae:	31 97       	sbiw	r30, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <radioInit+0x2c>
    29b2:	9c e4       	ldi	r25, 0x4C	; 76
    29b4:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    29b8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    29bc:	90 7f       	andi	r25, 0xF0	; 240
    29be:	97 60       	ori	r25, 0x07	; 7
    29c0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	81 11       	cpse	r24, r1
    29c8:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <calibrate_rc_osc>
    29cc:	80 e4       	ldi	r24, 0x40	; 64
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	08 95       	ret

000029da <radioUseAutoTxCrc>:
    29da:	cf 93       	push	r28
    29dc:	c8 2f       	mov	r28, r24
    29de:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	31 f4       	brne	.+12     	; 0x29f2 <radioUseAutoTxCrc+0x18>
    29e6:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    29ea:	c0 fb       	bst	r28, 0
    29ec:	87 f9       	bld	r24, 7
    29ee:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    29f2:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	61 f4       	brne	.+24     	; 0x2a12 <radioUseAutoTxCrc+0x38>
    29fa:	20 91 04 00 	lds	r18, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    29fe:	30 e2       	ldi	r19, 0x20	; 32
    2a00:	c3 9f       	mul	r28, r19
    2a02:	c0 01       	movw	r24, r0
    2a04:	11 24       	eor	r1, r1
    2a06:	80 72       	andi	r24, 0x20	; 32
    2a08:	92 2f       	mov	r25, r18
    2a0a:	9f 7d       	andi	r25, 0xDF	; 223
    2a0c:	89 2b       	or	r24, r25
    2a0e:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    2a12:	cf 91       	pop	r28
    2a14:	08 95       	ret

00002a16 <radioIsBusy>:
    2a16:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	9f 70       	andi	r25, 0x0F	; 15
    2a1e:	91 50       	subi	r25, 0x01	; 1
    2a20:	92 30       	cpi	r25, 0x02	; 2
    2a22:	38 f0       	brcs	.+14     	; 0x2a32 <radioIsBusy+0x1c>
    2a24:	98 2f       	mov	r25, r24
    2a26:	9f 71       	andi	r25, 0x1F	; 31
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	9e 31       	cpi	r25, 0x1E	; 30
    2a2c:	19 f0       	breq	.+6      	; 0x2a34 <radioIsBusy+0x1e>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	08 95       	ret
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	08 95       	ret

00002a36 <radioSetTrxState>:
    2a36:	cf 93       	push	r28
    2a38:	c8 2f       	mov	r28, r24
    2a3a:	88 ef       	ldi	r24, 0xF8	; 248
    2a3c:	8c 0f       	add	r24, r28
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	38 f0       	brcs	.+14     	; 0x2a50 <radioSetTrxState+0x1a>
    2a42:	8c 2f       	mov	r24, r28
    2a44:	8f 7e       	andi	r24, 0xEF	; 239
    2a46:	86 30       	cpi	r24, 0x06	; 6
    2a48:	19 f0       	breq	.+6      	; 0x2a50 <radioSetTrxState+0x1a>
    2a4a:	c9 31       	cpi	r28, 0x19	; 25
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <radioSetTrxState+0x1a>
    2a4e:	55 c0       	rjmp	.+170    	; 0x2afa <radioSetTrxState+0xc4>
    2a50:	0e 94 2d 14 	call	0x285a	; 0x285a <isSleeping>
    2a54:	81 11       	cpse	r24, r1
    2a56:	53 c0       	rjmp	.+166    	; 0x2afe <radioSetTrxState+0xc8>
    2a58:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <radioIsBusy>
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	fc cf       	rjmp	.-8      	; 0x2a58 <radioSetTrxState+0x22>
    2a60:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    2a64:	82 30       	cpi	r24, 0x02	; 2
    2a66:	39 f4       	brne	.+14     	; 0x2a76 <radioSetTrxState+0x40>
    2a68:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <macIsScanning>
    2a6c:	88 23       	and	r24, r24
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <radioSetTrxState+0x40>
    2a70:	c6 31       	cpi	r28, 0x16	; 22
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <radioSetTrxState+0x40>
    2a74:	c6 e0       	ldi	r28, 0x06	; 6
    2a76:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2a7a:	8f 71       	andi	r24, 0x1F	; 31
    2a7c:	c8 17       	cp	r28, r24
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <radioSetTrxState+0x4c>
    2a80:	40 c0       	rjmp	.+128    	; 0x2b02 <radioSetTrxState+0xcc>
    2a82:	c8 30       	cpi	r28, 0x08	; 8
    2a84:	19 f4       	brne	.+6      	; 0x2a8c <radioSetTrxState+0x56>
    2a86:	0e 94 9d 14 	call	0x293a	; 0x293a <radioResetStateMachine>
    2a8a:	31 c0       	rjmp	.+98     	; 0x2aee <radioSetTrxState+0xb8>
    2a8c:	c9 31       	cpi	r28, 0x19	; 25
    2a8e:	59 f4       	brne	.+22     	; 0x2aa6 <radioSetTrxState+0x70>
    2a90:	89 30       	cpi	r24, 0x09	; 9
    2a92:	e1 f0       	breq	.+56     	; 0x2acc <radioSetTrxState+0x96>
    2a94:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2a98:	90 7e       	andi	r25, 0xE0	; 224
    2a9a:	99 60       	ori	r25, 0x09	; 9
    2a9c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2aa0:	86 31       	cpi	r24, 0x16	; 22
    2aa2:	81 f4       	brne	.+32     	; 0x2ac4 <radioSetTrxState+0x8e>
    2aa4:	0c c0       	rjmp	.+24     	; 0x2abe <radioSetTrxState+0x88>
    2aa6:	c6 31       	cpi	r28, 0x16	; 22
    2aa8:	89 f4       	brne	.+34     	; 0x2acc <radioSetTrxState+0x96>
    2aaa:	89 30       	cpi	r24, 0x09	; 9
    2aac:	79 f0       	breq	.+30     	; 0x2acc <radioSetTrxState+0x96>
    2aae:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2ab2:	90 7e       	andi	r25, 0xE0	; 224
    2ab4:	99 60       	ori	r25, 0x09	; 9
    2ab6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2aba:	89 31       	cpi	r24, 0x19	; 25
    2abc:	19 f4       	brne	.+6      	; 0x2ac4 <radioSetTrxState+0x8e>
    2abe:	e3 e0       	ldi	r30, 0x03	; 3
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <radioSetTrxState+0x92>
    2ac4:	e9 e6       	ldi	r30, 0x69	; 105
    2ac6:	f1 e0       	ldi	r31, 0x01	; 1
    2ac8:	31 97       	sbiw	r30, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <radioSetTrxState+0x92>
    2acc:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2ad0:	90 7e       	andi	r25, 0xE0	; 224
    2ad2:	2c 2f       	mov	r18, r28
    2ad4:	2f 71       	andi	r18, 0x1F	; 31
    2ad6:	92 2b       	or	r25, r18
    2ad8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2adc:	88 30       	cpi	r24, 0x08	; 8
    2ade:	19 f4       	brne	.+6      	; 0x2ae6 <radioSetTrxState+0xb0>
    2ae0:	89 e6       	ldi	r24, 0x69	; 105
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <radioSetTrxState+0xb4>
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <radioSetTrxState+0xb4>
    2aee:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2af2:	8f 71       	andi	r24, 0x1F	; 31
    2af4:	8c 13       	cpse	r24, r28
    2af6:	07 c0       	rjmp	.+14     	; 0x2b06 <radioSetTrxState+0xd0>
    2af8:	04 c0       	rjmp	.+8      	; 0x2b02 <radioSetTrxState+0xcc>
    2afa:	82 e4       	ldi	r24, 0x42	; 66
    2afc:	05 c0       	rjmp	.+10     	; 0x2b08 <radioSetTrxState+0xd2>
    2afe:	84 e4       	ldi	r24, 0x44	; 68
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <radioSetTrxState+0xd2>
    2b02:	80 e4       	ldi	r24, 0x40	; 64
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <radioSetTrxState+0xd2>
    2b06:	83 e4       	ldi	r24, 0x43	; 67
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <radioTrxEndEvent>:
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <radioTrxEndEvent+0x6>
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <radioTrxEndEvent+0x8>
    2b14:	1f 92       	push	r1
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2b1e:	8f 71       	andi	r24, 0x1F	; 31
    2b20:	8c 83       	std	Y+4, r24	; 0x04
    2b22:	8c 81       	ldd	r24, Y+4	; 0x04
    2b24:	81 31       	cpi	r24, 0x11	; 17
    2b26:	51 f0       	breq	.+20     	; 0x2b3c <radioTrxEndEvent+0x30>
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	86 30       	cpi	r24, 0x06	; 6
    2b2c:	39 f0       	breq	.+14     	; 0x2b3c <radioTrxEndEvent+0x30>
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	21 f0       	breq	.+8      	; 0x2b3c <radioTrxEndEvent+0x30>
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	86 31       	cpi	r24, 0x16	; 22
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <radioTrxEndEvent+0x30>
    2b3a:	5f c0       	rjmp	.+190    	; 0x2bfa <radioTrxEndEvent+0xee>
    2b3c:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	60 e8       	ldi	r22, 0x80	; 128
    2b44:	71 e0       	ldi	r23, 0x01	; 1
    2b46:	8b e3       	ldi	r24, 0x3B	; 59
    2b48:	9a e0       	ldi	r25, 0x0A	; 10
    2b4a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <memcpy>
    2b4e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    2b52:	80 93 3a 0a 	sts	0x0A3A, r24	; 0x800a3a <mac_buffer_rx>
    2b56:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	e6 5c       	subi	r30, 0xC6	; 198
    2b5e:	f5 4f       	sbci	r31, 0xF5	; 245
    2b60:	80 81       	ld	r24, Z
    2b62:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <mac_buffer_rx+0x80>
    2b66:	19 82       	std	Y+1, r1	; 0x01
    2b68:	1b 82       	std	Y+3, r1	; 0x03
    2b6a:	1a 82       	std	Y+2, r1	; 0x02
    2b6c:	20 91 3b 0a 	lds	r18, 0x0A3B	; 0x800a3b <mac_buffer_rx+0x1>
    2b70:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <mac_buffer_rx+0x2>
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	98 2f       	mov	r25, r24
    2b78:	88 27       	eor	r24, r24
    2b7a:	82 0f       	add	r24, r18
    2b7c:	91 1d       	adc	r25, r1
    2b7e:	90 93 3c 0a 	sts	0x0A3C, r25	; 0x800a3c <mac_buffer_rx+0x2>
    2b82:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <mac_buffer_rx+0x1>
    2b86:	81 36       	cpi	r24, 0x61	; 97
    2b88:	28 e8       	ldi	r18, 0x88	; 136
    2b8a:	92 07       	cpc	r25, r18
    2b8c:	09 f1       	breq	.+66     	; 0x2bd0 <radioTrxEndEvent+0xc4>
    2b8e:	40 f4       	brcc	.+16     	; 0x2ba0 <radioTrxEndEvent+0x94>
    2b90:	83 30       	cpi	r24, 0x03	; 3
    2b92:	28 e0       	ldi	r18, 0x08	; 8
    2b94:	92 07       	cpc	r25, r18
    2b96:	81 f0       	breq	.+32     	; 0x2bb8 <radioTrxEndEvent+0xac>
    2b98:	81 15       	cp	r24, r1
    2b9a:	90 48       	sbci	r25, 0x80	; 128
    2b9c:	99 f0       	breq	.+38     	; 0x2bc4 <radioTrxEndEvent+0xb8>
    2b9e:	28 c0       	rjmp	.+80     	; 0x2bf0 <radioTrxEndEvent+0xe4>
    2ba0:	83 36       	cpi	r24, 0x63	; 99
    2ba2:	2c e8       	ldi	r18, 0x8C	; 140
    2ba4:	92 07       	cpc	r25, r18
    2ba6:	01 f1       	breq	.+64     	; 0x2be8 <radioTrxEndEvent+0xdc>
    2ba8:	83 36       	cpi	r24, 0x63	; 99
    2baa:	28 ec       	ldi	r18, 0xC8	; 200
    2bac:	92 07       	cpc	r25, r18
    2bae:	d1 f0       	breq	.+52     	; 0x2be4 <radioTrxEndEvent+0xd8>
    2bb0:	83 36       	cpi	r24, 0x63	; 99
    2bb2:	98 48       	sbci	r25, 0x88	; 136
    2bb4:	e9 f4       	brne	.+58     	; 0x2bf0 <radioTrxEndEvent+0xe4>
    2bb6:	0e c0       	rjmp	.+28     	; 0x2bd4 <radioTrxEndEvent+0xc8>
    2bb8:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    2bbc:	88 23       	and	r24, r24
    2bbe:	c1 f0       	breq	.+48     	; 0x2bf0 <radioTrxEndEvent+0xe4>
    2bc0:	85 e1       	ldi	r24, 0x15	; 21
    2bc2:	15 c0       	rjmp	.+42     	; 0x2bee <radioTrxEndEvent+0xe2>
    2bc4:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <macIsScanning>
    2bc8:	88 23       	and	r24, r24
    2bca:	91 f0       	breq	.+36     	; 0x2bf0 <radioTrxEndEvent+0xe4>
    2bcc:	84 e1       	ldi	r24, 0x14	; 20
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <radioTrxEndEvent+0xe2>
    2bd0:	80 e1       	ldi	r24, 0x10	; 16
    2bd2:	0d c0       	rjmp	.+26     	; 0x2bee <radioTrxEndEvent+0xe2>
    2bd4:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <mac_buffer_rx+0xa>
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	31 f0       	breq	.+12     	; 0x2be8 <radioTrxEndEvent+0xdc>
    2bdc:	8b 3b       	cpi	r24, 0xBB	; 187
    2bde:	31 f0       	breq	.+12     	; 0x2bec <radioTrxEndEvent+0xe0>
    2be0:	81 30       	cpi	r24, 0x01	; 1
    2be2:	31 f4       	brne	.+12     	; 0x2bf0 <radioTrxEndEvent+0xe4>
    2be4:	87 e1       	ldi	r24, 0x17	; 23
    2be6:	03 c0       	rjmp	.+6      	; 0x2bee <radioTrxEndEvent+0xe2>
    2be8:	88 e1       	ldi	r24, 0x18	; 24
    2bea:	01 c0       	rjmp	.+2      	; 0x2bee <radioTrxEndEvent+0xe2>
    2bec:	89 e1       	ldi	r24, 0x19	; 25
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	01 96       	adiw	r24, 0x01	; 1
    2bf4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <mac_put_event>
    2bf8:	35 c0       	rjmp	.+106    	; 0x2c64 <radioTrxEndEvent+0x158>
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	82 30       	cpi	r24, 0x02	; 2
    2bfe:	49 f0       	breq	.+18     	; 0x2c12 <radioTrxEndEvent+0x106>
    2c00:	8c 81       	ldd	r24, Y+4	; 0x04
    2c02:	82 31       	cpi	r24, 0x12	; 18
    2c04:	31 f0       	breq	.+12     	; 0x2c12 <radioTrxEndEvent+0x106>
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	89 31       	cpi	r24, 0x19	; 25
    2c0a:	19 f0       	breq	.+6      	; 0x2c12 <radioTrxEndEvent+0x106>
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	89 30       	cpi	r24, 0x09	; 9
    2c10:	49 f5       	brne	.+82     	; 0x2c64 <radioTrxEndEvent+0x158>
    2c12:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <macConfig+0x17>
    2c16:	19 82       	std	Y+1, r1	; 0x01
    2c18:	1b 82       	std	Y+3, r1	; 0x03
    2c1a:	1a 82       	std	Y+2, r1	; 0x02
    2c1c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    2c20:	82 95       	swap	r24
    2c22:	86 95       	lsr	r24
    2c24:	87 70       	andi	r24, 0x07	; 7
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	83 30       	cpi	r24, 0x03	; 3
    2c2c:	49 f0       	breq	.+18     	; 0x2c40 <radioTrxEndEvent+0x134>
    2c2e:	20 f4       	brcc	.+8      	; 0x2c38 <radioTrxEndEvent+0x12c>
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	40 f4       	brcc	.+16     	; 0x2c44 <radioTrxEndEvent+0x138>
    2c34:	81 e1       	ldi	r24, 0x11	; 17
    2c36:	05 c0       	rjmp	.+10     	; 0x2c42 <radioTrxEndEvent+0x136>
    2c38:	85 30       	cpi	r24, 0x05	; 5
    2c3a:	21 f4       	brne	.+8      	; 0x2c44 <radioTrxEndEvent+0x138>
    2c3c:	82 e1       	ldi	r24, 0x12	; 18
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <radioTrxEndEvent+0x136>
    2c40:	83 e1       	ldi	r24, 0x13	; 19
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	88 23       	and	r24, r24
    2c48:	21 f0       	breq	.+8      	; 0x2c52 <radioTrxEndEvent+0x146>
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <mac_put_event>
    2c52:	86 e1       	ldi	r24, 0x16	; 22
    2c54:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <radioSetTrxState>
    2c58:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    2c5c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    2c60:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <srand>
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <radioSendData>:
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	c8 2f       	mov	r28, r24
    2c7c:	8b 01       	movw	r16, r22
    2c7e:	87 fd       	sbrc	r24, 7
    2c80:	2b c0       	rjmp	.+86     	; 0x2cd8 <radioSendData+0x64>
    2c82:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <radioIsBusy>
    2c86:	81 11       	cpse	r24, r1
    2c88:	fc cf       	rjmp	.-8      	; 0x2c82 <radioSendData+0xe>
    2c8a:	89 e1       	ldi	r24, 0x19	; 25
    2c8c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <radioSetTrxState>
    2c90:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2c94:	8f 71       	andi	r24, 0x1F	; 31
    2c96:	89 31       	cpi	r24, 0x19	; 25
    2c98:	c1 f7       	brne	.-16     	; 0x2c8a <radioSendData+0x16>
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	85 81       	ldd	r24, Z+5	; 0x05
    2c9e:	96 81       	ldd	r25, Z+6	; 0x06
    2ca0:	90 93 54 0b 	sts	0x0B54, r25	; 0x800b54 <macConfig+0x16>
    2ca4:	80 93 53 0b 	sts	0x0B53, r24	; 0x800b53 <macConfig+0x15>
    2ca8:	4c 2f       	mov	r20, r28
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	4e 5f       	subi	r20, 0xFE	; 254
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	b8 01       	movw	r22, r16
    2cb2:	81 e8       	ldi	r24, 0x81	; 129
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	0e 94 53 31 	call	0x62a6	; 0x62a6 <memcpy>
    2cba:	ce 5f       	subi	r28, 0xFE	; 254
    2cbc:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    2cc0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cc4:	82 60       	ori	r24, 0x02	; 2
    2cc6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cca:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cce:	8d 7f       	andi	r24, 0xFD	; 253
    2cd0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    2cd4:	80 e4       	ldi	r24, 0x40	; 64
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <radioSendData+0x66>
    2cd8:	82 e4       	ldi	r24, 0x42	; 66
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <radioSetDeviceRole>:
    2ce2:	ee e6       	ldi	r30, 0x6E	; 110
    2ce4:	f1 e0       	ldi	r31, 0x01	; 1
    2ce6:	90 81       	ld	r25, Z
    2ce8:	80 fb       	bst	r24, 0
    2cea:	93 f9       	bld	r25, 3
    2cec:	90 83       	st	Z, r25
    2cee:	08 95       	ret

00002cf0 <radioSetPanId>:
    2cf0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    2cf4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    2cf8:	08 95       	ret

00002cfa <radioSetShortAddress>:
    2cfa:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    2cfe:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    2d02:	08 95       	ret

00002d04 <radioSetExtendedAddress>:
    2d04:	e4 e6       	ldi	r30, 0x64	; 100
    2d06:	f1 e0       	ldi	r31, 0x01	; 1
    2d08:	dc 01       	movw	r26, r24
    2d0a:	2d 91       	ld	r18, X+
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	21 93       	st	Z+, r18
    2d10:	ec 36       	cpi	r30, 0x6C	; 108
    2d12:	b1 e0       	ldi	r27, 0x01	; 1
    2d14:	fb 07       	cpc	r31, r27
    2d16:	c1 f7       	brne	.-16     	; 0x2d08 <radioSetExtendedAddress+0x4>
    2d18:	08 95       	ret

00002d1a <radioRandom>:
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	c8 2f       	mov	r28, r24
    2d20:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2d24:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    2d28:	83 30       	cpi	r24, 0x03	; 3
    2d2a:	39 f4       	brne	.+14     	; 0x2d3a <radioRandom+0x20>
    2d2c:	df 70       	andi	r29, 0x0F	; 15
    2d2e:	d6 30       	cpi	r29, 0x06	; 6
    2d30:	f1 f4       	brne	.+60     	; 0x2d6e <radioRandom+0x54>
    2d32:	c6 95       	lsr	r28
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	09 c0       	rjmp	.+18     	; 0x2d4c <radioRandom+0x32>
    2d3a:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    2d3e:	83 38       	cpi	r24, 0x83	; 131
    2d40:	a9 f3       	breq	.-22     	; 0x2d2c <radioRandom+0x12>
    2d42:	0e 94 32 14 	call	0x2864	; 0x2864 <radioGetPartnum>
    2d46:	87 30       	cpi	r24, 0x07	; 7
    2d48:	91 f4       	brne	.+36     	; 0x2d6e <radioRandom+0x54>
    2d4a:	f0 cf       	rjmp	.-32     	; 0x2d2c <radioRandom+0x12>
    2d4c:	9c 17       	cp	r25, r28
    2d4e:	69 f0       	breq	.+26     	; 0x2d6a <radioRandom+0x50>
    2d50:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    2d54:	44 e0       	ldi	r20, 0x04	; 4
    2d56:	24 9f       	mul	r18, r20
    2d58:	90 01       	movw	r18, r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	80 76       	andi	r24, 0x60	; 96
    2d5e:	82 95       	swap	r24
    2d60:	86 95       	lsr	r24
    2d62:	87 70       	andi	r24, 0x07	; 7
    2d64:	28 2b       	or	r18, r24
    2d66:	9f 5f       	subi	r25, 0xFF	; 255
    2d68:	f1 cf       	rjmp	.-30     	; 0x2d4c <radioRandom+0x32>
    2d6a:	82 2f       	mov	r24, r18
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <radioRandom+0x58>
    2d6e:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <rand>
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	08 95       	ret

00002d78 <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    2d78:	08 95       	ret

00002d7a <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    2d7a:	1f 92       	push	r1
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	11 24       	eor	r1, r1
    2d84:	0b b6       	in	r0, 0x3b	; 59
    2d86:	0f 92       	push	r0
    2d88:	2f 93       	push	r18
    2d8a:	3f 93       	push	r19
    2d8c:	4f 93       	push	r20
    2d8e:	5f 93       	push	r21
    2d90:	6f 93       	push	r22
    2d92:	7f 93       	push	r23
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25
    2d98:	af 93       	push	r26
    2d9a:	bf 93       	push	r27
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    2da0:	0e 94 3d 14 	call	0x287a	; 0x287a <radioRxStartEvent>
	}
    2da4:	ff 91       	pop	r31
    2da6:	ef 91       	pop	r30
    2da8:	bf 91       	pop	r27
    2daa:	af 91       	pop	r26
    2dac:	9f 91       	pop	r25
    2dae:	8f 91       	pop	r24
    2db0:	7f 91       	pop	r23
    2db2:	6f 91       	pop	r22
    2db4:	5f 91       	pop	r21
    2db6:	4f 91       	pop	r20
    2db8:	3f 91       	pop	r19
    2dba:	2f 91       	pop	r18
    2dbc:	0f 90       	pop	r0
    2dbe:	0b be       	out	0x3b, r0	; 59
    2dc0:	0f 90       	pop	r0
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	0f 90       	pop	r0
    2dc6:	1f 90       	pop	r1
    2dc8:	18 95       	reti

00002dca <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    2dca:	1f 92       	push	r1
    2dcc:	0f 92       	push	r0
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	0b b6       	in	r0, 0x3b	; 59
    2dd6:	0f 92       	push	r0
    2dd8:	2f 93       	push	r18
    2dda:	3f 93       	push	r19
    2ddc:	4f 93       	push	r20
    2dde:	5f 93       	push	r21
    2de0:	6f 93       	push	r22
    2de2:	7f 93       	push	r23
    2de4:	8f 93       	push	r24
    2de6:	9f 93       	push	r25
    2de8:	af 93       	push	r26
    2dea:	bf 93       	push	r27
    2dec:	ef 93       	push	r30
    2dee:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    2df0:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <radioTrxEndEvent>
	}
    2df4:	ff 91       	pop	r31
    2df6:	ef 91       	pop	r30
    2df8:	bf 91       	pop	r27
    2dfa:	af 91       	pop	r26
    2dfc:	9f 91       	pop	r25
    2dfe:	8f 91       	pop	r24
    2e00:	7f 91       	pop	r23
    2e02:	6f 91       	pop	r22
    2e04:	5f 91       	pop	r21
    2e06:	4f 91       	pop	r20
    2e08:	3f 91       	pop	r19
    2e0a:	2f 91       	pop	r18
    2e0c:	0f 90       	pop	r0
    2e0e:	0b be       	out	0x3b, r0	; 59
    2e10:	0f 90       	pop	r0
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	0f 90       	pop	r0
    2e16:	1f 90       	pop	r1
    2e18:	18 95       	reti

00002e1a <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    2e1a:	1f 92       	push	r1
    2e1c:	0f 92       	push	r0
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	0f 92       	push	r0
    2e22:	11 24       	eor	r1, r1
    2e24:	0b b6       	in	r0, 0x3b	; 59
    2e26:	0f 92       	push	r0
    2e28:	2f 93       	push	r18
    2e2a:	3f 93       	push	r19
    2e2c:	4f 93       	push	r20
    2e2e:	5f 93       	push	r21
    2e30:	6f 93       	push	r22
    2e32:	7f 93       	push	r23
    2e34:	8f 93       	push	r24
    2e36:	9f 93       	push	r25
    2e38:	af 93       	push	r26
    2e3a:	bf 93       	push	r27
    2e3c:	ef 93       	push	r30
    2e3e:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    2e40:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    2e44:	8f 71       	andi	r24, 0x1F	; 31
    2e46:	86 31       	cpi	r24, 0x16	; 22
    2e48:	11 f0       	breq	.+4      	; 0x2e4e <__vector_63+0x34>
        radioTrxEndEvent();
    2e4a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <radioTrxEndEvent>
}
    2e4e:	ff 91       	pop	r31
    2e50:	ef 91       	pop	r30
    2e52:	bf 91       	pop	r27
    2e54:	af 91       	pop	r26
    2e56:	9f 91       	pop	r25
    2e58:	8f 91       	pop	r24
    2e5a:	7f 91       	pop	r23
    2e5c:	6f 91       	pop	r22
    2e5e:	5f 91       	pop	r21
    2e60:	4f 91       	pop	r20
    2e62:	3f 91       	pop	r19
    2e64:	2f 91       	pop	r18
    2e66:	0f 90       	pop	r0
    2e68:	0b be       	out	0x3b, r0	; 59
    2e6a:	0f 90       	pop	r0
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	0f 90       	pop	r0
    2e70:	1f 90       	pop	r1
    2e72:	18 95       	reti

00002e74 <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    2e74:	1f 92       	push	r1
    2e76:	0f 92       	push	r0
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	0f 92       	push	r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	0b b6       	in	r0, 0x3b	; 59
    2e80:	0f 92       	push	r0
    2e82:	2f 93       	push	r18
    2e84:	3f 93       	push	r19
    2e86:	4f 93       	push	r20
    2e88:	5f 93       	push	r21
    2e8a:	6f 93       	push	r22
    2e8c:	7f 93       	push	r23
    2e8e:	8f 93       	push	r24
    2e90:	9f 93       	push	r25
    2e92:	af 93       	push	r26
    2e94:	bf 93       	push	r27
    2e96:	ef 93       	push	r30
    2e98:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    2e9a:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <macEdCallback>
	}
    2e9e:	ff 91       	pop	r31
    2ea0:	ef 91       	pop	r30
    2ea2:	bf 91       	pop	r27
    2ea4:	af 91       	pop	r26
    2ea6:	9f 91       	pop	r25
    2ea8:	8f 91       	pop	r24
    2eaa:	7f 91       	pop	r23
    2eac:	6f 91       	pop	r22
    2eae:	5f 91       	pop	r21
    2eb0:	4f 91       	pop	r20
    2eb2:	3f 91       	pop	r19
    2eb4:	2f 91       	pop	r18
    2eb6:	0f 90       	pop	r0
    2eb8:	0b be       	out	0x3b, r0	; 59
    2eba:	0f 90       	pop	r0
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	0f 90       	pop	r0
    2ec0:	1f 90       	pop	r1
    2ec2:	18 95       	reti

00002ec4 <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	ef 92       	push	r14
    2eca:	ff 92       	push	r15
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	00 d0       	rcall	.+0      	; 0x2ed6 <calibrate_rc_osc+0x12>
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    2eda:	10 91 79 05 	lds	r17, 0x0579	; 0x800579 <once.3484>
    2ede:	11 23       	and	r17, r17
    2ee0:	11 f0       	breq	.+4      	; 0x2ee6 <calibrate_rc_osc+0x22>
            // Only calibrate once
            return true;
    2ee2:	11 e0       	ldi	r17, 0x01	; 1
    2ee4:	58 c0       	rjmp	.+176    	; 0x2f96 <calibrate_rc_osc+0xd2>

        once = true;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    2eec:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    2ef0:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	0e 94 82 14 	call	0x2904	; 0x2904 <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    2ef8:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    2efc:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    2f00:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    2f04:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    2f08:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    2f0c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2f10:	88 ee       	ldi	r24, 0xE8	; 232
    2f12:	93 e0       	ldi	r25, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    2f14:	43 e0       	ldi	r20, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    2f16:	56 e0       	ldi	r21, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    2f18:	3f ef       	ldi	r19, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    2f1a:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    2f1e:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    2f22:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    2f26:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2f2a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    2f2e:	36 bb       	out	0x16, r19	; 22
            TIFR2 = 0xFF;
    2f30:	37 bb       	out	0x17, r19	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    2f32:	b8 9b       	sbis	0x17, 0	; 23
    2f34:	fe cf       	rjmp	.-4      	; 0x2f32 <calibrate_rc_osc+0x6e>
                ;

            temp = TCNT1;
    2f36:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2f3a:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2f3e:	7a 83       	std	Y+2, r23	; 0x02
    2f40:	69 83       	std	Y+1, r22	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    2f42:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    2f46:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    2f4a:	69 81       	ldd	r22, Y+1	; 0x01
    2f4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f4e:	6d 3f       	cpi	r22, 0xFD	; 253
    2f50:	71 40       	sbci	r23, 0x01	; 1
    2f52:	20 f4       	brcc	.+8      	; 0x2f5c <calibrate_rc_osc+0x98>
            {
                // Too fast, slow down
                OSCCAL--;
    2f54:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    2f58:	21 50       	subi	r18, 0x01	; 1
    2f5a:	08 c0       	rjmp	.+16     	; 0x2f6c <calibrate_rc_osc+0xa8>
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    2f5c:	69 81       	ldd	r22, Y+1	; 0x01
    2f5e:	7a 81       	ldd	r23, Y+2	; 0x02
    2f60:	63 30       	cpi	r22, 0x03	; 3
    2f62:	72 40       	sbci	r23, 0x02	; 2
    2f64:	48 f0       	brcs	.+18     	; 0x2f78 <calibrate_rc_osc+0xb4>
            {
                // Too slow, speed up
                OSCCAL++;
    2f66:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    2f6a:	2f 5f       	subi	r18, 0xFF	; 255
    2f6c:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    2f70:	01 97       	sbiw	r24, 0x01	; 1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    2f72:	99 f6       	brne	.-90     	; 0x2f1a <calibrate_rc_osc+0x56>
*/
bool calibrate_rc_osc(void)
{
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
    2f74:	00 e0       	ldi	r16, 0x00	; 0
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <calibrate_rc_osc+0xb6>
            }
            else
            {
                // We are within +/- 0.5 % of our target frequency, so we're
                // done.
                success = true;
    2f78:	01 e0       	ldi	r16, 0x01	; 1
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	0e 94 82 14 	call	0x2904	; 0x2904 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    2f82:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    2f86:	d0 92 81 00 	sts	0x0081, r13	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    2f8a:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
    2f8e:	01 11       	cpse	r16, r1
    2f90:	a8 cf       	rjmp	.-176    	; 0x2ee2 <calibrate_rc_osc+0x1e>
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    2f92:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

        return success;
    }
    else
        return 0;
}
    2f96:	81 2f       	mov	r24, r17
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
    2fac:	08 95       	ret

00002fae <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	1f 92       	push	r1
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	fc 01       	movw	r30, r24
    2fba:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    2fbc:	3f b7       	in	r19, 0x3f	; 63
    2fbe:	39 83       	std	Y+1, r19	; 0x01
    2fc0:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    2fc2:	46 2f       	mov	r20, r22
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	bf 01       	movw	r22, r30
    2fc8:	0e 94 5e 34 	call	0x68bc	; 0x68bc <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	8f bf       	out	0x3f, r24	; 63
}
    2fd0:	0f 90       	pop	r0
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	08 95       	ret

00002fd8 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	1f 92       	push	r1
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    2fe6:	3f b7       	in	r19, 0x3f	; 63
    2fe8:	39 83       	std	Y+1, r19	; 0x01
    2fea:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    2fec:	46 2f       	mov	r20, r22
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	bf 01       	movw	r22, r30
    2ff2:	0e 94 80 34 	call	0x6900	; 0x6900 <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	8f bf       	out	0x3f, r24	; 63
}
    2ffa:	0f 90       	pop	r0
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	08 95       	ret

00003002 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	28 97       	sbiw	r28, 0x08	; 8
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    301a:	2f ef       	ldi	r18, 0xFF	; 255
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	30 93 4a 0b 	sts	0x0B4A, r19	; 0x800b4a <macConfig+0xc>
    3022:	20 93 49 0b 	sts	0x0B49, r18	; 0x800b49 <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    3026:	30 93 4c 0b 	sts	0x0B4C, r19	; 0x800b4c <macConfig+0xe>
    302a:	20 93 4b 0b 	sts	0x0B4B, r18	; 0x800b4b <macConfig+0xd>
    macConfig.associated = false;
    302e:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    3032:	30 93 4e 0b 	sts	0x0B4E, r19	; 0x800b4e <macConfig+0x10>
    3036:	20 93 4d 0b 	sts	0x0B4D, r18	; 0x800b4d <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    303a:	30 93 50 0b 	sts	0x0B50, r19	; 0x800b50 <macConfig+0x12>
    303e:	20 93 4f 0b 	sts	0x0B4F, r18	; 0x800b4f <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    3042:	10 92 51 0b 	sts	0x0B51, r1	; 0x800b51 <macConfig+0x13>
    macConfig.busy = 0;
    3046:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    3050:	0e 94 c1 14 	call	0x2982	; 0x2982 <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    3054:	10 93 52 0b 	sts	0x0B52, r17	; 0x800b52 <macConfig+0x14>
    if (Channel != 0xff)
    3058:	1f 3f       	cpi	r17, 0xFF	; 255
    305a:	19 f0       	breq	.+6      	; 0x3062 <macInit+0x60>
        radioSetOperatingChannel(Channel);
    305c:	81 2f       	mov	r24, r17
    305e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0e 94 ed 14 	call	0x29da	; 0x29da <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    3068:	88 e0       	ldi	r24, 0x08	; 8
    306a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    306e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    3072:	86 e1       	ldi	r24, 0x16	; 22
    3074:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    3078:	4e e3       	ldi	r20, 0x3E	; 62
    307a:	5b e0       	ldi	r21, 0x0B	; 11
    307c:	68 e0       	ldi	r22, 0x08	; 8
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    308c:	8f ef       	ldi	r24, 0xFF	; 255
    308e:	9f ef       	ldi	r25, 0xFF	; 255
    3090:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    3094:	8f ef       	ldi	r24, 0xFF	; 255
    3096:	9f ef       	ldi	r25, 0xFF	; 255
    3098:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    309c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    30a0:	8f 70       	andi	r24, 0x0F	; 15
    30a2:	80 62       	ori	r24, 0x20	; 32
    30a4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    30a8:	80 91 3e 0b 	lds	r24, 0x0B3E	; 0x800b3e <macConfig>
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <macConfig+0x1>
    30b2:	8a 83       	std	Y+2, r24	; 0x02
    30b4:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <macConfig+0x2>
    30b8:	8b 83       	std	Y+3, r24	; 0x03
    30ba:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <macConfig+0x3>
    30be:	8c 83       	std	Y+4, r24	; 0x04
    30c0:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <macConfig+0x4>
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <macConfig+0x5>
    30ca:	8e 83       	std	Y+6, r24	; 0x06
    30cc:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <macConfig+0x6>
    30d0:	8f 83       	std	Y+7, r24	; 0x07
    30d2:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <macConfig+0x7>
    30d6:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    30d8:	ce 01       	movw	r24, r28
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	0e 94 82 16 	call	0x2d04	; 0x2d04 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    30e0:	0e 94 4a 19 	call	0x3294	; 0x3294 <macInitNodes>
}
    30e4:	28 96       	adiw	r28, 0x08	; 8
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	08 95       	ret

000030f8 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    30f8:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    30fc:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <radioSetOperatingChannel>

00003100 <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    3100:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <associationTimer>
    3104:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <macTimerEnd>
    3108:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <macConfig+0x8>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	89 27       	eor	r24, r25
    3110:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <appAssociateConfirm>

00003114 <macAssociate>:
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	ec 01       	movw	r28, r24
    311a:	86 2f       	mov	r24, r22
    311c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <macSetOperatingChannel>
    3120:	ec eb       	ldi	r30, 0xBC	; 188
    3122:	fa e0       	ldi	r31, 0x0A	; 10
    3124:	83 e6       	ldi	r24, 0x63	; 99
    3126:	98 ec       	ldi	r25, 0xC8	; 200
    3128:	92 83       	std	Z+2, r25	; 0x02
    312a:	81 83       	std	Z+1, r24	; 0x01
    312c:	ae e3       	ldi	r26, 0x3E	; 62
    312e:	bb e0       	ldi	r27, 0x0B	; 11
    3130:	1a 96       	adiw	r26, 0x0a	; 10
    3132:	8c 91       	ld	r24, X
    3134:	1a 97       	sbiw	r26, 0x0a	; 10
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	98 0f       	add	r25, r24
    313a:	1a 96       	adiw	r26, 0x0a	; 10
    313c:	9c 93       	st	X, r25
    313e:	1a 97       	sbiw	r26, 0x0a	; 10
    3140:	83 83       	std	Z+3, r24	; 0x03
    3142:	1b 96       	adiw	r26, 0x0b	; 11
    3144:	8d 91       	ld	r24, X+
    3146:	9c 91       	ld	r25, X
    3148:	1c 97       	sbiw	r26, 0x0c	; 12
    314a:	95 83       	std	Z+5, r25	; 0x05
    314c:	84 83       	std	Z+4, r24	; 0x04
    314e:	d7 83       	std	Z+7, r29	; 0x07
    3150:	c6 83       	std	Z+6, r28	; 0x06
    3152:	8c 91       	ld	r24, X
    3154:	80 87       	std	Z+8, r24	; 0x08
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	8c 91       	ld	r24, X
    315a:	11 97       	sbiw	r26, 0x01	; 1
    315c:	81 87       	std	Z+9, r24	; 0x09
    315e:	12 96       	adiw	r26, 0x02	; 2
    3160:	8c 91       	ld	r24, X
    3162:	12 97       	sbiw	r26, 0x02	; 2
    3164:	82 87       	std	Z+10, r24	; 0x0a
    3166:	13 96       	adiw	r26, 0x03	; 3
    3168:	8c 91       	ld	r24, X
    316a:	13 97       	sbiw	r26, 0x03	; 3
    316c:	83 87       	std	Z+11, r24	; 0x0b
    316e:	14 96       	adiw	r26, 0x04	; 4
    3170:	8c 91       	ld	r24, X
    3172:	14 97       	sbiw	r26, 0x04	; 4
    3174:	84 87       	std	Z+12, r24	; 0x0c
    3176:	15 96       	adiw	r26, 0x05	; 5
    3178:	8c 91       	ld	r24, X
    317a:	15 97       	sbiw	r26, 0x05	; 5
    317c:	85 87       	std	Z+13, r24	; 0x0d
    317e:	16 96       	adiw	r26, 0x06	; 6
    3180:	8c 91       	ld	r24, X
    3182:	16 97       	sbiw	r26, 0x06	; 6
    3184:	86 87       	std	Z+14, r24	; 0x0e
    3186:	17 96       	adiw	r26, 0x07	; 7
    3188:	8c 91       	ld	r24, X
    318a:	87 87       	std	Z+15, r24	; 0x0f
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	80 8b       	std	Z+16, r24	; 0x10
    3190:	d2 8b       	std	Z+18, r29	; 0x12
    3192:	c1 8b       	std	Z+17, r28	; 0x11
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	83 8b       	std	Z+19, r24	; 0x13
    3198:	6d eb       	ldi	r22, 0xBD	; 189
    319a:	7a e0       	ldi	r23, 0x0A	; 10
    319c:	83 e1       	ldi	r24, 0x13	; 19
    319e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <radioSendData>
    31a2:	60 e8       	ldi	r22, 0x80	; 128
    31a4:	78 e1       	ldi	r23, 0x18	; 24
    31a6:	84 e6       	ldi	r24, 0x64	; 100
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    31ae:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <associationTimer>
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	08 95       	ret

000031b8 <macIsChild>:
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	61 f0       	breq	.+24     	; 0x31d4 <macIsChild+0x1c>
    31bc:	ea e7       	ldi	r30, 0x7A	; 122
    31be:	f5 e0       	ldi	r31, 0x05	; 5
    31c0:	20 81       	ld	r18, Z
    31c2:	31 81       	ldd	r19, Z+1	; 0x01
    31c4:	28 17       	cp	r18, r24
    31c6:	39 07       	cpc	r19, r25
    31c8:	39 f0       	breq	.+14     	; 0x31d8 <macIsChild+0x20>
    31ca:	33 96       	adiw	r30, 0x03	; 3
    31cc:	26 e0       	ldi	r18, 0x06	; 6
    31ce:	e6 3a       	cpi	r30, 0xA6	; 166
    31d0:	f2 07       	cpc	r31, r18
    31d2:	b1 f7       	brne	.-20     	; 0x31c0 <macIsChild+0x8>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	08 95       	ret
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	08 95       	ret

000031dc <macAddChild>:
    31dc:	ea e7       	ldi	r30, 0x7A	; 122
    31de:	f5 e0       	ldi	r31, 0x05	; 5
    31e0:	df 01       	movw	r26, r30
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4d 91       	ld	r20, X+
    31e8:	5c 91       	ld	r21, X
    31ea:	11 97       	sbiw	r26, 0x01	; 1
    31ec:	48 17       	cp	r20, r24
    31ee:	59 07       	cpc	r21, r25
    31f0:	69 f4       	brne	.+26     	; 0x320c <macAddChild+0x30>
    31f2:	f9 01       	movw	r30, r18
    31f4:	ee 0f       	add	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	2e 0f       	add	r18, r30
    31fa:	3f 1f       	adc	r19, r31
    31fc:	f9 01       	movw	r30, r18
    31fe:	e4 58       	subi	r30, 0x84	; 132
    3200:	fa 4f       	sbci	r31, 0xFA	; 250
    3202:	80 81       	ld	r24, Z
    3204:	8e 7f       	andi	r24, 0xFE	; 254
    3206:	8d 7f       	andi	r24, 0xFD	; 253
    3208:	80 83       	st	Z, r24
    320a:	08 95       	ret
    320c:	2f 5f       	subi	r18, 0xFF	; 255
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	13 96       	adiw	r26, 0x03	; 3
    3212:	24 36       	cpi	r18, 0x64	; 100
    3214:	31 05       	cpc	r19, r1
    3216:	39 f7       	brne	.-50     	; 0x31e6 <macAddChild+0xa>
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	42 2f       	mov	r20, r18
    321e:	60 81       	ld	r22, Z
    3220:	71 81       	ldd	r23, Z+1	; 0x01
    3222:	67 2b       	or	r22, r23
    3224:	a9 f4       	brne	.+42     	; 0x3250 <macAddChild+0x74>
    3226:	f9 01       	movw	r30, r18
    3228:	ee 0f       	add	r30, r30
    322a:	ff 1f       	adc	r31, r31
    322c:	2e 0f       	add	r18, r30
    322e:	3f 1f       	adc	r19, r31
    3230:	f9 01       	movw	r30, r18
    3232:	e6 58       	subi	r30, 0x86	; 134
    3234:	fa 4f       	sbci	r31, 0xFA	; 250
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	f9 01       	movw	r30, r18
    323c:	e4 58       	subi	r30, 0x84	; 132
    323e:	fa 4f       	sbci	r31, 0xFA	; 250
    3240:	90 81       	ld	r25, Z
    3242:	9e 7f       	andi	r25, 0xFE	; 254
    3244:	9d 7f       	andi	r25, 0xFD	; 253
    3246:	90 83       	st	Z, r25
    3248:	84 2f       	mov	r24, r20
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0c 94 e5 21 	jmp	0x43ca	; 0x43ca <appChildAssociated>
    3250:	2f 5f       	subi	r18, 0xFF	; 255
    3252:	3f 4f       	sbci	r19, 0xFF	; 255
    3254:	33 96       	adiw	r30, 0x03	; 3
    3256:	24 36       	cpi	r18, 0x64	; 100
    3258:	31 05       	cpc	r19, r1
    325a:	01 f7       	brne	.-64     	; 0x321c <macAddChild+0x40>
    325c:	08 95       	ret

0000325e <macRemoveChild>:
    325e:	ea e7       	ldi	r30, 0x7A	; 122
    3260:	f5 e0       	ldi	r31, 0x05	; 5
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 81       	ld	r20, Z
    3268:	51 81       	ldd	r21, Z+1	; 0x01
    326a:	48 17       	cp	r20, r24
    326c:	59 07       	cpc	r21, r25
    326e:	59 f4       	brne	.+22     	; 0x3286 <macRemoveChild+0x28>
    3270:	f9 01       	movw	r30, r18
    3272:	ee 0f       	add	r30, r30
    3274:	ff 1f       	adc	r31, r31
    3276:	2e 0f       	add	r18, r30
    3278:	3f 1f       	adc	r19, r31
    327a:	f9 01       	movw	r30, r18
    327c:	e6 58       	subi	r30, 0x86	; 134
    327e:	fa 4f       	sbci	r31, 0xFA	; 250
    3280:	11 82       	std	Z+1, r1	; 0x01
    3282:	10 82       	st	Z, r1
    3284:	08 95       	ret
    3286:	2f 5f       	subi	r18, 0xFF	; 255
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	33 96       	adiw	r30, 0x03	; 3
    328c:	24 36       	cpi	r18, 0x64	; 100
    328e:	31 05       	cpc	r19, r1
    3290:	51 f7       	brne	.-44     	; 0x3266 <macRemoveChild+0x8>
    3292:	08 95       	ret

00003294 <macInitNodes>:
    3294:	08 95       	ret

00003296 <macWakeChildNode>:
    3296:	08 95       	ret

00003298 <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    3298:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    329a:	95 85       	ldd	r25, Z+13	; 0x0d
    329c:	9f 77       	andi	r25, 0x7F	; 127
    329e:	95 87       	std	Z+13, r25	; 0x0d
    32a0:	08 95       	ret

000032a2 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    32a2:	ec eb       	ldi	r30, 0xBC	; 188
    32a4:	fa e0       	ldi	r31, 0x0A	; 10
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e8       	ldi	r25, 0x80	; 128
    32aa:	92 83       	std	Z+2, r25	; 0x02
    32ac:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    32ae:	ae e3       	ldi	r26, 0x3E	; 62
    32b0:	bb e0       	ldi	r27, 0x0B	; 11
    32b2:	19 96       	adiw	r26, 0x09	; 9
    32b4:	8c 91       	ld	r24, X
    32b6:	19 97       	sbiw	r26, 0x09	; 9
    32b8:	91 e0       	ldi	r25, 0x01	; 1
    32ba:	98 0f       	add	r25, r24
    32bc:	19 96       	adiw	r26, 0x09	; 9
    32be:	9c 93       	st	X, r25
    32c0:	19 97       	sbiw	r26, 0x09	; 9
    32c2:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    32c4:	1b 96       	adiw	r26, 0x0b	; 11
    32c6:	8d 91       	ld	r24, X+
    32c8:	9c 91       	ld	r25, X
    32ca:	1c 97       	sbiw	r26, 0x0c	; 12
    32cc:	95 83       	std	Z+5, r25	; 0x05
    32ce:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    32d0:	1d 96       	adiw	r26, 0x0d	; 13
    32d2:	8d 91       	ld	r24, X+
    32d4:	9c 91       	ld	r25, X
    32d6:	1e 97       	sbiw	r26, 0x0e	; 14
    32d8:	97 83       	std	Z+7, r25	; 0x07
    32da:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	91 87       	std	Z+9, r25	; 0x09
    32e2:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    32e4:	86 e0       	ldi	r24, 0x06	; 6
    32e6:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    32e8:	53 96       	adiw	r26, 0x13	; 19
    32ea:	8c 91       	ld	r24, X
    32ec:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    32ee:	6d eb       	ldi	r22, 0xBD	; 189
    32f0:	7a e0       	ldi	r23, 0x0A	; 10
    32f2:	8b e0       	ldi	r24, 0x0B	; 11
    32f4:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <radioSendData>

000032f8 <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    32f8:	6d eb       	ldi	r22, 0xBD	; 189
    32fa:	7a e0       	ldi	r23, 0x0A	; 10
    32fc:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <mac_buffer_tx>
    3300:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <radioSendData>

00003304 <macDataRequestInt>:
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	e0 91 4b 0b 	lds	r30, 0x0B4B	; 0x800b4b <macConfig+0xd>
    3314:	f0 91 4c 0b 	lds	r31, 0x0B4C	; 0x800b4c <macConfig+0xe>
    3318:	8e 17       	cp	r24, r30
    331a:	9f 07       	cpc	r25, r31
    331c:	09 f4       	brne	.+2      	; 0x3320 <macDataRequestInt+0x1c>
    331e:	6e c0       	rjmp	.+220    	; 0x33fc <macDataRequestInt+0xf8>
    3320:	8f 3f       	cpi	r24, 0xFF	; 255
    3322:	3f ef       	ldi	r19, 0xFF	; 255
    3324:	93 07       	cpc	r25, r19
    3326:	09 f4       	brne	.+2      	; 0x332a <macDataRequestInt+0x26>
    3328:	69 c0       	rjmp	.+210    	; 0x33fc <macDataRequestInt+0xf8>
    332a:	30 91 46 0b 	lds	r19, 0x0B46	; 0x800b46 <macConfig+0x8>
    332e:	33 23       	and	r19, r19
    3330:	09 f4       	brne	.+2      	; 0x3334 <macDataRequestInt+0x30>
    3332:	64 c0       	rjmp	.+200    	; 0x33fc <macDataRequestInt+0xf8>
    3334:	c2 2f       	mov	r28, r18
    3336:	7a 01       	movw	r14, r20
    3338:	d6 2f       	mov	r29, r22
    333a:	8c 01       	movw	r16, r24
    333c:	81 e6       	ldi	r24, 0x61	; 97
    333e:	98 e8       	ldi	r25, 0x88	; 136
    3340:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <mac_buffer_tx+0x2>
    3344:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <mac_buffer_tx+0x1>
    3348:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <macConfig+0xa>
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	98 0f       	add	r25, r24
    3350:	90 93 48 0b 	sts	0x0B48, r25	; 0x800b48 <macConfig+0xa>
    3354:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <mac_buffer_tx+0x3>
    3358:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <macConfig+0xb>
    335c:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <macConfig+0xc>
    3360:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <mac_buffer_tx+0x5>
    3364:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x4>
    3368:	f0 93 c5 0a 	sts	0x0AC5, r31	; 0x800ac5 <mac_buffer_tx+0x9>
    336c:	e0 93 c4 0a 	sts	0x0AC4, r30	; 0x800ac4 <mac_buffer_tx+0x8>
    3370:	10 93 c7 0a 	sts	0x0AC7, r17	; 0x800ac7 <mac_buffer_tx+0xb>
    3374:	00 93 c6 0a 	sts	0x0AC6, r16	; 0x800ac6 <mac_buffer_tx+0xa>
    3378:	f0 93 c9 0a 	sts	0x0AC9, r31	; 0x800ac9 <mac_buffer_tx+0xd>
    337c:	e0 93 c8 0a 	sts	0x0AC8, r30	; 0x800ac8 <mac_buffer_tx+0xc>
    3380:	c8 01       	movw	r24, r16
    3382:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <macSendRoutingPacket>
    3386:	c6 30       	cpi	r28, 0x06	; 6
    3388:	29 f4       	brne	.+10     	; 0x3394 <macDataRequestInt+0x90>
    338a:	10 93 c3 0a 	sts	0x0AC3, r17	; 0x800ac3 <mac_buffer_tx+0x7>
    338e:	00 93 c2 0a 	sts	0x0AC2, r16	; 0x800ac2 <mac_buffer_tx+0x6>
    3392:	08 c0       	rjmp	.+16     	; 0x33a4 <macDataRequestInt+0xa0>
    3394:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <macConfig+0xf>
    3398:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <macConfig+0x10>
    339c:	90 93 c3 0a 	sts	0x0AC3, r25	; 0x800ac3 <mac_buffer_tx+0x7>
    33a0:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x6>
    33a4:	c0 93 ca 0a 	sts	0x0ACA, r28	; 0x800aca <mac_buffer_tx+0xe>
    33a8:	f7 01       	movw	r30, r14
    33aa:	2b ec       	ldi	r18, 0xCB	; 203
    33ac:	3a e0       	ldi	r19, 0x0A	; 10
    33ae:	d9 01       	movw	r26, r18
    33b0:	8a 2f       	mov	r24, r26
    33b2:	82 1b       	sub	r24, r18
    33b4:	8d 17       	cp	r24, r29
    33b6:	18 f4       	brcc	.+6      	; 0x33be <macDataRequestInt+0xba>
    33b8:	81 91       	ld	r24, Z+
    33ba:	8d 93       	st	X+, r24
    33bc:	f9 cf       	rjmp	.-14     	; 0x33b0 <macDataRequestInt+0xac>
    33be:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <mac_buffer_tx+0x6>
    33c2:	90 91 c3 0a 	lds	r25, 0x0AC3	; 0x800ac3 <mac_buffer_tx+0x7>
    33c6:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <macConfig+0xd>
    33ca:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <macConfig+0xe>
    33ce:	82 17       	cp	r24, r18
    33d0:	93 07       	cpc	r25, r19
    33d2:	a1 f0       	breq	.+40     	; 0x33fc <macDataRequestInt+0xf8>
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	91 f0       	breq	.+36     	; 0x33fc <macDataRequestInt+0xf8>
    33d8:	d2 5f       	subi	r29, 0xF2	; 242
    33da:	d0 93 bc 0a 	sts	0x0ABC, r29	; 0x800abc <mac_buffer_tx>
    33de:	c6 50       	subi	r28, 0x06	; 6
    33e0:	c2 30       	cpi	r28, 0x02	; 2
    33e2:	18 f0       	brcs	.+6      	; 0x33ea <macDataRequestInt+0xe6>
    33e4:	87 e0       	ldi	r24, 0x07	; 7
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <macDataRequestInt+0xea>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	6c e7       	ldi	r22, 0x7C	; 124
    33f0:	79 e1       	ldi	r23, 0x19	; 25
    33f2:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <macConfig+0x17>
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	ff 90       	pop	r15
    3406:	ef 90       	pop	r14
    3408:	08 95       	ret

0000340a <macDataRequest>:
    340a:	21 e0       	ldi	r18, 0x01	; 1
    340c:	0c 94 82 19 	jmp	0x3304	; 0x3304 <macDataRequestInt>

00003410 <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    3410:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <mac_buffer_rx+0xe>
    3414:	8f 77       	andi	r24, 0x7F	; 127
    3416:	83 30       	cpi	r24, 0x03	; 3
    3418:	29 f1       	breq	.+74     	; 0x3464 <macDataIndication+0x54>
    341a:	28 f4       	brcc	.+10     	; 0x3426 <macDataIndication+0x16>
    341c:	81 30       	cpi	r24, 0x01	; 1
    341e:	41 f0       	breq	.+16     	; 0x3430 <macDataIndication+0x20>
    3420:	82 30       	cpi	r24, 0x02	; 2
    3422:	d1 f0       	breq	.+52     	; 0x3458 <macDataIndication+0x48>
    3424:	08 95       	ret
    3426:	84 30       	cpi	r24, 0x04	; 4
    3428:	19 f1       	breq	.+70     	; 0x3470 <macDataIndication+0x60>
    342a:	86 30       	cpi	r24, 0x06	; 6
    342c:	19 f0       	breq	.+6      	; 0x3434 <macDataIndication+0x24>
    342e:	08 95       	ret
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    3430:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <appDataIndication>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    3434:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0xf>
    3438:	90 91 4a 0a 	lds	r25, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    343c:	40 91 42 0a 	lds	r20, 0x0A42	; 0x800a42 <mac_buffer_rx+0x8>
    3440:	50 91 43 0a 	lds	r21, 0x0A43	; 0x800a43 <mac_buffer_rx+0x9>
    3444:	20 91 4d 0b 	lds	r18, 0x0B4D	; 0x800b4d <macConfig+0xf>
    3448:	30 91 4e 0b 	lds	r19, 0x0B4E	; 0x800b4e <macConfig+0x10>
    344c:	42 17       	cp	r20, r18
    344e:	53 07       	cpc	r21, r19
    3450:	a9 f4       	brne	.+42     	; 0x347c <macDataIndication+0x6c>
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    3452:	99 27       	eor	r25, r25
    3454:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <macWakeChildNode>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    3458:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xc>
    345c:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <mac_buffer_rx+0xd>
    3460:	0c 94 5a 21 	jmp	0x42b4	; 0x42b4 <appPingReq>
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    3464:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xc>
    3468:	90 91 47 0a 	lds	r25, 0x0A47	; 0x800a47 <mac_buffer_rx+0xd>
    346c:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <appPingRsp>
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    3470:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0xf>
    3474:	90 91 4a 0a 	lds	r25, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x10>
    3478:	0c 94 2f 19 	jmp	0x325e	; 0x325e <macRemoveChild>
    347c:	08 95       	ret

0000347e <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	60 97       	sbiw	r28, 0x10	; 16
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    3496:	81 e6       	ldi	r24, 0x61	; 97
    3498:	98 e8       	ldi	r25, 0x88	; 136
    349a:	9a 83       	std	Y+2, r25	; 0x02
    349c:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    349e:	0e e3       	ldi	r16, 0x3E	; 62
    34a0:	1b e0       	ldi	r17, 0x0B	; 11
    34a2:	f8 01       	movw	r30, r16
    34a4:	82 85       	ldd	r24, Z+10	; 0x0a
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	98 0f       	add	r25, r24
    34aa:	92 87       	std	Z+10, r25	; 0x0a
    34ac:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    34ae:	83 85       	ldd	r24, Z+11	; 0x0b
    34b0:	94 85       	ldd	r25, Z+12	; 0x0c
    34b2:	9d 83       	std	Y+5, r25	; 0x05
    34b4:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    34b6:	85 85       	ldd	r24, Z+13	; 0x0d
    34b8:	96 85       	ldd	r25, Z+14	; 0x0e
    34ba:	99 87       	std	Y+9, r25	; 0x09
    34bc:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    34be:	9d 87       	std	Y+13, r25	; 0x0d
    34c0:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    34c2:	80 91 a9 06 	lds	r24, 0x06A9	; 0x8006a9 <pingAddr>
    34c6:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <pingAddr+0x1>
    34ca:	9b 87       	std	Y+11, r25	; 0x0b
    34cc:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    34ce:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pingType>
    34d2:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    34d4:	0e 94 45 14 	call	0x288a	; 0x288a <radioGetSavedRssiValue>
    34d8:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    34da:	0e 94 4e 14 	call	0x289c	; 0x289c <radioGetSavedLqiValue>
    34de:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    34e0:	f8 01       	movw	r30, r16
    34e2:	87 85       	ldd	r24, Z+15	; 0x0f
    34e4:	90 89       	ldd	r25, Z+16	; 0x10
    34e6:	9f 83       	std	Y+7, r25	; 0x07
    34e8:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    34ea:	be 01       	movw	r22, r28
    34ec:	6f 5f       	subi	r22, 0xFF	; 255
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255
    34f0:	80 e1       	ldi	r24, 0x10	; 16
    34f2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <radioSendData>
}
    34f6:	60 96       	adiw	r28, 0x10	; 16
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	08 95       	ret

0000350c <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    350c:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <macConfig+0xd>
    3510:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <macConfig+0xe>
    3514:	62 17       	cp	r22, r18
    3516:	73 07       	cpc	r23, r19
    3518:	91 f0       	breq	.+36     	; 0x353e <macPing+0x32>
        // Don't send to self
        return;

    if (!macConfig.associated)
    351a:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <macConfig+0x8>
    351e:	99 23       	and	r25, r25
    3520:	71 f0       	breq	.+28     	; 0x353e <macPing+0x32>
        // Broadcast addr
        return;

    pingAddr = addr;
    3522:	70 93 aa 06 	sts	0x06AA, r23	; 0x8006aa <pingAddr+0x1>
    3526:	60 93 a9 06 	sts	0x06A9, r22	; 0x8006a9 <pingAddr>
    pingType = pingTypeArg;
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pingType+0x1>
    3530:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    3534:	0e 94 3f 1a 	call	0x347e	; 0x347e <mp>
        macConfig.busy = true;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <macConfig+0x17>
    353e:	08 95       	ret

00003540 <mac_event_pending>:

    @return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
    u8 head = event_queue.head;
    3540:	20 91 57 0b 	lds	r18, 0x0B57	; 0x800b57 <event_queue>
    return (head != event_queue.tail);
    3544:	90 91 58 0b 	lds	r25, 0x0B58	; 0x800b58 <event_queue+0x1>
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	29 13       	cpse	r18, r25
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <mac_event_pending+0x10>
    354e:	80 e0       	ldi	r24, 0x00	; 0
}
    3550:	08 95       	ret

00003552 <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
*/
void mac_put_event(event_object_t *object)
{
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	ec 01       	movw	r28, r24
    u8 newhead = event_queue.head;
    3558:	40 91 57 0b 	lds	r20, 0x0B57	; 0x800b57 <event_queue>

    if ((newhead + 1) % MAX_EVENTS == event_queue.tail)
    355c:	24 2f       	mov	r18, r20
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	e0 91 58 0b 	lds	r30, 0x0B58	; 0x800b58 <event_queue+0x1>
    3564:	c9 01       	movw	r24, r18
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	6e e1       	ldi	r22, 0x1E	; 30
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <__divmodhi4>
    3570:	6e 2f       	mov	r22, r30
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	86 17       	cp	r24, r22
    3576:	97 07       	cpc	r25, r23
    3578:	a9 f0       	breq	.+42     	; 0x35a4 <mac_put_event+0x52>
        return;

    //    newhead = event_queue.head;

    // store in queue
    event_queue.event_object[newhead] = *object;
    357a:	f9 01       	movw	r30, r18
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	2e 0f       	add	r18, r30
    3582:	3f 1f       	adc	r19, r31
    3584:	f9 01       	movw	r30, r18
    3586:	e9 5a       	subi	r30, 0xA9	; 169
    3588:	f4 4f       	sbci	r31, 0xF4	; 244
    358a:	88 81       	ld	r24, Y
    358c:	99 81       	ldd	r25, Y+1	; 0x01
    358e:	aa 81       	ldd	r26, Y+2	; 0x02
    3590:	82 83       	std	Z+2, r24	; 0x02
    3592:	93 83       	std	Z+3, r25	; 0x03
    3594:	a4 83       	std	Z+4, r26	; 0x04

    // calculate new head index
    newhead++;
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	84 0f       	add	r24, r20
    if (newhead >= MAX_EVENTS)
    359a:	8e 31       	cpi	r24, 0x1E	; 30
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <mac_put_event+0x4e>
        newhead = 0;
    359e:	80 e0       	ldi	r24, 0x00	; 0
    event_queue.head = newhead;
    35a0:	80 93 57 0b 	sts	0x0B57, r24	; 0x800b57 <event_queue>
}
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	08 95       	ret

000035aa <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
*/
event_object_t * mac_get_event(void)
{
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	1f 92       	push	r1
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    event_object_t *object = NULL;
    volatile u8 newtail;

    newtail = event_queue.tail;
    35b4:	80 91 58 0b 	lds	r24, 0x0B58	; 0x800b58 <event_queue+0x1>
    35b8:	89 83       	std	Y+1, r24	; 0x01

    object = &(event_queue.event_object[newtail]);
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9c 01       	movw	r18, r24
    35c0:	22 0f       	add	r18, r18
    35c2:	33 1f       	adc	r19, r19
    35c4:	82 0f       	add	r24, r18
    35c6:	93 1f       	adc	r25, r19
    35c8:	87 5a       	subi	r24, 0xA7	; 167
    35ca:	94 4f       	sbci	r25, 0xF4	; 244

    // calculate new tail
    newtail++;
    35cc:	29 81       	ldd	r18, Y+1	; 0x01
    35ce:	2f 5f       	subi	r18, 0xFF	; 255
    35d0:	29 83       	std	Y+1, r18	; 0x01
    if (newtail >= MAX_EVENTS)
    35d2:	29 81       	ldd	r18, Y+1	; 0x01
    35d4:	2e 31       	cpi	r18, 0x1E	; 30
    35d6:	08 f0       	brcs	.+2      	; 0x35da <mac_get_event+0x30>
        newtail = 0;
    35d8:	19 82       	std	Y+1, r1	; 0x01

    event_queue.tail = newtail;
    35da:	29 81       	ldd	r18, Y+1	; 0x01
    35dc:	20 93 58 0b 	sts	0x0B58, r18	; 0x800b58 <event_queue+0x1>

    return(object);
}
    35e0:	0f 90       	pop	r0
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	08 95       	ret

000035e8 <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
*/
void macTask(void)
{
    35e8:	cf 93       	push	r28
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    35ea:	c1 e0       	ldi	r28, 0x01	; 1
void macTask(void)
{
    event_object_t *event;

    event = 0;
    while(mac_event_pending())
    35ec:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_event_pending>
    35f0:	88 23       	and	r24, r24
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <macTask+0xe>
    35f4:	81 c0       	rjmp	.+258    	; 0x36f8 <macTask+0x110>
    {
        event = mac_get_event();
    35f6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <mac_get_event>
        switch (event->event)
    35fa:	dc 01       	movw	r26, r24
    35fc:	ec 91       	ld	r30, X
    35fe:	4e 2f       	mov	r20, r30
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	fa 01       	movw	r30, r20
    3604:	70 97       	sbiw	r30, 0x10	; 16
    3606:	ea 30       	cpi	r30, 0x0A	; 10
    3608:	f1 05       	cpc	r31, r1
    360a:	80 f7       	brcc	.-32     	; 0x35ec <macTask+0x4>
    360c:	e0 57       	subi	r30, 0x70	; 112
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	0c 94 52 2d 	jmp	0x5aa4	; 0x5aa4 <__tablejump2__>
        {
        case MAC_EVENT_SCAN:
            // A beacon has been received as a result of an active scan.
            // Record the pan descriptor and store it until the scan has
            // completed.
            if (!macConfig.associated)
    3614:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    3618:	81 11       	cpse	r24, r1
    361a:	e8 cf       	rjmp	.-48     	; 0x35ec <macTask+0x4>
                mac_logPanDescriptors();
    361c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <mac_logPanDescriptors>
    3620:	e5 cf       	rjmp	.-54     	; 0x35ec <macTask+0x4>
            break;
// ETG #if __AVR__ || __AVR32__
#if __AVR__ || __AVR32__
       case MAC_EVENT_TIMER:
           // Timer has expired, just callback the stored function pointer
           ((void (*)(void))event->data)();  // cast data to function pointer
    3622:	dc 01       	movw	r26, r24
    3624:	11 96       	adiw	r26, 0x01	; 1
    3626:	ed 91       	ld	r30, X+
    3628:	fc 91       	ld	r31, X
    362a:	12 97       	sbiw	r26, 0x02	; 2
    362c:	09 95       	icall
           break;
    362e:	de cf       	rjmp	.-68     	; 0x35ec <macTask+0x4>
#endif
        case MAC_EVENT_RX:
            if (macConfig.associated)
    3630:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    3634:	88 23       	and	r24, r24
    3636:	d1 f2       	breq	.-76     	; 0x35ec <macTask+0x4>
                frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
                frame->originAddr = ntohs_16(frame->originAddr);

                // Wake up
                if (NODETYPE != ENDDEVICE)
                    macChildIsAwake((ftData*)(mac_buffer_rx+1));
    3638:	8b e3       	ldi	r24, 0x3B	; 59
    363a:	9a e0       	ldi	r25, 0x0A	; 10
    363c:	0e 94 4c 19 	call	0x3298	; 0x3298 <macChildIsAwake>
                // Received a data frame, process it or route it
                if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    3640:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <mac_buffer_rx+0xa>
    3644:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <mac_buffer_rx+0xb>
    3648:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <macConfig+0xd>
    364c:	90 91 4c 0b 	lds	r25, 0x0B4C	; 0x800b4c <macConfig+0xe>
    3650:	28 17       	cp	r18, r24
    3652:	39 07       	cpc	r19, r25
    3654:	19 f4       	brne	.+6      	; 0x365c <macTask+0x74>
                    // This data frame is for this node
                    macDataIndication();
    3656:	0e 94 08 1a 	call	0x3410	; 0x3410 <macDataIndication>
    365a:	c8 cf       	rjmp	.-112    	; 0x35ec <macTask+0x4>
                else
                    // Route the packet up/down stream
                    if (NODETYPE != ENDDEVICE)
                        macRouteData();
    365c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <macRouteData>
    3660:	c5 cf       	rjmp	.-118    	; 0x35ec <macTask+0x4>
            {
                ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
                frame->panid = ntohs_16(frame->panid);
                
                // Generate and send the beacon.
                if (NODETYPE == ROUTER && macConfig.associated)
    3662:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    3666:	88 23       	and	r24, r24
    3668:	09 f2       	breq	.-126    	; 0x35ec <macTask+0x4>
                    macSetAlarm(1, sendBeaconFrame);
    366a:	61 e5       	ldi	r22, 0x51	; 81
    366c:	79 e1       	ldi	r23, 0x19	; 25
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    3676:	ba cf       	rjmp	.-140    	; 0x35ec <macTask+0x4>
                break;                
            }
            if (NODETYPE == COORD)
                // Pan Coord has received this request.
                macAssociationResponse();
            if (NODETYPE == ROUTER && macConfig.associated)
    3678:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    367c:	88 23       	and	r24, r24
    367e:	09 f4       	brne	.+2      	; 0x3682 <macTask+0x9a>
    3680:	b5 cf       	rjmp	.-150    	; 0x35ec <macTask+0x4>
            {
                // Send this packet along to parent
                macRouteAssociateRequest();
    3682:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <macRouteAssociateRequest>
    3686:	b2 cf       	rjmp	.-156    	; 0x35ec <macTask+0x4>
        case MAC_EVENT_ASSOCIATION_RESPONSE:
            // End device has recieved this response.
            if (NODETYPE != COORD)
            {
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    3688:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <mac_buffer_rx+0x2>
    368c:	8c 38       	cpi	r24, 0x8C	; 140
    368e:	d9 f4       	brne	.+54     	; 0x36c6 <macTask+0xde>
    3690:	80 91 3b 0a 	lds	r24, 0x0A3B	; 0x800a3b <mac_buffer_rx+0x1>
    3694:	83 36       	cpi	r24, 0x63	; 99
    3696:	b9 f4       	brne	.+46     	; 0x36c6 <macTask+0xde>
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    3698:	c0 93 46 0b 	sts	0x0B46, r28	; 0x800b46 <macConfig+0x8>
                    macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    369c:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <mac_buffer_rx+0xe>
    36a0:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <mac_buffer_rx+0xf>
    36a4:	90 93 4e 0b 	sts	0x0B4E, r25	; 0x800b4e <macConfig+0x10>
    36a8:	80 93 4d 0b 	sts	0x0B4D, r24	; 0x800b4d <macConfig+0xf>
                    macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    36ac:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x11>
    36b0:	90 91 4c 0a 	lds	r25, 0x0A4C	; 0x800a4c <mac_buffer_rx+0x12>
    36b4:	90 93 4c 0b 	sts	0x0B4C, r25	; 0x800b4c <macConfig+0xe>
    36b8:	80 93 4b 0b 	sts	0x0B4B, r24	; 0x800b4b <macConfig+0xd>

                    radioSetShortAddress(macConfig.shortAddress);
    36bc:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <radioSetShortAddress>
                    macAssociationConfirm();
    36c0:	0e 94 80 18 	call	0x3100	; 0x3100 <macAssociationConfirm>
    36c4:	93 cf       	rjmp	.-218    	; 0x35ec <macTask+0x4>
                }
                else
                {
                    // we are indirect, so just send this packet along.
                    if (NODETYPE == ROUTER && macConfig.associated)
    36c6:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    36ca:	88 23       	and	r24, r24
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <macTask+0xe8>
    36ce:	8e cf       	rjmp	.-228    	; 0x35ec <macTask+0x4>
                        frame->srcAddr = ntohs_16(frame->srcAddr);
                        frame->parentAddr = ntohs_16(frame->parentAddr);
                        frame->shortAddr = ntohs_16(frame->shortAddr);
                        frame->macAddr = ntohs_64(frame->macAddr);
                        // Route the packet
                        macRouteAssociateResponse();
    36d0:	0e 94 ca 1b 	call	0x3794	; 0x3794 <macRouteAssociateResponse>
    36d4:	8b cf       	rjmp	.-234    	; 0x35ec <macTask+0x4>
                }
            }
            break;
        case MAC_EVENT_ROUTE:
            // Routing packet received, forward it
            if (NODETYPE == ROUTER && macConfig.associated)
    36d6:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    36da:	88 23       	and	r24, r24
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <macTask+0xf8>
    36de:	86 cf       	rjmp	.-244    	; 0x35ec <macTask+0x4>
                macForwardRoutingPacket();
    36e0:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <macForwardRoutingPacket>
    36e4:	83 cf       	rjmp	.-250    	; 0x35ec <macTask+0x4>
            break;
        case MAC_EVENT_ACCESS:
            // Channel access failure
            appPacketSendAccessFail();
    36e6:	0e 94 74 21 	call	0x42e8	; 0x42e8 <appPacketSendAccessFail>
            break;
    36ea:	80 cf       	rjmp	.-256    	; 0x35ec <macTask+0x4>
        case MAC_EVENT_NACK:
            // Packet failed to be sent, alert application
            appPacketSendFailed();
    36ec:	0e 94 75 21 	call	0x42ea	; 0x42ea <appPacketSendFailed>
            break;
    36f0:	7d cf       	rjmp	.-262    	; 0x35ec <macTask+0x4>
        case MAC_EVENT_ACK:
            // Packet got through, alert application
            appPacketSendSucceed();
    36f2:	0e 94 66 21 	call	0x42cc	; 0x42cc <appPacketSendSucceed>
            break;
    36f6:	7a cf       	rjmp	.-268    	; 0x35ec <macTask+0x4>
        default:
            break;
        }
    }
}
    36f8:	cf 91       	pop	r28
    36fa:	08 95       	ret

000036fc <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    36fc:	80 91 3a 0a 	lds	r24, 0x0A3A	; 0x800a3a <mac_buffer_rx>
    3700:	92 e8       	ldi	r25, 0x82	; 130
    3702:	ea e3       	ldi	r30, 0x3A	; 58
    3704:	fa e0       	ldi	r31, 0x0A	; 10
    3706:	ac eb       	ldi	r26, 0xBC	; 188
    3708:	ba e0       	ldi	r27, 0x0A	; 10
    370a:	01 90       	ld	r0, Z+
    370c:	0d 92       	st	X+, r0
    370e:	9a 95       	dec	r25
    3710:	e1 f7       	brne	.-8      	; 0x370a <macForwardRoutingPacket+0xe>
    3712:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <macConfig+0x8>
    3716:	99 23       	and	r25, r25
    3718:	e1 f1       	breq	.+120    	; 0x3792 <macForwardRoutingPacket+0x96>
    371a:	8c 50       	subi	r24, 0x0C	; 12
    371c:	86 95       	lsr	r24
    371e:	e8 2f       	mov	r30, r24
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	ee 0f       	add	r30, r30
    3724:	ff 1f       	adc	r31, r31
    3726:	eb 53       	subi	r30, 0x3B	; 59
    3728:	f5 4f       	sbci	r31, 0xF5	; 245
    372a:	20 81       	ld	r18, Z
    372c:	31 81       	ldd	r19, Z+1	; 0x01
    372e:	30 93 50 0b 	sts	0x0B50, r19	; 0x800b50 <macConfig+0x12>
    3732:	20 93 4f 0b 	sts	0x0B4F, r18	; 0x800b4f <macConfig+0x11>
    3736:	82 30       	cpi	r24, 0x02	; 2
    3738:	60 f1       	brcs	.+88     	; 0x3792 <macForwardRoutingPacket+0x96>
    373a:	81 50       	subi	r24, 0x01	; 1
    373c:	23 e6       	ldi	r18, 0x63	; 99
    373e:	38 e8       	ldi	r19, 0x88	; 136
    3740:	30 93 be 0a 	sts	0x0ABE, r19	; 0x800abe <mac_buffer_tx+0x2>
    3744:	20 93 bd 0a 	sts	0x0ABD, r18	; 0x800abd <mac_buffer_tx+0x1>
    3748:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <macConfig+0xa>
    374c:	21 e0       	ldi	r18, 0x01	; 1
    374e:	29 0f       	add	r18, r25
    3750:	20 93 48 0b 	sts	0x0B48, r18	; 0x800b48 <macConfig+0xa>
    3754:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <mac_buffer_tx+0x3>
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	fc 01       	movw	r30, r24
    375c:	ee 0f       	add	r30, r30
    375e:	ff 1f       	adc	r31, r31
    3760:	e9 53       	subi	r30, 0x39	; 57
    3762:	f5 4f       	sbci	r31, 0xF5	; 245
    3764:	20 81       	ld	r18, Z
    3766:	31 81       	ldd	r19, Z+1	; 0x01
    3768:	30 93 c3 0a 	sts	0x0AC3, r19	; 0x800ac3 <mac_buffer_tx+0x7>
    376c:	20 93 c2 0a 	sts	0x0AC2, r18	; 0x800ac2 <mac_buffer_tx+0x6>
    3770:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <macConfig+0xd>
    3774:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <macConfig+0xe>
    3778:	30 93 c5 0a 	sts	0x0AC5, r19	; 0x800ac5 <mac_buffer_tx+0x9>
    377c:	20 93 c4 0a 	sts	0x0AC4, r18	; 0x800ac4 <mac_buffer_tx+0x8>
    3780:	9b eb       	ldi	r25, 0xBB	; 187
    3782:	90 93 c6 0a 	sts	0x0AC6, r25	; 0x800ac6 <mac_buffer_tx+0xa>
    3786:	8b 5f       	subi	r24, 0xFB	; 251
    3788:	6d eb       	ldi	r22, 0xBD	; 189
    378a:	7a e0       	ldi	r23, 0x0A	; 10
    378c:	88 0f       	add	r24, r24
    378e:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <radioSendData>
    3792:	08 95       	ret

00003794 <macRouteAssociateResponse>:
    3794:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    3798:	88 23       	and	r24, r24
    379a:	09 f4       	brne	.+2      	; 0x379e <macRouteAssociateResponse+0xa>
    379c:	89 c0       	rjmp	.+274    	; 0x38b0 <macRouteAssociateResponse+0x11c>
    379e:	20 91 45 0a 	lds	r18, 0x0A45	; 0x800a45 <mac_buffer_rx+0xb>
    37a2:	30 91 46 0a 	lds	r19, 0x0A46	; 0x800a46 <mac_buffer_rx+0xc>
    37a6:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <macConfig+0xd>
    37aa:	90 91 4c 0b 	lds	r25, 0x0B4C	; 0x800b4c <macConfig+0xe>
    37ae:	28 17       	cp	r18, r24
    37b0:	39 07       	cpc	r19, r25
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <macRouteAssociateResponse+0x22>
    37b4:	4b c0       	rjmp	.+150    	; 0x384c <macRouteAssociateResponse+0xb8>
    37b6:	83 e6       	ldi	r24, 0x63	; 99
    37b8:	9c e8       	ldi	r25, 0x8C	; 140
    37ba:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <mac_buffer_tx+0x1>
    37be:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <mac_buffer_tx>
    37c2:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <macConfig+0xa>
    37c6:	91 e0       	ldi	r25, 0x01	; 1
    37c8:	98 0f       	add	r25, r24
    37ca:	90 93 48 0b 	sts	0x0B48, r25	; 0x800b48 <macConfig+0xa>
    37ce:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <mac_buffer_tx+0x2>
    37d2:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <macConfig+0xb>
    37d6:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <macConfig+0xc>
    37da:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <mac_buffer_tx+0x4>
    37de:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <mac_buffer_tx+0x3>
    37e2:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <mac_buffer_rx+0xd>
    37e6:	80 93 c1 0a 	sts	0x0AC1, r24	; 0x800ac1 <mac_buffer_tx+0x5>
    37ea:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <mac_buffer_rx+0xe>
    37ee:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x6>
    37f2:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0xf>
    37f6:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <mac_buffer_tx+0x7>
    37fa:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x10>
    37fe:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <mac_buffer_tx+0x8>
    3802:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x11>
    3806:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <mac_buffer_tx+0x9>
    380a:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <mac_buffer_rx+0x12>
    380e:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <mac_buffer_tx+0xa>
    3812:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <mac_buffer_rx+0x13>
    3816:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <mac_buffer_tx+0xb>
    381a:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <mac_buffer_rx+0x14>
    381e:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <mac_buffer_tx+0xc>
    3822:	30 93 ca 0a 	sts	0x0ACA, r19	; 0x800aca <mac_buffer_tx+0xe>
    3826:	20 93 c9 0a 	sts	0x0AC9, r18	; 0x800ac9 <mac_buffer_tx+0xd>
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <mac_buffer_tx+0xf>
    3830:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <mac_buffer_rx+0x15>
    3834:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <mac_buffer_rx+0x16>
    3838:	90 93 cd 0a 	sts	0x0ACD, r25	; 0x800acd <mac_buffer_tx+0x11>
    383c:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <mac_buffer_tx+0x10>
    3840:	0e 94 ee 18 	call	0x31dc	; 0x31dc <macAddChild>
    3844:	6c eb       	ldi	r22, 0xBC	; 188
    3846:	7a e0       	ldi	r23, 0x0A	; 10
    3848:	82 e1       	ldi	r24, 0x12	; 18
    384a:	30 c0       	rjmp	.+96     	; 0x38ac <macRouteAssociateResponse+0x118>
    384c:	22 e8       	ldi	r18, 0x82	; 130
    384e:	ea e3       	ldi	r30, 0x3A	; 58
    3850:	fa e0       	ldi	r31, 0x0A	; 10
    3852:	ac eb       	ldi	r26, 0xBC	; 188
    3854:	ba e0       	ldi	r27, 0x0A	; 10
    3856:	01 90       	ld	r0, Z+
    3858:	0d 92       	st	X+, r0
    385a:	2a 95       	dec	r18
    385c:	e1 f7       	brne	.-8      	; 0x3856 <macRouteAssociateResponse+0xc2>
    385e:	20 91 48 0b 	lds	r18, 0x0B48	; 0x800b48 <macConfig+0xa>
    3862:	31 e0       	ldi	r19, 0x01	; 1
    3864:	32 0f       	add	r19, r18
    3866:	30 93 48 0b 	sts	0x0B48, r19	; 0x800b48 <macConfig+0xa>
    386a:	20 93 bf 0a 	sts	0x0ABF, r18	; 0x800abf <mac_buffer_tx+0x3>
    386e:	20 91 4f 0b 	lds	r18, 0x0B4F	; 0x800b4f <macConfig+0x11>
    3872:	30 91 50 0b 	lds	r19, 0x0B50	; 0x800b50 <macConfig+0x12>
    3876:	30 93 c3 0a 	sts	0x0AC3, r19	; 0x800ac3 <mac_buffer_tx+0x7>
    387a:	20 93 c2 0a 	sts	0x0AC2, r18	; 0x800ac2 <mac_buffer_tx+0x6>
    387e:	90 93 c5 0a 	sts	0x0AC5, r25	; 0x800ac5 <mac_buffer_tx+0x9>
    3882:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <mac_buffer_tx+0x8>
    3886:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <mac_buffer_tx+0xb>
    388a:	90 91 c8 0a 	lds	r25, 0x0AC8	; 0x800ac8 <mac_buffer_tx+0xc>
    388e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <macIsChild>
    3892:	88 23       	and	r24, r24
    3894:	41 f0       	breq	.+16     	; 0x38a6 <macRouteAssociateResponse+0x112>
    3896:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <mac_buffer_tx+0xb>
    389a:	90 91 c8 0a 	lds	r25, 0x0AC8	; 0x800ac8 <mac_buffer_tx+0xc>
    389e:	90 93 c3 0a 	sts	0x0AC3, r25	; 0x800ac3 <mac_buffer_tx+0x7>
    38a2:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x6>
    38a6:	6d eb       	ldi	r22, 0xBD	; 189
    38a8:	7a e0       	ldi	r23, 0x0A	; 10
    38aa:	86 e1       	ldi	r24, 0x16	; 22
    38ac:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <radioSendData>
    38b0:	08 95       	ret

000038b2 <macRouteAssociateRequest>:
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	65 97       	sbiw	r28, 0x15	; 21
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	a0 91 3c 0a 	lds	r26, 0x0A3C	; 0x800a3c <mac_buffer_rx+0x2>
    38ca:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <macConfig+0xa>
    38ce:	e0 91 49 0b 	lds	r30, 0x0B49	; 0x800b49 <macConfig+0xb>
    38d2:	f0 91 4a 0b 	lds	r31, 0x0B4A	; 0x800b4a <macConfig+0xc>
    38d6:	60 91 4d 0b 	lds	r22, 0x0B4D	; 0x800b4d <macConfig+0xf>
    38da:	70 91 4e 0b 	lds	r23, 0x0B4E	; 0x800b4e <macConfig+0x10>
    38de:	40 91 4b 0b 	lds	r20, 0x0B4B	; 0x800b4b <macConfig+0xd>
    38e2:	50 91 4c 0b 	lds	r21, 0x0B4C	; 0x800b4c <macConfig+0xe>
    38e6:	30 91 47 0a 	lds	r19, 0x0A47	; 0x800a47 <mac_buffer_rx+0xd>
    38ea:	20 91 48 0a 	lds	r18, 0x0A48	; 0x800a48 <mac_buffer_rx+0xe>
    38ee:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <mac_buffer_rx+0xf>
    38f2:	a8 3c       	cpi	r26, 0xC8	; 200
    38f4:	81 f5       	brne	.+96     	; 0x3956 <macRouteAssociateRequest+0xa4>
    38f6:	a3 e6       	ldi	r26, 0x63	; 99
    38f8:	b8 e8       	ldi	r27, 0x88	; 136
    38fa:	ba 83       	std	Y+2, r27	; 0x02
    38fc:	a9 83       	std	Y+1, r26	; 0x01
    38fe:	a1 e0       	ldi	r26, 0x01	; 1
    3900:	a8 0f       	add	r26, r24
    3902:	a0 93 48 0b 	sts	0x0B48, r26	; 0x800b48 <macConfig+0xa>
    3906:	8b 83       	std	Y+3, r24	; 0x03
    3908:	fd 83       	std	Y+5, r31	; 0x05
    390a:	ec 83       	std	Y+4, r30	; 0x04
    390c:	7f 83       	std	Y+7, r23	; 0x07
    390e:	6e 83       	std	Y+6, r22	; 0x06
    3910:	59 87       	std	Y+9, r21	; 0x09
    3912:	48 87       	std	Y+8, r20	; 0x08
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	8a 87       	std	Y+10, r24	; 0x0a
    3918:	40 91 4b 0a 	lds	r20, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x11>
    391c:	50 91 4c 0a 	lds	r21, 0x0A4C	; 0x800a4c <mac_buffer_rx+0x12>
    3920:	5c 87       	std	Y+12, r21	; 0x0c
    3922:	4b 87       	std	Y+11, r20	; 0x0b
    3924:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <mac_buffer_rx+0x8>
    3928:	8d 87       	std	Y+13, r24	; 0x0d
    392a:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <mac_buffer_rx+0x9>
    392e:	8e 87       	std	Y+14, r24	; 0x0e
    3930:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <mac_buffer_rx+0xa>
    3934:	8f 87       	std	Y+15, r24	; 0x0f
    3936:	80 91 45 0a 	lds	r24, 0x0A45	; 0x800a45 <mac_buffer_rx+0xb>
    393a:	88 8b       	std	Y+16, r24	; 0x10
    393c:	80 91 46 0a 	lds	r24, 0x0A46	; 0x800a46 <mac_buffer_rx+0xc>
    3940:	89 8b       	std	Y+17, r24	; 0x11
    3942:	3a 8b       	std	Y+18, r19	; 0x12
    3944:	2b 8b       	std	Y+19, r18	; 0x13
    3946:	9c 8b       	std	Y+20, r25	; 0x14
    3948:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <mac_buffer_rx+0x13>
    394c:	8d 8b       	std	Y+21, r24	; 0x15
    394e:	be 01       	movw	r22, r28
    3950:	6f 5f       	subi	r22, 0xFF	; 255
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	43 c0       	rjmp	.+134    	; 0x39dc <macRouteAssociateRequest+0x12a>
    3956:	a3 e6       	ldi	r26, 0x63	; 99
    3958:	b8 e8       	ldi	r27, 0x88	; 136
    395a:	b0 93 bd 0a 	sts	0x0ABD, r27	; 0x800abd <mac_buffer_tx+0x1>
    395e:	a0 93 bc 0a 	sts	0x0ABC, r26	; 0x800abc <mac_buffer_tx>
    3962:	a1 e0       	ldi	r26, 0x01	; 1
    3964:	a8 0f       	add	r26, r24
    3966:	a0 93 48 0b 	sts	0x0B48, r26	; 0x800b48 <macConfig+0xa>
    396a:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <mac_buffer_tx+0x2>
    396e:	f0 93 c0 0a 	sts	0x0AC0, r31	; 0x800ac0 <mac_buffer_tx+0x4>
    3972:	e0 93 bf 0a 	sts	0x0ABF, r30	; 0x800abf <mac_buffer_tx+0x3>
    3976:	70 93 c2 0a 	sts	0x0AC2, r23	; 0x800ac2 <mac_buffer_tx+0x6>
    397a:	60 93 c1 0a 	sts	0x0AC1, r22	; 0x800ac1 <mac_buffer_tx+0x5>
    397e:	50 93 c4 0a 	sts	0x0AC4, r21	; 0x800ac4 <mac_buffer_tx+0x8>
    3982:	40 93 c3 0a 	sts	0x0AC3, r20	; 0x800ac3 <mac_buffer_tx+0x7>
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <mac_buffer_tx+0x9>
    398c:	40 91 45 0a 	lds	r20, 0x0A45	; 0x800a45 <mac_buffer_rx+0xb>
    3990:	50 91 46 0a 	lds	r21, 0x0A46	; 0x800a46 <mac_buffer_rx+0xc>
    3994:	50 93 c7 0a 	sts	0x0AC7, r21	; 0x800ac7 <mac_buffer_tx+0xb>
    3998:	40 93 c6 0a 	sts	0x0AC6, r20	; 0x800ac6 <mac_buffer_tx+0xa>
    399c:	30 93 c8 0a 	sts	0x0AC8, r19	; 0x800ac8 <mac_buffer_tx+0xc>
    39a0:	20 93 c9 0a 	sts	0x0AC9, r18	; 0x800ac9 <mac_buffer_tx+0xd>
    39a4:	90 93 ca 0a 	sts	0x0ACA, r25	; 0x800aca <mac_buffer_tx+0xe>
    39a8:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <mac_buffer_rx+0x10>
    39ac:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <mac_buffer_tx+0xf>
    39b0:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <mac_buffer_rx+0x11>
    39b4:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <mac_buffer_tx+0x10>
    39b8:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <mac_buffer_rx+0x12>
    39bc:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <mac_buffer_tx+0x11>
    39c0:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <mac_buffer_rx+0x13>
    39c4:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <mac_buffer_tx+0x12>
    39c8:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <mac_buffer_rx+0x14>
    39cc:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <mac_buffer_tx+0x13>
    39d0:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <mac_buffer_rx+0x15>
    39d4:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <mac_buffer_tx+0x14>
    39d8:	6c eb       	ldi	r22, 0xBC	; 188
    39da:	7a e0       	ldi	r23, 0x0A	; 10
    39dc:	85 e1       	ldi	r24, 0x15	; 21
    39de:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <radioSendData>
    39e2:	65 96       	adiw	r28, 0x15	; 21
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	08 95       	ret

000039f4 <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    39f4:	82 e8       	ldi	r24, 0x82	; 130
    39f6:	ea e3       	ldi	r30, 0x3A	; 58
    39f8:	fa e0       	ldi	r31, 0x0A	; 10
    39fa:	ac eb       	ldi	r26, 0xBC	; 188
    39fc:	ba e0       	ldi	r27, 0x0A	; 10
    39fe:	01 90       	ld	r0, Z+
    3a00:	0d 92       	st	X+, r0
    3a02:	8a 95       	dec	r24
    3a04:	e1 f7       	brne	.-8      	; 0x39fe <macRouteData+0xa>

        Led1_on();
    3a06:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    3a08:	61 e3       	ldi	r22, 0x31	; 49
    3a0a:	71 e2       	ldi	r23, 0x21	; 33
    3a0c:	8a e0       	ldi	r24, 0x0A	; 10
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    3a14:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <mac_buffer_tx+0xa>
    3a18:	90 91 c7 0a 	lds	r25, 0x0AC7	; 0x800ac7 <mac_buffer_tx+0xb>
    3a1c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <macIsChild>
    3a20:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <macConfig+0xa>
    3a24:	20 91 4b 0b 	lds	r18, 0x0B4B	; 0x800b4b <macConfig+0xd>
    3a28:	30 91 4c 0b 	lds	r19, 0x0B4C	; 0x800b4c <macConfig+0xe>
    3a2c:	88 23       	and	r24, r24
    3a2e:	59 f0       	breq	.+22     	; 0x3a46 <macRouteData+0x52>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	89 0f       	add	r24, r25
    3a34:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <macConfig+0xa>
    3a38:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    3a3c:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <mac_buffer_tx+0xa>
    3a40:	90 91 c7 0a 	lds	r25, 0x0AC7	; 0x800ac7 <mac_buffer_tx+0xb>
    3a44:	15 c0       	rjmp	.+42     	; 0x3a70 <macRouteData+0x7c>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    3a46:	40 91 4d 0b 	lds	r20, 0x0B4D	; 0x800b4d <macConfig+0xf>
    3a4a:	50 91 4e 0b 	lds	r21, 0x0B4E	; 0x800b4e <macConfig+0x10>
    3a4e:	60 91 c4 0a 	lds	r22, 0x0AC4	; 0x800ac4 <mac_buffer_tx+0x8>
    3a52:	70 91 c5 0a 	lds	r23, 0x0AC5	; 0x800ac5 <mac_buffer_tx+0x9>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	89 0f       	add	r24, r25
    3a5a:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <macConfig+0xa>
    3a5e:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <mac_buffer_tx+0x3>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    3a62:	64 17       	cp	r22, r20
    3a64:	75 07       	cpc	r23, r21
    3a66:	49 f4       	brne	.+18     	; 0x3a7a <macRouteData+0x86>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.lastRoute;
    3a68:	80 91 4f 0b 	lds	r24, 0x0B4F	; 0x800b4f <macConfig+0x11>
    3a6c:	90 91 50 0b 	lds	r25, 0x0B50	; 0x800b50 <macConfig+0x12>
    3a70:	90 93 c3 0a 	sts	0x0AC3, r25	; 0x800ac3 <mac_buffer_tx+0x7>
    3a74:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x6>
    3a78:	04 c0       	rjmp	.+8      	; 0x3a82 <macRouteData+0x8e>
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.parentShortAddress;
    3a7a:	50 93 c3 0a 	sts	0x0AC3, r21	; 0x800ac3 <mac_buffer_tx+0x7>
    3a7e:	40 93 c2 0a 	sts	0x0AC2, r20	; 0x800ac2 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    3a82:	30 93 c5 0a 	sts	0x0AC5, r19	; 0x800ac5 <mac_buffer_tx+0x9>
    3a86:	20 93 c4 0a 	sts	0x0AC4, r18	; 0x800ac4 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    3a8a:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <mac_buffer_tx+0x6>
    3a8e:	90 91 c3 0a 	lds	r25, 0x0AC3	; 0x800ac3 <mac_buffer_tx+0x7>
    3a92:	01 96       	adiw	r24, 0x01	; 1
    3a94:	39 f0       	breq	.+14     	; 0x3aa4 <macRouteData+0xb0>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    3a96:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <mac_buffer_tx>
    3a9a:	6d eb       	ldi	r22, 0xBD	; 189
    3a9c:	7a e0       	ldi	r23, 0x0A	; 10
    3a9e:	82 50       	subi	r24, 0x02	; 2
    3aa0:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <radioSendData>
    3aa4:	08 95       	ret

00003aa6 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	08 95       	ret

00003aaa <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	ea e3       	ldi	r30, 0x3A	; 58
    3ab0:	fa e0       	ldi	r31, 0x0A	; 10
    3ab2:	20 91 ba 0a 	lds	r18, 0x0ABA	; 0x800aba <mac_buffer_rx+0x80>
    3ab6:	c3 eb       	ldi	r28, 0xB3	; 179
    3ab8:	db e0       	ldi	r29, 0x0B	; 11
    3aba:	81 81       	ldd	r24, Z+1	; 0x01
    3abc:	92 81       	ldd	r25, Z+2	; 0x02
    3abe:	84 e0       	ldi	r24, 0x04	; 4
    3ac0:	98 9f       	mul	r25, r24
    3ac2:	81 2d       	mov	r24, r1
    3ac4:	99 27       	eor	r25, r25
    3ac6:	11 24       	eor	r1, r1
    3ac8:	88 83       	st	Y, r24
    3aca:	84 81       	ldd	r24, Z+4	; 0x04
    3acc:	95 81       	ldd	r25, Z+5	; 0x05
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	86 81       	ldd	r24, Z+6	; 0x06
    3ad4:	97 81       	ldd	r25, Z+7	; 0x07
    3ad6:	9c 83       	std	Y+4, r25	; 0x04
    3ad8:	8b 83       	std	Y+3, r24	; 0x03
    3ada:	83 85       	ldd	r24, Z+11	; 0x0b
    3adc:	89 87       	std	Y+9, r24	; 0x09
    3ade:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <macConfig+0x14>
    3ae2:	81 50       	subi	r24, 0x01	; 1
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	1e 82       	std	Y+6, r1	; 0x06
    3ae8:	2a 87       	std	Y+10, r18	; 0x0a
    3aea:	0e 94 45 14 	call	0x288a	; 0x288a <radioGetSavedRssiValue>
    3aee:	8b 87       	std	Y+11, r24	; 0x0b
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	08 95       	ret

00003af6 <macIsScanning>:
    3af6:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <scanInProcess>
    3afa:	08 95       	ret

00003afc <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    3afc:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    3afe:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    3b02:	40 91 42 0a 	lds	r20, 0x0A42	; 0x800a42 <mac_buffer_rx+0x8>
    3b06:	50 91 43 0a 	lds	r21, 0x0A43	; 0x800a43 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    3b0a:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <scanInProcess>
    3b0e:	99 23       	and	r25, r25
    3b10:	61 f1       	breq	.+88     	; 0x3b6a <mac_logPanDescriptors+0x6e>
        return;
    if (frame->netID != 6)
    3b12:	90 91 44 0a 	lds	r25, 0x0A44	; 0x800a44 <mac_buffer_rx+0xa>
    3b16:	96 30       	cpi	r25, 0x06	; 6
    3b18:	41 f5       	brne	.+80     	; 0x3b6a <mac_logPanDescriptors+0x6e>
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    3b1a:	20 91 ba 0b 	lds	r18, 0x0BBA	; 0x800bba <panDescriptor+0x7>
    3b1e:	30 91 bb 0b 	lds	r19, 0x0BBB	; 0x800bbb <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    3b22:	50 93 bb 0b 	sts	0x0BBB, r21	; 0x800bbb <panDescriptor+0x8>
    3b26:	40 93 ba 0b 	sts	0x0BBA, r20	; 0x800bba <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    3b2a:	90 91 bb 0b 	lds	r25, 0x0BBB	; 0x800bbb <panDescriptor+0x8>
    3b2e:	97 ff       	sbrs	r25, 7
    3b30:	05 c0       	rjmp	.+10     	; 0x3b3c <mac_logPanDescriptors+0x40>
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    3b32:	30 93 bb 0b 	sts	0x0BBB, r19	; 0x800bbb <panDescriptor+0x8>
    3b36:	20 93 ba 0b 	sts	0x0BBA, r18	; 0x800bba <panDescriptor+0x7>
            return;
    3b3a:	17 c0       	rjmp	.+46     	; 0x3b6a <mac_logPanDescriptors+0x6e>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    3b3c:	90 91 bd 0b 	lds	r25, 0x0BBD	; 0x800bbd <panDescriptor+0xa>
    3b40:	98 17       	cp	r25, r24
    3b42:	18 f4       	brcc	.+6      	; 0x3b4a <mac_logPanDescriptors+0x4e>
            {
                store_pandescriptors();
            }
        }
    }
}
    3b44:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    3b46:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <store_pandescriptors>
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    3b4a:	98 13       	cpse	r25, r24
    3b4c:	0e c0       	rjmp	.+28     	; 0x3b6a <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    3b4e:	90 91 bc 0b 	lds	r25, 0x0BBC	; 0x800bbc <panDescriptor+0x9>
    3b52:	80 91 45 0a 	lds	r24, 0x0A45	; 0x800a45 <mac_buffer_rx+0xb>
    3b56:	89 17       	cp	r24, r25
    3b58:	a8 f3       	brcs	.-22     	; 0x3b44 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    3b5a:	98 13       	cpse	r25, r24
    3b5c:	06 c0       	rjmp	.+12     	; 0x3b6a <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    3b5e:	c0 91 be 0b 	lds	r28, 0x0BBE	; 0x800bbe <panDescriptor+0xb>
    3b62:	0e 94 45 14 	call	0x288a	; 0x288a <radioGetSavedRssiValue>
    3b66:	c8 17       	cp	r28, r24
    3b68:	68 f3       	brcs	.-38     	; 0x3b44 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
        }
    }
}
    3b6a:	cf 91       	pop	r28
    3b6c:	08 95       	ret

00003b6e <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    3b6e:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    3b70:	c1 e0       	ldi	r28, 0x01	; 1
    3b72:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <panDescriptor+0x5>
    3b76:	8f 3f       	cpi	r24, 0xFF	; 255
    3b78:	11 f4       	brne	.+4      	; 0x3b7e <mac_scanConfirm+0x10>
    3b7a:	c0 e0       	ldi	r28, 0x00	; 0
    3b7c:	1b c0       	rjmp	.+54     	; 0x3bb4 <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    3b7e:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <panDescriptor+0x1>
    3b82:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <panDescriptor+0x2>
    3b86:	90 93 4a 0b 	sts	0x0B4A, r25	; 0x800b4a <macConfig+0xc>
    3b8a:	80 93 49 0b 	sts	0x0B49, r24	; 0x800b49 <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    3b8e:	20 91 b6 0b 	lds	r18, 0x0BB6	; 0x800bb6 <panDescriptor+0x3>
    3b92:	30 91 b7 0b 	lds	r19, 0x0BB7	; 0x800bb7 <panDescriptor+0x4>
    3b96:	30 93 4e 0b 	sts	0x0B4E, r19	; 0x800b4e <macConfig+0x10>
    3b9a:	20 93 4d 0b 	sts	0x0B4D, r18	; 0x800b4d <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    3b9e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    3ba2:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <panDescriptor+0x5>
    3ba6:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    3baa:	90 91 bc 0b 	lds	r25, 0x0BBC	; 0x800bbc <panDescriptor+0x9>
    3bae:	9f 5f       	subi	r25, 0xFF	; 255
    3bb0:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    3bb4:	8c 2f       	mov	r24, r28
}
    3bb6:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    3bb8:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <appScanConfirm>

00003bbc <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    3bbc:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <macConfig+0x14>
    3bc0:	8f 3f       	cpi	r24, 0xFF	; 255
    3bc2:	b1 f4       	brne	.+44     	; 0x3bf0 <macScan+0x34>
    {
        scanInProcess = true;
    3bc4:	91 e0       	ldi	r25, 0x01	; 1
    3bc6:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    3bca:	96 e1       	ldi	r25, 0x16	; 22
    3bcc:	e3 eb       	ldi	r30, 0xB3	; 179
    3bce:	fb e0       	ldi	r31, 0x0B	; 11
    3bd0:	df 01       	movw	r26, r30
    3bd2:	1d 92       	st	X+, r1
    3bd4:	9a 95       	dec	r25
    3bd6:	e9 f7       	brne	.-6      	; 0x3bd2 <macScan+0x16>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    3bd8:	80 93 b8 0b 	sts	0x0BB8, r24	; 0x800bb8 <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    3bdc:	8b e0       	ldi	r24, 0x0B	; 11
    3bde:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    3be2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <scanChannel>
    3be6:	80 38       	cpi	r24, 0x80	; 128
    3be8:	a9 f0       	breq	.+42     	; 0x3c14 <macScan+0x58>
            macConfig.currentChannel = scanChannel;
    3bea:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <macConfig+0x14>
    3bee:	12 c0       	rjmp	.+36     	; 0x3c14 <macScan+0x58>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    3bf0:	8b 31       	cpi	r24, 0x1B	; 27
    3bf2:	48 f4       	brcc	.+18     	; 0x3c06 <macScan+0x4a>
       macConfig.currentChannel == scanChannel + 1)
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <scanChannel>
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	2f 5f       	subi	r18, 0xFF	; 255
    3bfe:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    3c00:	82 17       	cp	r24, r18
    3c02:	93 07       	cpc	r25, r19
    3c04:	39 f4       	brne	.+14     	; 0x3c14 <macScan+0x58>
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    3c06:	10 92 ab 06 	sts	0x06AB, r1	; 0x8006ab <scanInProcess>
            macConfig.currentChannel = 0xFF;
    3c0a:	8f ef       	ldi	r24, 0xFF	; 255
    3c0c:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <macConfig+0x14>

            mac_scanConfirm();
    3c10:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <mac_scanConfirm>
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    3c14:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <macConfig+0x14>
    3c18:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    3c1c:	83 e0       	ldi	r24, 0x03	; 3
    3c1e:	98 e0       	ldi	r25, 0x08	; 8
    3c20:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <mac_buffer_tx+0x2>
    3c24:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    3c28:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <macConfig+0x9>
    3c2c:	91 e0       	ldi	r25, 0x01	; 1
    3c2e:	98 0f       	add	r25, r24
    3c30:	90 93 47 0b 	sts	0x0B47, r25	; 0x800b47 <macConfig+0x9>
    3c34:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    3c38:	8f ef       	ldi	r24, 0xFF	; 255
    3c3a:	9f ef       	ldi	r25, 0xFF	; 255
    3c3c:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <mac_buffer_tx+0x5>
    3c40:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    3c44:	90 93 c3 0a 	sts	0x0AC3, r25	; 0x800ac3 <mac_buffer_tx+0x7>
    3c48:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    3c4c:	87 e0       	ldi	r24, 0x07	; 7
    3c4e:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    3c52:	6d eb       	ldi	r22, 0xBD	; 189
    3c54:	7a e0       	ldi	r23, 0x0A	; 10
    3c56:	88 e0       	ldi	r24, 0x08	; 8
    3c58:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    3c5c:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <macConfig+0x14>
    3c60:	8f 5f       	subi	r24, 0xFF	; 255
    3c62:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    3c66:	6e ed       	ldi	r22, 0xDE	; 222
    3c68:	7d e1       	ldi	r23, 0x1D	; 29
    3c6a:	84 e1       	ldi	r24, 0x14	; 20
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <macSetAlarm>

00003c72 <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    3c72:	08 95       	ret

00003c74 <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    3c74:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <currentTimerID.3609>
    3c78:	8f 5f       	subi	r24, 0xFF	; 255
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <getUniqueID+0xa>
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	f9 01       	movw	r30, r18
    3c86:	ec 5e       	subi	r30, 0xEC	; 236
    3c88:	f8 4f       	sbci	r31, 0xF8	; 248
    3c8a:	42 81       	ldd	r20, Z+2	; 0x02
    3c8c:	48 13       	cpse	r20, r24
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <getUniqueID+0x1e>
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	2b 5f       	subi	r18, 0xFB	; 251
    3c94:	3f 4f       	sbci	r19, 0xFF	; 255
    3c96:	24 36       	cpi	r18, 0x64	; 100
    3c98:	31 05       	cpc	r19, r1
    3c9a:	a1 f7       	brne	.-24     	; 0x3c84 <getUniqueID+0x10>
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	f9 01       	movw	r30, r18
    3ca2:	e0 55       	subi	r30, 0x50	; 80
    3ca4:	f9 4f       	sbci	r31, 0xF9	; 249
    3ca6:	42 81       	ldd	r20, Z+2	; 0x02
    3ca8:	48 13       	cpse	r20, r24
    3caa:	01 c0       	rjmp	.+2      	; 0x3cae <getUniqueID+0x3a>
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	2b 5f       	subi	r18, 0xFB	; 251
    3cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb2:	24 36       	cpi	r18, 0x64	; 100
    3cb4:	31 05       	cpc	r19, r1
    3cb6:	a1 f7       	brne	.-24     	; 0x3ca0 <getUniqueID+0x2c>
    3cb8:	99 23       	and	r25, r25
    3cba:	f1 f2       	breq	.-68     	; 0x3c78 <getUniqueID+0x4>
    3cbc:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <currentTimerID.3609>
    3cc0:	08 95       	ret

00003cc2 <timerStart>:
    3cc2:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <timerRunning>
    3cc6:	81 11       	cpse	r24, r1
    3cc8:	0a c0       	rjmp	.+20     	; 0x3cde <timerStart+0x1c>
    3cca:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3cce:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3cd2:	82 e0       	ldi	r24, 0x02	; 2
    3cd4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <timerRunning>
    3cde:	08 95       	ret

00003ce0 <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	1f 92       	push	r1
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	19 f4       	brne	.+6      	; 0x3cf8 <macSetAlarm+0x18>
    {
        // Don't delay, just call it
        callback();
    3cf2:	fb 01       	movw	r30, r22
    3cf4:	09 95       	icall
    3cf6:	12 c0       	rjmp	.+36     	; 0x3d1c <macSetAlarm+0x3c>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    3cf8:	2f b7       	in	r18, 0x3f	; 63
    3cfa:	29 83       	std	Y+1, r18	; 0x01
    3cfc:	f8 94       	cli
    3cfe:	a4 e1       	ldi	r26, 0x14	; 20
    3d00:	b7 e0       	ldi	r27, 0x07	; 7
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    3d06:	4d 91       	ld	r20, X+
    3d08:	5c 91       	ld	r21, X
    3d0a:	11 97       	sbiw	r26, 0x01	; 1
    3d0c:	45 2b       	or	r20, r21
    3d0e:	41 f0       	breq	.+16     	; 0x3d20 <macSetAlarm+0x40>
    3d10:	2f 5f       	subi	r18, 0xFF	; 255
    3d12:	3f 4f       	sbci	r19, 0xFF	; 255
    3d14:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    3d16:	24 31       	cpi	r18, 0x14	; 20
    3d18:	31 05       	cpc	r19, r1
    3d1a:	a9 f7       	brne	.-22     	; 0x3d06 <macSetAlarm+0x26>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	23 c0       	rjmp	.+70     	; 0x3d66 <macSetAlarm+0x86>

    timerEvents[i].time = ticks;
    3d20:	45 e0       	ldi	r20, 0x05	; 5
    3d22:	42 9f       	mul	r20, r18
    3d24:	d0 01       	movw	r26, r0
    3d26:	43 9f       	mul	r20, r19
    3d28:	b0 0d       	add	r27, r0
    3d2a:	11 24       	eor	r1, r1
    3d2c:	ac 5e       	subi	r26, 0xEC	; 236
    3d2e:	b8 4f       	sbci	r27, 0xF8	; 248
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	11 f4       	brne	.+4      	; 0x3d38 <macSetAlarm+0x58>
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    3d38:	8d 93       	st	X+, r24
    3d3a:	9c 93       	st	X, r25
    timerEvents[i].callback = callback;
    3d3c:	85 e0       	ldi	r24, 0x05	; 5
    3d3e:	82 9f       	mul	r24, r18
    3d40:	80 01       	movw	r16, r0
    3d42:	83 9f       	mul	r24, r19
    3d44:	10 0d       	add	r17, r0
    3d46:	11 24       	eor	r1, r1
    3d48:	0c 5e       	subi	r16, 0xEC	; 236
    3d4a:	18 4f       	sbci	r17, 0xF8	; 248
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	74 83       	std	Z+4, r23	; 0x04
    3d50:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    3d52:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <getUniqueID>
    3d56:	f8 01       	movw	r30, r16
    3d58:	82 83       	std	Z+2, r24	; 0x02

    // start timer running, since we have at least one timer running
    timerStart();
    3d5a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <timerStart>
    AVR_LEAVE_CRITICAL_REGION();
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    3d62:	f8 01       	movw	r30, r16
    3d64:	82 81       	ldd	r24, Z+2	; 0x02
}
    3d66:	0f 90       	pop	r0
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	08 95       	ret

00003d72 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	1f 92       	push	r1
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	19 f4       	brne	.+6      	; 0x3d8a <macSetLongAlarm+0x18>
        {
            // Just go right now
            callback();
    3d84:	fb 01       	movw	r30, r22
    3d86:	09 95       	icall
    3d88:	0f c0       	rjmp	.+30     	; 0x3da8 <macSetLongAlarm+0x36>
    3d8a:	a0 eb       	ldi	r26, 0xB0	; 176
    3d8c:	b6 e0       	ldi	r27, 0x06	; 6
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    3d92:	4d 91       	ld	r20, X+
    3d94:	5c 91       	ld	r21, X
    3d96:	11 97       	sbiw	r26, 0x01	; 1
    3d98:	45 2b       	or	r20, r21
    3d9a:	41 f0       	breq	.+16     	; 0x3dac <macSetLongAlarm+0x3a>
    3d9c:	2f 5f       	subi	r18, 0xFF	; 255
    3d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3da0:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    3da2:	24 31       	cpi	r18, 0x14	; 20
    3da4:	31 05       	cpc	r19, r1
    3da6:	a9 f7       	brne	.-22     	; 0x3d92 <macSetLongAlarm+0x20>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	1a c0       	rjmp	.+52     	; 0x3de0 <macSetLongAlarm+0x6e>
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    3dac:	45 e0       	ldi	r20, 0x05	; 5
    3dae:	42 9f       	mul	r20, r18
    3db0:	80 01       	movw	r16, r0
    3db2:	43 9f       	mul	r20, r19
    3db4:	10 0d       	add	r17, r0
    3db6:	11 24       	eor	r1, r1
    3db8:	00 55       	subi	r16, 0x50	; 80
    3dba:	19 4f       	sbci	r17, 0xF9	; 249
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    3dc2:	74 83       	std	Z+4, r23	; 0x04
    3dc4:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    3dc6:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <getUniqueID>
    3dca:	f8 01       	movw	r30, r16
    3dcc:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    3dce:	8f b7       	in	r24, 0x3f	; 63
    3dd0:	89 83       	std	Y+1, r24	; 0x01
    3dd2:	f8 94       	cli
        timerStart();
    3dd4:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <timerStart>
        AVR_LEAVE_CRITICAL_REGION();
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    3ddc:	f8 01       	movw	r30, r16
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return 0;
}
    3de0:	0f 90       	pop	r0
    3de2:	df 91       	pop	r29
    3de4:	cf 91       	pop	r28
    3de6:	1f 91       	pop	r17
    3de8:	0f 91       	pop	r16
    3dea:	08 95       	ret

00003dec <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    3dec:	e6 e1       	ldi	r30, 0x16	; 22
    3dee:	f7 e0       	ldi	r31, 0x07	; 7
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    3df4:	90 81       	ld	r25, Z
    3df6:	98 13       	cpse	r25, r24
    3df8:	09 c0       	rjmp	.+18     	; 0x3e0c <macTimerEnd+0x20>
        {
            // kill this timer
            timerEvents[i].time = 0;
    3dfa:	85 e0       	ldi	r24, 0x05	; 5
    3dfc:	82 9f       	mul	r24, r18
    3dfe:	f0 01       	movw	r30, r0
    3e00:	83 9f       	mul	r24, r19
    3e02:	f0 0d       	add	r31, r0
    3e04:	11 24       	eor	r1, r1
    3e06:	ec 5e       	subi	r30, 0xEC	; 236
    3e08:	f8 4f       	sbci	r31, 0xF8	; 248
    3e0a:	15 c0       	rjmp	.+42     	; 0x3e36 <macTimerEnd+0x4a>
    3e0c:	2f 5f       	subi	r18, 0xFF	; 255
    3e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e10:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    3e12:	24 31       	cpi	r18, 0x14	; 20
    3e14:	31 05       	cpc	r19, r1
    3e16:	71 f7       	brne	.-36     	; 0x3df4 <macTimerEnd+0x8>
    3e18:	e2 eb       	ldi	r30, 0xB2	; 178
    3e1a:	f6 e0       	ldi	r31, 0x06	; 6
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    3e20:	90 81       	ld	r25, Z
    3e22:	98 13       	cpse	r25, r24
    3e24:	0c c0       	rjmp	.+24     	; 0x3e3e <macTimerEnd+0x52>
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    3e26:	85 e0       	ldi	r24, 0x05	; 5
    3e28:	82 9f       	mul	r24, r18
    3e2a:	f0 01       	movw	r30, r0
    3e2c:	83 9f       	mul	r24, r19
    3e2e:	f0 0d       	add	r31, r0
    3e30:	11 24       	eor	r1, r1
    3e32:	e0 55       	subi	r30, 0x50	; 80
    3e34:	f9 4f       	sbci	r31, 0xF9	; 249
    3e36:	11 82       	std	Z+1, r1	; 0x01
    3e38:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    3e3a:	12 82       	std	Z+2, r1	; 0x02
                return;
    3e3c:	08 95       	ret
    3e3e:	2f 5f       	subi	r18, 0xFF	; 255
    3e40:	3f 4f       	sbci	r19, 0xFF	; 255
    3e42:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    3e44:	24 31       	cpi	r18, 0x14	; 20
    3e46:	31 05       	cpc	r19, r1
    3e48:	59 f7       	brne	.-42     	; 0x3e20 <macTimerEnd+0x34>
    3e4a:	08 95       	ret

00003e4c <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    3e4c:	e1 e9       	ldi	r30, 0x91	; 145
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	8a 60       	ori	r24, 0x0A	; 10
    3e54:	80 83       	st	Z, r24
    3e56:	80 ed       	ldi	r24, 0xD0	; 208
    3e58:	97 e0       	ldi	r25, 0x07	; 7
    3e5a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3e5e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    3e62:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3e66:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3e6a:	0c 94 f5 2e 	jmp	0x5dea	; 0x5dea <srand>

00003e6e <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    3e6e:	1f 92       	push	r1
    3e70:	0f 92       	push	r0
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	0f 92       	push	r0
    3e76:	11 24       	eor	r1, r1
    3e78:	0b b6       	in	r0, 0x3b	; 59
    3e7a:	0f 92       	push	r0
    3e7c:	ff 92       	push	r15
    3e7e:	0f 93       	push	r16
    3e80:	1f 93       	push	r17
    3e82:	2f 93       	push	r18
    3e84:	3f 93       	push	r19
    3e86:	4f 93       	push	r20
    3e88:	5f 93       	push	r21
    3e8a:	6f 93       	push	r22
    3e8c:	7f 93       	push	r23
    3e8e:	8f 93       	push	r24
    3e90:	9f 93       	push	r25
    3e92:	af 93       	push	r26
    3e94:	bf 93       	push	r27
    3e96:	ef 93       	push	r30
    3e98:	ff 93       	push	r31
    3e9a:	cf 93       	push	r28
    3e9c:	df 93       	push	r29
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <__vector_32+0x32>
    3ea0:	1f 92       	push	r1
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    3ea6:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <tickTimer>
    3eaa:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <tickTimer+0x1>
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <tickTimer+0x1>
    3eb4:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    3eb8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <secondTimer>
    3ebc:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <secondTimer+0x1>
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	49 f0       	breq	.+18     	; 0x3ed6 <__vector_32+0x68>
    3ec4:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <secondTimer+0x1>
    3ec8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <secondTimer>
    3ecc:	04 e1       	ldi	r16, 0x14	; 20
    3ece:	17 e0       	ldi	r17, 0x07	; 7
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3ed0:	96 e1       	ldi	r25, 0x16	; 22
    3ed2:	f9 2e       	mov	r15, r25
    3ed4:	24 c0       	rjmp	.+72     	; 0x3f1e <__vector_32+0xb0>
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    3ed6:	84 ef       	ldi	r24, 0xF4	; 244
    3ed8:	91 e0       	ldi	r25, 0x01	; 1
    3eda:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <secondTimer+0x1>
    3ede:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <secondTimer>
    3ee2:	00 eb       	ldi	r16, 0xB0	; 176
    3ee4:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3ee6:	86 e1       	ldi	r24, 0x16	; 22
    3ee8:	f8 2e       	mov	r15, r24
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    3eea:	f8 01       	movw	r30, r16
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	71 f0       	breq	.+28     	; 0x3f10 <__vector_32+0xa2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
    3efa:	89 2b       	or	r24, r25
    3efc:	49 f4       	brne	.+18     	; 0x3f10 <__vector_32+0xa2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3efe:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    3f00:	83 81       	ldd	r24, Z+3	; 0x03
    3f02:	94 81       	ldd	r25, Z+4	; 0x04
    3f04:	9b 83       	std	Y+3, r25	; 0x03
    3f06:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    3f08:	ce 01       	movw	r24, r28
    3f0a:	01 96       	adiw	r24, 0x01	; 1
    3f0c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <mac_put_event>
    3f10:	0b 5f       	subi	r16, 0xFB	; 251
    3f12:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    3f14:	f7 e0       	ldi	r31, 0x07	; 7
    3f16:	04 31       	cpi	r16, 0x14	; 20
    3f18:	1f 07       	cpc	r17, r31
    3f1a:	39 f7       	brne	.-50     	; 0x3eea <__vector_32+0x7c>
    3f1c:	d7 cf       	rjmp	.-82     	; 0x3ecc <__vector_32+0x5e>
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    3f1e:	f8 01       	movw	r30, r16
    3f20:	80 81       	ld	r24, Z
    3f22:	91 81       	ldd	r25, Z+1	; 0x01
    3f24:	00 97       	sbiw	r24, 0x00	; 0
    3f26:	71 f0       	breq	.+28     	; 0x3f44 <__vector_32+0xd6>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	80 83       	st	Z, r24
    3f2e:	89 2b       	or	r24, r25
    3f30:	49 f4       	brne	.+18     	; 0x3f44 <__vector_32+0xd6>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    3f32:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    3f34:	83 81       	ldd	r24, Z+3	; 0x03
    3f36:	94 81       	ldd	r25, Z+4	; 0x04
    3f38:	9b 83       	std	Y+3, r25	; 0x03
    3f3a:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	01 96       	adiw	r24, 0x01	; 1
    3f40:	0e 94 a9 1a 	call	0x3552	; 0x3552 <mac_put_event>
    3f44:	0b 5f       	subi	r16, 0xFB	; 251
    3f46:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    3f48:	f7 e0       	ldi	r31, 0x07	; 7
    3f4a:	08 37       	cpi	r16, 0x78	; 120
    3f4c:	1f 07       	cpc	r17, r31
    3f4e:	39 f7       	brne	.-50     	; 0x3f1e <__vector_32+0xb0>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	ff 91       	pop	r31
    3f5c:	ef 91       	pop	r30
    3f5e:	bf 91       	pop	r27
    3f60:	af 91       	pop	r26
    3f62:	9f 91       	pop	r25
    3f64:	8f 91       	pop	r24
    3f66:	7f 91       	pop	r23
    3f68:	6f 91       	pop	r22
    3f6a:	5f 91       	pop	r21
    3f6c:	4f 91       	pop	r20
    3f6e:	3f 91       	pop	r19
    3f70:	2f 91       	pop	r18
    3f72:	1f 91       	pop	r17
    3f74:	0f 91       	pop	r16
    3f76:	ff 90       	pop	r15
    3f78:	0f 90       	pop	r0
    3f7a:	0b be       	out	0x3b, r0	; 59
    3f7c:	0f 90       	pop	r0
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	0f 90       	pop	r0
    3f82:	1f 90       	pop	r1
    3f84:	18 95       	reti

00003f86 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    3f86:	1f 92       	push	r1
    3f88:	0f 92       	push	r0
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	0f 92       	push	r0
    3f8e:	11 24       	eor	r1, r1
    3f90:	8f 93       	push	r24
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <GenericTimerFlag>
    3f98:	8f 91       	pop	r24
    3f9a:	0f 90       	pop	r0
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	0f 90       	pop	r0
    3fa0:	1f 90       	pop	r1
    3fa2:	18 95       	reti

00003fa4 <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    3fa4:	1f 92       	push	r1
    3fa6:	0f 92       	push	r0
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	0f 92       	push	r0
    3fac:	11 24       	eor	r1, r1
    3fae:	8f 93       	push	r24
    WDTFlag = 1;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <WDTFlag>
}
    3fb6:	8f 91       	pop	r24
    3fb8:	0f 90       	pop	r0
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	0f 90       	pop	r0
    3fbe:	1f 90       	pop	r1
    3fc0:	18 95       	reti

00003fc2 <WaitForMachine>:
		if(MdcStatus.MachineType[1] == QUANTUM_SERIES)
		halGetEeprom(MACHINE_SETUP_ADDR_QUANTUM, QUANTUM_SETUP_NUM_BYTE, &MachineSetupData.CoolDownTime);
}

void SaveMachineSetupData(void)
{
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <ucMachineWait>
    3fc8:	08 95       	ret

00003fca <InitTimerZero>:
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	85 bb       	out	0x15, r24	; 21
    3fce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3fd2:	16 bc       	out	0x26, r1	; 38
    3fd4:	10 92 cd 0b 	sts	0x0BCD, r1	; 0x800bcd <ucTimerCount>
    3fd8:	08 95       	ret

00003fda <StopTimerZero>:
    3fda:	15 bc       	out	0x25, r1	; 37
    3fdc:	08 95       	ret

00003fde <StartTimerZero>:
    3fde:	8e e4       	ldi	r24, 0x4E	; 78
    3fe0:	87 bd       	out	0x27, r24	; 39
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	84 bd       	out	0x24, r24	; 36
    3fe6:	85 e0       	ldi	r24, 0x05	; 5
    3fe8:	85 bd       	out	0x25, r24	; 37
    3fea:	08 95       	ret

00003fec <__vector_21>:
    3fec:	1f 92       	push	r1
    3fee:	0f 92       	push	r0
    3ff0:	0f b6       	in	r0, 0x3f	; 63
    3ff2:	0f 92       	push	r0
    3ff4:	11 24       	eor	r1, r1
    3ff6:	8f 93       	push	r24
    3ff8:	80 91 cd 0b 	lds	r24, 0x0BCD	; 0x800bcd <ucTimerCount>
    3ffc:	8f 5f       	subi	r24, 0xFF	; 255
    3ffe:	80 93 cd 0b 	sts	0x0BCD, r24	; 0x800bcd <ucTimerCount>
    4002:	8f 91       	pop	r24
    4004:	0f 90       	pop	r0
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	0f 90       	pop	r0
    400a:	1f 90       	pop	r1
    400c:	18 95       	reti

0000400e <SetDefaultMachineSetup>:
}
*/
void SetDefaultMachineSetup(void)
{
	//Default settings
	MachineSetupData.KeyPressWaitTime = 25;
    400e:	ea ec       	ldi	r30, 0xCA	; 202
    4010:	f9 e0       	ldi	r31, 0x09	; 9
    4012:	99 e1       	ldi	r25, 0x19	; 25
    4014:	90 83       	st	Z, r25
	MachineSetupData.VendPrice[0] = 0;
    4016:	14 82       	std	Z+4, r1	; 0x04
	MachineSetupData.VendPrice[1] = 100;
    4018:	84 e6       	ldi	r24, 0x64	; 100
    401a:	85 83       	std	Z+5, r24	; 0x05
	MachineSetupData.Coin1[0] = 0;
    401c:	13 a6       	std	Z+43, r1	; 0x2b
	MachineSetupData.Coin1[1] = 25;
    401e:	94 a7       	std	Z+44, r25	; 0x2c
	MachineSetupData.Coin2[0] = 0;
    4020:	15 a6       	std	Z+45, r1	; 0x2d
	MachineSetupData.Coin2[1] = 100;
    4022:	86 a7       	std	Z+46, r24	; 0x2e
	MachineSetupData.StartPulse[0] = 0;
    4024:	17 a6       	std	Z+47, r1	; 0x2f
	MachineSetupData.StartPulse[1] = 100;
    4026:	80 ab       	std	Z+48, r24	; 0x30
	MachineSetupData.CycleLength = 1;
    4028:	91 e0       	ldi	r25, 0x01	; 1
    402a:	91 ab       	std	Z+49, r25	; 0x31
	MachineSetupData.ControlConfig = 0;//8;
    402c:	12 aa       	std	Z+50, r1	; 0x32
	MachineSetupData.DefaultCycle = 2; //Normal for washer
    402e:	82 e0       	ldi	r24, 0x02	; 2
    4030:	83 ab       	std	Z+51, r24	; 0x33

	//Dryer specific settings
	MachineSetupData.CoolDownTime = 3;
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	84 ab       	std	Z+52, r24	; 0x34
	MachineSetupData.Coin1TopoffTime = 15;
    4036:	2f e0       	ldi	r18, 0x0F	; 15
    4038:	25 ab       	std	Z+53, r18	; 0x35
	MachineSetupData.Coin2TopoffTime = 60;
    403a:	2c e3       	ldi	r18, 0x3C	; 60
    403c:	26 ab       	std	Z+54, r18	; 0x36
	MachineSetupData.HighTempSetting = 0;
    403e:	17 aa       	std	Z+55, r1	; 0x37
	MachineSetupData.MediumTempSetting = 1;
    4040:	90 af       	std	Z+56, r25	; 0x38
	MachineSetupData.LowTempSetting = 3;
    4042:	81 af       	std	Z+57, r24	; 0x39
	MachineSetupData.DelicateTempSetting = 9;
    4044:	89 e0       	ldi	r24, 0x09	; 9
    4046:	82 af       	std	Z+58, r24	; 0x3a
    4048:	08 95       	ret

0000404a <get_from_circ_buf>:
    else
    {
        ucData = ucData - 10 + 'A';
    }
    return ucData;
}
    404a:	fc 01       	movw	r30, r24
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	df 01       	movw	r26, r30
    4050:	a9 0f       	add	r26, r25
    4052:	b1 1d       	adc	r27, r1
    4054:	12 96       	adiw	r26, 0x02	; 2
    4056:	2c 91       	ld	r18, X
    4058:	80 81       	ld	r24, Z
    405a:	98 17       	cp	r25, r24
    405c:	31 f0       	breq	.+12     	; 0x406a <get_from_circ_buf+0x20>
    405e:	9f 5f       	subi	r25, 0xFF	; 255
    4060:	97 fd       	sbrc	r25, 7
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	82 2f       	mov	r24, r18
    4068:	08 95       	ret
    406a:	8f ef       	ldi	r24, 0xFF	; 255
    406c:	08 95       	ret

0000406e <init_rx_buf>:
    406e:	ee e7       	ldi	r30, 0x7E	; 126
    4070:	f7 e0       	ldi	r31, 0x07	; 7
    4072:	11 82       	std	Z+1, r1	; 0x01
    4074:	10 82       	st	Z, r1
    4076:	08 95       	ret

00004078 <serial_init>:
    4078:	ee e7       	ldi	r30, 0x7E	; 126
    407a:	f7 e0       	ldi	r31, 0x07	; 7
    407c:	11 82       	std	Z+1, r1	; 0x01
    407e:	10 82       	st	Z, r1
    4080:	e0 e0       	ldi	r30, 0x00	; 0
    4082:	f8 e0       	ldi	r31, 0x08	; 8
    4084:	11 82       	std	Z+1, r1	; 0x01
    4086:	10 82       	st	Z, r1
    4088:	28 e9       	ldi	r18, 0x98	; 152
    408a:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    408e:	26 e0       	ldi	r18, 0x06	; 6
    4090:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    4094:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    4098:	27 e6       	ldi	r18, 0x67	; 103
    409a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    409e:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <rx_handler+0x1>
    40a2:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <rx_handler>
    40a6:	08 95       	ret

000040a8 <serial_putchar>:
    40a8:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pause>
    40ac:	91 11       	cpse	r25, r1
    40ae:	2a c0       	rjmp	.+84     	; 0x4104 <serial_putchar+0x5c>
    40b0:	78 94       	sei
    40b2:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <txbuf>
    40b6:	9f 5f       	subi	r25, 0xFF	; 255
    40b8:	97 fd       	sbrc	r25, 7
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	30 91 7b 07 	lds	r19, 0x077B	; 0x80077b <rx>
    40c0:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <txbuf+0x1>
    40c4:	92 13       	cpse	r25, r18
    40c6:	03 c0       	rjmp	.+6      	; 0x40ce <serial_putchar+0x26>
    40c8:	33 23       	and	r19, r19
    40ca:	d1 f3       	breq	.-12     	; 0x40c0 <serial_putchar+0x18>
    40cc:	08 c0       	rjmp	.+16     	; 0x40de <serial_putchar+0x36>
    40ce:	e0 91 00 08 	lds	r30, 0x0800	; 0x800800 <txbuf>
    40d2:	f0 e0       	ldi	r31, 0x00	; 0
    40d4:	e0 50       	subi	r30, 0x00	; 0
    40d6:	f8 4f       	sbci	r31, 0xF8	; 248
    40d8:	82 83       	std	Z+2, r24	; 0x02
    40da:	90 93 00 08 	sts	0x0800, r25	; 0x800800 <txbuf>
    40de:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    40e2:	85 fd       	sbrc	r24, 5
    40e4:	0f c0       	rjmp	.+30     	; 0x4104 <serial_putchar+0x5c>
    40e6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    40ea:	85 ff       	sbrs	r24, 5
    40ec:	fc cf       	rjmp	.-8      	; 0x40e6 <serial_putchar+0x3e>
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	98 e0       	ldi	r25, 0x08	; 8
    40f2:	0e 94 25 20 	call	0x404a	; 0x404a <get_from_circ_buf>
    40f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    40fa:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    40fe:	80 62       	ori	r24, 0x20	; 32
    4100:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4104:	08 95       	ret

00004106 <rx_buf_count>:
    4106:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <rxbuf>
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <rxbuf+0x1>
    4110:	82 1b       	sub	r24, r18
    4112:	91 09       	sbc	r25, r1
    4114:	97 ff       	sbrs	r25, 7
    4116:	02 c0       	rjmp	.+4      	; 0x411c <rx_buf_count+0x16>
    4118:	80 58       	subi	r24, 0x80	; 128
    411a:	9f 4f       	sbci	r25, 0xFF	; 255
    411c:	08 95       	ret

0000411e <serial_getchar>:
    411e:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <rxbuf>
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <rxbuf+0x1>
    4128:	82 1b       	sub	r24, r18
    412a:	91 09       	sbc	r25, r1
    412c:	97 ff       	sbrs	r25, 7
    412e:	02 c0       	rjmp	.+4      	; 0x4134 <serial_getchar+0x16>
    4130:	80 58       	subi	r24, 0x80	; 128
    4132:	9f 4f       	sbci	r25, 0xFF	; 255
    4134:	88 23       	and	r24, r24
    4136:	99 f3       	breq	.-26     	; 0x411e <serial_getchar>
    4138:	8e e7       	ldi	r24, 0x7E	; 126
    413a:	97 e0       	ldi	r25, 0x07	; 7
    413c:	0c 94 25 20 	jmp	0x404a	; 0x404a <get_from_circ_buf>

00004140 <__vector_36>:
    4140:	1f 92       	push	r1
    4142:	0f 92       	push	r0
    4144:	0f b6       	in	r0, 0x3f	; 63
    4146:	0f 92       	push	r0
    4148:	11 24       	eor	r1, r1
    414a:	0b b6       	in	r0, 0x3b	; 59
    414c:	0f 92       	push	r0
    414e:	2f 93       	push	r18
    4150:	3f 93       	push	r19
    4152:	4f 93       	push	r20
    4154:	5f 93       	push	r21
    4156:	6f 93       	push	r22
    4158:	7f 93       	push	r23
    415a:	8f 93       	push	r24
    415c:	9f 93       	push	r25
    415e:	af 93       	push	r26
    4160:	bf 93       	push	r27
    4162:	ef 93       	push	r30
    4164:	ff 93       	push	r31
    4166:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    416a:	91 e0       	ldi	r25, 0x01	; 1
    416c:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <rx>
    4170:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <rxbuf>
    4174:	9f 5f       	subi	r25, 0xFF	; 255
    4176:	97 fd       	sbrc	r25, 7
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <rxbuf+0x1>
    417e:	92 17       	cp	r25, r18
    4180:	41 f0       	breq	.+16     	; 0x4192 <__vector_36+0x52>
    4182:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <rxbuf>
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	e2 58       	subi	r30, 0x82	; 130
    418a:	f8 4f       	sbci	r31, 0xF8	; 248
    418c:	82 83       	std	Z+2, r24	; 0x02
    418e:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <rxbuf>
    4192:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <rx>
    4196:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <rx_handler>
    419a:	f0 91 7d 07 	lds	r31, 0x077D	; 0x80077d <rx_handler+0x1>
    419e:	30 97       	sbiw	r30, 0x00	; 0
    41a0:	09 f0       	breq	.+2      	; 0x41a4 <__vector_36+0x64>
    41a2:	09 95       	icall
    41a4:	ff 91       	pop	r31
    41a6:	ef 91       	pop	r30
    41a8:	bf 91       	pop	r27
    41aa:	af 91       	pop	r26
    41ac:	9f 91       	pop	r25
    41ae:	8f 91       	pop	r24
    41b0:	7f 91       	pop	r23
    41b2:	6f 91       	pop	r22
    41b4:	5f 91       	pop	r21
    41b6:	4f 91       	pop	r20
    41b8:	3f 91       	pop	r19
    41ba:	2f 91       	pop	r18
    41bc:	0f 90       	pop	r0
    41be:	0b be       	out	0x3b, r0	; 59
    41c0:	0f 90       	pop	r0
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	0f 90       	pop	r0
    41c6:	1f 90       	pop	r1
    41c8:	18 95       	reti

000041ca <__vector_37>:
    41ca:	1f 92       	push	r1
    41cc:	0f 92       	push	r0
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	0f 92       	push	r0
    41d2:	11 24       	eor	r1, r1
    41d4:	0b b6       	in	r0, 0x3b	; 59
    41d6:	0f 92       	push	r0
    41d8:	2f 93       	push	r18
    41da:	3f 93       	push	r19
    41dc:	4f 93       	push	r20
    41de:	5f 93       	push	r21
    41e0:	6f 93       	push	r22
    41e2:	7f 93       	push	r23
    41e4:	8f 93       	push	r24
    41e6:	9f 93       	push	r25
    41e8:	af 93       	push	r26
    41ea:	bf 93       	push	r27
    41ec:	ef 93       	push	r30
    41ee:	ff 93       	push	r31
    41f0:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <txbuf>
    41f4:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <txbuf+0x1>
    41f8:	98 17       	cp	r25, r24
    41fa:	39 f0       	breq	.+14     	; 0x420a <__stack+0xb>
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	98 e0       	ldi	r25, 0x08	; 8
    4200:	0e 94 25 20 	call	0x404a	; 0x404a <get_from_circ_buf>
    4204:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4208:	05 c0       	rjmp	.+10     	; 0x4214 <__stack+0x15>
    420a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    420e:	8f 7d       	andi	r24, 0xDF	; 223
    4210:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4214:	ff 91       	pop	r31
    4216:	ef 91       	pop	r30
    4218:	bf 91       	pop	r27
    421a:	af 91       	pop	r26
    421c:	9f 91       	pop	r25
    421e:	8f 91       	pop	r24
    4220:	7f 91       	pop	r23
    4222:	6f 91       	pop	r22
    4224:	5f 91       	pop	r21
    4226:	4f 91       	pop	r20
    4228:	3f 91       	pop	r19
    422a:	2f 91       	pop	r18
    422c:	0f 90       	pop	r0
    422e:	0b be       	out	0x3b, r0	; 59
    4230:	0f 90       	pop	r0
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	0f 90       	pop	r0
    4236:	1f 90       	pop	r1
    4238:	18 95       	reti

0000423a <Ascii_to_nible>:
 * \param ucData is the ASCII value to be converted.
 *
 * \return ucData is the nible value.
**/
u8 Ascii_to_nible ( u8 ucData )
{
    423a:	98 2f       	mov	r25, r24
    if ((ucData <= '9' ) && (ucData >= '0')) 
    423c:	80 ed       	ldi	r24, 0xD0	; 208
    423e:	89 0f       	add	r24, r25
    4240:	8a 30       	cpi	r24, 0x0A	; 10
    4242:	70 f0       	brcs	.+28     	; 0x4260 <Ascii_to_nible+0x26>
    {
        ucData -= '0';
    }
    else if ((ucData <= 'F' ) && (ucData >= 'A')) 
    4244:	8f eb       	ldi	r24, 0xBF	; 191
    4246:	89 0f       	add	r24, r25
    4248:	86 30       	cpi	r24, 0x06	; 6
    424a:	10 f4       	brcc	.+4      	; 0x4250 <Ascii_to_nible+0x16>
    {
        ucData = ucData -'A' + 10;
    424c:	89 ec       	ldi	r24, 0xC9	; 201
    424e:	05 c0       	rjmp	.+10     	; 0x425a <Ascii_to_nible+0x20>
    }
    else if ((ucData <= 'f' ) && (ucData >= 'a')) 
    4250:	8f e9       	ldi	r24, 0x9F	; 159
    4252:	89 0f       	add	r24, r25
    4254:	86 30       	cpi	r24, 0x06	; 6
    4256:	18 f4       	brcc	.+6      	; 0x425e <Ascii_to_nible+0x24>
    {
        ucData = ucData -'a' + 10;
    4258:	89 ea       	ldi	r24, 0xA9	; 169
    425a:	89 0f       	add	r24, r25
    425c:	08 95       	ret
    }
    else 
    {
        ucData = 0;
    425e:	80 e0       	ldi	r24, 0x00	; 0
    }
    return ucData;
}
    4260:	08 95       	ret

00004262 <ledoff1>:

}

void SetBillReturn(void)
{
    ucReturnBillTimeout = 2;
    4262:	a0 98       	cbi	0x14, 0	; 20
    4264:	08 95       	ret

00004266 <ledoff2>:
    4266:	a1 98       	cbi	0x14, 1	; 20
    4268:	08 95       	ret

0000426a <ValidationTimeout>:
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <VALIDATION_TIMEOUT>
    4270:	08 95       	ret

00004272 <CommTimeOut>:
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <TOFlag>
    4278:	e3 e9       	ldi	r30, 0x93	; 147
    427a:	f8 e0       	ldi	r31, 0x08	; 8
    427c:	80 81       	ld	r24, Z
    427e:	8f 7b       	andi	r24, 0xBF	; 191
    4280:	80 83       	st	Z, r24
    4282:	08 95       	ret

00004284 <KeypressTimeOut>:
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <KPTOFlag>
    428a:	08 95       	ret

0000428c <SetupTimeout>:
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETUP_TIMEOUT>
    4292:	08 95       	ret

00004294 <SetDeviceState>:
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <ucDeviceStateFlag>
    429a:	08 95       	ret

0000429c <appStartScan>:
    429c:	8f ef       	ldi	r24, 0xFF	; 255
    429e:	0e 94 01 18 	call	0x3002	; 0x3002 <macInit>
    42a2:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <macScan>

000042a6 <appAssociate>:
    42a6:	e3 eb       	ldi	r30, 0xB3	; 179
    42a8:	fb e0       	ldi	r31, 0x0B	; 11
    42aa:	65 81       	ldd	r22, Z+5	; 0x05
    42ac:	83 81       	ldd	r24, Z+3	; 0x03
    42ae:	94 81       	ldd	r25, Z+4	; 0x04
    42b0:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <macAssociate>

000042b4 <appPingReq>:
    42b4:	bc 01       	movw	r22, r24
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	0c 94 86 1a 	jmp	0x350c	; 0x350c <macPing>

000042bc <appPingRsp>:
    42bc:	0e 94 45 14 	call	0x288a	; 0x288a <radioGetSavedRssiValue>
    42c0:	88 23       	and	r24, r24
    42c2:	19 f0       	breq	.+6      	; 0x42ca <appPingRsp+0xe>
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <macConfig+0x8>
    42ca:	08 95       	ret

000042cc <appPacketSendSucceed>:
    42cc:	20 91 53 0b 	lds	r18, 0x0B53	; 0x800b53 <macConfig+0x15>
    42d0:	30 91 54 0b 	lds	r19, 0x0B54	; 0x800b54 <macConfig+0x16>
    42d4:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <macConfig+0xf>
    42d8:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <macConfig+0x10>
    42dc:	28 17       	cp	r18, r24
    42de:	39 07       	cpc	r19, r25
    42e0:	11 f4       	brne	.+4      	; 0x42e6 <appPacketSendSucceed+0x1a>
    42e2:	10 92 84 08 	sts	0x0884, r1	; 0x800884 <failCount>
    42e6:	08 95       	ret

000042e8 <appPacketSendAccessFail>:
    42e8:	08 95       	ret

000042ea <appPacketSendFailed>:
    42ea:	cf 93       	push	r28
    42ec:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <macIsScanning>
    42f0:	81 11       	cpse	r24, r1
    42f2:	40 c0       	rjmp	.+128    	; 0x4374 <appPacketSendFailed+0x8a>
    42f4:	20 91 4d 0b 	lds	r18, 0x0B4D	; 0x800b4d <macConfig+0xf>
    42f8:	30 91 4e 0b 	lds	r19, 0x0B4E	; 0x800b4e <macConfig+0x10>
    42fc:	c1 e0       	ldi	r28, 0x01	; 1
    42fe:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <macConfig+0x15>
    4302:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <macConfig+0x16>
    4306:	82 17       	cp	r24, r18
    4308:	93 07       	cpc	r25, r19
    430a:	11 f0       	breq	.+4      	; 0x4310 <appPacketSendFailed+0x26>
    430c:	c0 e0       	ldi	r28, 0x00	; 0
    430e:	05 c0       	rjmp	.+10     	; 0x431a <appPacketSendFailed+0x30>
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	60 e0       	ldi	r22, 0x00	; 0
    4316:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
    431a:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <failCount>
    431e:	8f 5f       	subi	r24, 0xFF	; 255
    4320:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <failCount>
    4324:	83 30       	cpi	r24, 0x03	; 3
    4326:	30 f1       	brcs	.+76     	; 0x4374 <appPacketSendFailed+0x8a>
    4328:	cc 23       	and	r28, r28
    432a:	a9 f0       	breq	.+42     	; 0x4356 <appPacketSendFailed+0x6c>
    432c:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <macConfig+0x8>
    4330:	88 e0       	ldi	r24, 0x08	; 8
    4332:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <radioRandom>
    4336:	28 2f       	mov	r18, r24
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	2e 5c       	subi	r18, 0xCE	; 206
    433c:	3f 4f       	sbci	r19, 0xFF	; 255
    433e:	4e e1       	ldi	r20, 0x1E	; 30
    4340:	42 9f       	mul	r20, r18
    4342:	c0 01       	movw	r24, r0
    4344:	43 9f       	mul	r20, r19
    4346:	90 0d       	add	r25, r0
    4348:	11 24       	eor	r1, r1
    434a:	6e e4       	ldi	r22, 0x4E	; 78
    434c:	71 e2       	ldi	r23, 0x21	; 33
    434e:	88 51       	subi	r24, 0x18	; 24
    4350:	9c 4f       	sbci	r25, 0xFC	; 252
    4352:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    4356:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <macConfig+0x15>
    435a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <macConfig+0x16>
    435e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <macIsChild>
    4362:	88 23       	and	r24, r24
    4364:	39 f0       	breq	.+14     	; 0x4374 <appPacketSendFailed+0x8a>
    4366:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <macConfig+0x15>
    436a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <macConfig+0x16>
    436e:	cf 91       	pop	r28
    4370:	0c 94 2f 19 	jmp	0x325e	; 0x325e <macRemoveChild>
    4374:	cf 91       	pop	r28
    4376:	08 95       	ret

00004378 <appDataIndication>:
    4378:	80 91 3a 0a 	lds	r24, 0x0A3A	; 0x800a3a <mac_buffer_rx>
    437c:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <ucSendDataSize>
    4380:	88 23       	and	r24, r24
    4382:	11 f1       	breq	.+68     	; 0x43c8 <appDataIndication+0x50>
    4384:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <mac_buffer_rx+0xe>
    4388:	8f 77       	andi	r24, 0x7F	; 127
    438a:	81 30       	cpi	r24, 0x01	; 1
    438c:	e9 f4       	brne	.+58     	; 0x43c8 <appDataIndication+0x50>
    438e:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <mac_buffer_rx+0xf>
    4392:	80 93 83 08 	sts	0x0883, r24	; 0x800883 <ucDataLength.4399>
    4396:	90 e8       	ldi	r25, 0x80	; 128
    4398:	e9 e3       	ldi	r30, 0x39	; 57
    439a:	fc e0       	ldi	r31, 0x0C	; 12
    439c:	df 01       	movw	r26, r30
    439e:	1d 92       	st	X+, r1
    43a0:	9a 95       	dec	r25
    43a2:	e9 f7       	brne	.-6      	; 0x439e <appDataIndication+0x26>
    43a4:	aa e4       	ldi	r26, 0x4A	; 74
    43a6:	ba e0       	ldi	r27, 0x0A	; 10
    43a8:	9f 01       	movw	r18, r30
    43aa:	9e 2f       	mov	r25, r30
    43ac:	92 1b       	sub	r25, r18
    43ae:	98 17       	cp	r25, r24
    43b0:	18 f4       	brcc	.+6      	; 0x43b8 <appDataIndication+0x40>
    43b2:	9d 91       	ld	r25, X+
    43b4:	91 93       	st	Z+, r25
    43b6:	f9 cf       	rjmp	.-14     	; 0x43aa <appDataIndication+0x32>
    43b8:	89 e3       	ldi	r24, 0x39	; 57
    43ba:	9c e0       	ldi	r25, 0x0C	; 12
    43bc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <extractIncomingMessage>
    43c0:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    43c4:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <ucNumberOfRetry>
    43c8:	08 95       	ret

000043ca <appChildAssociated>:
    43ca:	a1 9a       	sbi	0x14, 1	; 20
    43cc:	63 e3       	ldi	r22, 0x33	; 51
    43ce:	71 e2       	ldi	r23, 0x21	; 33
    43d0:	8a e0       	ldi	r24, 0x0A	; 10
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <macSetAlarm>

000043d8 <appAssociateConfirm>:
    43d8:	81 11       	cpse	r24, r1
    43da:	07 c0       	rjmp	.+14     	; 0x43ea <appAssociateConfirm+0x12>
    43dc:	a1 9a       	sbi	0x14, 1	; 20
    43de:	63 e3       	ldi	r22, 0x33	; 51
    43e0:	71 e2       	ldi	r23, 0x21	; 33
    43e2:	8a e0       	ldi	r24, 0x0A	; 10
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <macSetAlarm>
    43ea:	84 e6       	ldi	r24, 0x64	; 100
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 2c 14 	call	0x2858	; 0x2858 <nodeSleep>
    43f2:	0c 94 4e 21 	jmp	0x429c	; 0x429c <appStartScan>

000043f6 <appScanConfirm>:
    43f6:	88 23       	and	r24, r24
    43f8:	29 f0       	breq	.+10     	; 0x4404 <appScanConfirm+0xe>
    43fa:	63 e5       	ldi	r22, 0x53	; 83
    43fc:	71 e2       	ldi	r23, 0x21	; 33
    43fe:	8e e1       	ldi	r24, 0x1E	; 30
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	04 c0       	rjmp	.+8      	; 0x440c <appScanConfirm+0x16>
    4404:	6e e4       	ldi	r22, 0x4E	; 78
    4406:	71 e2       	ldi	r23, 0x21	; 33
    4408:	88 ee       	ldi	r24, 0xE8	; 232
    440a:	93 e0       	ldi	r25, 0x03	; 3
    440c:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <macSetAlarm>

00004410 <checkEeprom>:
    4410:	8f 92       	push	r8
    4412:	9f 92       	push	r9
    4414:	af 92       	push	r10
    4416:	bf 92       	push	r11
    4418:	cf 92       	push	r12
    441a:	df 92       	push	r13
    441c:	ef 92       	push	r14
    441e:	ff 92       	push	r15
    4420:	0f 93       	push	r16
    4422:	1f 93       	push	r17
    4424:	cf 93       	push	r28
    4426:	df 93       	push	r29
    4428:	cd b7       	in	r28, 0x3d	; 61
    442a:	de b7       	in	r29, 0x3e	; 62
    442c:	62 97       	sbiw	r28, 0x12	; 18
    442e:	0f b6       	in	r0, 0x3f	; 63
    4430:	f8 94       	cli
    4432:	de bf       	out	0x3e, r29	; 62
    4434:	0f be       	out	0x3f, r0	; 63
    4436:	cd bf       	out	0x3d, r28	; 61
    4438:	87 e0       	ldi	r24, 0x07	; 7
    443a:	89 8b       	std	Y+17, r24	; 0x11
    443c:	ae 01       	movw	r20, r28
    443e:	47 5f       	subi	r20, 0xF7	; 247
    4440:	5f 4f       	sbci	r21, 0xFF	; 255
    4442:	68 e0       	ldi	r22, 0x08	; 8
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
    444c:	89 84       	ldd	r8, Y+9	; 0x09
    444e:	9a 84       	ldd	r9, Y+10	; 0x0a
    4450:	ab 84       	ldd	r10, Y+11	; 0x0b
    4452:	bc 84       	ldd	r11, Y+12	; 0x0c
    4454:	cd 84       	ldd	r12, Y+13	; 0x0d
    4456:	de 84       	ldd	r13, Y+14	; 0x0e
    4458:	ef 84       	ldd	r14, Y+15	; 0x0f
    445a:	f8 88       	ldd	r15, Y+16	; 0x10
    445c:	5f ef       	ldi	r21, 0xFF	; 255
    445e:	85 16       	cp	r8, r21
    4460:	95 06       	cpc	r9, r21
    4462:	a5 06       	cpc	r10, r21
    4464:	b5 06       	cpc	r11, r21
    4466:	09 f0       	breq	.+2      	; 0x446a <checkEeprom+0x5a>
    4468:	70 c0       	rjmp	.+224    	; 0x454a <checkEeprom+0x13a>
    446a:	94 01       	movw	r18, r8
    446c:	a5 01       	movw	r20, r10
    446e:	b6 01       	movw	r22, r12
    4470:	c7 01       	movw	r24, r14
    4472:	00 e2       	ldi	r16, 0x20	; 32
    4474:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <__lshrdi3>
    4478:	69 01       	movw	r12, r18
    447a:	7a 01       	movw	r14, r20
    447c:	2f 3f       	cpi	r18, 0xFF	; 255
    447e:	3f 4f       	sbci	r19, 0xFF	; 255
    4480:	4f 4f       	sbci	r20, 0xFF	; 255
    4482:	5f 4f       	sbci	r21, 0xFF	; 255
    4484:	61 05       	cpc	r22, r1
    4486:	71 05       	cpc	r23, r1
    4488:	81 05       	cpc	r24, r1
    448a:	91 05       	cpc	r25, r1
    448c:	09 f0       	breq	.+2      	; 0x4490 <checkEeprom+0x80>
    448e:	50 c0       	rjmp	.+160    	; 0x4530 <checkEeprom+0x120>
    4490:	8e 01       	movw	r16, r28
    4492:	0f 5f       	subi	r16, 0xFF	; 255
    4494:	1f 4f       	sbci	r17, 0xFF	; 255
    4496:	88 e0       	ldi	r24, 0x08	; 8
    4498:	f8 01       	movw	r30, r16
    449a:	11 92       	st	Z+, r1
    449c:	8a 95       	dec	r24
    449e:	e9 f7       	brne	.-6      	; 0x449a <checkEeprom+0x8a>
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	0e 94 c1 14 	call	0x2982	; 0x2982 <radioInit>
    44a6:	86 e0       	ldi	r24, 0x06	; 6
    44a8:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <radioSetTrxState>
    44ac:	78 01       	movw	r14, r16
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	dd 24       	eor	r13, r13
    44b2:	da 94       	dec	r13
    44b4:	34 30       	cpi	r19, 0x04	; 4
    44b6:	18 f4       	brcc	.+6      	; 0x44be <checkEeprom+0xae>
    44b8:	f7 01       	movw	r30, r14
    44ba:	d0 82       	st	Z, r13
    44bc:	1a c0       	rjmp	.+52     	; 0x44f2 <checkEeprom+0xe2>
    44be:	3a 8b       	std	Y+18, r19	; 0x12
    44c0:	0e 94 99 14 	call	0x2932	; 0x2932 <radioGetTrxState>
    44c4:	8f 7e       	andi	r24, 0xEF	; 239
    44c6:	3a 89       	ldd	r19, Y+18	; 0x12
    44c8:	86 30       	cpi	r24, 0x06	; 6
    44ca:	99 f4       	brne	.+38     	; 0x44f2 <checkEeprom+0xe2>
    44cc:	44 e0       	ldi	r20, 0x04	; 4
    44ce:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    44d2:	f7 01       	movw	r30, r14
    44d4:	90 81       	ld	r25, Z
    44d6:	f4 e0       	ldi	r31, 0x04	; 4
    44d8:	9f 9f       	mul	r25, r31
    44da:	c0 01       	movw	r24, r0
    44dc:	11 24       	eor	r1, r1
    44de:	92 2f       	mov	r25, r18
    44e0:	90 76       	andi	r25, 0x60	; 96
    44e2:	92 95       	swap	r25
    44e4:	96 95       	lsr	r25
    44e6:	97 70       	andi	r25, 0x07	; 7
    44e8:	89 2b       	or	r24, r25
    44ea:	f7 01       	movw	r30, r14
    44ec:	80 83       	st	Z, r24
    44ee:	41 50       	subi	r20, 0x01	; 1
    44f0:	71 f7       	brne	.-36     	; 0x44ce <checkEeprom+0xbe>
    44f2:	3f 5f       	subi	r19, 0xFF	; 255
    44f4:	ff ef       	ldi	r31, 0xFF	; 255
    44f6:	ef 1a       	sub	r14, r31
    44f8:	ff 0a       	sbc	r15, r31
    44fa:	38 30       	cpi	r19, 0x08	; 8
    44fc:	d9 f6       	brne	.-74     	; 0x44b4 <checkEeprom+0xa4>
    44fe:	a8 01       	movw	r20, r16
    4500:	68 e0       	ldi	r22, 0x08	; 8
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    450a:	ae 01       	movw	r20, r28
    450c:	4f 5e       	subi	r20, 0xEF	; 239
    450e:	5f 4f       	sbci	r21, 0xFF	; 255
    4510:	62 e0       	ldi	r22, 0x02	; 2
    4512:	82 e2       	ldi	r24, 0x22	; 34
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    451a:	60 e0       	ldi	r22, 0x00	; 0
    451c:	8c e6       	ldi	r24, 0x6C	; 108
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	0e 94 6e 34 	call	0x68dc	; 0x68dc <eeprom_update_byte>
    4524:	60 e0       	ldi	r22, 0x00	; 0
    4526:	87 e7       	ldi	r24, 0x77	; 119
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	0e 94 6e 34 	call	0x68dc	; 0x68dc <eeprom_update_byte>
    452e:	0d c0       	rjmp	.+26     	; 0x454a <checkEeprom+0x13a>
    4530:	cd 28       	or	r12, r13
    4532:	ce 28       	or	r12, r14
    4534:	cf 28       	or	r12, r15
    4536:	49 f0       	breq	.+18     	; 0x454a <checkEeprom+0x13a>
    4538:	ae 01       	movw	r20, r28
    453a:	4f 5e       	subi	r20, 0xEF	; 239
    453c:	5f 4f       	sbci	r21, 0xFF	; 255
    453e:	62 e0       	ldi	r22, 0x02	; 2
    4540:	82 e2       	ldi	r24, 0x22	; 34
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    4548:	00 00       	nop
    454a:	62 96       	adiw	r28, 0x12	; 18
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	de bf       	out	0x3e, r29	; 62
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	cd bf       	out	0x3d, r28	; 61
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	1f 91       	pop	r17
    455c:	0f 91       	pop	r16
    455e:	ff 90       	pop	r15
    4560:	ef 90       	pop	r14
    4562:	df 90       	pop	r13
    4564:	cf 90       	pop	r12
    4566:	bf 90       	pop	r11
    4568:	af 90       	pop	r10
    456a:	9f 90       	pop	r9
    456c:	8f 90       	pop	r8
    456e:	08 95       	ret

00004570 <appInit>:
    4570:	0f 93       	push	r16
    4572:	1f 93       	push	r17
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    4578:	1f 92       	push	r1
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	83 b3       	in	r24, 0x13	; 19
    4580:	87 60       	ori	r24, 0x07	; 7
    4582:	83 bb       	out	0x13, r24	; 19
    4584:	84 b3       	in	r24, 0x14	; 20
    4586:	88 7f       	andi	r24, 0xF8	; 248
    4588:	84 bb       	out	0x14, r24	; 20
    458a:	84 b3       	in	r24, 0x14	; 20
    458c:	87 60       	ori	r24, 0x07	; 7
    458e:	84 bb       	out	0x14, r24	; 20
    4590:	6b 9a       	sbi	0x0d, 3	; 13
    4592:	73 98       	cbi	0x0e, 3	; 14
    4594:	84 b3       	in	r24, 0x14	; 20
    4596:	88 7f       	andi	r24, 0xF8	; 248
    4598:	84 bb       	out	0x14, r24	; 20
    459a:	a0 9a       	sbi	0x14, 0	; 20
    459c:	83 e1       	ldi	r24, 0x13	; 19
    459e:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    45a2:	61 e3       	ldi	r22, 0x31	; 49
    45a4:	71 e2       	ldi	r23, 0x21	; 33
    45a6:	89 e1       	ldi	r24, 0x19	; 25
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <ucDeviceStateFlag>
    45b4:	0e 94 08 22 	call	0x4410	; 0x4410 <checkEeprom>
    45b8:	0e 94 46 06 	call	0xc8c	; 0xc8c <initReader>
    45bc:	61 ee       	ldi	r22, 0xE1	; 225
    45be:	7f e1       	ldi	r23, 0x1F	; 31
    45c0:	80 e1       	ldi	r24, 0x10	; 16
    45c2:	97 e2       	ldi	r25, 0x27	; 39
    45c4:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    45c8:	08 2f       	mov	r16, r24
    45ca:	10 e0       	ldi	r17, 0x00	; 0
    45cc:	90 91 0e 0a 	lds	r25, 0x0A0E	; 0x800a0e <ucMachineWait>
    45d0:	91 11       	cpse	r25, r1
    45d2:	1e c0       	rjmp	.+60     	; 0x4610 <appInit+0xa0>
    45d4:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <ucDeviceStateFlag>
    45d8:	91 30       	cpi	r25, 0x01	; 1
    45da:	51 f4       	brne	.+20     	; 0x45f0 <appInit+0x80>
    45dc:	0e 94 9e 0c 	call	0x193c	; 0x193c <initMachine>
    45e0:	6a e4       	ldi	r22, 0x4A	; 74
    45e2:	71 e2       	ldi	r23, 0x21	; 33
    45e4:	8c e2       	ldi	r24, 0x2C	; 44
    45e6:	91 e0       	ldi	r25, 0x01	; 1
    45e8:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    45ec:	18 2f       	mov	r17, r24
    45ee:	ee cf       	rjmp	.-36     	; 0x45cc <appInit+0x5c>
    45f0:	92 30       	cpi	r25, 0x02	; 2
    45f2:	39 f4       	brne	.+14     	; 0x4602 <appInit+0x92>
    45f4:	80 2f       	mov	r24, r16
    45f6:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <macTimerEnd>
    45fa:	81 2f       	mov	r24, r17
    45fc:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <macTimerEnd>
    4600:	07 c0       	rjmp	.+14     	; 0x4610 <appInit+0xa0>
    4602:	0e 94 a0 1a 	call	0x3540	; 0x3540 <mac_event_pending>
    4606:	88 23       	and	r24, r24
    4608:	09 f3       	breq	.-62     	; 0x45cc <appInit+0x5c>
    460a:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <macTask>
    460e:	de cf       	rjmp	.-68     	; 0x45cc <appInit+0x5c>
    4610:	6a e4       	ldi	r22, 0x4A	; 74
    4612:	71 e2       	ldi	r23, 0x21	; 33
    4614:	8c e2       	ldi	r24, 0x2C	; 44
    4616:	91 e0       	ldi	r25, 0x01	; 1
    4618:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    461c:	ae 01       	movw	r20, r28
    461e:	4f 5f       	subi	r20, 0xFF	; 255
    4620:	5f 4f       	sbci	r21, 0xFF	; 255
    4622:	61 e0       	ldi	r22, 0x01	; 1
    4624:	8e e1       	ldi	r24, 0x1E	; 30
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <MdcStatus>
    4632:	8f 3f       	cpi	r24, 0xFF	; 255
    4634:	79 f4       	brne	.+30     	; 0x4654 <appInit+0xe4>
    4636:	99 23       	and	r25, r25
    4638:	69 f0       	breq	.+26     	; 0x4654 <appInit+0xe4>
    463a:	40 e1       	ldi	r20, 0x10	; 16
    463c:	5a e0       	ldi	r21, 0x0A	; 10
    463e:	61 e0       	ldi	r22, 0x01	; 1
    4640:	8e e1       	ldi	r24, 0x1E	; 30
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    4648:	41 e1       	ldi	r20, 0x11	; 17
    464a:	5a e0       	ldi	r21, 0x0A	; 10
    464c:	61 e0       	ldi	r22, 0x01	; 1
    464e:	8f e1       	ldi	r24, 0x1F	; 31
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	1a c0       	rjmp	.+52     	; 0x4688 <appInit+0x118>
    4654:	98 17       	cp	r25, r24
    4656:	d1 f0       	breq	.+52     	; 0x468c <appInit+0x11c>
    4658:	40 e1       	ldi	r20, 0x10	; 16
    465a:	5a e0       	ldi	r21, 0x0A	; 10
    465c:	61 e0       	ldi	r22, 0x01	; 1
    465e:	8e e1       	ldi	r24, 0x1E	; 30
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    4666:	41 e1       	ldi	r20, 0x11	; 17
    4668:	5a e0       	ldi	r21, 0x0A	; 10
    466a:	61 e0       	ldi	r22, 0x01	; 1
    466c:	8f e1       	ldi	r24, 0x1F	; 31
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    4674:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4678:	82 60       	ori	r24, 0x02	; 2
    467a:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
    467e:	43 e9       	ldi	r20, 0x93	; 147
    4680:	58 e0       	ldi	r21, 0x08	; 8
    4682:	61 e0       	ldi	r22, 0x01	; 1
    4684:	82 e2       	ldi	r24, 0x22	; 34
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <halPutEeprom>
    468c:	0e 94 4e 21 	call	0x429c	; 0x429c <appStartScan>
    4690:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <ucDeviceStateFlag>
    4694:	82 30       	cpi	r24, 0x02	; 2
    4696:	69 f4       	brne	.+26     	; 0x46b2 <appInit+0x142>
    4698:	0e 94 44 06 	call	0xc88	; 0xc88 <displayVersion>
    469c:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    46a0:	81 fd       	sbrc	r24, 1
    46a2:	07 c0       	rjmp	.+14     	; 0x46b2 <appInit+0x142>
    46a4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <setupMachine>
    46a8:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <ucCardStatus>
    46ac:	82 e0       	ldi	r24, 0x02	; 2
    46ae:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <cardRemoved>
    46b2:	00 00       	nop
    46b4:	0f 90       	pop	r0
    46b6:	df 91       	pop	r29
    46b8:	cf 91       	pop	r28
    46ba:	1f 91       	pop	r17
    46bc:	0f 91       	pop	r16
    46be:	08 95       	ret

000046c0 <GetParam>:
    46c0:	ef 92       	push	r14
    46c2:	ff 92       	push	r15
    46c4:	0f 93       	push	r16
    46c6:	1f 93       	push	r17
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	7a 01       	movw	r14, r20
    46ce:	fb 01       	movw	r30, r22
    46d0:	01 90       	ld	r0, Z+
    46d2:	00 20       	and	r0, r0
    46d4:	e9 f7       	brne	.-6      	; 0x46d0 <GetParam+0x10>
    46d6:	31 97       	sbiw	r30, 0x01	; 1
    46d8:	ef 01       	movw	r28, r30
    46da:	c6 1b       	sub	r28, r22
    46dc:	d7 0b       	sbc	r29, r23
    46de:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
    46e2:	00 97       	sbiw	r24, 0x00	; 0
    46e4:	c1 f0       	breq	.+48     	; 0x4716 <GetParam+0x56>
    46e6:	8c 01       	movw	r16, r24
    46e8:	0c 0f       	add	r16, r28
    46ea:	11 1d       	adc	r17, r1
    46ec:	b7 01       	movw	r22, r14
    46ee:	c8 01       	movw	r24, r16
    46f0:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
    46f4:	00 97       	sbiw	r24, 0x00	; 0
    46f6:	79 f0       	breq	.+30     	; 0x4716 <GetParam+0x56>
    46f8:	ec 01       	movw	r28, r24
    46fa:	c0 1b       	sub	r28, r16
    46fc:	d1 0b       	sbc	r29, r17
    46fe:	ae 01       	movw	r20, r28
    4700:	b8 01       	movw	r22, r16
    4702:	84 ed       	ldi	r24, 0xD4	; 212
    4704:	9b e0       	ldi	r25, 0x0B	; 11
    4706:	0e 94 53 31 	call	0x62a6	; 0x62a6 <memcpy>
    470a:	cc 52       	subi	r28, 0x2C	; 44
    470c:	d4 4f       	sbci	r29, 0xF4	; 244
    470e:	18 82       	st	Y, r1
    4710:	84 ed       	ldi	r24, 0xD4	; 212
    4712:	9b e0       	ldi	r25, 0x0B	; 11
    4714:	02 c0       	rjmp	.+4      	; 0x471a <GetParam+0x5a>
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	1f 91       	pop	r17
    4720:	0f 91       	pop	r16
    4722:	ff 90       	pop	r15
    4724:	ef 90       	pop	r14
    4726:	08 95       	ret

00004728 <DevicePoll>:
    4728:	0e 94 96 0c 	call	0x192c	; 0x192c <MachineStatus>
    472c:	6a e4       	ldi	r22, 0x4A	; 74
    472e:	71 e2       	ldi	r23, 0x21	; 33
    4730:	8c e2       	ldi	r24, 0x2C	; 44
    4732:	91 e0       	ldi	r25, 0x01	; 1
    4734:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <macSetAlarm>

00004738 <padLeft>:
}

char * padLeft(char * string, u8 paddedLength, const char * pad) 
{
    4738:	7f 92       	push	r7
    473a:	8f 92       	push	r8
    473c:	9f 92       	push	r9
    473e:	af 92       	push	r10
    4740:	bf 92       	push	r11
    4742:	cf 92       	push	r12
    4744:	df 92       	push	r13
    4746:	ef 92       	push	r14
    4748:	ff 92       	push	r15
    474a:	0f 93       	push	r16
    474c:	1f 93       	push	r17
    474e:	cf 93       	push	r28
    4750:	df 93       	push	r29
    4752:	7c 01       	movw	r14, r24
    4754:	76 2e       	mov	r7, r22
    4756:	4a 01       	movw	r8, r20
	size_t stringLength = strlen(string);
    4758:	ec 01       	movw	r28, r24
    475a:	09 90       	ld	r0, Y+
    475c:	00 20       	and	r0, r0
    475e:	e9 f7       	brne	.-6      	; 0x475a <padLeft+0x22>
    4760:	21 97       	sbiw	r28, 0x01	; 1
    4762:	c8 1b       	sub	r28, r24
    4764:	d9 0b       	sbc	r29, r25
	size_t lenpad = strlen(pad);
    4766:	fa 01       	movw	r30, r20
    4768:	01 90       	ld	r0, Z+
    476a:	00 20       	and	r0, r0
    476c:	e9 f7       	brne	.-6      	; 0x4768 <padLeft+0x30>
    476e:	31 97       	sbiw	r30, 0x01	; 1
    4770:	8f 01       	movw	r16, r30
    4772:	04 1b       	sub	r16, r20
    4774:	15 0b       	sbc	r17, r21
	u8 i = paddedLength;
	
	if (stringLength >= paddedLength)
    4776:	c6 2e       	mov	r12, r22
    4778:	d1 2c       	mov	r13, r1
    477a:	cc 15       	cp	r28, r12
    477c:	dd 05       	cpc	r29, r13
    477e:	20 f5       	brcc	.+72     	; 0x47c8 <padLeft+0x90>
	{
		return NULL;//'\0';
	}

	char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
    4780:	c6 01       	movw	r24, r12
    4782:	01 96       	adiw	r24, 0x01	; 1
    4784:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <malloc>
    4788:	5c 01       	movw	r10, r24
	
	for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    478a:	87 2d       	mov	r24, r7
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	c8 17       	cp	r28, r24
    4790:	d9 07       	cpc	r29, r25
    4792:	48 f4       	brcc	.+18     	; 0x47a6 <padLeft+0x6e>
	{
		strncpy(padded, pad, lenpad);
    4794:	a8 01       	movw	r20, r16
    4796:	b4 01       	movw	r22, r8
    4798:	c5 01       	movw	r24, r10
    479a:	0e 94 77 31 	call	0x62ee	; 0x62ee <strncpy>
		return NULL;//'\0';
	}

	char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
	
	for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    479e:	7a 94       	dec	r7
    47a0:	a0 0e       	add	r10, r16
    47a2:	b1 1e       	adc	r11, r17
    47a4:	f2 cf       	rjmp	.-28     	; 0x478a <padLeft+0x52>
	{
		strncpy(padded, pad, lenpad);
	}
	
	strncpy(padded, string, stringLength); /* copy without '\0' */
    47a6:	ae 01       	movw	r20, r28
    47a8:	b7 01       	movw	r22, r14
    47aa:	c5 01       	movw	r24, r10
    47ac:	0e 94 77 31 	call	0x62ee	; 0x62ee <strncpy>
	padded += stringLength; /* prepare for first append of pad */
    47b0:	ca 0d       	add	r28, r10
    47b2:	db 1d       	adc	r29, r11
	*padded = '\0';
    47b4:	18 82       	st	Y, r1

	padded = (padded - i);
    47b6:	cc 19       	sub	r28, r12
    47b8:	dd 09       	sbc	r29, r13
	strncpy(string,padded,i);
    47ba:	a6 01       	movw	r20, r12
    47bc:	be 01       	movw	r22, r28
    47be:	c7 01       	movw	r24, r14
    47c0:	0e 94 77 31 	call	0x62ee	; 0x62ee <strncpy>
	
	return padded;
    47c4:	ce 01       	movw	r24, r28
    47c6:	02 c0       	rjmp	.+4      	; 0x47cc <padLeft+0x94>
	size_t lenpad = strlen(pad);
	u8 i = paddedLength;
	
	if (stringLength >= paddedLength)
	{
		return NULL;//'\0';
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	90 e0       	ldi	r25, 0x00	; 0

	padded = (padded - i);
	strncpy(string,padded,i);
	
	return padded;
}
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	ff 90       	pop	r15
    47d6:	ef 90       	pop	r14
    47d8:	df 90       	pop	r13
    47da:	cf 90       	pop	r12
    47dc:	bf 90       	pop	r11
    47de:	af 90       	pop	r10
    47e0:	9f 90       	pop	r9
    47e2:	8f 90       	pop	r8
    47e4:	7f 90       	pop	r7
    47e6:	08 95       	ret

000047e8 <APP_TaskHandler>:
   be called periodically.  It receives data from serial and sends it
   to end device.
*/
//void appTask(void)
void APP_TaskHandler(void)
{
    47e8:	bf 92       	push	r11
    47ea:	cf 92       	push	r12
    47ec:	df 92       	push	r13
    47ee:	ef 92       	push	r14
    47f0:	ff 92       	push	r15
    47f2:	0f 93       	push	r16
    47f4:	1f 93       	push	r17
    47f6:	cf 93       	push	r28
    47f8:	df 93       	push	r29
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
    47fe:	ab 97       	sbiw	r28, 0x2b	; 43
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	cd bf       	out	0x3d, r28	; 61
	//vars declaration
	ucSendDataSize = 0;
    480a:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <ucSendDataSize>
 

	
  #ifdef MACHINE_CONNECTED
	#if (DEVICE_CONNECTED == MDC_MACHINE)
	if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
    480e:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <ucDeviceStateFlag>
    4812:	81 30       	cpi	r24, 0x01	; 1
    4814:	41 f5       	brne	.+80     	; 0x4866 <APP_TaskHandler+0x7e>
	{
        DevicePoll();
    4816:	0e 94 94 23 	call	0x4728	; 0x4728 <DevicePoll>
		
		
		
		if (ucDeviceStateFlag == DEVICE_STATUS_ONLINE)
    481a:	80 91 96 08 	lds	r24, 0x0896	; 0x800896 <ucDeviceStateFlag>
    481e:	82 30       	cpi	r24, 0x02	; 2
    4820:	11 f5       	brne	.+68     	; 0x4866 <APP_TaskHandler+0x7e>
    4822:	8f e1       	ldi	r24, 0x1F	; 31
    4824:	9e e4       	ldi	r25, 0x4E	; 78
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	f1 f7       	brne	.-4      	; 0x4826 <APP_TaskHandler+0x3e>
    482a:	00 c0       	rjmp	.+0      	; 0x482c <APP_TaskHandler+0x44>
    482c:	00 00       	nop
			//if (macConfig.associated == false)
			{
				//appPingReq(DEFAULT_COORD_ADDR);
				//appStartScan();
			}
			if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
    482e:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4832:	81 ff       	sbrs	r24, 1
    4834:	02 c0       	rjmp	.+4      	; 0x483a <APP_TaskHandler+0x52>
			{
				//Display "No Setup" message on machine
				displayMsg(SETUP_MSG);				
    4836:	82 e0       	ldi	r24, 0x02	; 2
    4838:	14 c0       	rjmp	.+40     	; 0x4862 <APP_TaskHandler+0x7a>
			}
			else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
    483a:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <macConfig+0x8>
    483e:	91 11       	cpse	r25, r1
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <APP_TaskHandler+0x5e>
    4842:	83 ff       	sbrs	r24, 3
    4844:	02 c0       	rjmp	.+4      	; 0x484a <APP_TaskHandler+0x62>
    4846:	84 ff       	sbrs	r24, 4
    4848:	02 c0       	rjmp	.+4      	; 0x484e <APP_TaskHandler+0x66>
			{
				//Display "Service message" message on machine
				displayMsg(SERVICE_MSG);				
    484a:	83 e0       	ldi	r24, 0x03	; 3
    484c:	0a c0       	rjmp	.+20     	; 0x4862 <APP_TaskHandler+0x7a>
			}
			else if (ReaderStateFlag.Busy == true)
    484e:	86 ff       	sbrs	r24, 6
    4850:	0a c0       	rjmp	.+20     	; 0x4866 <APP_TaskHandler+0x7e>
			{
				#if (DEVICE_CONNECTED == MDC_MACHINE)
				//Display busy message
				if( OP != WAIT_FOR_SERVER ) // ****need to put op code in a queue****
    4852:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <OP>
    4856:	87 30       	cpi	r24, 0x07	; 7
    4858:	19 f0       	breq	.+6      	; 0x4860 <APP_TaskHandler+0x78>
				{
					OP = WAIT_FOR_SERVER;
    485a:	87 e0       	ldi	r24, 0x07	; 7
    485c:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
				}					
				displayMsg(BUSY_MSG);
    4860:	84 e0       	ldi	r24, 0x04	; 4
    4862:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayMsg>
	}
	#endif // MDC_MACHINE
	
  #endif

if(macConfig.associated == true/*/false*/ || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
    4866:	20 91 46 0b 	lds	r18, 0x0B46	; 0x800b46 <macConfig+0x8>
    486a:	21 11       	cpse	r18, r1
    486c:	04 c0       	rjmp	.+8      	; 0x4876 <APP_TaskHandler+0x8e>
    486e:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4872:	83 ff       	sbrs	r24, 3
    4874:	0f c3       	rjmp	.+1566   	; 0x4e94 <APP_TaskHandler+0x6ac>
{		
	switch(OP){
    4876:	e0 91 95 08 	lds	r30, 0x0895	; 0x800895 <OP>
    487a:	8e 2f       	mov	r24, r30
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	fc 01       	movw	r30, r24
    4880:	31 97       	sbiw	r30, 0x01	; 1
    4882:	e8 32       	cpi	r30, 0x28	; 40
    4884:	f1 05       	cpc	r31, r1
    4886:	08 f0       	brcs	.+2      	; 0x488a <APP_TaskHandler+0xa2>
    4888:	05 c3       	rjmp	.+1546   	; 0x4e94 <APP_TaskHandler+0x6ac>
    488a:	e6 56       	subi	r30, 0x66	; 102
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	0c 94 52 2d 	jmp	0x5aa4	; 0x5aa4 <__tablejump2__>
		case VALIDATE_READER:
		//TODO: fix machine type switch
		// 
				#if (DEVICE_CONNECTED == MDC_MACHINE) 
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
    4892:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4896:	83 ff       	sbrs	r24, 3
    4898:	04 c0       	rjmp	.+8      	; 0x48a2 <APP_TaskHandler+0xba>
    489a:	81 fd       	sbrc	r24, 1
    489c:	02 c0       	rjmp	.+4      	; 0x48a2 <APP_TaskHandler+0xba>
				{	
					OP = INIT_READER;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	f4 c2       	rjmp	.+1512   	; 0x4e8a <APP_TaskHandler+0x6a2>
				}
				else{													
				#endif //MDC_MACHINE 
				
					#if (DEVICE_CONNECTED == MDC_MACHINE)
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (MdcStatus.MachineType[0] != INVALID_MACHINE) ){
    48a2:	81 fb       	bst	r24, 1
    48a4:	99 27       	eor	r25, r25
    48a6:	90 f9       	bld	r25, 0
    48a8:	81 fd       	sbrc	r24, 1
    48aa:	02 c0       	rjmp	.+4      	; 0x48b0 <APP_TaskHandler+0xc8>
    48ac:	80 ff       	sbrs	r24, 0
    48ae:	0b c0       	rjmp	.+22     	; 0x48c6 <APP_TaskHandler+0xde>
    48b0:	20 91 10 0a 	lds	r18, 0x0A10	; 0x800a10 <MdcStatus>
    48b4:	22 23       	and	r18, r18
    48b6:	29 f0       	breq	.+10     	; 0x48c2 <APP_TaskHandler+0xda>
						
						SETUP_TIMEOUT = true;
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server				
    48be:	8a e0       	ldi	r24, 0x0A	; 10
    48c0:	e4 c2       	rjmp	.+1480   	; 0x4e8a <APP_TaskHandler+0x6a2>
											
					#endif
	
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) ){
    48c2:	91 11       	cpse	r25, r1
    48c4:	e7 c2       	rjmp	.+1486   	; 0x4e94 <APP_TaskHandler+0x6ac>
    48c6:	82 ff       	sbrs	r24, 2
    48c8:	ea cf       	rjmp	.-44     	; 0x489e <APP_TaskHandler+0xb6>
                       	
						VALIDATION_TIMEOUT = false;
    48ca:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <VALIDATION_TIMEOUT>
						sendValidationRequest();
    48ce:	0e 94 bb 02 	call	0x576	; 0x576 <sendValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
    48d2:	80 e8       	ldi	r24, 0x80	; 128
    48d4:	e9 e3       	ldi	r30, 0x39	; 57
    48d6:	fc e0       	ldi	r31, 0x0C	; 12
    48d8:	df 01       	movw	r26, r30
    48da:	1d 92       	st	X+, r1
    48dc:	8a 95       	dec	r24
    48de:	e9 f7       	brne	.-6      	; 0x48da <APP_TaskHandler+0xf2>
					   
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
    48e0:	65 e3       	ldi	r22, 0x35	; 53
    48e2:	71 e2       	ldi	r23, 0x21	; 33
    48e4:	8c e3       	ldi	r24, 0x3C	; 60
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
    48ec:	84 e1       	ldi	r24, 0x14	; 20
    48ee:	cd c2       	rjmp	.+1434   	; 0x4e8a <APP_TaskHandler+0x6a2>
			break;

		case INIT_READER:
			#if (DEVICE_CONNECTED == MDC_MACHINE)
			
			if( isMachineCycleRunning() )
    48f0:	0e 94 92 0c 	call	0x1924	; 0x1924 <isMachineCycleRunning>
    48f4:	88 23       	and	r24, r24
    48f6:	09 f4       	brne	.+2      	; 0x48fa <APP_TaskHandler+0x112>
    48f8:	c5 c2       	rjmp	.+1418   	; 0x4e84 <APP_TaskHandler+0x69c>
			{
				OP = CYCLE_STARTED;
    48fa:	80 e1       	ldi	r24, 0x10	; 16
    48fc:	c6 c2       	rjmp	.+1420   	; 0x4e8a <APP_TaskHandler+0x6a2>
			 break;

		case SCANNING: //scan for card swipe

                // Enable Heart beat routine
                    if (uiFunctionEntered < (20 * (F_CPU/4000000)))
    48fe:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uiFunctionEntered>
    4902:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uiFunctionEntered+0x1>
    4906:	80 35       	cpi	r24, 0x50	; 80
    4908:	91 05       	cpc	r25, r1
    490a:	30 f4       	brcc	.+12     	; 0x4918 <APP_TaskHandler+0x130>
                    {
                        uiFunctionEntered++;
    490c:	01 96       	adiw	r24, 0x01	; 1
    490e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <uiFunctionEntered+0x1>
    4912:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uiFunctionEntered>
    4916:	04 c0       	rjmp	.+8      	; 0x4920 <APP_TaskHandler+0x138>
                    }
                    else
                    {						
                        uiFunctionEntered = 0;					
    4918:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <uiFunctionEntered+0x1>
    491c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <uiFunctionEntered>
                    }
	
					if(!Request(ISO14443_3_REQALL, tmp))
    4920:	be 01       	movw	r22, r28
    4922:	6f 5f       	subi	r22, 0xFF	; 255
    4924:	7f 4f       	sbci	r23, 0xFF	; 255
    4926:	82 e5       	ldi	r24, 0x52	; 82
    4928:	0e 94 a6 10 	call	0x214c	; 0x214c <Request>
    492c:	89 2b       	or	r24, r25
    492e:	09 f0       	breq	.+2      	; 0x4932 <APP_TaskHandler+0x14a>
    4930:	b1 c2       	rjmp	.+1378   	; 0x4e94 <APP_TaskHandler+0x6ac>
					{
						u8 cardType;
						u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
    4932:	86 e0       	ldi	r24, 0x06	; 6
    4934:	e1 e3       	ldi	r30, 0x31	; 49
    4936:	f2 e0       	ldi	r31, 0x02	; 2
    4938:	de 01       	movw	r26, r28
    493a:	5f 96       	adiw	r26, 0x1f	; 31
    493c:	01 90       	ld	r0, Z+
    493e:	0d 92       	st	X+, r0
    4940:	8a 95       	dec	r24
    4942:	e1 f7       	brne	.-8      	; 0x493c <APP_TaskHandler+0x154>
						
						/*anti-collision and select the card*/
						if(!AnticollSelect(0, tmp, &cardType))
    4944:	ae 01       	movw	r20, r28
    4946:	49 5d       	subi	r20, 0xD9	; 217
    4948:	5f 4f       	sbci	r21, 0xFF	; 255
    494a:	be 01       	movw	r22, r28
    494c:	6f 5f       	subi	r22, 0xFF	; 255
    494e:	7f 4f       	sbci	r23, 0xFF	; 255
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	0e 94 56 12 	call	0x24ac	; 0x24ac <AnticollSelect>
    4956:	89 2b       	or	r24, r25
    4958:	09 f0       	breq	.+2      	; 0x495c <APP_TaskHandler+0x174>
    495a:	9c c2       	rjmp	.+1336   	; 0x4e94 <APP_TaskHandler+0x6ac>
						{
							if(cardType == MIFARE_1K)
    495c:	8f a1       	ldd	r24, Y+39	; 0x27
    495e:	88 30       	cpi	r24, 0x08	; 8
    4960:	69 f4       	brne	.+26     	; 0x497c <APP_TaskHandler+0x194>
							{
								CurrentAccount.Type = MIFARE_1K;
    4962:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <CurrentAccount>
								
								Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	ae 01       	movw	r20, r28
    496a:	4f 5f       	subi	r20, 0xFF	; 255
    496c:	5f 4f       	sbci	r21, 0xFF	; 255
    496e:	be 01       	movw	r22, r28
    4970:	61 5e       	subi	r22, 0xE1	; 225
    4972:	7f 4f       	sbci	r23, 0xFF	; 255
    4974:	80 e6       	ldi	r24, 0x60	; 96
    4976:	0e 94 01 13 	call	0x2602	; 0x2602 <Authentication>
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <APP_TaskHandler+0x198>
							}
							else 
							{
								CurrentAccount.Type = 0;
    497c:	10 92 88 08 	sts	0x0888, r1	; 0x800888 <CurrentAccount>
							}								
							OP = CARD_DETECTED;	
    4980:	8c e0       	ldi	r24, 0x0C	; 12
    4982:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
							ledoff1();
    4986:	0e 94 31 21 	call	0x4262	; 0x4262 <ledoff1>
    498a:	84 c2       	rjmp	.+1288   	; 0x4e94 <APP_TaskHandler+0x6ac>
		
		case CARD_DETECTED:		
			{			
				

				u8 cardNum[10] = {0};	
    498c:	8e 01       	movw	r16, r28
    498e:	0f 5f       	subi	r16, 0xFF	; 255
    4990:	1f 4f       	sbci	r17, 0xFF	; 255
    4992:	8a e0       	ldi	r24, 0x0A	; 10
    4994:	f8 01       	movw	r30, r16
    4996:	11 92       	st	Z+, r1
    4998:	8a 95       	dec	r24
    499a:	e9 f7       	brne	.-6      	; 0x4996 <APP_TaskHandler+0x1ae>
				//memset(DataBuffer,0,sizeof(DataBuffer));	// Clear Buffer
				
				
				//Read CardID from User Zone
				if(!readCardID(CurrentAccount.Type, &cardNum[0]))
    499c:	b8 01       	movw	r22, r16
    499e:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <CurrentAccount>
    49a2:	0e 94 a3 13 	call	0x2746	; 0x2746 <readCardID>
    49a6:	89 2b       	or	r24, r25
    49a8:	09 f0       	breq	.+2      	; 0x49ac <APP_TaskHandler+0x1c4>
    49aa:	8c c0       	rjmp	.+280    	; 0x4ac4 <APP_TaskHandler+0x2dc>
				{
					padLeft((char*)&cardNum[0],9,"200");
    49ac:	43 e3       	ldi	r20, 0x33	; 51
    49ae:	55 e0       	ldi	r21, 0x05	; 5
    49b0:	69 e0       	ldi	r22, 0x09	; 9
    49b2:	c8 01       	movw	r24, r16
    49b4:	0e 94 9c 23 	call	0x4738	; 0x4738 <padLeft>
					
					CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
    49b8:	4a e0       	ldi	r20, 0x0A	; 10
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	70 e0       	ldi	r23, 0x00	; 0
    49c0:	c8 01       	movw	r24, r16
    49c2:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strtoul>
    49c6:	60 93 89 08 	sts	0x0889, r22	; 0x800889 <CurrentAccount+0x1>
    49ca:	70 93 8a 08 	sts	0x088A, r23	; 0x80088a <CurrentAccount+0x2>
    49ce:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <CurrentAccount+0x3>
    49d2:	90 93 8c 08 	sts	0x088C, r25	; 0x80088c <CurrentAccount+0x4>
					
					if(macConfig.associated == true)
    49d6:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    49da:	88 23       	and	r24, r24
    49dc:	a1 f1       	breq	.+104    	; 0x4a46 <APP_TaskHandler+0x25e>
					{					
						// Send Data Package via Radio						
						sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
    49de:	1f 93       	push	r17
    49e0:	0f 93       	push	r16
    49e2:	87 e3       	ldi	r24, 0x37	; 55
    49e4:	95 e0       	ldi	r25, 0x05	; 5
    49e6:	9f 93       	push	r25
    49e8:	8f 93       	push	r24
    49ea:	01 ee       	ldi	r16, 0xE1	; 225
    49ec:	18 e0       	ldi	r17, 0x08	; 8
    49ee:	1f 93       	push	r17
    49f0:	0f 93       	push	r16
    49f2:	0e 94 0d 32 	call	0x641a	; 0x641a <sprintf>

						ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
    49f6:	f8 01       	movw	r30, r16
    49f8:	01 90       	ld	r0, Z+
    49fa:	00 20       	and	r0, r0
    49fc:	e9 f7       	brne	.-6      	; 0x49f8 <APP_TaskHandler+0x210>
    49fe:	bf 01       	movw	r22, r30
    4a00:	62 5e       	subi	r22, 0xE2	; 226
    4a02:	78 40       	sbci	r23, 0x08	; 8
						ucSendDataBuffer[0] = ucSendDataSize;   // Length
    4a04:	60 93 e0 08 	sts	0x08E0, r22	; 0x8008e0 <ucSendDataBuffer>
						ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
    4a08:	6f 5f       	subi	r22, 0xFF	; 255
    4a0a:	60 93 a3 09 	sts	0x09A3, r22	; 0x8009a3 <ucSendDataSize>
						macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
    4a0e:	40 ee       	ldi	r20, 0xE0	; 224
    4a10:	58 e0       	ldi	r21, 0x08	; 8
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	0e 94 05 1a 	call	0x340a	; 0x340a <macDataRequest>
									
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
    4a1a:	80 e8       	ldi	r24, 0x80	; 128
    4a1c:	e9 e3       	ldi	r30, 0x39	; 57
    4a1e:	fc e0       	ldi	r31, 0x0C	; 12
    4a20:	df 01       	movw	r26, r30
    4a22:	1d 92       	st	X+, r1
    4a24:	8a 95       	dec	r24
    4a26:	e9 f7       	brne	.-6      	; 0x4a22 <APP_TaskHandler+0x23a>
					
						OP = WAIT_FOR_SERVER;
    4a28:	87 e0       	ldi	r24, 0x07	; 7
    4a2a:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
						ReaderStateFlag.Busy = true;
    4a2e:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4a32:	80 64       	ori	r24, 0x40	; 64
    4a34:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	3a c0       	rjmp	.+116    	; 0x4aba <APP_TaskHandler+0x2d2>
						
					}
					#if (DEVICE_CONNECTED == MDC_MACHINE)


					else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
    4a46:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4a4a:	83 ff       	sbrs	r24, 3
    4a4c:	33 c0       	rjmp	.+102    	; 0x4ab4 <APP_TaskHandler+0x2cc>
    4a4e:	84 fd       	sbrc	r24, 4
    4a50:	31 c0       	rjmp	.+98     	; 0x4ab4 <APP_TaskHandler+0x2cc>
					{//allow cycle to start when BOW is down
						CurrentAccount.Value = vendPrice * 100;				 
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	48 ec       	ldi	r20, 0xC8	; 200
    4a58:	52 e4       	ldi	r21, 0x42	; 66
    4a5a:	60 91 ce 0b 	lds	r22, 0x0BCE	; 0x800bce <vendPrice>
    4a5e:	70 91 cf 0b 	lds	r23, 0x0BCF	; 0x800bcf <vendPrice+0x1>
    4a62:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <vendPrice+0x2>
    4a66:	90 91 d1 0b 	lds	r25, 0x0BD1	; 0x800bd1 <vendPrice+0x3>
    4a6a:	0e 94 9b 2c 	call	0x5936	; 0x5936 <__mulsf3>
    4a6e:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__fixunssfsi>
    4a72:	70 93 90 08 	sts	0x0890, r23	; 0x800890 <CurrentAccount+0x8>
    4a76:	60 93 8f 08 	sts	0x088F, r22	; 0x80088f <CurrentAccount+0x7>
    					//CurrentAccount.CardState = CARD_IN;
    					if( cardInserted(REGULAR_VEND) )
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	0e 94 80 0c 	call	0x1900	; 0x1900 <cardInserted>
    4a80:	88 23       	and	r24, r24
    4a82:	d9 f0       	breq	.+54     	; 0x4aba <APP_TaskHandler+0x2d2>
    					{
							
							OP = WAIT_FOR_SELECTION;
    4a84:	88 e0       	ldi	r24, 0x08	; 8
    4a86:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
							
							KPTOFlag = 0;
    4a8a:	10 92 86 08 	sts	0x0886, r1	; 0x800886 <KPTOFlag>
							
							if( waitForMachineStartKey() )
    4a8e:	0e 94 94 0c 	call	0x1928	; 0x1928 <waitForMachineStartKey>
    4a92:	88 23       	and	r24, r24
    4a94:	41 f0       	breq	.+16     	; 0x4aa6 <APP_TaskHandler+0x2be>
							{
    							macSetLongAlarm(MachineSetupData.KeyPressWaitTime,KeypressTimeOut);
    4a96:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <MachineSetupData>
    4a9a:	62 e4       	ldi	r22, 0x42	; 66
    4a9c:	71 e2       	ldi	r23, 0x21	; 33
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <macSetLongAlarm>
    4aa4:	0a c0       	rjmp	.+20     	; 0x4aba <APP_TaskHandler+0x2d2>
							}
							else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.								
    4aa6:	62 e4       	ldi	r22, 0x42	; 66
    4aa8:	71 e2       	ldi	r23, 0x21	; 33
    4aaa:	84 ef       	ldi	r24, 0xF4	; 244
    4aac:	91 e0       	ldi	r25, 0x01	; 1
    4aae:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    4ab2:	03 c0       	rjmp	.+6      	; 0x4aba <APP_TaskHandler+0x2d2>
    					
						}							
					}
					else{
						OP = SCANNING;
    4ab4:	82 e0       	ldi	r24, 0x02	; 2
    4ab6:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
					#if (DEBUG)
						Beeps(1);
					#endif

					//Set Timeout timer
					TOFlag = 0;
    4aba:	10 92 87 08 	sts	0x0887, r1	; 0x800887 <TOFlag>
					ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
    4abe:	69 e3       	ldi	r22, 0x39	; 57
    4ac0:	71 e2       	ldi	r23, 0x21	; 33
    4ac2:	d6 c1       	rjmp	.+940    	; 0x4e70 <APP_TaskHandler+0x688>
				else
				{					
					#if (DEBUG)
						debugMsgStr("\r\nInvalid CardID\r\n");
					#endif
					OP = SCARD_REMOVED;
    4ac4:	8d e0       	ldi	r24, 0x0D	; 13
    4ac6:	e1 c1       	rjmp	.+962    	; 0x4e8a <APP_TaskHandler+0x6a2>
				}		
			break;

		case SEND_OFFLINE_TRANSACTIONS:
		
			if (timeout.sendingOfflineTransactions)
    4ac8:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <timeout>
    4acc:	80 ff       	sbrs	r24, 0
    4ace:	e2 c1       	rjmp	.+964    	; 0x4e94 <APP_TaskHandler+0x6ac>
			{
				timeout.sendingOfflineTransactions = false;
    4ad0:	8e 7f       	andi	r24, 0xFE	; 254
    4ad2:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <timeout>
    4ad6:	d8 c1       	rjmp	.+944    	; 0x4e88 <APP_TaskHandler+0x6a0>
			
		case SHOW_BALANCE_REQUEST:
		case WAIT_FOR_SERVER: //wait for response from server


		    if(DataBuffer[0] != '\0')
    4ad8:	80 91 39 0c 	lds	r24, 0x0C39	; 0x800c39 <DataBuffer>
    4adc:	88 23       	and	r24, r24
    4ade:	09 f4       	brne	.+2      	; 0x4ae2 <APP_TaskHandler+0x2fa>
    4ae0:	b8 c0       	rjmp	.+368    	; 0x4c52 <APP_TaskHandler+0x46a>
			{
			  // Print response
			
				ReaderStateFlag.Busy = false;
    4ae2:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4ae6:	8f 7b       	andi	r24, 0xBF	; 191
    4ae8:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
				debugMsgStr("\r\n");
				debugMsgStr(DataBuffer);	
				debugMsgStr("\r\n");
				#endif

				OP = SCARD_REMOVED;
    4aec:	8d e0       	ldi	r24, 0x0D	; 13
    4aee:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>

                #if (DEVICE_CONNECTED == MDC_MACHINE)
                    
                    //Extract the Card Id				
    				if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
    4af2:	63 e4       	ldi	r22, 0x43	; 67
    4af4:	75 e0       	ldi	r23, 0x05	; 5
    4af6:	89 e3       	ldi	r24, 0x39	; 57
    4af8:	9c e0       	ldi	r25, 0x0C	; 12
    4afa:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
    4afe:	00 97       	sbiw	r24, 0x00	; 0
    4b00:	09 f4       	brne	.+2      	; 0x4b04 <APP_TaskHandler+0x31c>
    4b02:	a4 c0       	rjmp	.+328    	; 0x4c4c <APP_TaskHandler+0x464>
                    {						
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
    4b04:	4a e0       	ldi	r20, 0x0A	; 10
    4b06:	50 e0       	ldi	r21, 0x00	; 0
    4b08:	60 e0       	ldi	r22, 0x00	; 0
    4b0a:	70 e0       	ldi	r23, 0x00	; 0
    4b0c:	04 96       	adiw	r24, 0x04	; 4
    4b0e:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <strtoul>
    4b12:	60 93 89 08 	sts	0x0889, r22	; 0x800889 <CurrentAccount+0x1>
    4b16:	70 93 8a 08 	sts	0x088A, r23	; 0x80088a <CurrentAccount+0x2>
    4b1a:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <CurrentAccount+0x3>
    4b1e:	90 93 8c 08 	sts	0x088C, r25	; 0x80088c <CurrentAccount+0x4>
						

								
    					//Display card balance on machine
    					double fBalance = 0.0;
    					uctempBuf = strstr((char *)DataBuffer,"Balance: ");
    4b22:	68 e4       	ldi	r22, 0x48	; 72
    4b24:	75 e0       	ldi	r23, 0x05	; 5
    4b26:	89 e3       	ldi	r24, 0x39	; 57
    4b28:	9c e0       	ldi	r25, 0x0C	; 12
    4b2a:	0e 94 91 31 	call	0x6322	; 0x6322 <strstr>
    4b2e:	7c 01       	movw	r14, r24
						
    					uctempBuf += 9;
    4b30:	8c 01       	movw	r16, r24
    4b32:	07 5f       	subi	r16, 0xF7	; 247
    4b34:	1f 4f       	sbci	r17, 0xFF	; 255
    					ptr = strchr(uctempBuf,'.');
    4b36:	6e e2       	ldi	r22, 0x2E	; 46
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	c8 01       	movw	r24, r16
    4b3c:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <strchr>
						k = ptr - uctempBuf;
    4b40:	28 2f       	mov	r18, r24
    4b42:	20 1b       	sub	r18, r16
						fBalance = atof(uctempBuf);
    4b44:	c8 01       	movw	r24, r16
    4b46:	2b a7       	std	Y+43, r18	; 0x2b
    4b48:	0e 94 38 30 	call	0x6070	; 0x6070 <atof>
     
    					// Format the Balance to XX.XX
						if (k <2)
    4b4c:	2b a5       	ldd	r18, Y+43	; 0x2b
    4b4e:	22 30       	cpi	r18, 0x02	; 2
    4b50:	38 f4       	brcc	.+14     	; 0x4b60 <APP_TaskHandler+0x378>
						 sprintf(uctempBuf,"0%.2f",fBalance);
    4b52:	9f 93       	push	r25
    4b54:	8f 93       	push	r24
    4b56:	7f 93       	push	r23
    4b58:	6f 93       	push	r22
    4b5a:	82 e5       	ldi	r24, 0x52	; 82
    4b5c:	95 e0       	ldi	r25, 0x05	; 5
    4b5e:	08 c0       	rjmp	.+16     	; 0x4b70 <APP_TaskHandler+0x388>
						else if(k == 2)
    4b60:	22 30       	cpi	r18, 0x02	; 2
    4b62:	91 f4       	brne	.+36     	; 0x4b88 <APP_TaskHandler+0x3a0>
						 sprintf(uctempBuf,"%.2f",fBalance);
    4b64:	9f 93       	push	r25
    4b66:	8f 93       	push	r24
    4b68:	7f 93       	push	r23
    4b6a:	6f 93       	push	r22
    4b6c:	83 e5       	ldi	r24, 0x53	; 83
    4b6e:	95 e0       	ldi	r25, 0x05	; 5
    4b70:	9f 93       	push	r25
    4b72:	8f 93       	push	r24
    4b74:	1f 93       	push	r17
    4b76:	0f 93       	push	r16
    4b78:	0e 94 0d 32 	call	0x641a	; 0x641a <sprintf>
    4b7c:	0f b6       	in	r0, 0x3f	; 63
    4b7e:	f8 94       	cli
    4b80:	de bf       	out	0x3e, r29	; 62
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	cd bf       	out	0x3d, r28	; 61
    4b86:	05 c0       	rjmp	.+10     	; 0x4b92 <APP_TaskHandler+0x3aa>
						else
						 strcpy(uctempBuf,"99.99");
    4b88:	68 e5       	ldi	r22, 0x58	; 88
    4b8a:	75 e0       	ldi	r23, 0x05	; 5
    4b8c:	c8 01       	movw	r24, r16
    4b8e:	0e 94 70 31 	call	0x62e0	; 0x62e0 <strcpy>
 
     					//Format the Display Balance
    					CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;				 
    4b92:	d7 01       	movw	r26, r14
    4b94:	19 96       	adiw	r26, 0x09	; 9
    4b96:	2c 91       	ld	r18, X
    4b98:	19 97       	sbiw	r26, 0x09	; 9
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	20 53       	subi	r18, 0x30	; 48
    4b9e:	31 09       	sbc	r19, r1
    4ba0:	88 ee       	ldi	r24, 0xE8	; 232
    4ba2:	93 e0       	ldi	r25, 0x03	; 3
    4ba4:	28 9f       	mul	r18, r24
    4ba6:	a0 01       	movw	r20, r0
    4ba8:	29 9f       	mul	r18, r25
    4baa:	50 0d       	add	r21, r0
    4bac:	38 9f       	mul	r19, r24
    4bae:	50 0d       	add	r21, r0
    4bb0:	11 24       	eor	r1, r1
    4bb2:	1a 96       	adiw	r26, 0x0a	; 10
    4bb4:	2c 91       	ld	r18, X
    4bb6:	1a 97       	sbiw	r26, 0x0a	; 10
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	20 53       	subi	r18, 0x30	; 48
    4bbc:	31 09       	sbc	r19, r1
    4bbe:	64 e6       	ldi	r22, 0x64	; 100
    4bc0:	62 9f       	mul	r22, r18
    4bc2:	c0 01       	movw	r24, r0
    4bc4:	63 9f       	mul	r22, r19
    4bc6:	90 0d       	add	r25, r0
    4bc8:	11 24       	eor	r1, r1
    4bca:	84 0f       	add	r24, r20
    4bcc:	95 1f       	adc	r25, r21
    4bce:	1c 96       	adiw	r26, 0x0c	; 12
    4bd0:	4c 91       	ld	r20, X
    4bd2:	1c 97       	sbiw	r26, 0x0c	; 12
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	40 53       	subi	r20, 0x30	; 48
    4bd8:	51 09       	sbc	r21, r1
    4bda:	6a e0       	ldi	r22, 0x0A	; 10
    4bdc:	64 9f       	mul	r22, r20
    4bde:	90 01       	movw	r18, r0
    4be0:	65 9f       	mul	r22, r21
    4be2:	30 0d       	add	r19, r0
    4be4:	11 24       	eor	r1, r1
    4be6:	82 0f       	add	r24, r18
    4be8:	93 1f       	adc	r25, r19
    4bea:	1d 96       	adiw	r26, 0x0d	; 13
    4bec:	2c 91       	ld	r18, X
    4bee:	82 0f       	add	r24, r18
    4bf0:	91 1d       	adc	r25, r1
    4bf2:	c0 97       	sbiw	r24, 0x30	; 48
    4bf4:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <CurrentAccount+0x8>
    4bf8:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <CurrentAccount+0x7>


						#if(DEVICE_CONNECTED == MDC_MACHINE)
						
						// give display control back to front end controller.
						displayMsg(BLANK_MSG);
    4bfc:	85 e0       	ldi	r24, 0x05	; 5
    4bfe:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayMsg>
    4c02:	bf ef       	ldi	r27, 0xFF	; 255
    4c04:	e1 ee       	ldi	r30, 0xE1	; 225
    4c06:	f4 e0       	ldi	r31, 0x04	; 4
    4c08:	b1 50       	subi	r27, 0x01	; 1
    4c0a:	e0 40       	sbci	r30, 0x00	; 0
    4c0c:	f0 40       	sbci	r31, 0x00	; 0
    4c0e:	e1 f7       	brne	.-8      	; 0x4c08 <APP_TaskHandler+0x420>
    4c10:	00 c0       	rjmp	.+0      	; 0x4c12 <APP_TaskHandler+0x42a>
    4c12:	00 00       	nop
    					_delay_ms(100);
						
						if( cardInserted(REGULAR_VEND) )
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	0e 94 80 0c 	call	0x1900	; 0x1900 <cardInserted>
    4c1a:	88 23       	and	r24, r24
    4c1c:	09 f4       	brne	.+2      	; 0x4c20 <APP_TaskHandler+0x438>
    4c1e:	3a c1       	rjmp	.+628    	; 0x4e94 <APP_TaskHandler+0x6ac>
    						#if(DEBUG_BOW)
    						debugMsgStr("\r\nSerialSendMachineData(CASH_CARD_INSERTED)\r\n");
    						#endif

    						//CurrentAccount.CardState = CARD_OUT;
    						OP = WAIT_FOR_SELECTION;
    4c20:	88 e0       	ldi	r24, 0x08	; 8
    4c22:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    					//Sound Buzzer
    						#if (DEBUG)
								Beeps(2);
							#endif

    						KPTOFlag = 0;
    4c26:	10 92 86 08 	sts	0x0886, r1	; 0x800886 <KPTOFlag>
							
							if( waitForMachineStartKey() )
    4c2a:	0e 94 94 0c 	call	0x1928	; 0x1928 <waitForMachineStartKey>
    4c2e:	88 23       	and	r24, r24
    4c30:	31 f0       	breq	.+12     	; 0x4c3e <APP_TaskHandler+0x456>
							{
    							macSetLongAlarm(MachineSetupData.KeyPressWaitTime,KeypressTimeOut);
    4c32:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <MachineSetupData>
    4c36:	62 e4       	ldi	r22, 0x42	; 66
    4c38:	71 e2       	ldi	r23, 0x21	; 33
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	1b c1       	rjmp	.+566    	; 0x4e74 <APP_TaskHandler+0x68c>
							}
							else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.								
    4c3e:	62 e4       	ldi	r22, 0x42	; 66
    4c40:	71 e2       	ldi	r23, 0x21	; 33
    4c42:	84 ef       	ldi	r24, 0xF4	; 244
    4c44:	91 e0       	ldi	r25, 0x01	; 1
    4c46:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <macSetAlarm>
    4c4a:	24 c1       	rjmp	.+584    	; 0x4e94 <APP_TaskHandler+0x6ac>
    					}
						#endif	//MDC_MACHINE
					}	//serial number found in server database
					else //serial number error from server database
					{
						CommTimeOut();//TOFlag = 1;	//force timeout condition
    4c4c:	0e 94 39 21 	call	0x4272	; 0x4272 <CommTimeOut>
    4c50:	21 c1       	rjmp	.+578    	; 0x4e94 <APP_TaskHandler+0x6ac>
					}											
                #endif//MDC_MACHINE

			 }
			 else if(TOFlag == 1 || macConfig.associated == false) // server fails to respond in time
    4c52:	80 91 87 08 	lds	r24, 0x0887	; 0x800887 <TOFlag>
    4c56:	81 30       	cpi	r24, 0x01	; 1
    4c58:	11 f0       	breq	.+4      	; 0x4c5e <APP_TaskHandler+0x476>
    4c5a:	21 11       	cpse	r18, r1
    4c5c:	1b c1       	rjmp	.+566    	; 0x4e94 <APP_TaskHandler+0x6ac>

				// Error Occured
				// Re-enter SCANNING mode

				#if(DEVICE_CONNECTED == MDC_MACHINE)
				if ( cardRemoved(REMOVE_CARD) )
    4c5e:	82 e0       	ldi	r24, 0x02	; 2
    4c60:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <cardRemoved>
    4c64:	88 23       	and	r24, r24
    4c66:	09 f4       	brne	.+2      	; 0x4c6a <APP_TaskHandler+0x482>
    4c68:	15 c1       	rjmp	.+554    	; 0x4e94 <APP_TaskHandler+0x6ac>
				{
					//TOFlag = 1;
					ReaderStateFlag.Busy = false;
    4c6a:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4c6e:	8f 7b       	andi	r24, 0xBF	; 191
    4c70:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
					//send error message to machine display
					displayMsg(CARD_ERR_MSG);				
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	0e 94 1c 06 	call	0xc38	; 0xc38 <displayMsg>
    4c7a:	06 c1       	rjmp	.+524    	; 0x4e88 <APP_TaskHandler+0x6a0>
			 break;

		case WAIT_FOR_SELECTION: //wait to see if cycle start has been requested by user

			#if(DEVICE_CONNECTED == MDC_MACHINE)
            if( (MdcStatus.CmdToReader == DEDUCT_VEND_COMMAND || MdcStatus.CmdToReader == DEDUCT_TOPOFF_COMMAND) )
    4c7c:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <MdcStatus+0x5>
    4c80:	86 54       	subi	r24, 0x46	; 70
    4c82:	82 30       	cpi	r24, 0x02	; 2
    4c84:	10 f4       	brcc	.+4      	; 0x4c8a <APP_TaskHandler+0x4a2>
			{
					OP = START_CYCLE; // set only if vend price deduction successful.
    4c86:	8f e0       	ldi	r24, 0x0F	; 15
    4c88:	00 c1       	rjmp	.+512    	; 0x4e8a <APP_TaskHandler+0x6a2>

			}
			else if(KPTOFlag == 1)
    4c8a:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <KPTOFlag>
    4c8e:	81 30       	cpi	r24, 0x01	; 1
    4c90:	09 f0       	breq	.+2      	; 0x4c94 <APP_TaskHandler+0x4ac>
    4c92:	00 c1       	rjmp	.+512    	; 0x4e94 <APP_TaskHandler+0x6ac>
			{			
				if ( cardRemoved(CASH_CARD) )
    4c94:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <cardRemoved>
    4c98:	81 11       	cpse	r24, r1
    4c9a:	f4 c0       	rjmp	.+488    	; 0x4e84 <APP_TaskHandler+0x69c>
    4c9c:	fb c0       	rjmp	.+502    	; 0x4e94 <APP_TaskHandler+0x6ac>

		case START_CYCLE:	// send start cycle command to machine

            #if(DEVICE_CONNECTED == MDC_MACHINE)

			if( startMachineCycle() )//SerialSendMachineData(MACHINE_START_COMMAND) )
    4c9e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <startMachineCycle>
    4ca2:	88 23       	and	r24, r24
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <APP_TaskHandler+0x4c0>
    4ca6:	6a c0       	rjmp	.+212    	; 0x4d7c <APP_TaskHandler+0x594>
				
				structTransaction vend;
				
				
				
				vend.CardId			= CurrentAccount.ID;
    4ca8:	c0 90 89 08 	lds	r12, 0x0889	; 0x800889 <CurrentAccount+0x1>
    4cac:	d0 90 8a 08 	lds	r13, 0x088A	; 0x80088a <CurrentAccount+0x2>
    4cb0:	e0 90 8b 08 	lds	r14, 0x088B	; 0x80088b <CurrentAccount+0x3>
    4cb4:	f0 90 8c 08 	lds	r15, 0x088C	; 0x80088c <CurrentAccount+0x4>
    4cb8:	ca 86       	std	Y+10, r12	; 0x0a
    4cba:	db 86       	std	Y+11, r13	; 0x0b
    4cbc:	ec 86       	std	Y+12, r14	; 0x0c
    4cbe:	fd 86       	std	Y+13, r15	; 0x0d
				vend.vendPrice		= vendPrice * 100;
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	48 ec       	ldi	r20, 0xC8	; 200
    4cc6:	52 e4       	ldi	r21, 0x42	; 66
    4cc8:	60 91 ce 0b 	lds	r22, 0x0BCE	; 0x800bce <vendPrice>
    4ccc:	70 91 cf 0b 	lds	r23, 0x0BCF	; 0x800bcf <vendPrice+0x1>
    4cd0:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <vendPrice+0x2>
    4cd4:	90 91 d1 0b 	lds	r25, 0x0BD1	; 0x800bd1 <vendPrice+0x3>
    4cd8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <__mulsf3>
    4cdc:	9b 01       	movw	r18, r22
    4cde:	ac 01       	movw	r20, r24
    4ce0:	2b a7       	std	Y+43, r18	; 0x2b
    4ce2:	38 a7       	std	Y+40, r19	; 0x28
    4ce4:	49 a7       	std	Y+41, r20	; 0x29
    4ce6:	5a a7       	std	Y+42, r21	; 0x2a
    4ce8:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__fixunssfsi>
    4cec:	79 87       	std	Y+9, r23	; 0x09
    4cee:	68 87       	std	Y+8, r22	; 0x08
				vend.LocationId		= ReaderSetup.locationId;
    4cf0:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <ReaderSetup+0x6>
    4cf4:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <ReaderSetup+0x7>
    4cf8:	9a 83       	std	Y+2, r25	; 0x02
    4cfa:	89 83       	std	Y+1, r24	; 0x01
				vend.ManufactureId	= ReaderSetup.manufacturerId;
    4cfc:	80 91 9b 08 	lds	r24, 0x089B	; 0x80089b <ReaderSetup+0x4>
    4d00:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <ReaderSetup+0x5>
    4d04:	9e 83       	std	Y+6, r25	; 0x06
    4d06:	8d 83       	std	Y+5, r24	; 0x05
				vend.MachineId[0]	= deviceStatus.deviceType[0];
    4d08:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <deviceStatus>
    4d0c:	8b 83       	std	Y+3, r24	; 0x03
				vend.MachineId[1]	= deviceStatus.deviceType[1];
    4d0e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <deviceStatus+0x1>
    4d12:	8c 83       	std	Y+4, r24	; 0x04
				
				
				
				if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
    4d14:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <macConfig+0x8>
    4d18:	2b a5       	ldd	r18, Y+43	; 0x2b
    4d1a:	38 a5       	ldd	r19, Y+40	; 0x28
    4d1c:	49 a5       	ldd	r20, Y+41	; 0x29
    4d1e:	5a a5       	ldd	r21, Y+42	; 0x2a
    4d20:	81 11       	cpse	r24, r1
    4d22:	0b c0       	rjmp	.+22     	; 0x4d3a <APP_TaskHandler+0x552>
    4d24:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4d28:	83 ff       	sbrs	r24, 3
    4d2a:	07 c0       	rjmp	.+14     	; 0x4d3a <APP_TaskHandler+0x552>
				{//must be offline transaction, store a record.
					vend.isOffline = true;
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	8d 8b       	std	Y+21, r24	; 0x15
					storeOfflineTransaction(CurrentAccount.ID);					
    4d30:	c7 01       	movw	r24, r14
    4d32:	b6 01       	movw	r22, r12
    4d34:	0e 94 b6 06 	call	0xd6c	; 0xd6c <storeOfflineTransaction>
    4d38:	1e c0       	rjmp	.+60     	; 0x4d76 <APP_TaskHandler+0x58e>
				}
				else{
					vend.isOffline = false;	
    4d3a:	1d 8a       	std	Y+21, r1	; 0x15
					CurrentAccount.Value -= (vendPrice*100);
    4d3c:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <CurrentAccount+0x7>
    4d40:	90 91 90 08 	lds	r25, 0x0890	; 0x800890 <CurrentAccount+0x8>
    4d44:	bc 01       	movw	r22, r24
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	2b a7       	std	Y+43, r18	; 0x2b
    4d4c:	38 a7       	std	Y+40, r19	; 0x28
    4d4e:	49 a7       	std	Y+41, r20	; 0x29
    4d50:	5a a7       	std	Y+42, r21	; 0x2a
    4d52:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    4d56:	2b a5       	ldd	r18, Y+43	; 0x2b
    4d58:	38 a5       	ldd	r19, Y+40	; 0x28
    4d5a:	49 a5       	ldd	r20, Y+41	; 0x29
    4d5c:	5a a5       	ldd	r21, Y+42	; 0x2a
    4d5e:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__subsf3>
    4d62:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__fixunssfsi>
    4d66:	70 93 90 08 	sts	0x0890, r23	; 0x800890 <CurrentAccount+0x8>
    4d6a:	60 93 8f 08 	sts	0x088F, r22	; 0x80088f <CurrentAccount+0x7>
					sendCCTransaction(&vend);
    4d6e:	ce 01       	movw	r24, r28
    4d70:	01 96       	adiw	r24, 0x01	; 1
    4d72:	0e 94 92 05 	call	0xb24	; 0xb24 <sendCCTransaction>
				}				
				OP = CYCLE_STARTED;
    4d76:	80 e1       	ldi	r24, 0x10	; 16
    4d78:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
				
				//let server know machine is in use.

			}
			
			cardRemoved(CASH_CARD);
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <cardRemoved>
			
				
            #endif

		    break;
    4d82:	88 c0       	rjmp	.+272    	; 0x4e94 <APP_TaskHandler+0x6ac>


              break;
		case SETUP_REQUEST:
		
			if( SETUP_TIMEOUT == true)
    4d84:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SETUP_TIMEOUT>
    4d88:	88 23       	and	r24, r24
    4d8a:	09 f4       	brne	.+2      	; 0x4d8e <APP_TaskHandler+0x5a6>
    4d8c:	83 c0       	rjmp	.+262    	; 0x4e94 <APP_TaskHandler+0x6ac>
			{				
				#if(DEVICE_CONNECTED == MDC_MACHINE)
            
    			#ifdef MACHINE_CONNECTED
    			DevicePoll();
    4d8e:	0e 94 94 23 	call	0x4728	; 0x4728 <DevicePoll>
				#else
    			deviceStatus.deviceType[0] = 33;
				deviceStatus.deviceType[1] = 1;
    			#endif
				#endif //DEVICE_CONNECTED
				sendSetupRequest();
    4d92:	0e 94 92 02 	call	0x524	; 0x524 <sendSetupRequest>
			
				SETUP_TIMEOUT = false;
    4d96:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SETUP_TIMEOUT>
				macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
    4d9a:	66 e4       	ldi	r22, 0x46	; 70
    4d9c:	71 e2       	ldi	r23, 0x21	; 33
    4d9e:	88 e7       	ldi	r24, 0x78	; 120
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	68 c0       	rjmp	.+208    	; 0x4e74 <APP_TaskHandler+0x68c>
          //}
			//break;
			
		case VALIDATE_SETUP: 

		    	if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
    4da4:	4a e4       	ldi	r20, 0x4A	; 74
    4da6:	53 e0       	ldi	r21, 0x03	; 3
    4da8:	6e e5       	ldi	r22, 0x5E	; 94
    4daa:	75 e0       	ldi	r23, 0x05	; 5
    4dac:	89 e3       	ldi	r24, 0x39	; 57
    4dae:	9c e0       	ldi	r25, 0x0C	; 12
    4db0:	0e 94 60 23 	call	0x46c0	; 0x46c0 <GetParam>
    4db4:	7c 01       	movw	r14, r24
    4db6:	00 97       	sbiw	r24, 0x00	; 0
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <APP_TaskHandler+0x5d4>
    4dba:	50 c0       	rjmp	.+160    	; 0x4e5c <APP_TaskHandler+0x674>
				{  
				

					  u8 addr[8];
                      static u8 Len =0;
					  n = strlen(ptr);
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	01 90       	ld	r0, Z+
    4dc0:	00 20       	and	r0, r0
    4dc2:	e9 f7       	brne	.-6      	; 0x4dbe <APP_TaskHandler+0x5d6>
    4dc4:	31 97       	sbiw	r30, 0x01	; 1
    4dc6:	1e 2f       	mov	r17, r30
    4dc8:	18 1b       	sub	r17, r24
				      k = 0;
					  l = 0;
					  			
				    // Get length of Validation code
				   		halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
    4dca:	42 e8       	ldi	r20, 0x82	; 130
    4dcc:	58 e0       	ldi	r21, 0x08	; 8
    4dce:	61 e0       	ldi	r22, 0x01	; 1
    4dd0:	87 e5       	ldi	r24, 0x57	; 87
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>
																    
				   // 	Get Validation Code from EEPROM
						halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
    4dd8:	ae 01       	movw	r20, r28
    4dda:	41 5e       	subi	r20, 0xE1	; 225
    4ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dde:	60 91 82 08 	lds	r22, 0x0882	; 0x800882 <Len.4499>
    4de2:	88 e5       	ldi	r24, 0x58	; 88
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	0e 94 d7 17 	call	0x2fae	; 0x2fae <halGetEeprom>

					  u8 addr[8];
                      static u8 Len =0;
					  n = strlen(ptr);
				      k = 0;
					  l = 0;
    4dea:	00 e0       	ldi	r16, 0x00	; 0
    4dec:	80 2f       	mov	r24, r16
    4dee:	88 0f       	add	r24, r24
				   		halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
																    
				   // 	Get Validation Code from EEPROM
						halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
 
						while (k < n)
    4df0:	81 17       	cp	r24, r17
    4df2:	c8 f4       	brcc	.+50     	; 0x4e26 <APP_TaskHandler+0x63e>
						{
							Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16) 
    4df4:	67 01       	movw	r12, r14
    4df6:	c8 0e       	add	r12, r24
    4df8:	d1 1c       	adc	r13, r1
    4dfa:	d6 01       	movw	r26, r12
    4dfc:	8c 91       	ld	r24, X
    4dfe:	0e 94 1d 21 	call	0x423a	; 0x423a <Ascii_to_nible>
    4e02:	b8 2e       	mov	r11, r24
									 +  Ascii_to_nible ( *(ptr+k+1));
    4e04:	f6 01       	movw	r30, r12
    4e06:	81 81       	ldd	r24, Z+1	; 0x01
    4e08:	0e 94 1d 21 	call	0x423a	; 0x423a <Ascii_to_nible>
				   // 	Get Validation Code from EEPROM
						halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
 
						while (k < n)
						{
							Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16) 
    4e0c:	e1 e0       	ldi	r30, 0x01	; 1
    4e0e:	f0 e0       	ldi	r31, 0x00	; 0
    4e10:	ec 0f       	add	r30, r28
    4e12:	fd 1f       	adc	r31, r29
    4e14:	e0 0f       	add	r30, r16
    4e16:	f1 1d       	adc	r31, r1
    4e18:	20 e1       	ldi	r18, 0x10	; 16
    4e1a:	b2 9e       	mul	r11, r18
    4e1c:	80 0d       	add	r24, r0
    4e1e:	11 24       	eor	r1, r1
    4e20:	80 83       	st	Z, r24
									 +  Ascii_to_nible ( *(ptr+k+1));
							k += 2;
							l++;
    4e22:	0f 5f       	subi	r16, 0xFF	; 255
    4e24:	e3 cf       	rjmp	.-58     	; 0x4dec <APP_TaskHandler+0x604>
						}



				    if(memcmp(addr,Setup,Len) == 0)
    4e26:	40 91 82 08 	lds	r20, 0x0882	; 0x800882 <Len.4499>
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	be 01       	movw	r22, r28
    4e2e:	6f 5f       	subi	r22, 0xFF	; 255
    4e30:	7f 4f       	sbci	r23, 0xFF	; 255
    4e32:	ce 01       	movw	r24, r28
    4e34:	4f 96       	adiw	r24, 0x1f	; 31
    4e36:	0e 94 46 31 	call	0x628c	; 0x628c <memcmp>
    4e3a:	89 2b       	or	r24, r25
    4e3c:	49 f4       	brne	.+18     	; 0x4e50 <APP_TaskHandler+0x668>
					{
                        ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
    4e3e:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <ReaderStateFlag>
    4e42:	8b 7f       	andi	r24, 0xFB	; 251
    4e44:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <ReaderStateFlag>
			            OP = VALIDATE_READER;
    4e48:	83 e1       	ldi	r24, 0x13	; 19
    4e4a:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
    4e4e:	06 c0       	rjmp	.+12     	; 0x4e5c <APP_TaskHandler+0x674>
					}						
					else
					{
					 OP = SETUP_REQUEST; // validation failed, request new setup info
    4e50:	8a e0       	ldi	r24, 0x0A	; 10
    4e52:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
                     SETUP_TIMEOUT = true;
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SETUP_TIMEOUT>
					}					 
				 }

                     // Reposnse TIMEOUT
				if(VALIDATION_TIMEOUT)
    4e5c:	80 91 85 08 	lds	r24, 0x0885	; 0x800885 <VALIDATION_TIMEOUT>
    4e60:	88 23       	and	r24, r24
    4e62:	c1 f0       	breq	.+48     	; 0x4e94 <APP_TaskHandler+0x6ac>
				{
					VALIDATION_TIMEOUT = false;
    4e64:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <VALIDATION_TIMEOUT>
					sendValidationRequest();// Re-send Validation Request
    4e68:	0e 94 bb 02 	call	0x576	; 0x576 <sendValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
    4e6c:	65 e3       	ldi	r22, 0x35	; 53
    4e6e:	71 e2       	ldi	r23, 0x21	; 33
    4e70:	8c e3       	ldi	r24, 0x3C	; 60
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <macSetLongAlarm>
    4e78:	0d c0       	rjmp	.+26     	; 0x4e94 <APP_TaskHandler+0x6ac>
			
			break;
		case SCARD_REMOVED:

            #if(DEVICE_CONNECTED == MDC_MACHINE)
			ucCardStatus = CARD_OUT;
    4e7a:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <ucCardStatus>
			cardRemoved(REMOVE_CARD);
    4e7e:	82 e0       	ldi	r24, 0x02	; 2
    4e80:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <cardRemoved>
			//SerialSendMachineData(CARD_REMOVED);
			#endif

			#if( DEVICE_CONNECTED == MDC_MACHINE )				
				OP = SCANNING;
    4e84:	82 e0       	ldi	r24, 0x02	; 2
    4e86:	01 c0       	rjmp	.+2      	; 0x4e8a <APP_TaskHandler+0x6a2>
			#endif
			
			break;
		case BOW_ERROR:
			OP = IDLE;
    4e88:	87 e2       	ldi	r24, 0x27	; 39
    4e8a:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <OP>
			break;
    4e8e:	02 c0       	rjmp	.+4      	; 0x4e94 <APP_TaskHandler+0x6ac>
			
		case APP_INIT:
			appInit();
    4e90:	0e 94 b8 22 	call	0x4570	; 0x4570 <appInit>
} //switch


}// macConfig.associated

}
    4e94:	ab 96       	adiw	r28, 0x2b	; 43
    4e96:	0f b6       	in	r0, 0x3f	; 63
    4e98:	f8 94       	cli
    4e9a:	de bf       	out	0x3e, r29	; 62
    4e9c:	0f be       	out	0x3f, r0	; 63
    4e9e:	cd bf       	out	0x3d, r28	; 61
    4ea0:	df 91       	pop	r29
    4ea2:	cf 91       	pop	r28
    4ea4:	1f 91       	pop	r17
    4ea6:	0f 91       	pop	r16
    4ea8:	ff 90       	pop	r15
    4eaa:	ef 90       	pop	r14
    4eac:	df 90       	pop	r13
    4eae:	cf 90       	pop	r12
    4eb0:	bf 90       	pop	r11
    4eb2:	08 95       	ret

00004eb4 <vfprintf>:
    4eb4:	2f 92       	push	r2
    4eb6:	3f 92       	push	r3
    4eb8:	4f 92       	push	r4
    4eba:	5f 92       	push	r5
    4ebc:	6f 92       	push	r6
    4ebe:	7f 92       	push	r7
    4ec0:	8f 92       	push	r8
    4ec2:	9f 92       	push	r9
    4ec4:	af 92       	push	r10
    4ec6:	bf 92       	push	r11
    4ec8:	cf 92       	push	r12
    4eca:	df 92       	push	r13
    4ecc:	ef 92       	push	r14
    4ece:	ff 92       	push	r15
    4ed0:	0f 93       	push	r16
    4ed2:	1f 93       	push	r17
    4ed4:	cf 93       	push	r28
    4ed6:	df 93       	push	r29
    4ed8:	cd b7       	in	r28, 0x3d	; 61
    4eda:	de b7       	in	r29, 0x3e	; 62
    4edc:	63 97       	sbiw	r28, 0x13	; 19
    4ede:	0f b6       	in	r0, 0x3f	; 63
    4ee0:	f8 94       	cli
    4ee2:	de bf       	out	0x3e, r29	; 62
    4ee4:	0f be       	out	0x3f, r0	; 63
    4ee6:	cd bf       	out	0x3d, r28	; 61
    4ee8:	6c 01       	movw	r12, r24
    4eea:	4b 01       	movw	r8, r22
    4eec:	2a 01       	movw	r4, r20
    4eee:	fc 01       	movw	r30, r24
    4ef0:	17 82       	std	Z+7, r1	; 0x07
    4ef2:	16 82       	std	Z+6, r1	; 0x06
    4ef4:	83 81       	ldd	r24, Z+3	; 0x03
    4ef6:	81 ff       	sbrs	r24, 1
    4ef8:	43 c3       	rjmp	.+1670   	; 0x5580 <vfprintf+0x6cc>
    4efa:	ae 01       	movw	r20, r28
    4efc:	4f 5f       	subi	r20, 0xFF	; 255
    4efe:	5f 4f       	sbci	r21, 0xFF	; 255
    4f00:	3a 01       	movw	r6, r20
    4f02:	f6 01       	movw	r30, r12
    4f04:	93 81       	ldd	r25, Z+3	; 0x03
    4f06:	f4 01       	movw	r30, r8
    4f08:	93 fd       	sbrc	r25, 3
    4f0a:	85 91       	lpm	r24, Z+
    4f0c:	93 ff       	sbrs	r25, 3
    4f0e:	81 91       	ld	r24, Z+
    4f10:	4f 01       	movw	r8, r30
    4f12:	88 23       	and	r24, r24
    4f14:	09 f4       	brne	.+2      	; 0x4f18 <vfprintf+0x64>
    4f16:	30 c3       	rjmp	.+1632   	; 0x5578 <vfprintf+0x6c4>
    4f18:	85 32       	cpi	r24, 0x25	; 37
    4f1a:	39 f4       	brne	.+14     	; 0x4f2a <vfprintf+0x76>
    4f1c:	93 fd       	sbrc	r25, 3
    4f1e:	85 91       	lpm	r24, Z+
    4f20:	93 ff       	sbrs	r25, 3
    4f22:	81 91       	ld	r24, Z+
    4f24:	4f 01       	movw	r8, r30
    4f26:	85 32       	cpi	r24, 0x25	; 37
    4f28:	39 f4       	brne	.+14     	; 0x4f38 <vfprintf+0x84>
    4f2a:	b6 01       	movw	r22, r12
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    4f32:	52 01       	movw	r10, r4
    4f34:	25 01       	movw	r4, r10
    4f36:	e5 cf       	rjmp	.-54     	; 0x4f02 <vfprintf+0x4e>
    4f38:	10 e0       	ldi	r17, 0x00	; 0
    4f3a:	f1 2c       	mov	r15, r1
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	20 32       	cpi	r18, 0x20	; 32
    4f40:	a0 f4       	brcc	.+40     	; 0x4f6a <vfprintf+0xb6>
    4f42:	8b 32       	cpi	r24, 0x2B	; 43
    4f44:	69 f0       	breq	.+26     	; 0x4f60 <vfprintf+0xac>
    4f46:	30 f4       	brcc	.+12     	; 0x4f54 <vfprintf+0xa0>
    4f48:	80 32       	cpi	r24, 0x20	; 32
    4f4a:	59 f0       	breq	.+22     	; 0x4f62 <vfprintf+0xae>
    4f4c:	83 32       	cpi	r24, 0x23	; 35
    4f4e:	69 f4       	brne	.+26     	; 0x4f6a <vfprintf+0xb6>
    4f50:	20 61       	ori	r18, 0x10	; 16
    4f52:	2c c0       	rjmp	.+88     	; 0x4fac <vfprintf+0xf8>
    4f54:	8d 32       	cpi	r24, 0x2D	; 45
    4f56:	39 f0       	breq	.+14     	; 0x4f66 <vfprintf+0xb2>
    4f58:	80 33       	cpi	r24, 0x30	; 48
    4f5a:	39 f4       	brne	.+14     	; 0x4f6a <vfprintf+0xb6>
    4f5c:	21 60       	ori	r18, 0x01	; 1
    4f5e:	26 c0       	rjmp	.+76     	; 0x4fac <vfprintf+0xf8>
    4f60:	22 60       	ori	r18, 0x02	; 2
    4f62:	24 60       	ori	r18, 0x04	; 4
    4f64:	23 c0       	rjmp	.+70     	; 0x4fac <vfprintf+0xf8>
    4f66:	28 60       	ori	r18, 0x08	; 8
    4f68:	21 c0       	rjmp	.+66     	; 0x4fac <vfprintf+0xf8>
    4f6a:	27 fd       	sbrc	r18, 7
    4f6c:	27 c0       	rjmp	.+78     	; 0x4fbc <vfprintf+0x108>
    4f6e:	30 ed       	ldi	r19, 0xD0	; 208
    4f70:	38 0f       	add	r19, r24
    4f72:	3a 30       	cpi	r19, 0x0A	; 10
    4f74:	78 f4       	brcc	.+30     	; 0x4f94 <vfprintf+0xe0>
    4f76:	26 ff       	sbrs	r18, 6
    4f78:	06 c0       	rjmp	.+12     	; 0x4f86 <vfprintf+0xd2>
    4f7a:	fa e0       	ldi	r31, 0x0A	; 10
    4f7c:	1f 9f       	mul	r17, r31
    4f7e:	30 0d       	add	r19, r0
    4f80:	11 24       	eor	r1, r1
    4f82:	13 2f       	mov	r17, r19
    4f84:	13 c0       	rjmp	.+38     	; 0x4fac <vfprintf+0xf8>
    4f86:	4a e0       	ldi	r20, 0x0A	; 10
    4f88:	f4 9e       	mul	r15, r20
    4f8a:	30 0d       	add	r19, r0
    4f8c:	11 24       	eor	r1, r1
    4f8e:	f3 2e       	mov	r15, r19
    4f90:	20 62       	ori	r18, 0x20	; 32
    4f92:	0c c0       	rjmp	.+24     	; 0x4fac <vfprintf+0xf8>
    4f94:	8e 32       	cpi	r24, 0x2E	; 46
    4f96:	21 f4       	brne	.+8      	; 0x4fa0 <vfprintf+0xec>
    4f98:	26 fd       	sbrc	r18, 6
    4f9a:	ee c2       	rjmp	.+1500   	; 0x5578 <vfprintf+0x6c4>
    4f9c:	20 64       	ori	r18, 0x40	; 64
    4f9e:	06 c0       	rjmp	.+12     	; 0x4fac <vfprintf+0xf8>
    4fa0:	8c 36       	cpi	r24, 0x6C	; 108
    4fa2:	11 f4       	brne	.+4      	; 0x4fa8 <vfprintf+0xf4>
    4fa4:	20 68       	ori	r18, 0x80	; 128
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <vfprintf+0xf8>
    4fa8:	88 36       	cpi	r24, 0x68	; 104
    4faa:	41 f4       	brne	.+16     	; 0x4fbc <vfprintf+0x108>
    4fac:	f4 01       	movw	r30, r8
    4fae:	93 fd       	sbrc	r25, 3
    4fb0:	85 91       	lpm	r24, Z+
    4fb2:	93 ff       	sbrs	r25, 3
    4fb4:	81 91       	ld	r24, Z+
    4fb6:	4f 01       	movw	r8, r30
    4fb8:	81 11       	cpse	r24, r1
    4fba:	c1 cf       	rjmp	.-126    	; 0x4f3e <vfprintf+0x8a>
    4fbc:	9b eb       	ldi	r25, 0xBB	; 187
    4fbe:	98 0f       	add	r25, r24
    4fc0:	93 30       	cpi	r25, 0x03	; 3
    4fc2:	18 f4       	brcc	.+6      	; 0x4fca <vfprintf+0x116>
    4fc4:	20 61       	ori	r18, 0x10	; 16
    4fc6:	80 5e       	subi	r24, 0xE0	; 224
    4fc8:	06 c0       	rjmp	.+12     	; 0x4fd6 <vfprintf+0x122>
    4fca:	9b e9       	ldi	r25, 0x9B	; 155
    4fcc:	98 0f       	add	r25, r24
    4fce:	93 30       	cpi	r25, 0x03	; 3
    4fd0:	08 f0       	brcs	.+2      	; 0x4fd4 <vfprintf+0x120>
    4fd2:	71 c1       	rjmp	.+738    	; 0x52b6 <vfprintf+0x402>
    4fd4:	2f 7e       	andi	r18, 0xEF	; 239
    4fd6:	26 ff       	sbrs	r18, 6
    4fd8:	16 e0       	ldi	r17, 0x06	; 6
    4fda:	2f 73       	andi	r18, 0x3F	; 63
    4fdc:	32 2e       	mov	r3, r18
    4fde:	85 36       	cpi	r24, 0x65	; 101
    4fe0:	19 f4       	brne	.+6      	; 0x4fe8 <vfprintf+0x134>
    4fe2:	20 64       	ori	r18, 0x40	; 64
    4fe4:	32 2e       	mov	r3, r18
    4fe6:	08 c0       	rjmp	.+16     	; 0x4ff8 <vfprintf+0x144>
    4fe8:	86 36       	cpi	r24, 0x66	; 102
    4fea:	21 f4       	brne	.+8      	; 0x4ff4 <vfprintf+0x140>
    4fec:	f2 2f       	mov	r31, r18
    4fee:	f0 68       	ori	r31, 0x80	; 128
    4ff0:	3f 2e       	mov	r3, r31
    4ff2:	02 c0       	rjmp	.+4      	; 0x4ff8 <vfprintf+0x144>
    4ff4:	11 11       	cpse	r17, r1
    4ff6:	11 50       	subi	r17, 0x01	; 1
    4ff8:	37 fe       	sbrs	r3, 7
    4ffa:	07 c0       	rjmp	.+14     	; 0x500a <vfprintf+0x156>
    4ffc:	1c 33       	cpi	r17, 0x3C	; 60
    4ffe:	50 f4       	brcc	.+20     	; 0x5014 <vfprintf+0x160>
    5000:	ee 24       	eor	r14, r14
    5002:	e3 94       	inc	r14
    5004:	e1 0e       	add	r14, r17
    5006:	27 e0       	ldi	r18, 0x07	; 7
    5008:	0b c0       	rjmp	.+22     	; 0x5020 <vfprintf+0x16c>
    500a:	18 30       	cpi	r17, 0x08	; 8
    500c:	38 f0       	brcs	.+14     	; 0x501c <vfprintf+0x168>
    500e:	27 e0       	ldi	r18, 0x07	; 7
    5010:	17 e0       	ldi	r17, 0x07	; 7
    5012:	05 c0       	rjmp	.+10     	; 0x501e <vfprintf+0x16a>
    5014:	27 e0       	ldi	r18, 0x07	; 7
    5016:	4c e3       	ldi	r20, 0x3C	; 60
    5018:	e4 2e       	mov	r14, r20
    501a:	02 c0       	rjmp	.+4      	; 0x5020 <vfprintf+0x16c>
    501c:	21 2f       	mov	r18, r17
    501e:	e1 2c       	mov	r14, r1
    5020:	52 01       	movw	r10, r4
    5022:	44 e0       	ldi	r20, 0x04	; 4
    5024:	a4 0e       	add	r10, r20
    5026:	b1 1c       	adc	r11, r1
    5028:	f2 01       	movw	r30, r4
    502a:	60 81       	ld	r22, Z
    502c:	71 81       	ldd	r23, Z+1	; 0x01
    502e:	82 81       	ldd	r24, Z+2	; 0x02
    5030:	93 81       	ldd	r25, Z+3	; 0x03
    5032:	0e 2d       	mov	r16, r14
    5034:	a3 01       	movw	r20, r6
    5036:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <__ftoa_engine>
    503a:	2c 01       	movw	r4, r24
    503c:	09 81       	ldd	r16, Y+1	; 0x01
    503e:	00 ff       	sbrs	r16, 0
    5040:	02 c0       	rjmp	.+4      	; 0x5046 <vfprintf+0x192>
    5042:	03 ff       	sbrs	r16, 3
    5044:	07 c0       	rjmp	.+14     	; 0x5054 <vfprintf+0x1a0>
    5046:	31 fc       	sbrc	r3, 1
    5048:	08 c0       	rjmp	.+16     	; 0x505a <vfprintf+0x1a6>
    504a:	32 fe       	sbrs	r3, 2
    504c:	09 c0       	rjmp	.+18     	; 0x5060 <vfprintf+0x1ac>
    504e:	30 e2       	ldi	r19, 0x20	; 32
    5050:	23 2e       	mov	r2, r19
    5052:	07 c0       	rjmp	.+14     	; 0x5062 <vfprintf+0x1ae>
    5054:	2d e2       	ldi	r18, 0x2D	; 45
    5056:	22 2e       	mov	r2, r18
    5058:	04 c0       	rjmp	.+8      	; 0x5062 <vfprintf+0x1ae>
    505a:	9b e2       	ldi	r25, 0x2B	; 43
    505c:	29 2e       	mov	r2, r25
    505e:	01 c0       	rjmp	.+2      	; 0x5062 <vfprintf+0x1ae>
    5060:	21 2c       	mov	r2, r1
    5062:	80 2f       	mov	r24, r16
    5064:	8c 70       	andi	r24, 0x0C	; 12
    5066:	19 f0       	breq	.+6      	; 0x506e <vfprintf+0x1ba>
    5068:	21 10       	cpse	r2, r1
    506a:	68 c2       	rjmp	.+1232   	; 0x553c <vfprintf+0x688>
    506c:	a8 c2       	rjmp	.+1360   	; 0x55be <vfprintf+0x70a>
    506e:	37 fe       	sbrs	r3, 7
    5070:	0f c0       	rjmp	.+30     	; 0x5090 <vfprintf+0x1dc>
    5072:	e4 0c       	add	r14, r4
    5074:	04 ff       	sbrs	r16, 4
    5076:	04 c0       	rjmp	.+8      	; 0x5080 <vfprintf+0x1cc>
    5078:	8a 81       	ldd	r24, Y+2	; 0x02
    507a:	81 33       	cpi	r24, 0x31	; 49
    507c:	09 f4       	brne	.+2      	; 0x5080 <vfprintf+0x1cc>
    507e:	ea 94       	dec	r14
    5080:	1e 14       	cp	r1, r14
    5082:	74 f5       	brge	.+92     	; 0x50e0 <vfprintf+0x22c>
    5084:	f8 e0       	ldi	r31, 0x08	; 8
    5086:	fe 15       	cp	r31, r14
    5088:	78 f5       	brcc	.+94     	; 0x50e8 <vfprintf+0x234>
    508a:	88 e0       	ldi	r24, 0x08	; 8
    508c:	e8 2e       	mov	r14, r24
    508e:	2c c0       	rjmp	.+88     	; 0x50e8 <vfprintf+0x234>
    5090:	36 fc       	sbrc	r3, 6
    5092:	2a c0       	rjmp	.+84     	; 0x50e8 <vfprintf+0x234>
    5094:	81 2f       	mov	r24, r17
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	84 15       	cp	r24, r4
    509a:	95 05       	cpc	r25, r5
    509c:	9c f0       	brlt	.+38     	; 0x50c4 <vfprintf+0x210>
    509e:	2c ef       	ldi	r18, 0xFC	; 252
    50a0:	42 16       	cp	r4, r18
    50a2:	2f ef       	ldi	r18, 0xFF	; 255
    50a4:	52 06       	cpc	r5, r18
    50a6:	74 f0       	brlt	.+28     	; 0x50c4 <vfprintf+0x210>
    50a8:	43 2d       	mov	r20, r3
    50aa:	40 68       	ori	r20, 0x80	; 128
    50ac:	34 2e       	mov	r3, r20
    50ae:	0a c0       	rjmp	.+20     	; 0x50c4 <vfprintf+0x210>
    50b0:	e2 e0       	ldi	r30, 0x02	; 2
    50b2:	f0 e0       	ldi	r31, 0x00	; 0
    50b4:	ec 0f       	add	r30, r28
    50b6:	fd 1f       	adc	r31, r29
    50b8:	e1 0f       	add	r30, r17
    50ba:	f1 1d       	adc	r31, r1
    50bc:	80 81       	ld	r24, Z
    50be:	80 33       	cpi	r24, 0x30	; 48
    50c0:	19 f4       	brne	.+6      	; 0x50c8 <vfprintf+0x214>
    50c2:	11 50       	subi	r17, 0x01	; 1
    50c4:	11 11       	cpse	r17, r1
    50c6:	f4 cf       	rjmp	.-24     	; 0x50b0 <vfprintf+0x1fc>
    50c8:	37 fe       	sbrs	r3, 7
    50ca:	0e c0       	rjmp	.+28     	; 0x50e8 <vfprintf+0x234>
    50cc:	ee 24       	eor	r14, r14
    50ce:	e3 94       	inc	r14
    50d0:	e1 0e       	add	r14, r17
    50d2:	81 2f       	mov	r24, r17
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	48 16       	cp	r4, r24
    50d8:	59 06       	cpc	r5, r25
    50da:	2c f4       	brge	.+10     	; 0x50e6 <vfprintf+0x232>
    50dc:	14 19       	sub	r17, r4
    50de:	04 c0       	rjmp	.+8      	; 0x50e8 <vfprintf+0x234>
    50e0:	ee 24       	eor	r14, r14
    50e2:	e3 94       	inc	r14
    50e4:	01 c0       	rjmp	.+2      	; 0x50e8 <vfprintf+0x234>
    50e6:	10 e0       	ldi	r17, 0x00	; 0
    50e8:	37 fe       	sbrs	r3, 7
    50ea:	06 c0       	rjmp	.+12     	; 0x50f8 <vfprintf+0x244>
    50ec:	14 14       	cp	r1, r4
    50ee:	15 04       	cpc	r1, r5
    50f0:	34 f4       	brge	.+12     	; 0x50fe <vfprintf+0x24a>
    50f2:	c2 01       	movw	r24, r4
    50f4:	01 96       	adiw	r24, 0x01	; 1
    50f6:	05 c0       	rjmp	.+10     	; 0x5102 <vfprintf+0x24e>
    50f8:	85 e0       	ldi	r24, 0x05	; 5
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	02 c0       	rjmp	.+4      	; 0x5102 <vfprintf+0x24e>
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	21 10       	cpse	r2, r1
    5104:	01 96       	adiw	r24, 0x01	; 1
    5106:	11 23       	and	r17, r17
    5108:	31 f0       	breq	.+12     	; 0x5116 <vfprintf+0x262>
    510a:	21 2f       	mov	r18, r17
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	2f 5f       	subi	r18, 0xFF	; 255
    5110:	3f 4f       	sbci	r19, 0xFF	; 255
    5112:	82 0f       	add	r24, r18
    5114:	93 1f       	adc	r25, r19
    5116:	2f 2d       	mov	r18, r15
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	82 17       	cp	r24, r18
    511c:	93 07       	cpc	r25, r19
    511e:	14 f4       	brge	.+4      	; 0x5124 <vfprintf+0x270>
    5120:	f8 1a       	sub	r15, r24
    5122:	01 c0       	rjmp	.+2      	; 0x5126 <vfprintf+0x272>
    5124:	f1 2c       	mov	r15, r1
    5126:	83 2d       	mov	r24, r3
    5128:	89 70       	andi	r24, 0x09	; 9
    512a:	49 f4       	brne	.+18     	; 0x513e <vfprintf+0x28a>
    512c:	ff 20       	and	r15, r15
    512e:	39 f0       	breq	.+14     	; 0x513e <vfprintf+0x28a>
    5130:	b6 01       	movw	r22, r12
    5132:	80 e2       	ldi	r24, 0x20	; 32
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    513a:	fa 94       	dec	r15
    513c:	f7 cf       	rjmp	.-18     	; 0x512c <vfprintf+0x278>
    513e:	22 20       	and	r2, r2
    5140:	29 f0       	breq	.+10     	; 0x514c <vfprintf+0x298>
    5142:	b6 01       	movw	r22, r12
    5144:	82 2d       	mov	r24, r2
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    514c:	33 fc       	sbrc	r3, 3
    514e:	09 c0       	rjmp	.+18     	; 0x5162 <vfprintf+0x2ae>
    5150:	ff 20       	and	r15, r15
    5152:	39 f0       	breq	.+14     	; 0x5162 <vfprintf+0x2ae>
    5154:	b6 01       	movw	r22, r12
    5156:	80 e3       	ldi	r24, 0x30	; 48
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    515e:	fa 94       	dec	r15
    5160:	f7 cf       	rjmp	.-18     	; 0x5150 <vfprintf+0x29c>
    5162:	37 fe       	sbrs	r3, 7
    5164:	5a c0       	rjmp	.+180    	; 0x521a <vfprintf+0x366>
    5166:	94 2d       	mov	r25, r4
    5168:	85 2d       	mov	r24, r5
    516a:	57 fe       	sbrs	r5, 7
    516c:	02 c0       	rjmp	.+4      	; 0x5172 <vfprintf+0x2be>
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	29 2e       	mov	r2, r25
    5174:	38 2e       	mov	r3, r24
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	a2 01       	movw	r20, r4
    517c:	4e 19       	sub	r20, r14
    517e:	51 09       	sbc	r21, r1
    5180:	5d 87       	std	Y+13, r21	; 0x0d
    5182:	4c 87       	std	Y+12, r20	; 0x0c
    5184:	a2 01       	movw	r20, r4
    5186:	42 19       	sub	r20, r2
    5188:	53 09       	sbc	r21, r3
    518a:	5f 87       	std	Y+15, r21	; 0x0f
    518c:	4e 87       	std	Y+14, r20	; 0x0e
    518e:	61 2f       	mov	r22, r17
    5190:	70 e0       	ldi	r23, 0x00	; 0
    5192:	44 27       	eor	r20, r20
    5194:	55 27       	eor	r21, r21
    5196:	46 1b       	sub	r20, r22
    5198:	57 0b       	sbc	r21, r23
    519a:	59 8b       	std	Y+17, r21	; 0x11
    519c:	48 8b       	std	Y+16, r20	; 0x10
    519e:	5f ef       	ldi	r21, 0xFF	; 255
    51a0:	25 16       	cp	r2, r21
    51a2:	35 06       	cpc	r3, r21
    51a4:	49 f4       	brne	.+18     	; 0x51b8 <vfprintf+0x304>
    51a6:	b6 01       	movw	r22, r12
    51a8:	8e e2       	ldi	r24, 0x2E	; 46
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	2a 8b       	std	Y+18, r18	; 0x12
    51ae:	3b 8b       	std	Y+19, r19	; 0x13
    51b0:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    51b4:	3b 89       	ldd	r19, Y+19	; 0x13
    51b6:	2a 89       	ldd	r18, Y+18	; 0x12
    51b8:	42 14       	cp	r4, r2
    51ba:	53 04       	cpc	r5, r3
    51bc:	6c f0       	brlt	.+26     	; 0x51d8 <vfprintf+0x324>
    51be:	4c 85       	ldd	r20, Y+12	; 0x0c
    51c0:	5d 85       	ldd	r21, Y+13	; 0x0d
    51c2:	42 15       	cp	r20, r2
    51c4:	53 05       	cpc	r21, r3
    51c6:	44 f4       	brge	.+16     	; 0x51d8 <vfprintf+0x324>
    51c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    51ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    51cc:	e2 0f       	add	r30, r18
    51ce:	f3 1f       	adc	r31, r19
    51d0:	e6 0d       	add	r30, r6
    51d2:	f7 1d       	adc	r31, r7
    51d4:	81 81       	ldd	r24, Z+1	; 0x01
    51d6:	01 c0       	rjmp	.+2      	; 0x51da <vfprintf+0x326>
    51d8:	80 e3       	ldi	r24, 0x30	; 48
    51da:	51 e0       	ldi	r21, 0x01	; 1
    51dc:	25 1a       	sub	r2, r21
    51de:	31 08       	sbc	r3, r1
    51e0:	2f 5f       	subi	r18, 0xFF	; 255
    51e2:	3f 4f       	sbci	r19, 0xFF	; 255
    51e4:	48 89       	ldd	r20, Y+16	; 0x10
    51e6:	59 89       	ldd	r21, Y+17	; 0x11
    51e8:	24 16       	cp	r2, r20
    51ea:	35 06       	cpc	r3, r21
    51ec:	4c f0       	brlt	.+18     	; 0x5200 <vfprintf+0x34c>
    51ee:	b6 01       	movw	r22, r12
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	2a 8b       	std	Y+18, r18	; 0x12
    51f4:	3b 8b       	std	Y+19, r19	; 0x13
    51f6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    51fa:	2a 89       	ldd	r18, Y+18	; 0x12
    51fc:	3b 89       	ldd	r19, Y+19	; 0x13
    51fe:	cf cf       	rjmp	.-98     	; 0x519e <vfprintf+0x2ea>
    5200:	24 14       	cp	r2, r4
    5202:	35 04       	cpc	r3, r5
    5204:	39 f4       	brne	.+14     	; 0x5214 <vfprintf+0x360>
    5206:	9a 81       	ldd	r25, Y+2	; 0x02
    5208:	96 33       	cpi	r25, 0x36	; 54
    520a:	18 f4       	brcc	.+6      	; 0x5212 <vfprintf+0x35e>
    520c:	95 33       	cpi	r25, 0x35	; 53
    520e:	11 f4       	brne	.+4      	; 0x5214 <vfprintf+0x360>
    5210:	04 ff       	sbrs	r16, 4
    5212:	81 e3       	ldi	r24, 0x31	; 49
    5214:	b6 01       	movw	r22, r12
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	4b c0       	rjmp	.+150    	; 0x52b0 <vfprintf+0x3fc>
    521a:	8a 81       	ldd	r24, Y+2	; 0x02
    521c:	81 33       	cpi	r24, 0x31	; 49
    521e:	09 f0       	breq	.+2      	; 0x5222 <vfprintf+0x36e>
    5220:	0f 7e       	andi	r16, 0xEF	; 239
    5222:	b6 01       	movw	r22, r12
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    522a:	11 11       	cpse	r17, r1
    522c:	05 c0       	rjmp	.+10     	; 0x5238 <vfprintf+0x384>
    522e:	34 fc       	sbrc	r3, 4
    5230:	18 c0       	rjmp	.+48     	; 0x5262 <vfprintf+0x3ae>
    5232:	85 e6       	ldi	r24, 0x65	; 101
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	17 c0       	rjmp	.+46     	; 0x5266 <vfprintf+0x3b2>
    5238:	b6 01       	movw	r22, r12
    523a:	8e e2       	ldi	r24, 0x2E	; 46
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5242:	82 e0       	ldi	r24, 0x02	; 2
    5244:	ee 24       	eor	r14, r14
    5246:	e3 94       	inc	r14
    5248:	e8 0e       	add	r14, r24
    524a:	f3 01       	movw	r30, r6
    524c:	e8 0f       	add	r30, r24
    524e:	f1 1d       	adc	r31, r1
    5250:	80 81       	ld	r24, Z
    5252:	b6 01       	movw	r22, r12
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    525a:	11 50       	subi	r17, 0x01	; 1
    525c:	8e 2d       	mov	r24, r14
    525e:	91 f7       	brne	.-28     	; 0x5244 <vfprintf+0x390>
    5260:	e6 cf       	rjmp	.-52     	; 0x522e <vfprintf+0x37a>
    5262:	85 e4       	ldi	r24, 0x45	; 69
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	b6 01       	movw	r22, r12
    5268:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    526c:	57 fc       	sbrc	r5, 7
    526e:	05 c0       	rjmp	.+10     	; 0x527a <vfprintf+0x3c6>
    5270:	41 14       	cp	r4, r1
    5272:	51 04       	cpc	r5, r1
    5274:	39 f4       	brne	.+14     	; 0x5284 <vfprintf+0x3d0>
    5276:	04 ff       	sbrs	r16, 4
    5278:	05 c0       	rjmp	.+10     	; 0x5284 <vfprintf+0x3d0>
    527a:	51 94       	neg	r5
    527c:	41 94       	neg	r4
    527e:	51 08       	sbc	r5, r1
    5280:	8d e2       	ldi	r24, 0x2D	; 45
    5282:	01 c0       	rjmp	.+2      	; 0x5286 <vfprintf+0x3d2>
    5284:	8b e2       	ldi	r24, 0x2B	; 43
    5286:	b6 01       	movw	r22, r12
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    528e:	80 e3       	ldi	r24, 0x30	; 48
    5290:	9a e0       	ldi	r25, 0x0A	; 10
    5292:	49 16       	cp	r4, r25
    5294:	51 04       	cpc	r5, r1
    5296:	2c f0       	brlt	.+10     	; 0x52a2 <vfprintf+0x3ee>
    5298:	8f 5f       	subi	r24, 0xFF	; 255
    529a:	5a e0       	ldi	r21, 0x0A	; 10
    529c:	45 1a       	sub	r4, r21
    529e:	51 08       	sbc	r5, r1
    52a0:	f7 cf       	rjmp	.-18     	; 0x5290 <vfprintf+0x3dc>
    52a2:	b6 01       	movw	r22, r12
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    52aa:	b6 01       	movw	r22, r12
    52ac:	c2 01       	movw	r24, r4
    52ae:	c0 96       	adiw	r24, 0x30	; 48
    52b0:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    52b4:	57 c1       	rjmp	.+686    	; 0x5564 <vfprintf+0x6b0>
    52b6:	83 36       	cpi	r24, 0x63	; 99
    52b8:	31 f0       	breq	.+12     	; 0x52c6 <vfprintf+0x412>
    52ba:	83 37       	cpi	r24, 0x73	; 115
    52bc:	79 f0       	breq	.+30     	; 0x52dc <vfprintf+0x428>
    52be:	83 35       	cpi	r24, 0x53	; 83
    52c0:	09 f0       	breq	.+2      	; 0x52c4 <vfprintf+0x410>
    52c2:	58 c0       	rjmp	.+176    	; 0x5374 <vfprintf+0x4c0>
    52c4:	21 c0       	rjmp	.+66     	; 0x5308 <vfprintf+0x454>
    52c6:	52 01       	movw	r10, r4
    52c8:	e2 e0       	ldi	r30, 0x02	; 2
    52ca:	ae 0e       	add	r10, r30
    52cc:	b1 1c       	adc	r11, r1
    52ce:	f2 01       	movw	r30, r4
    52d0:	80 81       	ld	r24, Z
    52d2:	89 83       	std	Y+1, r24	; 0x01
    52d4:	01 e0       	ldi	r16, 0x01	; 1
    52d6:	10 e0       	ldi	r17, 0x00	; 0
    52d8:	23 01       	movw	r4, r6
    52da:	14 c0       	rjmp	.+40     	; 0x5304 <vfprintf+0x450>
    52dc:	52 01       	movw	r10, r4
    52de:	f2 e0       	ldi	r31, 0x02	; 2
    52e0:	af 0e       	add	r10, r31
    52e2:	b1 1c       	adc	r11, r1
    52e4:	f2 01       	movw	r30, r4
    52e6:	40 80       	ld	r4, Z
    52e8:	51 80       	ldd	r5, Z+1	; 0x01
    52ea:	26 ff       	sbrs	r18, 6
    52ec:	03 c0       	rjmp	.+6      	; 0x52f4 <vfprintf+0x440>
    52ee:	61 2f       	mov	r22, r17
    52f0:	70 e0       	ldi	r23, 0x00	; 0
    52f2:	02 c0       	rjmp	.+4      	; 0x52f8 <vfprintf+0x444>
    52f4:	6f ef       	ldi	r22, 0xFF	; 255
    52f6:	7f ef       	ldi	r23, 0xFF	; 255
    52f8:	c2 01       	movw	r24, r4
    52fa:	2a 8b       	std	Y+18, r18	; 0x12
    52fc:	0e 94 86 31 	call	0x630c	; 0x630c <strnlen>
    5300:	8c 01       	movw	r16, r24
    5302:	2a 89       	ldd	r18, Y+18	; 0x12
    5304:	2f 77       	andi	r18, 0x7F	; 127
    5306:	15 c0       	rjmp	.+42     	; 0x5332 <vfprintf+0x47e>
    5308:	52 01       	movw	r10, r4
    530a:	f2 e0       	ldi	r31, 0x02	; 2
    530c:	af 0e       	add	r10, r31
    530e:	b1 1c       	adc	r11, r1
    5310:	f2 01       	movw	r30, r4
    5312:	40 80       	ld	r4, Z
    5314:	51 80       	ldd	r5, Z+1	; 0x01
    5316:	26 ff       	sbrs	r18, 6
    5318:	03 c0       	rjmp	.+6      	; 0x5320 <vfprintf+0x46c>
    531a:	61 2f       	mov	r22, r17
    531c:	70 e0       	ldi	r23, 0x00	; 0
    531e:	02 c0       	rjmp	.+4      	; 0x5324 <vfprintf+0x470>
    5320:	6f ef       	ldi	r22, 0xFF	; 255
    5322:	7f ef       	ldi	r23, 0xFF	; 255
    5324:	c2 01       	movw	r24, r4
    5326:	2a 8b       	std	Y+18, r18	; 0x12
    5328:	0e 94 3b 31 	call	0x6276	; 0x6276 <strnlen_P>
    532c:	8c 01       	movw	r16, r24
    532e:	2a 89       	ldd	r18, Y+18	; 0x12
    5330:	20 68       	ori	r18, 0x80	; 128
    5332:	32 2e       	mov	r3, r18
    5334:	23 fd       	sbrc	r18, 3
    5336:	1a c0       	rjmp	.+52     	; 0x536c <vfprintf+0x4b8>
    5338:	8f 2d       	mov	r24, r15
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	08 17       	cp	r16, r24
    533e:	19 07       	cpc	r17, r25
    5340:	a8 f4       	brcc	.+42     	; 0x536c <vfprintf+0x4b8>
    5342:	b6 01       	movw	r22, r12
    5344:	80 e2       	ldi	r24, 0x20	; 32
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    534c:	fa 94       	dec	r15
    534e:	f4 cf       	rjmp	.-24     	; 0x5338 <vfprintf+0x484>
    5350:	f2 01       	movw	r30, r4
    5352:	37 fc       	sbrc	r3, 7
    5354:	85 91       	lpm	r24, Z+
    5356:	37 fe       	sbrs	r3, 7
    5358:	81 91       	ld	r24, Z+
    535a:	2f 01       	movw	r4, r30
    535c:	b6 01       	movw	r22, r12
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5364:	f1 10       	cpse	r15, r1
    5366:	fa 94       	dec	r15
    5368:	01 50       	subi	r16, 0x01	; 1
    536a:	11 09       	sbc	r17, r1
    536c:	01 15       	cp	r16, r1
    536e:	11 05       	cpc	r17, r1
    5370:	79 f7       	brne	.-34     	; 0x5350 <vfprintf+0x49c>
    5372:	f8 c0       	rjmp	.+496    	; 0x5564 <vfprintf+0x6b0>
    5374:	84 36       	cpi	r24, 0x64	; 100
    5376:	11 f0       	breq	.+4      	; 0x537c <vfprintf+0x4c8>
    5378:	89 36       	cpi	r24, 0x69	; 105
    537a:	59 f5       	brne	.+86     	; 0x53d2 <vfprintf+0x51e>
    537c:	52 01       	movw	r10, r4
    537e:	27 ff       	sbrs	r18, 7
    5380:	09 c0       	rjmp	.+18     	; 0x5394 <vfprintf+0x4e0>
    5382:	f4 e0       	ldi	r31, 0x04	; 4
    5384:	af 0e       	add	r10, r31
    5386:	b1 1c       	adc	r11, r1
    5388:	f2 01       	movw	r30, r4
    538a:	60 81       	ld	r22, Z
    538c:	71 81       	ldd	r23, Z+1	; 0x01
    538e:	82 81       	ldd	r24, Z+2	; 0x02
    5390:	93 81       	ldd	r25, Z+3	; 0x03
    5392:	0a c0       	rjmp	.+20     	; 0x53a8 <vfprintf+0x4f4>
    5394:	f2 e0       	ldi	r31, 0x02	; 2
    5396:	af 0e       	add	r10, r31
    5398:	b1 1c       	adc	r11, r1
    539a:	f2 01       	movw	r30, r4
    539c:	60 81       	ld	r22, Z
    539e:	71 81       	ldd	r23, Z+1	; 0x01
    53a0:	07 2e       	mov	r0, r23
    53a2:	00 0c       	add	r0, r0
    53a4:	88 0b       	sbc	r24, r24
    53a6:	99 0b       	sbc	r25, r25
    53a8:	2f 76       	andi	r18, 0x6F	; 111
    53aa:	32 2e       	mov	r3, r18
    53ac:	97 ff       	sbrs	r25, 7
    53ae:	09 c0       	rjmp	.+18     	; 0x53c2 <vfprintf+0x50e>
    53b0:	90 95       	com	r25
    53b2:	80 95       	com	r24
    53b4:	70 95       	com	r23
    53b6:	61 95       	neg	r22
    53b8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ba:	8f 4f       	sbci	r24, 0xFF	; 255
    53bc:	9f 4f       	sbci	r25, 0xFF	; 255
    53be:	20 68       	ori	r18, 0x80	; 128
    53c0:	32 2e       	mov	r3, r18
    53c2:	2a e0       	ldi	r18, 0x0A	; 10
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	a3 01       	movw	r20, r6
    53c8:	0e 94 3d 32 	call	0x647a	; 0x647a <__ultoa_invert>
    53cc:	e8 2e       	mov	r14, r24
    53ce:	e6 18       	sub	r14, r6
    53d0:	3f c0       	rjmp	.+126    	; 0x5450 <vfprintf+0x59c>
    53d2:	02 2f       	mov	r16, r18
    53d4:	85 37       	cpi	r24, 0x75	; 117
    53d6:	21 f4       	brne	.+8      	; 0x53e0 <vfprintf+0x52c>
    53d8:	0f 7e       	andi	r16, 0xEF	; 239
    53da:	2a e0       	ldi	r18, 0x0A	; 10
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	1d c0       	rjmp	.+58     	; 0x541a <vfprintf+0x566>
    53e0:	09 7f       	andi	r16, 0xF9	; 249
    53e2:	8f 36       	cpi	r24, 0x6F	; 111
    53e4:	91 f0       	breq	.+36     	; 0x540a <vfprintf+0x556>
    53e6:	18 f4       	brcc	.+6      	; 0x53ee <vfprintf+0x53a>
    53e8:	88 35       	cpi	r24, 0x58	; 88
    53ea:	59 f0       	breq	.+22     	; 0x5402 <vfprintf+0x54e>
    53ec:	c5 c0       	rjmp	.+394    	; 0x5578 <vfprintf+0x6c4>
    53ee:	80 37       	cpi	r24, 0x70	; 112
    53f0:	19 f0       	breq	.+6      	; 0x53f8 <vfprintf+0x544>
    53f2:	88 37       	cpi	r24, 0x78	; 120
    53f4:	11 f0       	breq	.+4      	; 0x53fa <vfprintf+0x546>
    53f6:	c0 c0       	rjmp	.+384    	; 0x5578 <vfprintf+0x6c4>
    53f8:	00 61       	ori	r16, 0x10	; 16
    53fa:	04 ff       	sbrs	r16, 4
    53fc:	09 c0       	rjmp	.+18     	; 0x5410 <vfprintf+0x55c>
    53fe:	04 60       	ori	r16, 0x04	; 4
    5400:	07 c0       	rjmp	.+14     	; 0x5410 <vfprintf+0x55c>
    5402:	24 ff       	sbrs	r18, 4
    5404:	08 c0       	rjmp	.+16     	; 0x5416 <vfprintf+0x562>
    5406:	06 60       	ori	r16, 0x06	; 6
    5408:	06 c0       	rjmp	.+12     	; 0x5416 <vfprintf+0x562>
    540a:	28 e0       	ldi	r18, 0x08	; 8
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	05 c0       	rjmp	.+10     	; 0x541a <vfprintf+0x566>
    5410:	20 e1       	ldi	r18, 0x10	; 16
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	02 c0       	rjmp	.+4      	; 0x541a <vfprintf+0x566>
    5416:	20 e1       	ldi	r18, 0x10	; 16
    5418:	32 e0       	ldi	r19, 0x02	; 2
    541a:	52 01       	movw	r10, r4
    541c:	07 ff       	sbrs	r16, 7
    541e:	09 c0       	rjmp	.+18     	; 0x5432 <vfprintf+0x57e>
    5420:	f4 e0       	ldi	r31, 0x04	; 4
    5422:	af 0e       	add	r10, r31
    5424:	b1 1c       	adc	r11, r1
    5426:	f2 01       	movw	r30, r4
    5428:	60 81       	ld	r22, Z
    542a:	71 81       	ldd	r23, Z+1	; 0x01
    542c:	82 81       	ldd	r24, Z+2	; 0x02
    542e:	93 81       	ldd	r25, Z+3	; 0x03
    5430:	08 c0       	rjmp	.+16     	; 0x5442 <vfprintf+0x58e>
    5432:	f2 e0       	ldi	r31, 0x02	; 2
    5434:	af 0e       	add	r10, r31
    5436:	b1 1c       	adc	r11, r1
    5438:	f2 01       	movw	r30, r4
    543a:	60 81       	ld	r22, Z
    543c:	71 81       	ldd	r23, Z+1	; 0x01
    543e:	80 e0       	ldi	r24, 0x00	; 0
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	a3 01       	movw	r20, r6
    5444:	0e 94 3d 32 	call	0x647a	; 0x647a <__ultoa_invert>
    5448:	e8 2e       	mov	r14, r24
    544a:	e6 18       	sub	r14, r6
    544c:	0f 77       	andi	r16, 0x7F	; 127
    544e:	30 2e       	mov	r3, r16
    5450:	36 fe       	sbrs	r3, 6
    5452:	0b c0       	rjmp	.+22     	; 0x546a <vfprintf+0x5b6>
    5454:	33 2d       	mov	r19, r3
    5456:	3e 7f       	andi	r19, 0xFE	; 254
    5458:	e1 16       	cp	r14, r17
    545a:	50 f4       	brcc	.+20     	; 0x5470 <vfprintf+0x5bc>
    545c:	34 fe       	sbrs	r3, 4
    545e:	0a c0       	rjmp	.+20     	; 0x5474 <vfprintf+0x5c0>
    5460:	32 fc       	sbrc	r3, 2
    5462:	08 c0       	rjmp	.+16     	; 0x5474 <vfprintf+0x5c0>
    5464:	33 2d       	mov	r19, r3
    5466:	3e 7e       	andi	r19, 0xEE	; 238
    5468:	05 c0       	rjmp	.+10     	; 0x5474 <vfprintf+0x5c0>
    546a:	0e 2d       	mov	r16, r14
    546c:	33 2d       	mov	r19, r3
    546e:	03 c0       	rjmp	.+6      	; 0x5476 <vfprintf+0x5c2>
    5470:	0e 2d       	mov	r16, r14
    5472:	01 c0       	rjmp	.+2      	; 0x5476 <vfprintf+0x5c2>
    5474:	01 2f       	mov	r16, r17
    5476:	34 ff       	sbrs	r19, 4
    5478:	0c c0       	rjmp	.+24     	; 0x5492 <vfprintf+0x5de>
    547a:	fe 01       	movw	r30, r28
    547c:	ee 0d       	add	r30, r14
    547e:	f1 1d       	adc	r31, r1
    5480:	80 81       	ld	r24, Z
    5482:	80 33       	cpi	r24, 0x30	; 48
    5484:	11 f4       	brne	.+4      	; 0x548a <vfprintf+0x5d6>
    5486:	39 7e       	andi	r19, 0xE9	; 233
    5488:	08 c0       	rjmp	.+16     	; 0x549a <vfprintf+0x5e6>
    548a:	32 ff       	sbrs	r19, 2
    548c:	05 c0       	rjmp	.+10     	; 0x5498 <vfprintf+0x5e4>
    548e:	0e 5f       	subi	r16, 0xFE	; 254
    5490:	04 c0       	rjmp	.+8      	; 0x549a <vfprintf+0x5e6>
    5492:	83 2f       	mov	r24, r19
    5494:	86 78       	andi	r24, 0x86	; 134
    5496:	09 f0       	breq	.+2      	; 0x549a <vfprintf+0x5e6>
    5498:	0f 5f       	subi	r16, 0xFF	; 255
    549a:	33 fd       	sbrc	r19, 3
    549c:	13 c0       	rjmp	.+38     	; 0x54c4 <vfprintf+0x610>
    549e:	30 ff       	sbrs	r19, 0
    54a0:	06 c0       	rjmp	.+12     	; 0x54ae <vfprintf+0x5fa>
    54a2:	1e 2d       	mov	r17, r14
    54a4:	0f 15       	cp	r16, r15
    54a6:	18 f4       	brcc	.+6      	; 0x54ae <vfprintf+0x5fa>
    54a8:	1f 0d       	add	r17, r15
    54aa:	10 1b       	sub	r17, r16
    54ac:	0f 2d       	mov	r16, r15
    54ae:	0f 15       	cp	r16, r15
    54b0:	68 f4       	brcc	.+26     	; 0x54cc <vfprintf+0x618>
    54b2:	b6 01       	movw	r22, r12
    54b4:	80 e2       	ldi	r24, 0x20	; 32
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	3b 8b       	std	Y+19, r19	; 0x13
    54ba:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    54be:	0f 5f       	subi	r16, 0xFF	; 255
    54c0:	3b 89       	ldd	r19, Y+19	; 0x13
    54c2:	f5 cf       	rjmp	.-22     	; 0x54ae <vfprintf+0x5fa>
    54c4:	0f 15       	cp	r16, r15
    54c6:	10 f4       	brcc	.+4      	; 0x54cc <vfprintf+0x618>
    54c8:	f0 1a       	sub	r15, r16
    54ca:	01 c0       	rjmp	.+2      	; 0x54ce <vfprintf+0x61a>
    54cc:	f1 2c       	mov	r15, r1
    54ce:	34 ff       	sbrs	r19, 4
    54d0:	12 c0       	rjmp	.+36     	; 0x54f6 <vfprintf+0x642>
    54d2:	b6 01       	movw	r22, r12
    54d4:	80 e3       	ldi	r24, 0x30	; 48
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	3b 8b       	std	Y+19, r19	; 0x13
    54da:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    54de:	3b 89       	ldd	r19, Y+19	; 0x13
    54e0:	32 ff       	sbrs	r19, 2
    54e2:	17 c0       	rjmp	.+46     	; 0x5512 <vfprintf+0x65e>
    54e4:	31 fd       	sbrc	r19, 1
    54e6:	03 c0       	rjmp	.+6      	; 0x54ee <vfprintf+0x63a>
    54e8:	88 e7       	ldi	r24, 0x78	; 120
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	02 c0       	rjmp	.+4      	; 0x54f2 <vfprintf+0x63e>
    54ee:	88 e5       	ldi	r24, 0x58	; 88
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	b6 01       	movw	r22, r12
    54f4:	0c c0       	rjmp	.+24     	; 0x550e <vfprintf+0x65a>
    54f6:	83 2f       	mov	r24, r19
    54f8:	86 78       	andi	r24, 0x86	; 134
    54fa:	59 f0       	breq	.+22     	; 0x5512 <vfprintf+0x65e>
    54fc:	31 ff       	sbrs	r19, 1
    54fe:	02 c0       	rjmp	.+4      	; 0x5504 <vfprintf+0x650>
    5500:	8b e2       	ldi	r24, 0x2B	; 43
    5502:	01 c0       	rjmp	.+2      	; 0x5506 <vfprintf+0x652>
    5504:	80 e2       	ldi	r24, 0x20	; 32
    5506:	37 fd       	sbrc	r19, 7
    5508:	8d e2       	ldi	r24, 0x2D	; 45
    550a:	b6 01       	movw	r22, r12
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5512:	e1 16       	cp	r14, r17
    5514:	38 f4       	brcc	.+14     	; 0x5524 <vfprintf+0x670>
    5516:	b6 01       	movw	r22, r12
    5518:	80 e3       	ldi	r24, 0x30	; 48
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5520:	11 50       	subi	r17, 0x01	; 1
    5522:	f7 cf       	rjmp	.-18     	; 0x5512 <vfprintf+0x65e>
    5524:	ea 94       	dec	r14
    5526:	f3 01       	movw	r30, r6
    5528:	ee 0d       	add	r30, r14
    552a:	f1 1d       	adc	r31, r1
    552c:	80 81       	ld	r24, Z
    552e:	b6 01       	movw	r22, r12
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5536:	e1 10       	cpse	r14, r1
    5538:	f5 cf       	rjmp	.-22     	; 0x5524 <vfprintf+0x670>
    553a:	14 c0       	rjmp	.+40     	; 0x5564 <vfprintf+0x6b0>
    553c:	f4 e0       	ldi	r31, 0x04	; 4
    553e:	ff 15       	cp	r31, r15
    5540:	58 f5       	brcc	.+86     	; 0x5598 <vfprintf+0x6e4>
    5542:	84 e0       	ldi	r24, 0x04	; 4
    5544:	f8 1a       	sub	r15, r24
    5546:	33 fe       	sbrs	r3, 3
    5548:	1e c0       	rjmp	.+60     	; 0x5586 <vfprintf+0x6d2>
    554a:	21 10       	cpse	r2, r1
    554c:	26 c0       	rjmp	.+76     	; 0x559a <vfprintf+0x6e6>
    554e:	03 ff       	sbrs	r16, 3
    5550:	2a c0       	rjmp	.+84     	; 0x55a6 <vfprintf+0x6f2>
    5552:	04 e8       	ldi	r16, 0x84	; 132
    5554:	11 e0       	ldi	r17, 0x01	; 1
    5556:	f3 2d       	mov	r31, r3
    5558:	f0 71       	andi	r31, 0x10	; 16
    555a:	3f 2e       	mov	r3, r31
    555c:	f8 01       	movw	r30, r16
    555e:	84 91       	lpm	r24, Z
    5560:	81 11       	cpse	r24, r1
    5562:	24 c0       	rjmp	.+72     	; 0x55ac <vfprintf+0x6f8>
    5564:	ff 20       	and	r15, r15
    5566:	09 f4       	brne	.+2      	; 0x556a <vfprintf+0x6b6>
    5568:	e5 cc       	rjmp	.-1590   	; 0x4f34 <vfprintf+0x80>
    556a:	b6 01       	movw	r22, r12
    556c:	80 e2       	ldi	r24, 0x20	; 32
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5574:	fa 94       	dec	r15
    5576:	f6 cf       	rjmp	.-20     	; 0x5564 <vfprintf+0x6b0>
    5578:	f6 01       	movw	r30, r12
    557a:	86 81       	ldd	r24, Z+6	; 0x06
    557c:	97 81       	ldd	r25, Z+7	; 0x07
    557e:	26 c0       	rjmp	.+76     	; 0x55cc <vfprintf+0x718>
    5580:	8f ef       	ldi	r24, 0xFF	; 255
    5582:	9f ef       	ldi	r25, 0xFF	; 255
    5584:	23 c0       	rjmp	.+70     	; 0x55cc <vfprintf+0x718>
    5586:	b6 01       	movw	r22, r12
    5588:	80 e2       	ldi	r24, 0x20	; 32
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    5590:	fa 94       	dec	r15
    5592:	f1 10       	cpse	r15, r1
    5594:	f8 cf       	rjmp	.-16     	; 0x5586 <vfprintf+0x6d2>
    5596:	d9 cf       	rjmp	.-78     	; 0x554a <vfprintf+0x696>
    5598:	f1 2c       	mov	r15, r1
    559a:	b6 01       	movw	r22, r12
    559c:	82 2d       	mov	r24, r2
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    55a4:	d4 cf       	rjmp	.-88     	; 0x554e <vfprintf+0x69a>
    55a6:	08 e8       	ldi	r16, 0x88	; 136
    55a8:	11 e0       	ldi	r17, 0x01	; 1
    55aa:	d5 cf       	rjmp	.-86     	; 0x5556 <vfprintf+0x6a2>
    55ac:	31 10       	cpse	r3, r1
    55ae:	80 52       	subi	r24, 0x20	; 32
    55b0:	b6 01       	movw	r22, r12
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <fputc>
    55b8:	0f 5f       	subi	r16, 0xFF	; 255
    55ba:	1f 4f       	sbci	r17, 0xFF	; 255
    55bc:	cf cf       	rjmp	.-98     	; 0x555c <vfprintf+0x6a8>
    55be:	23 e0       	ldi	r18, 0x03	; 3
    55c0:	2f 15       	cp	r18, r15
    55c2:	10 f4       	brcc	.+4      	; 0x55c8 <vfprintf+0x714>
    55c4:	83 e0       	ldi	r24, 0x03	; 3
    55c6:	be cf       	rjmp	.-132    	; 0x5544 <vfprintf+0x690>
    55c8:	f1 2c       	mov	r15, r1
    55ca:	c1 cf       	rjmp	.-126    	; 0x554e <vfprintf+0x69a>
    55cc:	63 96       	adiw	r28, 0x13	; 19
    55ce:	0f b6       	in	r0, 0x3f	; 63
    55d0:	f8 94       	cli
    55d2:	de bf       	out	0x3e, r29	; 62
    55d4:	0f be       	out	0x3f, r0	; 63
    55d6:	cd bf       	out	0x3d, r28	; 61
    55d8:	df 91       	pop	r29
    55da:	cf 91       	pop	r28
    55dc:	1f 91       	pop	r17
    55de:	0f 91       	pop	r16
    55e0:	ff 90       	pop	r15
    55e2:	ef 90       	pop	r14
    55e4:	df 90       	pop	r13
    55e6:	cf 90       	pop	r12
    55e8:	bf 90       	pop	r11
    55ea:	af 90       	pop	r10
    55ec:	9f 90       	pop	r9
    55ee:	8f 90       	pop	r8
    55f0:	7f 90       	pop	r7
    55f2:	6f 90       	pop	r6
    55f4:	5f 90       	pop	r5
    55f6:	4f 90       	pop	r4
    55f8:	3f 90       	pop	r3
    55fa:	2f 90       	pop	r2
    55fc:	08 95       	ret

000055fe <__subsf3>:
    55fe:	50 58       	subi	r21, 0x80	; 128

00005600 <__addsf3>:
    5600:	bb 27       	eor	r27, r27
    5602:	aa 27       	eor	r26, r26
    5604:	0e 94 17 2b 	call	0x562e	; 0x562e <__addsf3x>
    5608:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__fp_round>
    560c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__fp_pscA>
    5610:	38 f0       	brcs	.+14     	; 0x5620 <__addsf3+0x20>
    5612:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <__fp_pscB>
    5616:	20 f0       	brcs	.+8      	; 0x5620 <__addsf3+0x20>
    5618:	39 f4       	brne	.+14     	; 0x5628 <__addsf3+0x28>
    561a:	9f 3f       	cpi	r25, 0xFF	; 255
    561c:	19 f4       	brne	.+6      	; 0x5624 <__addsf3+0x24>
    561e:	26 f4       	brtc	.+8      	; 0x5628 <__addsf3+0x28>
    5620:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__fp_nan>
    5624:	0e f4       	brtc	.+2      	; 0x5628 <__addsf3+0x28>
    5626:	e0 95       	com	r30
    5628:	e7 fb       	bst	r30, 7
    562a:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__fp_inf>

0000562e <__addsf3x>:
    562e:	e9 2f       	mov	r30, r25
    5630:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fp_split3>
    5634:	58 f3       	brcs	.-42     	; 0x560c <__addsf3+0xc>
    5636:	ba 17       	cp	r27, r26
    5638:	62 07       	cpc	r22, r18
    563a:	73 07       	cpc	r23, r19
    563c:	84 07       	cpc	r24, r20
    563e:	95 07       	cpc	r25, r21
    5640:	20 f0       	brcs	.+8      	; 0x564a <__addsf3x+0x1c>
    5642:	79 f4       	brne	.+30     	; 0x5662 <__addsf3x+0x34>
    5644:	a6 f5       	brtc	.+104    	; 0x56ae <__addsf3x+0x80>
    5646:	0c 94 94 2c 	jmp	0x5928	; 0x5928 <__fp_zero>
    564a:	0e f4       	brtc	.+2      	; 0x564e <__addsf3x+0x20>
    564c:	e0 95       	com	r30
    564e:	0b 2e       	mov	r0, r27
    5650:	ba 2f       	mov	r27, r26
    5652:	a0 2d       	mov	r26, r0
    5654:	0b 01       	movw	r0, r22
    5656:	b9 01       	movw	r22, r18
    5658:	90 01       	movw	r18, r0
    565a:	0c 01       	movw	r0, r24
    565c:	ca 01       	movw	r24, r20
    565e:	a0 01       	movw	r20, r0
    5660:	11 24       	eor	r1, r1
    5662:	ff 27       	eor	r31, r31
    5664:	59 1b       	sub	r21, r25
    5666:	99 f0       	breq	.+38     	; 0x568e <__addsf3x+0x60>
    5668:	59 3f       	cpi	r21, 0xF9	; 249
    566a:	50 f4       	brcc	.+20     	; 0x5680 <__addsf3x+0x52>
    566c:	50 3e       	cpi	r21, 0xE0	; 224
    566e:	68 f1       	brcs	.+90     	; 0x56ca <__addsf3x+0x9c>
    5670:	1a 16       	cp	r1, r26
    5672:	f0 40       	sbci	r31, 0x00	; 0
    5674:	a2 2f       	mov	r26, r18
    5676:	23 2f       	mov	r18, r19
    5678:	34 2f       	mov	r19, r20
    567a:	44 27       	eor	r20, r20
    567c:	58 5f       	subi	r21, 0xF8	; 248
    567e:	f3 cf       	rjmp	.-26     	; 0x5666 <__addsf3x+0x38>
    5680:	46 95       	lsr	r20
    5682:	37 95       	ror	r19
    5684:	27 95       	ror	r18
    5686:	a7 95       	ror	r26
    5688:	f0 40       	sbci	r31, 0x00	; 0
    568a:	53 95       	inc	r21
    568c:	c9 f7       	brne	.-14     	; 0x5680 <__addsf3x+0x52>
    568e:	7e f4       	brtc	.+30     	; 0x56ae <__addsf3x+0x80>
    5690:	1f 16       	cp	r1, r31
    5692:	ba 0b       	sbc	r27, r26
    5694:	62 0b       	sbc	r22, r18
    5696:	73 0b       	sbc	r23, r19
    5698:	84 0b       	sbc	r24, r20
    569a:	ba f0       	brmi	.+46     	; 0x56ca <__addsf3x+0x9c>
    569c:	91 50       	subi	r25, 0x01	; 1
    569e:	a1 f0       	breq	.+40     	; 0x56c8 <__addsf3x+0x9a>
    56a0:	ff 0f       	add	r31, r31
    56a2:	bb 1f       	adc	r27, r27
    56a4:	66 1f       	adc	r22, r22
    56a6:	77 1f       	adc	r23, r23
    56a8:	88 1f       	adc	r24, r24
    56aa:	c2 f7       	brpl	.-16     	; 0x569c <__addsf3x+0x6e>
    56ac:	0e c0       	rjmp	.+28     	; 0x56ca <__addsf3x+0x9c>
    56ae:	ba 0f       	add	r27, r26
    56b0:	62 1f       	adc	r22, r18
    56b2:	73 1f       	adc	r23, r19
    56b4:	84 1f       	adc	r24, r20
    56b6:	48 f4       	brcc	.+18     	; 0x56ca <__addsf3x+0x9c>
    56b8:	87 95       	ror	r24
    56ba:	77 95       	ror	r23
    56bc:	67 95       	ror	r22
    56be:	b7 95       	ror	r27
    56c0:	f7 95       	ror	r31
    56c2:	9e 3f       	cpi	r25, 0xFE	; 254
    56c4:	08 f0       	brcs	.+2      	; 0x56c8 <__addsf3x+0x9a>
    56c6:	b0 cf       	rjmp	.-160    	; 0x5628 <__addsf3+0x28>
    56c8:	93 95       	inc	r25
    56ca:	88 0f       	add	r24, r24
    56cc:	08 f0       	brcs	.+2      	; 0x56d0 <__addsf3x+0xa2>
    56ce:	99 27       	eor	r25, r25
    56d0:	ee 0f       	add	r30, r30
    56d2:	97 95       	ror	r25
    56d4:	87 95       	ror	r24
    56d6:	08 95       	ret

000056d8 <__divsf3>:
    56d8:	0e 94 80 2b 	call	0x5700	; 0x5700 <__divsf3x>
    56dc:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__fp_round>
    56e0:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <__fp_pscB>
    56e4:	58 f0       	brcs	.+22     	; 0x56fc <__divsf3+0x24>
    56e6:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__fp_pscA>
    56ea:	40 f0       	brcs	.+16     	; 0x56fc <__divsf3+0x24>
    56ec:	29 f4       	brne	.+10     	; 0x56f8 <__divsf3+0x20>
    56ee:	5f 3f       	cpi	r21, 0xFF	; 255
    56f0:	29 f0       	breq	.+10     	; 0x56fc <__divsf3+0x24>
    56f2:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__fp_inf>
    56f6:	51 11       	cpse	r21, r1
    56f8:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__fp_szero>
    56fc:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__fp_nan>

00005700 <__divsf3x>:
    5700:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fp_split3>
    5704:	68 f3       	brcs	.-38     	; 0x56e0 <__divsf3+0x8>

00005706 <__divsf3_pse>:
    5706:	99 23       	and	r25, r25
    5708:	b1 f3       	breq	.-20     	; 0x56f6 <__divsf3+0x1e>
    570a:	55 23       	and	r21, r21
    570c:	91 f3       	breq	.-28     	; 0x56f2 <__divsf3+0x1a>
    570e:	95 1b       	sub	r25, r21
    5710:	55 0b       	sbc	r21, r21
    5712:	bb 27       	eor	r27, r27
    5714:	aa 27       	eor	r26, r26
    5716:	62 17       	cp	r22, r18
    5718:	73 07       	cpc	r23, r19
    571a:	84 07       	cpc	r24, r20
    571c:	38 f0       	brcs	.+14     	; 0x572c <__divsf3_pse+0x26>
    571e:	9f 5f       	subi	r25, 0xFF	; 255
    5720:	5f 4f       	sbci	r21, 0xFF	; 255
    5722:	22 0f       	add	r18, r18
    5724:	33 1f       	adc	r19, r19
    5726:	44 1f       	adc	r20, r20
    5728:	aa 1f       	adc	r26, r26
    572a:	a9 f3       	breq	.-22     	; 0x5716 <__divsf3_pse+0x10>
    572c:	35 d0       	rcall	.+106    	; 0x5798 <__divsf3_pse+0x92>
    572e:	0e 2e       	mov	r0, r30
    5730:	3a f0       	brmi	.+14     	; 0x5740 <__divsf3_pse+0x3a>
    5732:	e0 e8       	ldi	r30, 0x80	; 128
    5734:	32 d0       	rcall	.+100    	; 0x579a <__divsf3_pse+0x94>
    5736:	91 50       	subi	r25, 0x01	; 1
    5738:	50 40       	sbci	r21, 0x00	; 0
    573a:	e6 95       	lsr	r30
    573c:	00 1c       	adc	r0, r0
    573e:	ca f7       	brpl	.-14     	; 0x5732 <__divsf3_pse+0x2c>
    5740:	2b d0       	rcall	.+86     	; 0x5798 <__divsf3_pse+0x92>
    5742:	fe 2f       	mov	r31, r30
    5744:	29 d0       	rcall	.+82     	; 0x5798 <__divsf3_pse+0x92>
    5746:	66 0f       	add	r22, r22
    5748:	77 1f       	adc	r23, r23
    574a:	88 1f       	adc	r24, r24
    574c:	bb 1f       	adc	r27, r27
    574e:	26 17       	cp	r18, r22
    5750:	37 07       	cpc	r19, r23
    5752:	48 07       	cpc	r20, r24
    5754:	ab 07       	cpc	r26, r27
    5756:	b0 e8       	ldi	r27, 0x80	; 128
    5758:	09 f0       	breq	.+2      	; 0x575c <__divsf3_pse+0x56>
    575a:	bb 0b       	sbc	r27, r27
    575c:	80 2d       	mov	r24, r0
    575e:	bf 01       	movw	r22, r30
    5760:	ff 27       	eor	r31, r31
    5762:	93 58       	subi	r25, 0x83	; 131
    5764:	5f 4f       	sbci	r21, 0xFF	; 255
    5766:	3a f0       	brmi	.+14     	; 0x5776 <__divsf3_pse+0x70>
    5768:	9e 3f       	cpi	r25, 0xFE	; 254
    576a:	51 05       	cpc	r21, r1
    576c:	78 f0       	brcs	.+30     	; 0x578c <__divsf3_pse+0x86>
    576e:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__fp_inf>
    5772:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__fp_szero>
    5776:	5f 3f       	cpi	r21, 0xFF	; 255
    5778:	e4 f3       	brlt	.-8      	; 0x5772 <__divsf3_pse+0x6c>
    577a:	98 3e       	cpi	r25, 0xE8	; 232
    577c:	d4 f3       	brlt	.-12     	; 0x5772 <__divsf3_pse+0x6c>
    577e:	86 95       	lsr	r24
    5780:	77 95       	ror	r23
    5782:	67 95       	ror	r22
    5784:	b7 95       	ror	r27
    5786:	f7 95       	ror	r31
    5788:	9f 5f       	subi	r25, 0xFF	; 255
    578a:	c9 f7       	brne	.-14     	; 0x577e <__divsf3_pse+0x78>
    578c:	88 0f       	add	r24, r24
    578e:	91 1d       	adc	r25, r1
    5790:	96 95       	lsr	r25
    5792:	87 95       	ror	r24
    5794:	97 f9       	bld	r25, 7
    5796:	08 95       	ret
    5798:	e1 e0       	ldi	r30, 0x01	; 1
    579a:	66 0f       	add	r22, r22
    579c:	77 1f       	adc	r23, r23
    579e:	88 1f       	adc	r24, r24
    57a0:	bb 1f       	adc	r27, r27
    57a2:	62 17       	cp	r22, r18
    57a4:	73 07       	cpc	r23, r19
    57a6:	84 07       	cpc	r24, r20
    57a8:	ba 07       	cpc	r27, r26
    57aa:	20 f0       	brcs	.+8      	; 0x57b4 <__divsf3_pse+0xae>
    57ac:	62 1b       	sub	r22, r18
    57ae:	73 0b       	sbc	r23, r19
    57b0:	84 0b       	sbc	r24, r20
    57b2:	ba 0b       	sbc	r27, r26
    57b4:	ee 1f       	adc	r30, r30
    57b6:	88 f7       	brcc	.-30     	; 0x579a <__divsf3_pse+0x94>
    57b8:	e0 95       	com	r30
    57ba:	08 95       	ret

000057bc <__fixunssfsi>:
    57bc:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__fp_splitA>
    57c0:	88 f0       	brcs	.+34     	; 0x57e4 <__fixunssfsi+0x28>
    57c2:	9f 57       	subi	r25, 0x7F	; 127
    57c4:	98 f0       	brcs	.+38     	; 0x57ec <__fixunssfsi+0x30>
    57c6:	b9 2f       	mov	r27, r25
    57c8:	99 27       	eor	r25, r25
    57ca:	b7 51       	subi	r27, 0x17	; 23
    57cc:	b0 f0       	brcs	.+44     	; 0x57fa <__fixunssfsi+0x3e>
    57ce:	e1 f0       	breq	.+56     	; 0x5808 <__fixunssfsi+0x4c>
    57d0:	66 0f       	add	r22, r22
    57d2:	77 1f       	adc	r23, r23
    57d4:	88 1f       	adc	r24, r24
    57d6:	99 1f       	adc	r25, r25
    57d8:	1a f0       	brmi	.+6      	; 0x57e0 <__fixunssfsi+0x24>
    57da:	ba 95       	dec	r27
    57dc:	c9 f7       	brne	.-14     	; 0x57d0 <__fixunssfsi+0x14>
    57de:	14 c0       	rjmp	.+40     	; 0x5808 <__fixunssfsi+0x4c>
    57e0:	b1 30       	cpi	r27, 0x01	; 1
    57e2:	91 f0       	breq	.+36     	; 0x5808 <__fixunssfsi+0x4c>
    57e4:	0e 94 94 2c 	call	0x5928	; 0x5928 <__fp_zero>
    57e8:	b1 e0       	ldi	r27, 0x01	; 1
    57ea:	08 95       	ret
    57ec:	0c 94 94 2c 	jmp	0x5928	; 0x5928 <__fp_zero>
    57f0:	67 2f       	mov	r22, r23
    57f2:	78 2f       	mov	r23, r24
    57f4:	88 27       	eor	r24, r24
    57f6:	b8 5f       	subi	r27, 0xF8	; 248
    57f8:	39 f0       	breq	.+14     	; 0x5808 <__fixunssfsi+0x4c>
    57fa:	b9 3f       	cpi	r27, 0xF9	; 249
    57fc:	cc f3       	brlt	.-14     	; 0x57f0 <__fixunssfsi+0x34>
    57fe:	86 95       	lsr	r24
    5800:	77 95       	ror	r23
    5802:	67 95       	ror	r22
    5804:	b3 95       	inc	r27
    5806:	d9 f7       	brne	.-10     	; 0x57fe <__fixunssfsi+0x42>
    5808:	3e f4       	brtc	.+14     	; 0x5818 <__fixunssfsi+0x5c>
    580a:	90 95       	com	r25
    580c:	80 95       	com	r24
    580e:	70 95       	com	r23
    5810:	61 95       	neg	r22
    5812:	7f 4f       	sbci	r23, 0xFF	; 255
    5814:	8f 4f       	sbci	r24, 0xFF	; 255
    5816:	9f 4f       	sbci	r25, 0xFF	; 255
    5818:	08 95       	ret

0000581a <__floatunsisf>:
    581a:	e8 94       	clt
    581c:	09 c0       	rjmp	.+18     	; 0x5830 <__floatsisf+0x12>

0000581e <__floatsisf>:
    581e:	97 fb       	bst	r25, 7
    5820:	3e f4       	brtc	.+14     	; 0x5830 <__floatsisf+0x12>
    5822:	90 95       	com	r25
    5824:	80 95       	com	r24
    5826:	70 95       	com	r23
    5828:	61 95       	neg	r22
    582a:	7f 4f       	sbci	r23, 0xFF	; 255
    582c:	8f 4f       	sbci	r24, 0xFF	; 255
    582e:	9f 4f       	sbci	r25, 0xFF	; 255
    5830:	99 23       	and	r25, r25
    5832:	a9 f0       	breq	.+42     	; 0x585e <__floatsisf+0x40>
    5834:	f9 2f       	mov	r31, r25
    5836:	96 e9       	ldi	r25, 0x96	; 150
    5838:	bb 27       	eor	r27, r27
    583a:	93 95       	inc	r25
    583c:	f6 95       	lsr	r31
    583e:	87 95       	ror	r24
    5840:	77 95       	ror	r23
    5842:	67 95       	ror	r22
    5844:	b7 95       	ror	r27
    5846:	f1 11       	cpse	r31, r1
    5848:	f8 cf       	rjmp	.-16     	; 0x583a <__floatsisf+0x1c>
    584a:	fa f4       	brpl	.+62     	; 0x588a <__floatsisf+0x6c>
    584c:	bb 0f       	add	r27, r27
    584e:	11 f4       	brne	.+4      	; 0x5854 <__floatsisf+0x36>
    5850:	60 ff       	sbrs	r22, 0
    5852:	1b c0       	rjmp	.+54     	; 0x588a <__floatsisf+0x6c>
    5854:	6f 5f       	subi	r22, 0xFF	; 255
    5856:	7f 4f       	sbci	r23, 0xFF	; 255
    5858:	8f 4f       	sbci	r24, 0xFF	; 255
    585a:	9f 4f       	sbci	r25, 0xFF	; 255
    585c:	16 c0       	rjmp	.+44     	; 0x588a <__floatsisf+0x6c>
    585e:	88 23       	and	r24, r24
    5860:	11 f0       	breq	.+4      	; 0x5866 <__floatsisf+0x48>
    5862:	96 e9       	ldi	r25, 0x96	; 150
    5864:	11 c0       	rjmp	.+34     	; 0x5888 <__floatsisf+0x6a>
    5866:	77 23       	and	r23, r23
    5868:	21 f0       	breq	.+8      	; 0x5872 <__floatsisf+0x54>
    586a:	9e e8       	ldi	r25, 0x8E	; 142
    586c:	87 2f       	mov	r24, r23
    586e:	76 2f       	mov	r23, r22
    5870:	05 c0       	rjmp	.+10     	; 0x587c <__floatsisf+0x5e>
    5872:	66 23       	and	r22, r22
    5874:	71 f0       	breq	.+28     	; 0x5892 <__floatsisf+0x74>
    5876:	96 e8       	ldi	r25, 0x86	; 134
    5878:	86 2f       	mov	r24, r22
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	60 e0       	ldi	r22, 0x00	; 0
    587e:	2a f0       	brmi	.+10     	; 0x588a <__floatsisf+0x6c>
    5880:	9a 95       	dec	r25
    5882:	66 0f       	add	r22, r22
    5884:	77 1f       	adc	r23, r23
    5886:	88 1f       	adc	r24, r24
    5888:	da f7       	brpl	.-10     	; 0x5880 <__floatsisf+0x62>
    588a:	88 0f       	add	r24, r24
    588c:	96 95       	lsr	r25
    588e:	87 95       	ror	r24
    5890:	97 f9       	bld	r25, 7
    5892:	08 95       	ret

00005894 <__fp_inf>:
    5894:	97 f9       	bld	r25, 7
    5896:	9f 67       	ori	r25, 0x7F	; 127
    5898:	80 e8       	ldi	r24, 0x80	; 128
    589a:	70 e0       	ldi	r23, 0x00	; 0
    589c:	60 e0       	ldi	r22, 0x00	; 0
    589e:	08 95       	ret

000058a0 <__fp_nan>:
    58a0:	9f ef       	ldi	r25, 0xFF	; 255
    58a2:	80 ec       	ldi	r24, 0xC0	; 192
    58a4:	08 95       	ret

000058a6 <__fp_pscA>:
    58a6:	00 24       	eor	r0, r0
    58a8:	0a 94       	dec	r0
    58aa:	16 16       	cp	r1, r22
    58ac:	17 06       	cpc	r1, r23
    58ae:	18 06       	cpc	r1, r24
    58b0:	09 06       	cpc	r0, r25
    58b2:	08 95       	ret

000058b4 <__fp_pscB>:
    58b4:	00 24       	eor	r0, r0
    58b6:	0a 94       	dec	r0
    58b8:	12 16       	cp	r1, r18
    58ba:	13 06       	cpc	r1, r19
    58bc:	14 06       	cpc	r1, r20
    58be:	05 06       	cpc	r0, r21
    58c0:	08 95       	ret

000058c2 <__fp_round>:
    58c2:	09 2e       	mov	r0, r25
    58c4:	03 94       	inc	r0
    58c6:	00 0c       	add	r0, r0
    58c8:	11 f4       	brne	.+4      	; 0x58ce <__fp_round+0xc>
    58ca:	88 23       	and	r24, r24
    58cc:	52 f0       	brmi	.+20     	; 0x58e2 <__fp_round+0x20>
    58ce:	bb 0f       	add	r27, r27
    58d0:	40 f4       	brcc	.+16     	; 0x58e2 <__fp_round+0x20>
    58d2:	bf 2b       	or	r27, r31
    58d4:	11 f4       	brne	.+4      	; 0x58da <__fp_round+0x18>
    58d6:	60 ff       	sbrs	r22, 0
    58d8:	04 c0       	rjmp	.+8      	; 0x58e2 <__fp_round+0x20>
    58da:	6f 5f       	subi	r22, 0xFF	; 255
    58dc:	7f 4f       	sbci	r23, 0xFF	; 255
    58de:	8f 4f       	sbci	r24, 0xFF	; 255
    58e0:	9f 4f       	sbci	r25, 0xFF	; 255
    58e2:	08 95       	ret

000058e4 <__fp_split3>:
    58e4:	57 fd       	sbrc	r21, 7
    58e6:	90 58       	subi	r25, 0x80	; 128
    58e8:	44 0f       	add	r20, r20
    58ea:	55 1f       	adc	r21, r21
    58ec:	59 f0       	breq	.+22     	; 0x5904 <__fp_splitA+0x10>
    58ee:	5f 3f       	cpi	r21, 0xFF	; 255
    58f0:	71 f0       	breq	.+28     	; 0x590e <__fp_splitA+0x1a>
    58f2:	47 95       	ror	r20

000058f4 <__fp_splitA>:
    58f4:	88 0f       	add	r24, r24
    58f6:	97 fb       	bst	r25, 7
    58f8:	99 1f       	adc	r25, r25
    58fa:	61 f0       	breq	.+24     	; 0x5914 <__fp_splitA+0x20>
    58fc:	9f 3f       	cpi	r25, 0xFF	; 255
    58fe:	79 f0       	breq	.+30     	; 0x591e <__fp_splitA+0x2a>
    5900:	87 95       	ror	r24
    5902:	08 95       	ret
    5904:	12 16       	cp	r1, r18
    5906:	13 06       	cpc	r1, r19
    5908:	14 06       	cpc	r1, r20
    590a:	55 1f       	adc	r21, r21
    590c:	f2 cf       	rjmp	.-28     	; 0x58f2 <__fp_split3+0xe>
    590e:	46 95       	lsr	r20
    5910:	f1 df       	rcall	.-30     	; 0x58f4 <__fp_splitA>
    5912:	08 c0       	rjmp	.+16     	; 0x5924 <__fp_splitA+0x30>
    5914:	16 16       	cp	r1, r22
    5916:	17 06       	cpc	r1, r23
    5918:	18 06       	cpc	r1, r24
    591a:	99 1f       	adc	r25, r25
    591c:	f1 cf       	rjmp	.-30     	; 0x5900 <__fp_splitA+0xc>
    591e:	86 95       	lsr	r24
    5920:	71 05       	cpc	r23, r1
    5922:	61 05       	cpc	r22, r1
    5924:	08 94       	sec
    5926:	08 95       	ret

00005928 <__fp_zero>:
    5928:	e8 94       	clt

0000592a <__fp_szero>:
    592a:	bb 27       	eor	r27, r27
    592c:	66 27       	eor	r22, r22
    592e:	77 27       	eor	r23, r23
    5930:	cb 01       	movw	r24, r22
    5932:	97 f9       	bld	r25, 7
    5934:	08 95       	ret

00005936 <__mulsf3>:
    5936:	0e 94 ae 2c 	call	0x595c	; 0x595c <__mulsf3x>
    593a:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__fp_round>
    593e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__fp_pscA>
    5942:	38 f0       	brcs	.+14     	; 0x5952 <__mulsf3+0x1c>
    5944:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <__fp_pscB>
    5948:	20 f0       	brcs	.+8      	; 0x5952 <__mulsf3+0x1c>
    594a:	95 23       	and	r25, r21
    594c:	11 f0       	breq	.+4      	; 0x5952 <__mulsf3+0x1c>
    594e:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__fp_inf>
    5952:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__fp_nan>
    5956:	11 24       	eor	r1, r1
    5958:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__fp_szero>

0000595c <__mulsf3x>:
    595c:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fp_split3>
    5960:	70 f3       	brcs	.-36     	; 0x593e <__mulsf3+0x8>

00005962 <__mulsf3_pse>:
    5962:	95 9f       	mul	r25, r21
    5964:	c1 f3       	breq	.-16     	; 0x5956 <__mulsf3+0x20>
    5966:	95 0f       	add	r25, r21
    5968:	50 e0       	ldi	r21, 0x00	; 0
    596a:	55 1f       	adc	r21, r21
    596c:	62 9f       	mul	r22, r18
    596e:	f0 01       	movw	r30, r0
    5970:	72 9f       	mul	r23, r18
    5972:	bb 27       	eor	r27, r27
    5974:	f0 0d       	add	r31, r0
    5976:	b1 1d       	adc	r27, r1
    5978:	63 9f       	mul	r22, r19
    597a:	aa 27       	eor	r26, r26
    597c:	f0 0d       	add	r31, r0
    597e:	b1 1d       	adc	r27, r1
    5980:	aa 1f       	adc	r26, r26
    5982:	64 9f       	mul	r22, r20
    5984:	66 27       	eor	r22, r22
    5986:	b0 0d       	add	r27, r0
    5988:	a1 1d       	adc	r26, r1
    598a:	66 1f       	adc	r22, r22
    598c:	82 9f       	mul	r24, r18
    598e:	22 27       	eor	r18, r18
    5990:	b0 0d       	add	r27, r0
    5992:	a1 1d       	adc	r26, r1
    5994:	62 1f       	adc	r22, r18
    5996:	73 9f       	mul	r23, r19
    5998:	b0 0d       	add	r27, r0
    599a:	a1 1d       	adc	r26, r1
    599c:	62 1f       	adc	r22, r18
    599e:	83 9f       	mul	r24, r19
    59a0:	a0 0d       	add	r26, r0
    59a2:	61 1d       	adc	r22, r1
    59a4:	22 1f       	adc	r18, r18
    59a6:	74 9f       	mul	r23, r20
    59a8:	33 27       	eor	r19, r19
    59aa:	a0 0d       	add	r26, r0
    59ac:	61 1d       	adc	r22, r1
    59ae:	23 1f       	adc	r18, r19
    59b0:	84 9f       	mul	r24, r20
    59b2:	60 0d       	add	r22, r0
    59b4:	21 1d       	adc	r18, r1
    59b6:	82 2f       	mov	r24, r18
    59b8:	76 2f       	mov	r23, r22
    59ba:	6a 2f       	mov	r22, r26
    59bc:	11 24       	eor	r1, r1
    59be:	9f 57       	subi	r25, 0x7F	; 127
    59c0:	50 40       	sbci	r21, 0x00	; 0
    59c2:	9a f0       	brmi	.+38     	; 0x59ea <__mulsf3_pse+0x88>
    59c4:	f1 f0       	breq	.+60     	; 0x5a02 <__mulsf3_pse+0xa0>
    59c6:	88 23       	and	r24, r24
    59c8:	4a f0       	brmi	.+18     	; 0x59dc <__mulsf3_pse+0x7a>
    59ca:	ee 0f       	add	r30, r30
    59cc:	ff 1f       	adc	r31, r31
    59ce:	bb 1f       	adc	r27, r27
    59d0:	66 1f       	adc	r22, r22
    59d2:	77 1f       	adc	r23, r23
    59d4:	88 1f       	adc	r24, r24
    59d6:	91 50       	subi	r25, 0x01	; 1
    59d8:	50 40       	sbci	r21, 0x00	; 0
    59da:	a9 f7       	brne	.-22     	; 0x59c6 <__mulsf3_pse+0x64>
    59dc:	9e 3f       	cpi	r25, 0xFE	; 254
    59de:	51 05       	cpc	r21, r1
    59e0:	80 f0       	brcs	.+32     	; 0x5a02 <__mulsf3_pse+0xa0>
    59e2:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__fp_inf>
    59e6:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__fp_szero>
    59ea:	5f 3f       	cpi	r21, 0xFF	; 255
    59ec:	e4 f3       	brlt	.-8      	; 0x59e6 <__mulsf3_pse+0x84>
    59ee:	98 3e       	cpi	r25, 0xE8	; 232
    59f0:	d4 f3       	brlt	.-12     	; 0x59e6 <__mulsf3_pse+0x84>
    59f2:	86 95       	lsr	r24
    59f4:	77 95       	ror	r23
    59f6:	67 95       	ror	r22
    59f8:	b7 95       	ror	r27
    59fa:	f7 95       	ror	r31
    59fc:	e7 95       	ror	r30
    59fe:	9f 5f       	subi	r25, 0xFF	; 255
    5a00:	c1 f7       	brne	.-16     	; 0x59f2 <__mulsf3_pse+0x90>
    5a02:	fe 2b       	or	r31, r30
    5a04:	88 0f       	add	r24, r24
    5a06:	91 1d       	adc	r25, r1
    5a08:	96 95       	lsr	r25
    5a0a:	87 95       	ror	r24
    5a0c:	97 f9       	bld	r25, 7
    5a0e:	08 95       	ret

00005a10 <__udivmodhi4>:
    5a10:	aa 1b       	sub	r26, r26
    5a12:	bb 1b       	sub	r27, r27
    5a14:	51 e1       	ldi	r21, 0x11	; 17
    5a16:	07 c0       	rjmp	.+14     	; 0x5a26 <__udivmodhi4_ep>

00005a18 <__udivmodhi4_loop>:
    5a18:	aa 1f       	adc	r26, r26
    5a1a:	bb 1f       	adc	r27, r27
    5a1c:	a6 17       	cp	r26, r22
    5a1e:	b7 07       	cpc	r27, r23
    5a20:	10 f0       	brcs	.+4      	; 0x5a26 <__udivmodhi4_ep>
    5a22:	a6 1b       	sub	r26, r22
    5a24:	b7 0b       	sbc	r27, r23

00005a26 <__udivmodhi4_ep>:
    5a26:	88 1f       	adc	r24, r24
    5a28:	99 1f       	adc	r25, r25
    5a2a:	5a 95       	dec	r21
    5a2c:	a9 f7       	brne	.-22     	; 0x5a18 <__udivmodhi4_loop>
    5a2e:	80 95       	com	r24
    5a30:	90 95       	com	r25
    5a32:	bc 01       	movw	r22, r24
    5a34:	cd 01       	movw	r24, r26
    5a36:	08 95       	ret

00005a38 <__divmodhi4>:
    5a38:	97 fb       	bst	r25, 7
    5a3a:	07 2e       	mov	r0, r23
    5a3c:	16 f4       	brtc	.+4      	; 0x5a42 <__divmodhi4+0xa>
    5a3e:	00 94       	com	r0
    5a40:	07 d0       	rcall	.+14     	; 0x5a50 <__divmodhi4_neg1>
    5a42:	77 fd       	sbrc	r23, 7
    5a44:	09 d0       	rcall	.+18     	; 0x5a58 <__divmodhi4_neg2>
    5a46:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <__udivmodhi4>
    5a4a:	07 fc       	sbrc	r0, 7
    5a4c:	05 d0       	rcall	.+10     	; 0x5a58 <__divmodhi4_neg2>
    5a4e:	3e f4       	brtc	.+14     	; 0x5a5e <__divmodhi4_exit>

00005a50 <__divmodhi4_neg1>:
    5a50:	90 95       	com	r25
    5a52:	81 95       	neg	r24
    5a54:	9f 4f       	sbci	r25, 0xFF	; 255
    5a56:	08 95       	ret

00005a58 <__divmodhi4_neg2>:
    5a58:	70 95       	com	r23
    5a5a:	61 95       	neg	r22
    5a5c:	7f 4f       	sbci	r23, 0xFF	; 255

00005a5e <__divmodhi4_exit>:
    5a5e:	08 95       	ret

00005a60 <__udivmodsi4>:
    5a60:	a1 e2       	ldi	r26, 0x21	; 33
    5a62:	1a 2e       	mov	r1, r26
    5a64:	aa 1b       	sub	r26, r26
    5a66:	bb 1b       	sub	r27, r27
    5a68:	fd 01       	movw	r30, r26
    5a6a:	0d c0       	rjmp	.+26     	; 0x5a86 <__udivmodsi4_ep>

00005a6c <__udivmodsi4_loop>:
    5a6c:	aa 1f       	adc	r26, r26
    5a6e:	bb 1f       	adc	r27, r27
    5a70:	ee 1f       	adc	r30, r30
    5a72:	ff 1f       	adc	r31, r31
    5a74:	a2 17       	cp	r26, r18
    5a76:	b3 07       	cpc	r27, r19
    5a78:	e4 07       	cpc	r30, r20
    5a7a:	f5 07       	cpc	r31, r21
    5a7c:	20 f0       	brcs	.+8      	; 0x5a86 <__udivmodsi4_ep>
    5a7e:	a2 1b       	sub	r26, r18
    5a80:	b3 0b       	sbc	r27, r19
    5a82:	e4 0b       	sbc	r30, r20
    5a84:	f5 0b       	sbc	r31, r21

00005a86 <__udivmodsi4_ep>:
    5a86:	66 1f       	adc	r22, r22
    5a88:	77 1f       	adc	r23, r23
    5a8a:	88 1f       	adc	r24, r24
    5a8c:	99 1f       	adc	r25, r25
    5a8e:	1a 94       	dec	r1
    5a90:	69 f7       	brne	.-38     	; 0x5a6c <__udivmodsi4_loop>
    5a92:	60 95       	com	r22
    5a94:	70 95       	com	r23
    5a96:	80 95       	com	r24
    5a98:	90 95       	com	r25
    5a9a:	9b 01       	movw	r18, r22
    5a9c:	ac 01       	movw	r20, r24
    5a9e:	bd 01       	movw	r22, r26
    5aa0:	cf 01       	movw	r24, r30
    5aa2:	08 95       	ret

00005aa4 <__tablejump2__>:
    5aa4:	ee 0f       	add	r30, r30
    5aa6:	ff 1f       	adc	r31, r31
    5aa8:	00 24       	eor	r0, r0
    5aaa:	00 1c       	adc	r0, r0
    5aac:	0b be       	out	0x3b, r0	; 59
    5aae:	07 90       	elpm	r0, Z+
    5ab0:	f6 91       	elpm	r31, Z
    5ab2:	e0 2d       	mov	r30, r0
    5ab4:	09 94       	ijmp

00005ab6 <__ashrdi3>:
    5ab6:	97 fb       	bst	r25, 7
    5ab8:	10 f8       	bld	r1, 0

00005aba <__lshrdi3>:
    5aba:	16 94       	lsr	r1
    5abc:	00 08       	sbc	r0, r0
    5abe:	0f 93       	push	r16
    5ac0:	08 30       	cpi	r16, 0x08	; 8
    5ac2:	98 f0       	brcs	.+38     	; 0x5aea <__lshrdi3+0x30>
    5ac4:	08 50       	subi	r16, 0x08	; 8
    5ac6:	23 2f       	mov	r18, r19
    5ac8:	34 2f       	mov	r19, r20
    5aca:	45 2f       	mov	r20, r21
    5acc:	56 2f       	mov	r21, r22
    5ace:	67 2f       	mov	r22, r23
    5ad0:	78 2f       	mov	r23, r24
    5ad2:	89 2f       	mov	r24, r25
    5ad4:	90 2d       	mov	r25, r0
    5ad6:	f4 cf       	rjmp	.-24     	; 0x5ac0 <__lshrdi3+0x6>
    5ad8:	05 94       	asr	r0
    5ada:	97 95       	ror	r25
    5adc:	87 95       	ror	r24
    5ade:	77 95       	ror	r23
    5ae0:	67 95       	ror	r22
    5ae2:	57 95       	ror	r21
    5ae4:	47 95       	ror	r20
    5ae6:	37 95       	ror	r19
    5ae8:	27 95       	ror	r18
    5aea:	0a 95       	dec	r16
    5aec:	aa f7       	brpl	.-22     	; 0x5ad8 <__lshrdi3+0x1e>
    5aee:	0f 91       	pop	r16
    5af0:	08 95       	ret

00005af2 <malloc>:
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	82 30       	cpi	r24, 0x02	; 2
    5af8:	91 05       	cpc	r25, r1
    5afa:	10 f4       	brcc	.+4      	; 0x5b00 <malloc+0xe>
    5afc:	82 e0       	ldi	r24, 0x02	; 2
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	e0 91 bc 0c 	lds	r30, 0x0CBC	; 0x800cbc <__flp>
    5b04:	f0 91 bd 0c 	lds	r31, 0x0CBD	; 0x800cbd <__flp+0x1>
    5b08:	20 e0       	ldi	r18, 0x00	; 0
    5b0a:	30 e0       	ldi	r19, 0x00	; 0
    5b0c:	c0 e0       	ldi	r28, 0x00	; 0
    5b0e:	d0 e0       	ldi	r29, 0x00	; 0
    5b10:	30 97       	sbiw	r30, 0x00	; 0
    5b12:	11 f1       	breq	.+68     	; 0x5b58 <malloc+0x66>
    5b14:	40 81       	ld	r20, Z
    5b16:	51 81       	ldd	r21, Z+1	; 0x01
    5b18:	48 17       	cp	r20, r24
    5b1a:	59 07       	cpc	r21, r25
    5b1c:	c0 f0       	brcs	.+48     	; 0x5b4e <malloc+0x5c>
    5b1e:	48 17       	cp	r20, r24
    5b20:	59 07       	cpc	r21, r25
    5b22:	61 f4       	brne	.+24     	; 0x5b3c <malloc+0x4a>
    5b24:	82 81       	ldd	r24, Z+2	; 0x02
    5b26:	93 81       	ldd	r25, Z+3	; 0x03
    5b28:	20 97       	sbiw	r28, 0x00	; 0
    5b2a:	19 f0       	breq	.+6      	; 0x5b32 <malloc+0x40>
    5b2c:	9b 83       	std	Y+3, r25	; 0x03
    5b2e:	8a 83       	std	Y+2, r24	; 0x02
    5b30:	2b c0       	rjmp	.+86     	; 0x5b88 <malloc+0x96>
    5b32:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <__flp+0x1>
    5b36:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <__flp>
    5b3a:	26 c0       	rjmp	.+76     	; 0x5b88 <malloc+0x96>
    5b3c:	21 15       	cp	r18, r1
    5b3e:	31 05       	cpc	r19, r1
    5b40:	19 f0       	breq	.+6      	; 0x5b48 <malloc+0x56>
    5b42:	42 17       	cp	r20, r18
    5b44:	53 07       	cpc	r21, r19
    5b46:	18 f4       	brcc	.+6      	; 0x5b4e <malloc+0x5c>
    5b48:	9a 01       	movw	r18, r20
    5b4a:	be 01       	movw	r22, r28
    5b4c:	df 01       	movw	r26, r30
    5b4e:	ef 01       	movw	r28, r30
    5b50:	02 80       	ldd	r0, Z+2	; 0x02
    5b52:	f3 81       	ldd	r31, Z+3	; 0x03
    5b54:	e0 2d       	mov	r30, r0
    5b56:	dc cf       	rjmp	.-72     	; 0x5b10 <malloc+0x1e>
    5b58:	21 15       	cp	r18, r1
    5b5a:	31 05       	cpc	r19, r1
    5b5c:	09 f1       	breq	.+66     	; 0x5ba0 <malloc+0xae>
    5b5e:	28 1b       	sub	r18, r24
    5b60:	39 0b       	sbc	r19, r25
    5b62:	24 30       	cpi	r18, 0x04	; 4
    5b64:	31 05       	cpc	r19, r1
    5b66:	90 f4       	brcc	.+36     	; 0x5b8c <malloc+0x9a>
    5b68:	12 96       	adiw	r26, 0x02	; 2
    5b6a:	8d 91       	ld	r24, X+
    5b6c:	9c 91       	ld	r25, X
    5b6e:	13 97       	sbiw	r26, 0x03	; 3
    5b70:	61 15       	cp	r22, r1
    5b72:	71 05       	cpc	r23, r1
    5b74:	21 f0       	breq	.+8      	; 0x5b7e <malloc+0x8c>
    5b76:	fb 01       	movw	r30, r22
    5b78:	93 83       	std	Z+3, r25	; 0x03
    5b7a:	82 83       	std	Z+2, r24	; 0x02
    5b7c:	04 c0       	rjmp	.+8      	; 0x5b86 <malloc+0x94>
    5b7e:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <__flp+0x1>
    5b82:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <__flp>
    5b86:	fd 01       	movw	r30, r26
    5b88:	32 96       	adiw	r30, 0x02	; 2
    5b8a:	44 c0       	rjmp	.+136    	; 0x5c14 <malloc+0x122>
    5b8c:	fd 01       	movw	r30, r26
    5b8e:	e2 0f       	add	r30, r18
    5b90:	f3 1f       	adc	r31, r19
    5b92:	81 93       	st	Z+, r24
    5b94:	91 93       	st	Z+, r25
    5b96:	22 50       	subi	r18, 0x02	; 2
    5b98:	31 09       	sbc	r19, r1
    5b9a:	2d 93       	st	X+, r18
    5b9c:	3c 93       	st	X, r19
    5b9e:	3a c0       	rjmp	.+116    	; 0x5c14 <malloc+0x122>
    5ba0:	20 91 ba 0c 	lds	r18, 0x0CBA	; 0x800cba <__brkval>
    5ba4:	30 91 bb 0c 	lds	r19, 0x0CBB	; 0x800cbb <__brkval+0x1>
    5ba8:	23 2b       	or	r18, r19
    5baa:	41 f4       	brne	.+16     	; 0x5bbc <malloc+0xca>
    5bac:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5bb0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5bb4:	30 93 bb 0c 	sts	0x0CBB, r19	; 0x800cbb <__brkval+0x1>
    5bb8:	20 93 ba 0c 	sts	0x0CBA, r18	; 0x800cba <__brkval>
    5bbc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5bc0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5bc4:	21 15       	cp	r18, r1
    5bc6:	31 05       	cpc	r19, r1
    5bc8:	41 f4       	brne	.+16     	; 0x5bda <malloc+0xe8>
    5bca:	2d b7       	in	r18, 0x3d	; 61
    5bcc:	3e b7       	in	r19, 0x3e	; 62
    5bce:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5bd2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5bd6:	24 1b       	sub	r18, r20
    5bd8:	35 0b       	sbc	r19, r21
    5bda:	e0 91 ba 0c 	lds	r30, 0x0CBA	; 0x800cba <__brkval>
    5bde:	f0 91 bb 0c 	lds	r31, 0x0CBB	; 0x800cbb <__brkval+0x1>
    5be2:	e2 17       	cp	r30, r18
    5be4:	f3 07       	cpc	r31, r19
    5be6:	a0 f4       	brcc	.+40     	; 0x5c10 <malloc+0x11e>
    5be8:	2e 1b       	sub	r18, r30
    5bea:	3f 0b       	sbc	r19, r31
    5bec:	28 17       	cp	r18, r24
    5bee:	39 07       	cpc	r19, r25
    5bf0:	78 f0       	brcs	.+30     	; 0x5c10 <malloc+0x11e>
    5bf2:	ac 01       	movw	r20, r24
    5bf4:	4e 5f       	subi	r20, 0xFE	; 254
    5bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    5bf8:	24 17       	cp	r18, r20
    5bfa:	35 07       	cpc	r19, r21
    5bfc:	48 f0       	brcs	.+18     	; 0x5c10 <malloc+0x11e>
    5bfe:	4e 0f       	add	r20, r30
    5c00:	5f 1f       	adc	r21, r31
    5c02:	50 93 bb 0c 	sts	0x0CBB, r21	; 0x800cbb <__brkval+0x1>
    5c06:	40 93 ba 0c 	sts	0x0CBA, r20	; 0x800cba <__brkval>
    5c0a:	81 93       	st	Z+, r24
    5c0c:	91 93       	st	Z+, r25
    5c0e:	02 c0       	rjmp	.+4      	; 0x5c14 <malloc+0x122>
    5c10:	e0 e0       	ldi	r30, 0x00	; 0
    5c12:	f0 e0       	ldi	r31, 0x00	; 0
    5c14:	cf 01       	movw	r24, r30
    5c16:	df 91       	pop	r29
    5c18:	cf 91       	pop	r28
    5c1a:	08 95       	ret

00005c1c <free>:
    5c1c:	0f 93       	push	r16
    5c1e:	1f 93       	push	r17
    5c20:	cf 93       	push	r28
    5c22:	df 93       	push	r29
    5c24:	00 97       	sbiw	r24, 0x00	; 0
    5c26:	09 f4       	brne	.+2      	; 0x5c2a <free+0xe>
    5c28:	8c c0       	rjmp	.+280    	; 0x5d42 <free+0x126>
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	32 97       	sbiw	r30, 0x02	; 2
    5c2e:	13 82       	std	Z+3, r1	; 0x03
    5c30:	12 82       	std	Z+2, r1	; 0x02
    5c32:	00 91 bc 0c 	lds	r16, 0x0CBC	; 0x800cbc <__flp>
    5c36:	10 91 bd 0c 	lds	r17, 0x0CBD	; 0x800cbd <__flp+0x1>
    5c3a:	01 15       	cp	r16, r1
    5c3c:	11 05       	cpc	r17, r1
    5c3e:	81 f4       	brne	.+32     	; 0x5c60 <free+0x44>
    5c40:	20 81       	ld	r18, Z
    5c42:	31 81       	ldd	r19, Z+1	; 0x01
    5c44:	82 0f       	add	r24, r18
    5c46:	93 1f       	adc	r25, r19
    5c48:	20 91 ba 0c 	lds	r18, 0x0CBA	; 0x800cba <__brkval>
    5c4c:	30 91 bb 0c 	lds	r19, 0x0CBB	; 0x800cbb <__brkval+0x1>
    5c50:	28 17       	cp	r18, r24
    5c52:	39 07       	cpc	r19, r25
    5c54:	79 f5       	brne	.+94     	; 0x5cb4 <free+0x98>
    5c56:	f0 93 bb 0c 	sts	0x0CBB, r31	; 0x800cbb <__brkval+0x1>
    5c5a:	e0 93 ba 0c 	sts	0x0CBA, r30	; 0x800cba <__brkval>
    5c5e:	71 c0       	rjmp	.+226    	; 0x5d42 <free+0x126>
    5c60:	d8 01       	movw	r26, r16
    5c62:	40 e0       	ldi	r20, 0x00	; 0
    5c64:	50 e0       	ldi	r21, 0x00	; 0
    5c66:	ae 17       	cp	r26, r30
    5c68:	bf 07       	cpc	r27, r31
    5c6a:	50 f4       	brcc	.+20     	; 0x5c80 <free+0x64>
    5c6c:	12 96       	adiw	r26, 0x02	; 2
    5c6e:	2d 91       	ld	r18, X+
    5c70:	3c 91       	ld	r19, X
    5c72:	13 97       	sbiw	r26, 0x03	; 3
    5c74:	ad 01       	movw	r20, r26
    5c76:	21 15       	cp	r18, r1
    5c78:	31 05       	cpc	r19, r1
    5c7a:	09 f1       	breq	.+66     	; 0x5cbe <free+0xa2>
    5c7c:	d9 01       	movw	r26, r18
    5c7e:	f3 cf       	rjmp	.-26     	; 0x5c66 <free+0x4a>
    5c80:	9d 01       	movw	r18, r26
    5c82:	da 01       	movw	r26, r20
    5c84:	33 83       	std	Z+3, r19	; 0x03
    5c86:	22 83       	std	Z+2, r18	; 0x02
    5c88:	60 81       	ld	r22, Z
    5c8a:	71 81       	ldd	r23, Z+1	; 0x01
    5c8c:	86 0f       	add	r24, r22
    5c8e:	97 1f       	adc	r25, r23
    5c90:	82 17       	cp	r24, r18
    5c92:	93 07       	cpc	r25, r19
    5c94:	69 f4       	brne	.+26     	; 0x5cb0 <free+0x94>
    5c96:	ec 01       	movw	r28, r24
    5c98:	28 81       	ld	r18, Y
    5c9a:	39 81       	ldd	r19, Y+1	; 0x01
    5c9c:	26 0f       	add	r18, r22
    5c9e:	37 1f       	adc	r19, r23
    5ca0:	2e 5f       	subi	r18, 0xFE	; 254
    5ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca4:	31 83       	std	Z+1, r19	; 0x01
    5ca6:	20 83       	st	Z, r18
    5ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    5caa:	9b 81       	ldd	r25, Y+3	; 0x03
    5cac:	93 83       	std	Z+3, r25	; 0x03
    5cae:	82 83       	std	Z+2, r24	; 0x02
    5cb0:	45 2b       	or	r20, r21
    5cb2:	29 f4       	brne	.+10     	; 0x5cbe <free+0xa2>
    5cb4:	f0 93 bd 0c 	sts	0x0CBD, r31	; 0x800cbd <__flp+0x1>
    5cb8:	e0 93 bc 0c 	sts	0x0CBC, r30	; 0x800cbc <__flp>
    5cbc:	42 c0       	rjmp	.+132    	; 0x5d42 <free+0x126>
    5cbe:	13 96       	adiw	r26, 0x03	; 3
    5cc0:	fc 93       	st	X, r31
    5cc2:	ee 93       	st	-X, r30
    5cc4:	12 97       	sbiw	r26, 0x02	; 2
    5cc6:	ed 01       	movw	r28, r26
    5cc8:	49 91       	ld	r20, Y+
    5cca:	59 91       	ld	r21, Y+
    5ccc:	9e 01       	movw	r18, r28
    5cce:	24 0f       	add	r18, r20
    5cd0:	35 1f       	adc	r19, r21
    5cd2:	e2 17       	cp	r30, r18
    5cd4:	f3 07       	cpc	r31, r19
    5cd6:	71 f4       	brne	.+28     	; 0x5cf4 <free+0xd8>
    5cd8:	80 81       	ld	r24, Z
    5cda:	91 81       	ldd	r25, Z+1	; 0x01
    5cdc:	84 0f       	add	r24, r20
    5cde:	95 1f       	adc	r25, r21
    5ce0:	02 96       	adiw	r24, 0x02	; 2
    5ce2:	11 96       	adiw	r26, 0x01	; 1
    5ce4:	9c 93       	st	X, r25
    5ce6:	8e 93       	st	-X, r24
    5ce8:	82 81       	ldd	r24, Z+2	; 0x02
    5cea:	93 81       	ldd	r25, Z+3	; 0x03
    5cec:	13 96       	adiw	r26, 0x03	; 3
    5cee:	9c 93       	st	X, r25
    5cf0:	8e 93       	st	-X, r24
    5cf2:	12 97       	sbiw	r26, 0x02	; 2
    5cf4:	e0 e0       	ldi	r30, 0x00	; 0
    5cf6:	f0 e0       	ldi	r31, 0x00	; 0
    5cf8:	d8 01       	movw	r26, r16
    5cfa:	12 96       	adiw	r26, 0x02	; 2
    5cfc:	8d 91       	ld	r24, X+
    5cfe:	9c 91       	ld	r25, X
    5d00:	13 97       	sbiw	r26, 0x03	; 3
    5d02:	00 97       	sbiw	r24, 0x00	; 0
    5d04:	19 f0       	breq	.+6      	; 0x5d0c <free+0xf0>
    5d06:	f8 01       	movw	r30, r16
    5d08:	8c 01       	movw	r16, r24
    5d0a:	f6 cf       	rjmp	.-20     	; 0x5cf8 <free+0xdc>
    5d0c:	8d 91       	ld	r24, X+
    5d0e:	9c 91       	ld	r25, X
    5d10:	98 01       	movw	r18, r16
    5d12:	2e 5f       	subi	r18, 0xFE	; 254
    5d14:	3f 4f       	sbci	r19, 0xFF	; 255
    5d16:	82 0f       	add	r24, r18
    5d18:	93 1f       	adc	r25, r19
    5d1a:	20 91 ba 0c 	lds	r18, 0x0CBA	; 0x800cba <__brkval>
    5d1e:	30 91 bb 0c 	lds	r19, 0x0CBB	; 0x800cbb <__brkval+0x1>
    5d22:	28 17       	cp	r18, r24
    5d24:	39 07       	cpc	r19, r25
    5d26:	69 f4       	brne	.+26     	; 0x5d42 <free+0x126>
    5d28:	30 97       	sbiw	r30, 0x00	; 0
    5d2a:	29 f4       	brne	.+10     	; 0x5d36 <free+0x11a>
    5d2c:	10 92 bd 0c 	sts	0x0CBD, r1	; 0x800cbd <__flp+0x1>
    5d30:	10 92 bc 0c 	sts	0x0CBC, r1	; 0x800cbc <__flp>
    5d34:	02 c0       	rjmp	.+4      	; 0x5d3a <free+0x11e>
    5d36:	13 82       	std	Z+3, r1	; 0x03
    5d38:	12 82       	std	Z+2, r1	; 0x02
    5d3a:	10 93 bb 0c 	sts	0x0CBB, r17	; 0x800cbb <__brkval+0x1>
    5d3e:	00 93 ba 0c 	sts	0x0CBA, r16	; 0x800cba <__brkval>
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	1f 91       	pop	r17
    5d48:	0f 91       	pop	r16
    5d4a:	08 95       	ret

00005d4c <do_rand>:
    5d4c:	8f 92       	push	r8
    5d4e:	9f 92       	push	r9
    5d50:	af 92       	push	r10
    5d52:	bf 92       	push	r11
    5d54:	cf 92       	push	r12
    5d56:	df 92       	push	r13
    5d58:	ef 92       	push	r14
    5d5a:	ff 92       	push	r15
    5d5c:	cf 93       	push	r28
    5d5e:	df 93       	push	r29
    5d60:	ec 01       	movw	r28, r24
    5d62:	68 81       	ld	r22, Y
    5d64:	79 81       	ldd	r23, Y+1	; 0x01
    5d66:	8a 81       	ldd	r24, Y+2	; 0x02
    5d68:	9b 81       	ldd	r25, Y+3	; 0x03
    5d6a:	61 15       	cp	r22, r1
    5d6c:	71 05       	cpc	r23, r1
    5d6e:	81 05       	cpc	r24, r1
    5d70:	91 05       	cpc	r25, r1
    5d72:	21 f4       	brne	.+8      	; 0x5d7c <do_rand+0x30>
    5d74:	64 e2       	ldi	r22, 0x24	; 36
    5d76:	79 ed       	ldi	r23, 0xD9	; 217
    5d78:	8b e5       	ldi	r24, 0x5B	; 91
    5d7a:	97 e0       	ldi	r25, 0x07	; 7
    5d7c:	2d e1       	ldi	r18, 0x1D	; 29
    5d7e:	33 ef       	ldi	r19, 0xF3	; 243
    5d80:	41 e0       	ldi	r20, 0x01	; 1
    5d82:	50 e0       	ldi	r21, 0x00	; 0
    5d84:	0e 94 a8 34 	call	0x6950	; 0x6950 <__divmodsi4>
    5d88:	49 01       	movw	r8, r18
    5d8a:	5a 01       	movw	r10, r20
    5d8c:	9b 01       	movw	r18, r22
    5d8e:	ac 01       	movw	r20, r24
    5d90:	a7 ea       	ldi	r26, 0xA7	; 167
    5d92:	b1 e4       	ldi	r27, 0x41	; 65
    5d94:	0e 94 c7 34 	call	0x698e	; 0x698e <__muluhisi3>
    5d98:	6b 01       	movw	r12, r22
    5d9a:	7c 01       	movw	r14, r24
    5d9c:	ac ee       	ldi	r26, 0xEC	; 236
    5d9e:	b4 ef       	ldi	r27, 0xF4	; 244
    5da0:	a5 01       	movw	r20, r10
    5da2:	94 01       	movw	r18, r8
    5da4:	0e 94 d5 34 	call	0x69aa	; 0x69aa <__mulohisi3>
    5da8:	dc 01       	movw	r26, r24
    5daa:	cb 01       	movw	r24, r22
    5dac:	8c 0d       	add	r24, r12
    5dae:	9d 1d       	adc	r25, r13
    5db0:	ae 1d       	adc	r26, r14
    5db2:	bf 1d       	adc	r27, r15
    5db4:	b7 ff       	sbrs	r27, 7
    5db6:	03 c0       	rjmp	.+6      	; 0x5dbe <do_rand+0x72>
    5db8:	01 97       	sbiw	r24, 0x01	; 1
    5dba:	a1 09       	sbc	r26, r1
    5dbc:	b0 48       	sbci	r27, 0x80	; 128
    5dbe:	88 83       	st	Y, r24
    5dc0:	99 83       	std	Y+1, r25	; 0x01
    5dc2:	aa 83       	std	Y+2, r26	; 0x02
    5dc4:	bb 83       	std	Y+3, r27	; 0x03
    5dc6:	9f 77       	andi	r25, 0x7F	; 127
    5dc8:	df 91       	pop	r29
    5dca:	cf 91       	pop	r28
    5dcc:	ff 90       	pop	r15
    5dce:	ef 90       	pop	r14
    5dd0:	df 90       	pop	r13
    5dd2:	cf 90       	pop	r12
    5dd4:	bf 90       	pop	r11
    5dd6:	af 90       	pop	r10
    5dd8:	9f 90       	pop	r9
    5dda:	8f 90       	pop	r8
    5ddc:	08 95       	ret

00005dde <rand_r>:
    5dde:	0c 94 a6 2e 	jmp	0x5d4c	; 0x5d4c <do_rand>

00005de2 <rand>:
    5de2:	86 e0       	ldi	r24, 0x06	; 6
    5de4:	92 e0       	ldi	r25, 0x02	; 2
    5de6:	0c 94 a6 2e 	jmp	0x5d4c	; 0x5d4c <do_rand>

00005dea <srand>:
    5dea:	a0 e0       	ldi	r26, 0x00	; 0
    5dec:	b0 e0       	ldi	r27, 0x00	; 0
    5dee:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    5df2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5df6:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5dfa:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5dfe:	08 95       	ret

00005e00 <strtoul>:
    5e00:	2f 92       	push	r2
    5e02:	3f 92       	push	r3
    5e04:	4f 92       	push	r4
    5e06:	5f 92       	push	r5
    5e08:	6f 92       	push	r6
    5e0a:	7f 92       	push	r7
    5e0c:	8f 92       	push	r8
    5e0e:	9f 92       	push	r9
    5e10:	af 92       	push	r10
    5e12:	bf 92       	push	r11
    5e14:	cf 92       	push	r12
    5e16:	df 92       	push	r13
    5e18:	ef 92       	push	r14
    5e1a:	ff 92       	push	r15
    5e1c:	0f 93       	push	r16
    5e1e:	1f 93       	push	r17
    5e20:	cf 93       	push	r28
    5e22:	df 93       	push	r29
    5e24:	00 d0       	rcall	.+0      	; 0x5e26 <strtoul+0x26>
    5e26:	00 d0       	rcall	.+0      	; 0x5e28 <strtoul+0x28>
    5e28:	00 d0       	rcall	.+0      	; 0x5e2a <strtoul+0x2a>
    5e2a:	cd b7       	in	r28, 0x3d	; 61
    5e2c:	de b7       	in	r29, 0x3e	; 62
    5e2e:	5c 01       	movw	r10, r24
    5e30:	6b 01       	movw	r12, r22
    5e32:	7a 01       	movw	r14, r20
    5e34:	61 15       	cp	r22, r1
    5e36:	71 05       	cpc	r23, r1
    5e38:	19 f0       	breq	.+6      	; 0x5e40 <strtoul+0x40>
    5e3a:	db 01       	movw	r26, r22
    5e3c:	8d 93       	st	X+, r24
    5e3e:	9c 93       	st	X, r25
    5e40:	e1 14       	cp	r14, r1
    5e42:	f1 04       	cpc	r15, r1
    5e44:	29 f0       	breq	.+10     	; 0x5e50 <strtoul+0x50>
    5e46:	c7 01       	movw	r24, r14
    5e48:	02 97       	sbiw	r24, 0x02	; 2
    5e4a:	83 97       	sbiw	r24, 0x23	; 35
    5e4c:	08 f0       	brcs	.+2      	; 0x5e50 <strtoul+0x50>
    5e4e:	dc c0       	rjmp	.+440    	; 0x6008 <strtoul+0x208>
    5e50:	35 01       	movw	r6, r10
    5e52:	bf ef       	ldi	r27, 0xFF	; 255
    5e54:	6b 1a       	sub	r6, r27
    5e56:	7b 0a       	sbc	r7, r27
    5e58:	f5 01       	movw	r30, r10
    5e5a:	10 81       	ld	r17, Z
    5e5c:	81 2f       	mov	r24, r17
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	0e 94 32 31 	call	0x6264	; 0x6264 <isspace>
    5e64:	89 2b       	or	r24, r25
    5e66:	11 f0       	breq	.+4      	; 0x5e6c <strtoul+0x6c>
    5e68:	53 01       	movw	r10, r6
    5e6a:	f2 cf       	rjmp	.-28     	; 0x5e50 <strtoul+0x50>
    5e6c:	1d 32       	cpi	r17, 0x2D	; 45
    5e6e:	49 f4       	brne	.+18     	; 0x5e82 <strtoul+0x82>
    5e70:	35 01       	movw	r6, r10
    5e72:	f2 e0       	ldi	r31, 0x02	; 2
    5e74:	6f 0e       	add	r6, r31
    5e76:	71 1c       	adc	r7, r1
    5e78:	d5 01       	movw	r26, r10
    5e7a:	11 96       	adiw	r26, 0x01	; 1
    5e7c:	1c 91       	ld	r17, X
    5e7e:	01 e0       	ldi	r16, 0x01	; 1
    5e80:	09 c0       	rjmp	.+18     	; 0x5e94 <strtoul+0x94>
    5e82:	1b 32       	cpi	r17, 0x2B	; 43
    5e84:	31 f4       	brne	.+12     	; 0x5e92 <strtoul+0x92>
    5e86:	35 01       	movw	r6, r10
    5e88:	b2 e0       	ldi	r27, 0x02	; 2
    5e8a:	6b 0e       	add	r6, r27
    5e8c:	71 1c       	adc	r7, r1
    5e8e:	f5 01       	movw	r30, r10
    5e90:	11 81       	ldd	r17, Z+1	; 0x01
    5e92:	00 e0       	ldi	r16, 0x00	; 0
    5e94:	e1 14       	cp	r14, r1
    5e96:	f1 04       	cpc	r15, r1
    5e98:	09 f4       	brne	.+2      	; 0x5e9c <strtoul+0x9c>
    5e9a:	c4 c0       	rjmp	.+392    	; 0x6024 <strtoul+0x224>
    5e9c:	f0 e1       	ldi	r31, 0x10	; 16
    5e9e:	ef 16       	cp	r14, r31
    5ea0:	f1 04       	cpc	r15, r1
    5ea2:	89 f4       	brne	.+34     	; 0x5ec6 <strtoul+0xc6>
    5ea4:	10 33       	cpi	r17, 0x30	; 48
    5ea6:	99 f5       	brne	.+102    	; 0x5f0e <strtoul+0x10e>
    5ea8:	d3 01       	movw	r26, r6
    5eaa:	8c 91       	ld	r24, X
    5eac:	8f 7d       	andi	r24, 0xDF	; 223
    5eae:	88 35       	cpi	r24, 0x58	; 88
    5eb0:	09 f0       	breq	.+2      	; 0x5eb4 <strtoul+0xb4>
    5eb2:	b2 c0       	rjmp	.+356    	; 0x6018 <strtoul+0x218>
    5eb4:	11 96       	adiw	r26, 0x01	; 1
    5eb6:	1c 91       	ld	r17, X
    5eb8:	b2 e0       	ldi	r27, 0x02	; 2
    5eba:	6b 0e       	add	r6, r27
    5ebc:	71 1c       	adc	r7, r1
    5ebe:	02 60       	ori	r16, 0x02	; 2
    5ec0:	50 e1       	ldi	r21, 0x10	; 16
    5ec2:	e5 2e       	mov	r14, r21
    5ec4:	f1 2c       	mov	r15, r1
    5ec6:	ea e0       	ldi	r30, 0x0A	; 10
    5ec8:	ee 16       	cp	r14, r30
    5eca:	f1 04       	cpc	r15, r1
    5ecc:	09 f4       	brne	.+2      	; 0x5ed0 <strtoul+0xd0>
    5ece:	b0 c0       	rjmp	.+352    	; 0x6030 <strtoul+0x230>
    5ed0:	f0 e1       	ldi	r31, 0x10	; 16
    5ed2:	ef 16       	cp	r14, r31
    5ed4:	f1 04       	cpc	r15, r1
    5ed6:	d9 f0       	breq	.+54     	; 0x5f0e <strtoul+0x10e>
    5ed8:	28 e0       	ldi	r18, 0x08	; 8
    5eda:	e2 16       	cp	r14, r18
    5edc:	f1 04       	cpc	r15, r1
    5ede:	51 f4       	brne	.+20     	; 0x5ef4 <strtoul+0xf4>
    5ee0:	38 e0       	ldi	r19, 0x08	; 8
    5ee2:	e3 2e       	mov	r14, r19
    5ee4:	f1 2c       	mov	r15, r1
    5ee6:	88 24       	eor	r8, r8
    5ee8:	8a 94       	dec	r8
    5eea:	98 2c       	mov	r9, r8
    5eec:	a8 2c       	mov	r10, r8
    5eee:	4f e1       	ldi	r20, 0x1F	; 31
    5ef0:	b4 2e       	mov	r11, r20
    5ef2:	13 c0       	rjmp	.+38     	; 0x5f1a <strtoul+0x11a>
    5ef4:	6f ef       	ldi	r22, 0xFF	; 255
    5ef6:	7f ef       	ldi	r23, 0xFF	; 255
    5ef8:	cb 01       	movw	r24, r22
    5efa:	97 01       	movw	r18, r14
    5efc:	0f 2c       	mov	r0, r15
    5efe:	00 0c       	add	r0, r0
    5f00:	44 0b       	sbc	r20, r20
    5f02:	55 0b       	sbc	r21, r21
    5f04:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__udivmodsi4>
    5f08:	49 01       	movw	r8, r18
    5f0a:	5a 01       	movw	r10, r20
    5f0c:	06 c0       	rjmp	.+12     	; 0x5f1a <strtoul+0x11a>
    5f0e:	88 24       	eor	r8, r8
    5f10:	8a 94       	dec	r8
    5f12:	98 2c       	mov	r9, r8
    5f14:	a8 2c       	mov	r10, r8
    5f16:	2f e0       	ldi	r18, 0x0F	; 15
    5f18:	b2 2e       	mov	r11, r18
    5f1a:	7e 82       	std	Y+6, r7	; 0x06
    5f1c:	6d 82       	std	Y+5, r6	; 0x05
    5f1e:	60 e0       	ldi	r22, 0x00	; 0
    5f20:	20 e0       	ldi	r18, 0x00	; 0
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	a9 01       	movw	r20, r18
    5f26:	27 01       	movw	r4, r14
    5f28:	0f 2c       	mov	r0, r15
    5f2a:	00 0c       	add	r0, r0
    5f2c:	66 08       	sbc	r6, r6
    5f2e:	77 08       	sbc	r7, r7
    5f30:	2d 80       	ldd	r2, Y+5	; 0x05
    5f32:	3e 80       	ldd	r3, Y+6	; 0x06
    5f34:	e0 ed       	ldi	r30, 0xD0	; 208
    5f36:	e1 0f       	add	r30, r17
    5f38:	ea 30       	cpi	r30, 0x0A	; 10
    5f3a:	60 f0       	brcs	.+24     	; 0x5f54 <strtoul+0x154>
    5f3c:	8f eb       	ldi	r24, 0xBF	; 191
    5f3e:	81 0f       	add	r24, r17
    5f40:	8a 31       	cpi	r24, 0x1A	; 26
    5f42:	10 f4       	brcc	.+4      	; 0x5f48 <strtoul+0x148>
    5f44:	e9 ec       	ldi	r30, 0xC9	; 201
    5f46:	05 c0       	rjmp	.+10     	; 0x5f52 <strtoul+0x152>
    5f48:	8f e9       	ldi	r24, 0x9F	; 159
    5f4a:	81 0f       	add	r24, r17
    5f4c:	8a 31       	cpi	r24, 0x1A	; 26
    5f4e:	90 f5       	brcc	.+100    	; 0x5fb4 <strtoul+0x1b4>
    5f50:	e9 ea       	ldi	r30, 0xA9	; 169
    5f52:	e1 0f       	add	r30, r17
    5f54:	8e 2f       	mov	r24, r30
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	8e 15       	cp	r24, r14
    5f5a:	9f 05       	cpc	r25, r15
    5f5c:	5c f5       	brge	.+86     	; 0x5fb4 <strtoul+0x1b4>
    5f5e:	6f 3f       	cpi	r22, 0xFF	; 255
    5f60:	09 f1       	breq	.+66     	; 0x5fa4 <strtoul+0x1a4>
    5f62:	82 16       	cp	r8, r18
    5f64:	93 06       	cpc	r9, r19
    5f66:	a4 06       	cpc	r10, r20
    5f68:	b5 06       	cpc	r11, r21
    5f6a:	d8 f0       	brcs	.+54     	; 0x5fa2 <strtoul+0x1a2>
    5f6c:	c3 01       	movw	r24, r6
    5f6e:	b2 01       	movw	r22, r4
    5f70:	0e 94 98 34 	call	0x6930	; 0x6930 <__mulsi3>
    5f74:	2e 2f       	mov	r18, r30
    5f76:	30 e0       	ldi	r19, 0x00	; 0
    5f78:	40 e0       	ldi	r20, 0x00	; 0
    5f7a:	50 e0       	ldi	r21, 0x00	; 0
    5f7c:	29 83       	std	Y+1, r18	; 0x01
    5f7e:	3a 83       	std	Y+2, r19	; 0x02
    5f80:	4b 83       	std	Y+3, r20	; 0x03
    5f82:	5c 83       	std	Y+4, r21	; 0x04
    5f84:	26 0f       	add	r18, r22
    5f86:	37 1f       	adc	r19, r23
    5f88:	48 1f       	adc	r20, r24
    5f8a:	59 1f       	adc	r21, r25
    5f8c:	89 81       	ldd	r24, Y+1	; 0x01
    5f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f90:	ab 81       	ldd	r26, Y+3	; 0x03
    5f92:	bc 81       	ldd	r27, Y+4	; 0x04
    5f94:	28 17       	cp	r18, r24
    5f96:	39 07       	cpc	r19, r25
    5f98:	4a 07       	cpc	r20, r26
    5f9a:	5b 07       	cpc	r21, r27
    5f9c:	10 f0       	brcs	.+4      	; 0x5fa2 <strtoul+0x1a2>
    5f9e:	61 e0       	ldi	r22, 0x01	; 1
    5fa0:	01 c0       	rjmp	.+2      	; 0x5fa4 <strtoul+0x1a4>
    5fa2:	6f ef       	ldi	r22, 0xFF	; 255
    5fa4:	ed 81       	ldd	r30, Y+5	; 0x05
    5fa6:	fe 81       	ldd	r31, Y+6	; 0x06
    5fa8:	31 96       	adiw	r30, 0x01	; 1
    5faa:	fe 83       	std	Y+6, r31	; 0x06
    5fac:	ed 83       	std	Y+5, r30	; 0x05
    5fae:	d1 01       	movw	r26, r2
    5fb0:	1c 91       	ld	r17, X
    5fb2:	be cf       	rjmp	.-132    	; 0x5f30 <strtoul+0x130>
    5fb4:	c1 14       	cp	r12, r1
    5fb6:	d1 04       	cpc	r13, r1
    5fb8:	89 f0       	breq	.+34     	; 0x5fdc <strtoul+0x1dc>
    5fba:	66 23       	and	r22, r22
    5fbc:	39 f0       	breq	.+14     	; 0x5fcc <strtoul+0x1cc>
    5fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    5fc2:	01 97       	sbiw	r24, 0x01	; 1
    5fc4:	f6 01       	movw	r30, r12
    5fc6:	91 83       	std	Z+1, r25	; 0x01
    5fc8:	80 83       	st	Z, r24
    5fca:	08 c0       	rjmp	.+16     	; 0x5fdc <strtoul+0x1dc>
    5fcc:	01 ff       	sbrs	r16, 1
    5fce:	06 c0       	rjmp	.+12     	; 0x5fdc <strtoul+0x1dc>
    5fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    5fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    5fd4:	02 97       	sbiw	r24, 0x02	; 2
    5fd6:	d6 01       	movw	r26, r12
    5fd8:	8d 93       	st	X+, r24
    5fda:	9c 93       	st	X, r25
    5fdc:	00 ff       	sbrs	r16, 0
    5fde:	07 c0       	rjmp	.+14     	; 0x5fee <strtoul+0x1ee>
    5fe0:	50 95       	com	r21
    5fe2:	40 95       	com	r20
    5fe4:	30 95       	com	r19
    5fe6:	21 95       	neg	r18
    5fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    5fea:	4f 4f       	sbci	r20, 0xFF	; 255
    5fec:	5f 4f       	sbci	r21, 0xFF	; 255
    5fee:	67 ff       	sbrs	r22, 7
    5ff0:	10 c0       	rjmp	.+32     	; 0x6012 <strtoul+0x212>
    5ff2:	82 e2       	ldi	r24, 0x22	; 34
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	90 93 bf 0c 	sts	0x0CBF, r25	; 0x800cbf <errno+0x1>
    5ffa:	80 93 be 0c 	sts	0x0CBE, r24	; 0x800cbe <errno>
    5ffe:	6f ef       	ldi	r22, 0xFF	; 255
    6000:	7f ef       	ldi	r23, 0xFF	; 255
    6002:	8f ef       	ldi	r24, 0xFF	; 255
    6004:	9f ef       	ldi	r25, 0xFF	; 255
    6006:	1b c0       	rjmp	.+54     	; 0x603e <strtoul+0x23e>
    6008:	60 e0       	ldi	r22, 0x00	; 0
    600a:	70 e0       	ldi	r23, 0x00	; 0
    600c:	80 e0       	ldi	r24, 0x00	; 0
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	16 c0       	rjmp	.+44     	; 0x603e <strtoul+0x23e>
    6012:	b9 01       	movw	r22, r18
    6014:	ca 01       	movw	r24, r20
    6016:	13 c0       	rjmp	.+38     	; 0x603e <strtoul+0x23e>
    6018:	10 e3       	ldi	r17, 0x30	; 48
    601a:	e1 14       	cp	r14, r1
    601c:	f1 04       	cpc	r15, r1
    601e:	09 f4       	brne	.+2      	; 0x6022 <strtoul+0x222>
    6020:	5f cf       	rjmp	.-322    	; 0x5ee0 <strtoul+0xe0>
    6022:	51 cf       	rjmp	.-350    	; 0x5ec6 <strtoul+0xc6>
    6024:	10 33       	cpi	r17, 0x30	; 48
    6026:	09 f4       	brne	.+2      	; 0x602a <strtoul+0x22a>
    6028:	3f cf       	rjmp	.-386    	; 0x5ea8 <strtoul+0xa8>
    602a:	9a e0       	ldi	r25, 0x0A	; 10
    602c:	e9 2e       	mov	r14, r25
    602e:	f1 2c       	mov	r15, r1
    6030:	89 e9       	ldi	r24, 0x99	; 153
    6032:	88 2e       	mov	r8, r24
    6034:	98 2c       	mov	r9, r8
    6036:	a8 2c       	mov	r10, r8
    6038:	89 e1       	ldi	r24, 0x19	; 25
    603a:	b8 2e       	mov	r11, r24
    603c:	6e cf       	rjmp	.-292    	; 0x5f1a <strtoul+0x11a>
    603e:	26 96       	adiw	r28, 0x06	; 6
    6040:	0f b6       	in	r0, 0x3f	; 63
    6042:	f8 94       	cli
    6044:	de bf       	out	0x3e, r29	; 62
    6046:	0f be       	out	0x3f, r0	; 63
    6048:	cd bf       	out	0x3d, r28	; 61
    604a:	df 91       	pop	r29
    604c:	cf 91       	pop	r28
    604e:	1f 91       	pop	r17
    6050:	0f 91       	pop	r16
    6052:	ff 90       	pop	r15
    6054:	ef 90       	pop	r14
    6056:	df 90       	pop	r13
    6058:	cf 90       	pop	r12
    605a:	bf 90       	pop	r11
    605c:	af 90       	pop	r10
    605e:	9f 90       	pop	r9
    6060:	8f 90       	pop	r8
    6062:	7f 90       	pop	r7
    6064:	6f 90       	pop	r6
    6066:	5f 90       	pop	r5
    6068:	4f 90       	pop	r4
    606a:	3f 90       	pop	r3
    606c:	2f 90       	pop	r2
    606e:	08 95       	ret

00006070 <atof>:
    6070:	66 27       	eor	r22, r22
    6072:	77 27       	eor	r23, r23
    6074:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <strtod>

00006078 <atoi>:
    6078:	fc 01       	movw	r30, r24
    607a:	88 27       	eor	r24, r24
    607c:	99 27       	eor	r25, r25
    607e:	e8 94       	clt
    6080:	21 91       	ld	r18, Z+
    6082:	20 32       	cpi	r18, 0x20	; 32
    6084:	e9 f3       	breq	.-6      	; 0x6080 <atoi+0x8>
    6086:	29 30       	cpi	r18, 0x09	; 9
    6088:	10 f0       	brcs	.+4      	; 0x608e <atoi+0x16>
    608a:	2e 30       	cpi	r18, 0x0E	; 14
    608c:	c8 f3       	brcs	.-14     	; 0x6080 <atoi+0x8>
    608e:	2b 32       	cpi	r18, 0x2B	; 43
    6090:	41 f0       	breq	.+16     	; 0x60a2 <atoi+0x2a>
    6092:	2d 32       	cpi	r18, 0x2D	; 45
    6094:	39 f4       	brne	.+14     	; 0x60a4 <atoi+0x2c>
    6096:	68 94       	set
    6098:	04 c0       	rjmp	.+8      	; 0x60a2 <atoi+0x2a>
    609a:	0e 94 ab 31 	call	0x6356	; 0x6356 <__mulhi_const_10>
    609e:	82 0f       	add	r24, r18
    60a0:	91 1d       	adc	r25, r1
    60a2:	21 91       	ld	r18, Z+
    60a4:	20 53       	subi	r18, 0x30	; 48
    60a6:	2a 30       	cpi	r18, 0x0A	; 10
    60a8:	c0 f3       	brcs	.-16     	; 0x609a <atoi+0x22>
    60aa:	1e f4       	brtc	.+6      	; 0x60b2 <atoi+0x3a>
    60ac:	90 95       	com	r25
    60ae:	81 95       	neg	r24
    60b0:	9f 4f       	sbci	r25, 0xFF	; 255
    60b2:	08 95       	ret

000060b4 <__ftoa_engine>:
    60b4:	28 30       	cpi	r18, 0x08	; 8
    60b6:	08 f0       	brcs	.+2      	; 0x60ba <__ftoa_engine+0x6>
    60b8:	27 e0       	ldi	r18, 0x07	; 7
    60ba:	33 27       	eor	r19, r19
    60bc:	da 01       	movw	r26, r20
    60be:	99 0f       	add	r25, r25
    60c0:	31 1d       	adc	r19, r1
    60c2:	87 fd       	sbrc	r24, 7
    60c4:	91 60       	ori	r25, 0x01	; 1
    60c6:	00 96       	adiw	r24, 0x00	; 0
    60c8:	61 05       	cpc	r22, r1
    60ca:	71 05       	cpc	r23, r1
    60cc:	39 f4       	brne	.+14     	; 0x60dc <__ftoa_engine+0x28>
    60ce:	32 60       	ori	r19, 0x02	; 2
    60d0:	2e 5f       	subi	r18, 0xFE	; 254
    60d2:	3d 93       	st	X+, r19
    60d4:	30 e3       	ldi	r19, 0x30	; 48
    60d6:	2a 95       	dec	r18
    60d8:	e1 f7       	brne	.-8      	; 0x60d2 <__ftoa_engine+0x1e>
    60da:	08 95       	ret
    60dc:	9f 3f       	cpi	r25, 0xFF	; 255
    60de:	30 f0       	brcs	.+12     	; 0x60ec <__ftoa_engine+0x38>
    60e0:	80 38       	cpi	r24, 0x80	; 128
    60e2:	71 05       	cpc	r23, r1
    60e4:	61 05       	cpc	r22, r1
    60e6:	09 f0       	breq	.+2      	; 0x60ea <__ftoa_engine+0x36>
    60e8:	3c 5f       	subi	r19, 0xFC	; 252
    60ea:	3c 5f       	subi	r19, 0xFC	; 252
    60ec:	3d 93       	st	X+, r19
    60ee:	91 30       	cpi	r25, 0x01	; 1
    60f0:	08 f0       	brcs	.+2      	; 0x60f4 <__ftoa_engine+0x40>
    60f2:	80 68       	ori	r24, 0x80	; 128
    60f4:	91 1d       	adc	r25, r1
    60f6:	df 93       	push	r29
    60f8:	cf 93       	push	r28
    60fa:	1f 93       	push	r17
    60fc:	0f 93       	push	r16
    60fe:	ff 92       	push	r15
    6100:	ef 92       	push	r14
    6102:	19 2f       	mov	r17, r25
    6104:	98 7f       	andi	r25, 0xF8	; 248
    6106:	96 95       	lsr	r25
    6108:	e9 2f       	mov	r30, r25
    610a:	96 95       	lsr	r25
    610c:	96 95       	lsr	r25
    610e:	e9 0f       	add	r30, r25
    6110:	ff 27       	eor	r31, r31
    6112:	ea 51       	subi	r30, 0x1A	; 26
    6114:	fe 4f       	sbci	r31, 0xFE	; 254
    6116:	99 27       	eor	r25, r25
    6118:	33 27       	eor	r19, r19
    611a:	ee 24       	eor	r14, r14
    611c:	ff 24       	eor	r15, r15
    611e:	a7 01       	movw	r20, r14
    6120:	e7 01       	movw	r28, r14
    6122:	05 90       	lpm	r0, Z+
    6124:	08 94       	sec
    6126:	07 94       	ror	r0
    6128:	28 f4       	brcc	.+10     	; 0x6134 <__ftoa_engine+0x80>
    612a:	36 0f       	add	r19, r22
    612c:	e7 1e       	adc	r14, r23
    612e:	f8 1e       	adc	r15, r24
    6130:	49 1f       	adc	r20, r25
    6132:	51 1d       	adc	r21, r1
    6134:	66 0f       	add	r22, r22
    6136:	77 1f       	adc	r23, r23
    6138:	88 1f       	adc	r24, r24
    613a:	99 1f       	adc	r25, r25
    613c:	06 94       	lsr	r0
    613e:	a1 f7       	brne	.-24     	; 0x6128 <__ftoa_engine+0x74>
    6140:	05 90       	lpm	r0, Z+
    6142:	07 94       	ror	r0
    6144:	28 f4       	brcc	.+10     	; 0x6150 <__ftoa_engine+0x9c>
    6146:	e7 0e       	add	r14, r23
    6148:	f8 1e       	adc	r15, r24
    614a:	49 1f       	adc	r20, r25
    614c:	56 1f       	adc	r21, r22
    614e:	c1 1d       	adc	r28, r1
    6150:	77 0f       	add	r23, r23
    6152:	88 1f       	adc	r24, r24
    6154:	99 1f       	adc	r25, r25
    6156:	66 1f       	adc	r22, r22
    6158:	06 94       	lsr	r0
    615a:	a1 f7       	brne	.-24     	; 0x6144 <__ftoa_engine+0x90>
    615c:	05 90       	lpm	r0, Z+
    615e:	07 94       	ror	r0
    6160:	28 f4       	brcc	.+10     	; 0x616c <__ftoa_engine+0xb8>
    6162:	f8 0e       	add	r15, r24
    6164:	49 1f       	adc	r20, r25
    6166:	56 1f       	adc	r21, r22
    6168:	c7 1f       	adc	r28, r23
    616a:	d1 1d       	adc	r29, r1
    616c:	88 0f       	add	r24, r24
    616e:	99 1f       	adc	r25, r25
    6170:	66 1f       	adc	r22, r22
    6172:	77 1f       	adc	r23, r23
    6174:	06 94       	lsr	r0
    6176:	a1 f7       	brne	.-24     	; 0x6160 <__ftoa_engine+0xac>
    6178:	05 90       	lpm	r0, Z+
    617a:	07 94       	ror	r0
    617c:	20 f4       	brcc	.+8      	; 0x6186 <__ftoa_engine+0xd2>
    617e:	49 0f       	add	r20, r25
    6180:	56 1f       	adc	r21, r22
    6182:	c7 1f       	adc	r28, r23
    6184:	d8 1f       	adc	r29, r24
    6186:	99 0f       	add	r25, r25
    6188:	66 1f       	adc	r22, r22
    618a:	77 1f       	adc	r23, r23
    618c:	88 1f       	adc	r24, r24
    618e:	06 94       	lsr	r0
    6190:	a9 f7       	brne	.-22     	; 0x617c <__ftoa_engine+0xc8>
    6192:	84 91       	lpm	r24, Z
    6194:	10 95       	com	r17
    6196:	17 70       	andi	r17, 0x07	; 7
    6198:	41 f0       	breq	.+16     	; 0x61aa <__ftoa_engine+0xf6>
    619a:	d6 95       	lsr	r29
    619c:	c7 95       	ror	r28
    619e:	57 95       	ror	r21
    61a0:	47 95       	ror	r20
    61a2:	f7 94       	ror	r15
    61a4:	e7 94       	ror	r14
    61a6:	1a 95       	dec	r17
    61a8:	c1 f7       	brne	.-16     	; 0x619a <__ftoa_engine+0xe6>
    61aa:	ec e8       	ldi	r30, 0x8C	; 140
    61ac:	f1 e0       	ldi	r31, 0x01	; 1
    61ae:	68 94       	set
    61b0:	15 90       	lpm	r1, Z+
    61b2:	15 91       	lpm	r17, Z+
    61b4:	35 91       	lpm	r19, Z+
    61b6:	65 91       	lpm	r22, Z+
    61b8:	95 91       	lpm	r25, Z+
    61ba:	05 90       	lpm	r0, Z+
    61bc:	7f e2       	ldi	r23, 0x2F	; 47
    61be:	73 95       	inc	r23
    61c0:	e1 18       	sub	r14, r1
    61c2:	f1 0a       	sbc	r15, r17
    61c4:	43 0b       	sbc	r20, r19
    61c6:	56 0b       	sbc	r21, r22
    61c8:	c9 0b       	sbc	r28, r25
    61ca:	d0 09       	sbc	r29, r0
    61cc:	c0 f7       	brcc	.-16     	; 0x61be <__ftoa_engine+0x10a>
    61ce:	e1 0c       	add	r14, r1
    61d0:	f1 1e       	adc	r15, r17
    61d2:	43 1f       	adc	r20, r19
    61d4:	56 1f       	adc	r21, r22
    61d6:	c9 1f       	adc	r28, r25
    61d8:	d0 1d       	adc	r29, r0
    61da:	7e f4       	brtc	.+30     	; 0x61fa <__ftoa_engine+0x146>
    61dc:	70 33       	cpi	r23, 0x30	; 48
    61de:	11 f4       	brne	.+4      	; 0x61e4 <__ftoa_engine+0x130>
    61e0:	8a 95       	dec	r24
    61e2:	e6 cf       	rjmp	.-52     	; 0x61b0 <__ftoa_engine+0xfc>
    61e4:	e8 94       	clt
    61e6:	01 50       	subi	r16, 0x01	; 1
    61e8:	30 f0       	brcs	.+12     	; 0x61f6 <__ftoa_engine+0x142>
    61ea:	08 0f       	add	r16, r24
    61ec:	0a f4       	brpl	.+2      	; 0x61f0 <__ftoa_engine+0x13c>
    61ee:	00 27       	eor	r16, r16
    61f0:	02 17       	cp	r16, r18
    61f2:	08 f4       	brcc	.+2      	; 0x61f6 <__ftoa_engine+0x142>
    61f4:	20 2f       	mov	r18, r16
    61f6:	23 95       	inc	r18
    61f8:	02 2f       	mov	r16, r18
    61fa:	7a 33       	cpi	r23, 0x3A	; 58
    61fc:	28 f0       	brcs	.+10     	; 0x6208 <__ftoa_engine+0x154>
    61fe:	79 e3       	ldi	r23, 0x39	; 57
    6200:	7d 93       	st	X+, r23
    6202:	2a 95       	dec	r18
    6204:	e9 f7       	brne	.-6      	; 0x6200 <__ftoa_engine+0x14c>
    6206:	10 c0       	rjmp	.+32     	; 0x6228 <__ftoa_engine+0x174>
    6208:	7d 93       	st	X+, r23
    620a:	2a 95       	dec	r18
    620c:	89 f6       	brne	.-94     	; 0x61b0 <__ftoa_engine+0xfc>
    620e:	06 94       	lsr	r0
    6210:	97 95       	ror	r25
    6212:	67 95       	ror	r22
    6214:	37 95       	ror	r19
    6216:	17 95       	ror	r17
    6218:	17 94       	ror	r1
    621a:	e1 18       	sub	r14, r1
    621c:	f1 0a       	sbc	r15, r17
    621e:	43 0b       	sbc	r20, r19
    6220:	56 0b       	sbc	r21, r22
    6222:	c9 0b       	sbc	r28, r25
    6224:	d0 09       	sbc	r29, r0
    6226:	98 f0       	brcs	.+38     	; 0x624e <__ftoa_engine+0x19a>
    6228:	23 95       	inc	r18
    622a:	7e 91       	ld	r23, -X
    622c:	73 95       	inc	r23
    622e:	7a 33       	cpi	r23, 0x3A	; 58
    6230:	08 f0       	brcs	.+2      	; 0x6234 <__ftoa_engine+0x180>
    6232:	70 e3       	ldi	r23, 0x30	; 48
    6234:	7c 93       	st	X, r23
    6236:	20 13       	cpse	r18, r16
    6238:	b8 f7       	brcc	.-18     	; 0x6228 <__ftoa_engine+0x174>
    623a:	7e 91       	ld	r23, -X
    623c:	70 61       	ori	r23, 0x10	; 16
    623e:	7d 93       	st	X+, r23
    6240:	30 f0       	brcs	.+12     	; 0x624e <__ftoa_engine+0x19a>
    6242:	83 95       	inc	r24
    6244:	71 e3       	ldi	r23, 0x31	; 49
    6246:	7d 93       	st	X+, r23
    6248:	70 e3       	ldi	r23, 0x30	; 48
    624a:	2a 95       	dec	r18
    624c:	e1 f7       	brne	.-8      	; 0x6246 <__ftoa_engine+0x192>
    624e:	11 24       	eor	r1, r1
    6250:	ef 90       	pop	r14
    6252:	ff 90       	pop	r15
    6254:	0f 91       	pop	r16
    6256:	1f 91       	pop	r17
    6258:	cf 91       	pop	r28
    625a:	df 91       	pop	r29
    625c:	99 27       	eor	r25, r25
    625e:	87 fd       	sbrc	r24, 7
    6260:	90 95       	com	r25
    6262:	08 95       	ret

00006264 <isspace>:
    6264:	91 11       	cpse	r25, r1
    6266:	0c 94 0a 34 	jmp	0x6814	; 0x6814 <__ctype_isfalse>
    626a:	80 32       	cpi	r24, 0x20	; 32
    626c:	19 f0       	breq	.+6      	; 0x6274 <isspace+0x10>
    626e:	89 50       	subi	r24, 0x09	; 9
    6270:	85 50       	subi	r24, 0x05	; 5
    6272:	c8 f7       	brcc	.-14     	; 0x6266 <isspace+0x2>
    6274:	08 95       	ret

00006276 <strnlen_P>:
    6276:	fc 01       	movw	r30, r24
    6278:	05 90       	lpm	r0, Z+
    627a:	61 50       	subi	r22, 0x01	; 1
    627c:	70 40       	sbci	r23, 0x00	; 0
    627e:	01 10       	cpse	r0, r1
    6280:	d8 f7       	brcc	.-10     	; 0x6278 <strnlen_P+0x2>
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	8e 0f       	add	r24, r30
    6288:	9f 1f       	adc	r25, r31
    628a:	08 95       	ret

0000628c <memcmp>:
    628c:	fb 01       	movw	r30, r22
    628e:	dc 01       	movw	r26, r24
    6290:	04 c0       	rjmp	.+8      	; 0x629a <memcmp+0xe>
    6292:	8d 91       	ld	r24, X+
    6294:	01 90       	ld	r0, Z+
    6296:	80 19       	sub	r24, r0
    6298:	21 f4       	brne	.+8      	; 0x62a2 <memcmp+0x16>
    629a:	41 50       	subi	r20, 0x01	; 1
    629c:	50 40       	sbci	r21, 0x00	; 0
    629e:	c8 f7       	brcc	.-14     	; 0x6292 <memcmp+0x6>
    62a0:	88 1b       	sub	r24, r24
    62a2:	99 0b       	sbc	r25, r25
    62a4:	08 95       	ret

000062a6 <memcpy>:
    62a6:	fb 01       	movw	r30, r22
    62a8:	dc 01       	movw	r26, r24
    62aa:	02 c0       	rjmp	.+4      	; 0x62b0 <memcpy+0xa>
    62ac:	01 90       	ld	r0, Z+
    62ae:	0d 92       	st	X+, r0
    62b0:	41 50       	subi	r20, 0x01	; 1
    62b2:	50 40       	sbci	r21, 0x00	; 0
    62b4:	d8 f7       	brcc	.-10     	; 0x62ac <memcpy+0x6>
    62b6:	08 95       	ret

000062b8 <strchr>:
    62b8:	fc 01       	movw	r30, r24
    62ba:	81 91       	ld	r24, Z+
    62bc:	86 17       	cp	r24, r22
    62be:	21 f0       	breq	.+8      	; 0x62c8 <strchr+0x10>
    62c0:	88 23       	and	r24, r24
    62c2:	d9 f7       	brne	.-10     	; 0x62ba <strchr+0x2>
    62c4:	99 27       	eor	r25, r25
    62c6:	08 95       	ret
    62c8:	31 97       	sbiw	r30, 0x01	; 1
    62ca:	cf 01       	movw	r24, r30
    62cc:	08 95       	ret

000062ce <strcmp>:
    62ce:	fb 01       	movw	r30, r22
    62d0:	dc 01       	movw	r26, r24
    62d2:	8d 91       	ld	r24, X+
    62d4:	01 90       	ld	r0, Z+
    62d6:	80 19       	sub	r24, r0
    62d8:	01 10       	cpse	r0, r1
    62da:	d9 f3       	breq	.-10     	; 0x62d2 <strcmp+0x4>
    62dc:	99 0b       	sbc	r25, r25
    62de:	08 95       	ret

000062e0 <strcpy>:
    62e0:	fb 01       	movw	r30, r22
    62e2:	dc 01       	movw	r26, r24
    62e4:	01 90       	ld	r0, Z+
    62e6:	0d 92       	st	X+, r0
    62e8:	00 20       	and	r0, r0
    62ea:	e1 f7       	brne	.-8      	; 0x62e4 <strcpy+0x4>
    62ec:	08 95       	ret

000062ee <strncpy>:
    62ee:	fb 01       	movw	r30, r22
    62f0:	dc 01       	movw	r26, r24
    62f2:	41 50       	subi	r20, 0x01	; 1
    62f4:	50 40       	sbci	r21, 0x00	; 0
    62f6:	48 f0       	brcs	.+18     	; 0x630a <strncpy+0x1c>
    62f8:	01 90       	ld	r0, Z+
    62fa:	0d 92       	st	X+, r0
    62fc:	00 20       	and	r0, r0
    62fe:	c9 f7       	brne	.-14     	; 0x62f2 <strncpy+0x4>
    6300:	01 c0       	rjmp	.+2      	; 0x6304 <strncpy+0x16>
    6302:	1d 92       	st	X+, r1
    6304:	41 50       	subi	r20, 0x01	; 1
    6306:	50 40       	sbci	r21, 0x00	; 0
    6308:	e0 f7       	brcc	.-8      	; 0x6302 <strncpy+0x14>
    630a:	08 95       	ret

0000630c <strnlen>:
    630c:	fc 01       	movw	r30, r24
    630e:	61 50       	subi	r22, 0x01	; 1
    6310:	70 40       	sbci	r23, 0x00	; 0
    6312:	01 90       	ld	r0, Z+
    6314:	01 10       	cpse	r0, r1
    6316:	d8 f7       	brcc	.-10     	; 0x630e <strnlen+0x2>
    6318:	80 95       	com	r24
    631a:	90 95       	com	r25
    631c:	8e 0f       	add	r24, r30
    631e:	9f 1f       	adc	r25, r31
    6320:	08 95       	ret

00006322 <strstr>:
    6322:	fb 01       	movw	r30, r22
    6324:	51 91       	ld	r21, Z+
    6326:	55 23       	and	r21, r21
    6328:	a9 f0       	breq	.+42     	; 0x6354 <strstr+0x32>
    632a:	bf 01       	movw	r22, r30
    632c:	dc 01       	movw	r26, r24
    632e:	4d 91       	ld	r20, X+
    6330:	45 17       	cp	r20, r21
    6332:	41 11       	cpse	r20, r1
    6334:	e1 f7       	brne	.-8      	; 0x632e <strstr+0xc>
    6336:	59 f4       	brne	.+22     	; 0x634e <strstr+0x2c>
    6338:	cd 01       	movw	r24, r26
    633a:	01 90       	ld	r0, Z+
    633c:	00 20       	and	r0, r0
    633e:	49 f0       	breq	.+18     	; 0x6352 <strstr+0x30>
    6340:	4d 91       	ld	r20, X+
    6342:	40 15       	cp	r20, r0
    6344:	41 11       	cpse	r20, r1
    6346:	c9 f3       	breq	.-14     	; 0x633a <strstr+0x18>
    6348:	fb 01       	movw	r30, r22
    634a:	41 11       	cpse	r20, r1
    634c:	ef cf       	rjmp	.-34     	; 0x632c <strstr+0xa>
    634e:	81 e0       	ldi	r24, 0x01	; 1
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	01 97       	sbiw	r24, 0x01	; 1
    6354:	08 95       	ret

00006356 <__mulhi_const_10>:
    6356:	7a e0       	ldi	r23, 0x0A	; 10
    6358:	97 9f       	mul	r25, r23
    635a:	90 2d       	mov	r25, r0
    635c:	87 9f       	mul	r24, r23
    635e:	80 2d       	mov	r24, r0
    6360:	91 0d       	add	r25, r1
    6362:	11 24       	eor	r1, r1
    6364:	08 95       	ret

00006366 <__ultoa_ncheck>:
    6366:	bb 27       	eor	r27, r27

00006368 <__ultoa_common>:
    6368:	fa 01       	movw	r30, r20
    636a:	a6 2f       	mov	r26, r22
    636c:	62 17       	cp	r22, r18
    636e:	71 05       	cpc	r23, r1
    6370:	81 05       	cpc	r24, r1
    6372:	91 05       	cpc	r25, r1
    6374:	33 0b       	sbc	r19, r19
    6376:	30 fb       	bst	r19, 0
    6378:	66 f0       	brts	.+24     	; 0x6392 <__ultoa_common+0x2a>
    637a:	aa 27       	eor	r26, r26
    637c:	66 0f       	add	r22, r22
    637e:	77 1f       	adc	r23, r23
    6380:	88 1f       	adc	r24, r24
    6382:	99 1f       	adc	r25, r25
    6384:	aa 1f       	adc	r26, r26
    6386:	a2 17       	cp	r26, r18
    6388:	10 f0       	brcs	.+4      	; 0x638e <__ultoa_common+0x26>
    638a:	a2 1b       	sub	r26, r18
    638c:	63 95       	inc	r22
    638e:	38 50       	subi	r19, 0x08	; 8
    6390:	a9 f7       	brne	.-22     	; 0x637c <__ultoa_common+0x14>
    6392:	a0 5d       	subi	r26, 0xD0	; 208
    6394:	aa 33       	cpi	r26, 0x3A	; 58
    6396:	08 f0       	brcs	.+2      	; 0x639a <__ultoa_common+0x32>
    6398:	a9 5d       	subi	r26, 0xD9	; 217
    639a:	a1 93       	st	Z+, r26
    639c:	36 f7       	brtc	.-52     	; 0x636a <__ultoa_common+0x2>
    639e:	b1 11       	cpse	r27, r1
    63a0:	b1 93       	st	Z+, r27
    63a2:	10 82       	st	Z, r1
    63a4:	ca 01       	movw	r24, r20
    63a6:	0c 94 25 34 	jmp	0x684a	; 0x684a <strrev>

000063aa <fputc>:
    63aa:	0f 93       	push	r16
    63ac:	1f 93       	push	r17
    63ae:	cf 93       	push	r28
    63b0:	df 93       	push	r29
    63b2:	fb 01       	movw	r30, r22
    63b4:	23 81       	ldd	r18, Z+3	; 0x03
    63b6:	21 fd       	sbrc	r18, 1
    63b8:	03 c0       	rjmp	.+6      	; 0x63c0 <fputc+0x16>
    63ba:	8f ef       	ldi	r24, 0xFF	; 255
    63bc:	9f ef       	ldi	r25, 0xFF	; 255
    63be:	28 c0       	rjmp	.+80     	; 0x6410 <fputc+0x66>
    63c0:	22 ff       	sbrs	r18, 2
    63c2:	16 c0       	rjmp	.+44     	; 0x63f0 <fputc+0x46>
    63c4:	46 81       	ldd	r20, Z+6	; 0x06
    63c6:	57 81       	ldd	r21, Z+7	; 0x07
    63c8:	24 81       	ldd	r18, Z+4	; 0x04
    63ca:	35 81       	ldd	r19, Z+5	; 0x05
    63cc:	42 17       	cp	r20, r18
    63ce:	53 07       	cpc	r21, r19
    63d0:	44 f4       	brge	.+16     	; 0x63e2 <fputc+0x38>
    63d2:	a0 81       	ld	r26, Z
    63d4:	b1 81       	ldd	r27, Z+1	; 0x01
    63d6:	9d 01       	movw	r18, r26
    63d8:	2f 5f       	subi	r18, 0xFF	; 255
    63da:	3f 4f       	sbci	r19, 0xFF	; 255
    63dc:	31 83       	std	Z+1, r19	; 0x01
    63de:	20 83       	st	Z, r18
    63e0:	8c 93       	st	X, r24
    63e2:	26 81       	ldd	r18, Z+6	; 0x06
    63e4:	37 81       	ldd	r19, Z+7	; 0x07
    63e6:	2f 5f       	subi	r18, 0xFF	; 255
    63e8:	3f 4f       	sbci	r19, 0xFF	; 255
    63ea:	37 83       	std	Z+7, r19	; 0x07
    63ec:	26 83       	std	Z+6, r18	; 0x06
    63ee:	10 c0       	rjmp	.+32     	; 0x6410 <fputc+0x66>
    63f0:	eb 01       	movw	r28, r22
    63f2:	09 2f       	mov	r16, r25
    63f4:	18 2f       	mov	r17, r24
    63f6:	00 84       	ldd	r0, Z+8	; 0x08
    63f8:	f1 85       	ldd	r31, Z+9	; 0x09
    63fa:	e0 2d       	mov	r30, r0
    63fc:	09 95       	icall
    63fe:	89 2b       	or	r24, r25
    6400:	e1 f6       	brne	.-72     	; 0x63ba <fputc+0x10>
    6402:	8e 81       	ldd	r24, Y+6	; 0x06
    6404:	9f 81       	ldd	r25, Y+7	; 0x07
    6406:	01 96       	adiw	r24, 0x01	; 1
    6408:	9f 83       	std	Y+7, r25	; 0x07
    640a:	8e 83       	std	Y+6, r24	; 0x06
    640c:	81 2f       	mov	r24, r17
    640e:	90 2f       	mov	r25, r16
    6410:	df 91       	pop	r29
    6412:	cf 91       	pop	r28
    6414:	1f 91       	pop	r17
    6416:	0f 91       	pop	r16
    6418:	08 95       	ret

0000641a <sprintf>:
    641a:	0f 93       	push	r16
    641c:	1f 93       	push	r17
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
    6422:	cd b7       	in	r28, 0x3d	; 61
    6424:	de b7       	in	r29, 0x3e	; 62
    6426:	2e 97       	sbiw	r28, 0x0e	; 14
    6428:	0f b6       	in	r0, 0x3f	; 63
    642a:	f8 94       	cli
    642c:	de bf       	out	0x3e, r29	; 62
    642e:	0f be       	out	0x3f, r0	; 63
    6430:	cd bf       	out	0x3d, r28	; 61
    6432:	0d 89       	ldd	r16, Y+21	; 0x15
    6434:	1e 89       	ldd	r17, Y+22	; 0x16
    6436:	86 e0       	ldi	r24, 0x06	; 6
    6438:	8c 83       	std	Y+4, r24	; 0x04
    643a:	1a 83       	std	Y+2, r17	; 0x02
    643c:	09 83       	std	Y+1, r16	; 0x01
    643e:	8f ef       	ldi	r24, 0xFF	; 255
    6440:	9f e7       	ldi	r25, 0x7F	; 127
    6442:	9e 83       	std	Y+6, r25	; 0x06
    6444:	8d 83       	std	Y+5, r24	; 0x05
    6446:	ae 01       	movw	r20, r28
    6448:	47 5e       	subi	r20, 0xE7	; 231
    644a:	5f 4f       	sbci	r21, 0xFF	; 255
    644c:	6f 89       	ldd	r22, Y+23	; 0x17
    644e:	78 8d       	ldd	r23, Y+24	; 0x18
    6450:	ce 01       	movw	r24, r28
    6452:	01 96       	adiw	r24, 0x01	; 1
    6454:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <vfprintf>
    6458:	2f 81       	ldd	r18, Y+7	; 0x07
    645a:	38 85       	ldd	r19, Y+8	; 0x08
    645c:	f8 01       	movw	r30, r16
    645e:	e2 0f       	add	r30, r18
    6460:	f3 1f       	adc	r31, r19
    6462:	10 82       	st	Z, r1
    6464:	2e 96       	adiw	r28, 0x0e	; 14
    6466:	0f b6       	in	r0, 0x3f	; 63
    6468:	f8 94       	cli
    646a:	de bf       	out	0x3e, r29	; 62
    646c:	0f be       	out	0x3f, r0	; 63
    646e:	cd bf       	out	0x3d, r28	; 61
    6470:	df 91       	pop	r29
    6472:	cf 91       	pop	r28
    6474:	1f 91       	pop	r17
    6476:	0f 91       	pop	r16
    6478:	08 95       	ret

0000647a <__ultoa_invert>:
    647a:	fa 01       	movw	r30, r20
    647c:	aa 27       	eor	r26, r26
    647e:	28 30       	cpi	r18, 0x08	; 8
    6480:	51 f1       	breq	.+84     	; 0x64d6 <__ultoa_invert+0x5c>
    6482:	20 31       	cpi	r18, 0x10	; 16
    6484:	81 f1       	breq	.+96     	; 0x64e6 <__ultoa_invert+0x6c>
    6486:	e8 94       	clt
    6488:	6f 93       	push	r22
    648a:	6e 7f       	andi	r22, 0xFE	; 254
    648c:	6e 5f       	subi	r22, 0xFE	; 254
    648e:	7f 4f       	sbci	r23, 0xFF	; 255
    6490:	8f 4f       	sbci	r24, 0xFF	; 255
    6492:	9f 4f       	sbci	r25, 0xFF	; 255
    6494:	af 4f       	sbci	r26, 0xFF	; 255
    6496:	b1 e0       	ldi	r27, 0x01	; 1
    6498:	3e d0       	rcall	.+124    	; 0x6516 <__ultoa_invert+0x9c>
    649a:	b4 e0       	ldi	r27, 0x04	; 4
    649c:	3c d0       	rcall	.+120    	; 0x6516 <__ultoa_invert+0x9c>
    649e:	67 0f       	add	r22, r23
    64a0:	78 1f       	adc	r23, r24
    64a2:	89 1f       	adc	r24, r25
    64a4:	9a 1f       	adc	r25, r26
    64a6:	a1 1d       	adc	r26, r1
    64a8:	68 0f       	add	r22, r24
    64aa:	79 1f       	adc	r23, r25
    64ac:	8a 1f       	adc	r24, r26
    64ae:	91 1d       	adc	r25, r1
    64b0:	a1 1d       	adc	r26, r1
    64b2:	6a 0f       	add	r22, r26
    64b4:	71 1d       	adc	r23, r1
    64b6:	81 1d       	adc	r24, r1
    64b8:	91 1d       	adc	r25, r1
    64ba:	a1 1d       	adc	r26, r1
    64bc:	20 d0       	rcall	.+64     	; 0x64fe <__ultoa_invert+0x84>
    64be:	09 f4       	brne	.+2      	; 0x64c2 <__ultoa_invert+0x48>
    64c0:	68 94       	set
    64c2:	3f 91       	pop	r19
    64c4:	2a e0       	ldi	r18, 0x0A	; 10
    64c6:	26 9f       	mul	r18, r22
    64c8:	11 24       	eor	r1, r1
    64ca:	30 19       	sub	r19, r0
    64cc:	30 5d       	subi	r19, 0xD0	; 208
    64ce:	31 93       	st	Z+, r19
    64d0:	de f6       	brtc	.-74     	; 0x6488 <__ultoa_invert+0xe>
    64d2:	cf 01       	movw	r24, r30
    64d4:	08 95       	ret
    64d6:	46 2f       	mov	r20, r22
    64d8:	47 70       	andi	r20, 0x07	; 7
    64da:	40 5d       	subi	r20, 0xD0	; 208
    64dc:	41 93       	st	Z+, r20
    64de:	b3 e0       	ldi	r27, 0x03	; 3
    64e0:	0f d0       	rcall	.+30     	; 0x6500 <__ultoa_invert+0x86>
    64e2:	c9 f7       	brne	.-14     	; 0x64d6 <__ultoa_invert+0x5c>
    64e4:	f6 cf       	rjmp	.-20     	; 0x64d2 <__ultoa_invert+0x58>
    64e6:	46 2f       	mov	r20, r22
    64e8:	4f 70       	andi	r20, 0x0F	; 15
    64ea:	40 5d       	subi	r20, 0xD0	; 208
    64ec:	4a 33       	cpi	r20, 0x3A	; 58
    64ee:	18 f0       	brcs	.+6      	; 0x64f6 <__ultoa_invert+0x7c>
    64f0:	49 5d       	subi	r20, 0xD9	; 217
    64f2:	31 fd       	sbrc	r19, 1
    64f4:	40 52       	subi	r20, 0x20	; 32
    64f6:	41 93       	st	Z+, r20
    64f8:	02 d0       	rcall	.+4      	; 0x64fe <__ultoa_invert+0x84>
    64fa:	a9 f7       	brne	.-22     	; 0x64e6 <__ultoa_invert+0x6c>
    64fc:	ea cf       	rjmp	.-44     	; 0x64d2 <__ultoa_invert+0x58>
    64fe:	b4 e0       	ldi	r27, 0x04	; 4
    6500:	a6 95       	lsr	r26
    6502:	97 95       	ror	r25
    6504:	87 95       	ror	r24
    6506:	77 95       	ror	r23
    6508:	67 95       	ror	r22
    650a:	ba 95       	dec	r27
    650c:	c9 f7       	brne	.-14     	; 0x6500 <__ultoa_invert+0x86>
    650e:	00 97       	sbiw	r24, 0x00	; 0
    6510:	61 05       	cpc	r22, r1
    6512:	71 05       	cpc	r23, r1
    6514:	08 95       	ret
    6516:	9b 01       	movw	r18, r22
    6518:	ac 01       	movw	r20, r24
    651a:	0a 2e       	mov	r0, r26
    651c:	06 94       	lsr	r0
    651e:	57 95       	ror	r21
    6520:	47 95       	ror	r20
    6522:	37 95       	ror	r19
    6524:	27 95       	ror	r18
    6526:	ba 95       	dec	r27
    6528:	c9 f7       	brne	.-14     	; 0x651c <__ultoa_invert+0xa2>
    652a:	62 0f       	add	r22, r18
    652c:	73 1f       	adc	r23, r19
    652e:	84 1f       	adc	r24, r20
    6530:	95 1f       	adc	r25, r21
    6532:	a0 1d       	adc	r26, r0
    6534:	08 95       	ret

00006536 <strtod>:
    6536:	6f 92       	push	r6
    6538:	7f 92       	push	r7
    653a:	8f 92       	push	r8
    653c:	9f 92       	push	r9
    653e:	af 92       	push	r10
    6540:	bf 92       	push	r11
    6542:	cf 92       	push	r12
    6544:	df 92       	push	r13
    6546:	ef 92       	push	r14
    6548:	ff 92       	push	r15
    654a:	0f 93       	push	r16
    654c:	1f 93       	push	r17
    654e:	cf 93       	push	r28
    6550:	df 93       	push	r29
    6552:	ec 01       	movw	r28, r24
    6554:	7b 01       	movw	r14, r22
    6556:	61 15       	cp	r22, r1
    6558:	71 05       	cpc	r23, r1
    655a:	19 f0       	breq	.+6      	; 0x6562 <strtod+0x2c>
    655c:	db 01       	movw	r26, r22
    655e:	8d 93       	st	X+, r24
    6560:	9c 93       	st	X, r25
    6562:	8e 01       	movw	r16, r28
    6564:	0f 5f       	subi	r16, 0xFF	; 255
    6566:	1f 4f       	sbci	r17, 0xFF	; 255
    6568:	78 80       	ld	r7, Y
    656a:	87 2d       	mov	r24, r7
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	0e 94 32 31 	call	0x6264	; 0x6264 <isspace>
    6572:	89 2b       	or	r24, r25
    6574:	11 f0       	breq	.+4      	; 0x657a <strtod+0x44>
    6576:	e8 01       	movw	r28, r16
    6578:	f4 cf       	rjmp	.-24     	; 0x6562 <strtod+0x2c>
    657a:	bd e2       	ldi	r27, 0x2D	; 45
    657c:	7b 12       	cpse	r7, r27
    657e:	05 c0       	rjmp	.+10     	; 0x658a <strtod+0x54>
    6580:	0f 5f       	subi	r16, 0xFF	; 255
    6582:	1f 4f       	sbci	r17, 0xFF	; 255
    6584:	79 80       	ldd	r7, Y+1	; 0x01
    6586:	c1 e0       	ldi	r28, 0x01	; 1
    6588:	08 c0       	rjmp	.+16     	; 0x659a <strtod+0x64>
    658a:	eb e2       	ldi	r30, 0x2B	; 43
    658c:	7e 12       	cpse	r7, r30
    658e:	04 c0       	rjmp	.+8      	; 0x6598 <strtod+0x62>
    6590:	8e 01       	movw	r16, r28
    6592:	0e 5f       	subi	r16, 0xFE	; 254
    6594:	1f 4f       	sbci	r17, 0xFF	; 255
    6596:	79 80       	ldd	r7, Y+1	; 0x01
    6598:	c0 e0       	ldi	r28, 0x00	; 0
    659a:	68 01       	movw	r12, r16
    659c:	f1 e0       	ldi	r31, 0x01	; 1
    659e:	cf 1a       	sub	r12, r31
    65a0:	d1 08       	sbc	r13, r1
    65a2:	43 e0       	ldi	r20, 0x03	; 3
    65a4:	50 e0       	ldi	r21, 0x00	; 0
    65a6:	6e e8       	ldi	r22, 0x8E	; 142
    65a8:	72 e0       	ldi	r23, 0x02	; 2
    65aa:	c6 01       	movw	r24, r12
    65ac:	0e 94 0d 34 	call	0x681a	; 0x681a <strncasecmp_P>
    65b0:	89 2b       	or	r24, r25
    65b2:	f1 f4       	brne	.+60     	; 0x65f0 <strtod+0xba>
    65b4:	68 01       	movw	r12, r16
    65b6:	22 e0       	ldi	r18, 0x02	; 2
    65b8:	c2 0e       	add	r12, r18
    65ba:	d1 1c       	adc	r13, r1
    65bc:	45 e0       	ldi	r20, 0x05	; 5
    65be:	50 e0       	ldi	r21, 0x00	; 0
    65c0:	69 e8       	ldi	r22, 0x89	; 137
    65c2:	72 e0       	ldi	r23, 0x02	; 2
    65c4:	c6 01       	movw	r24, r12
    65c6:	0e 94 0d 34 	call	0x681a	; 0x681a <strncasecmp_P>
    65ca:	89 2b       	or	r24, r25
    65cc:	21 f4       	brne	.+8      	; 0x65d6 <strtod+0xa0>
    65ce:	68 01       	movw	r12, r16
    65d0:	87 e0       	ldi	r24, 0x07	; 7
    65d2:	c8 0e       	add	r12, r24
    65d4:	d1 1c       	adc	r13, r1
    65d6:	e1 14       	cp	r14, r1
    65d8:	f1 04       	cpc	r15, r1
    65da:	19 f0       	breq	.+6      	; 0x65e2 <strtod+0xac>
    65dc:	d7 01       	movw	r26, r14
    65de:	cd 92       	st	X+, r12
    65e0:	dc 92       	st	X, r13
    65e2:	c1 11       	cpse	r28, r1
    65e4:	ff c0       	rjmp	.+510    	; 0x67e4 <strtod+0x2ae>
    65e6:	60 e0       	ldi	r22, 0x00	; 0
    65e8:	70 e0       	ldi	r23, 0x00	; 0
    65ea:	80 e8       	ldi	r24, 0x80	; 128
    65ec:	9f e7       	ldi	r25, 0x7F	; 127
    65ee:	03 c1       	rjmp	.+518    	; 0x67f6 <strtod+0x2c0>
    65f0:	43 e0       	ldi	r20, 0x03	; 3
    65f2:	50 e0       	ldi	r21, 0x00	; 0
    65f4:	66 e8       	ldi	r22, 0x86	; 134
    65f6:	72 e0       	ldi	r23, 0x02	; 2
    65f8:	c6 01       	movw	r24, r12
    65fa:	0e 94 0d 34 	call	0x681a	; 0x681a <strncasecmp_P>
    65fe:	89 2b       	or	r24, r25
    6600:	51 f4       	brne	.+20     	; 0x6616 <strtod+0xe0>
    6602:	e1 14       	cp	r14, r1
    6604:	f1 04       	cpc	r15, r1
    6606:	09 f4       	brne	.+2      	; 0x660a <strtod+0xd4>
    6608:	f2 c0       	rjmp	.+484    	; 0x67ee <strtod+0x2b8>
    660a:	0e 5f       	subi	r16, 0xFE	; 254
    660c:	1f 4f       	sbci	r17, 0xFF	; 255
    660e:	f7 01       	movw	r30, r14
    6610:	11 83       	std	Z+1, r17	; 0x01
    6612:	00 83       	st	Z, r16
    6614:	ec c0       	rjmp	.+472    	; 0x67ee <strtod+0x2b8>
    6616:	68 01       	movw	r12, r16
    6618:	60 e0       	ldi	r22, 0x00	; 0
    661a:	70 e0       	ldi	r23, 0x00	; 0
    661c:	cb 01       	movw	r24, r22
    661e:	00 e0       	ldi	r16, 0x00	; 0
    6620:	10 e0       	ldi	r17, 0x00	; 0
    6622:	f6 01       	movw	r30, r12
    6624:	d0 ed       	ldi	r29, 0xD0	; 208
    6626:	d7 0d       	add	r29, r7
    6628:	da 30       	cpi	r29, 0x0A	; 10
    662a:	58 f5       	brcc	.+86     	; 0x6682 <strtod+0x14c>
    662c:	2c 2f       	mov	r18, r28
    662e:	22 60       	ori	r18, 0x02	; 2
    6630:	62 2e       	mov	r6, r18
    6632:	2c 2f       	mov	r18, r28
    6634:	28 70       	andi	r18, 0x08	; 8
    6636:	c2 ff       	sbrs	r28, 2
    6638:	05 c0       	rjmp	.+10     	; 0x6644 <strtod+0x10e>
    663a:	21 11       	cpse	r18, r1
    663c:	28 c0       	rjmp	.+80     	; 0x668e <strtod+0x158>
    663e:	0f 5f       	subi	r16, 0xFF	; 255
    6640:	1f 4f       	sbci	r17, 0xFF	; 255
    6642:	25 c0       	rjmp	.+74     	; 0x668e <strtod+0x158>
    6644:	22 23       	and	r18, r18
    6646:	11 f0       	breq	.+4      	; 0x664c <strtod+0x116>
    6648:	01 50       	subi	r16, 0x01	; 1
    664a:	11 09       	sbc	r17, r1
    664c:	a5 e0       	ldi	r26, 0x05	; 5
    664e:	b0 e0       	ldi	r27, 0x00	; 0
    6650:	9b 01       	movw	r18, r22
    6652:	ac 01       	movw	r20, r24
    6654:	0e 94 c7 34 	call	0x698e	; 0x698e <__muluhisi3>
    6658:	4b 01       	movw	r8, r22
    665a:	5c 01       	movw	r10, r24
    665c:	88 0c       	add	r8, r8
    665e:	99 1c       	adc	r9, r9
    6660:	aa 1c       	adc	r10, r10
    6662:	bb 1c       	adc	r11, r11
    6664:	c5 01       	movw	r24, r10
    6666:	b4 01       	movw	r22, r8
    6668:	6d 0f       	add	r22, r29
    666a:	71 1d       	adc	r23, r1
    666c:	81 1d       	adc	r24, r1
    666e:	91 1d       	adc	r25, r1
    6670:	68 39       	cpi	r22, 0x98	; 152
    6672:	a9 e9       	ldi	r26, 0x99	; 153
    6674:	7a 07       	cpc	r23, r26
    6676:	8a 07       	cpc	r24, r26
    6678:	a9 e1       	ldi	r26, 0x19	; 25
    667a:	9a 07       	cpc	r25, r26
    667c:	40 f0       	brcs	.+16     	; 0x668e <strtod+0x158>
    667e:	c6 60       	ori	r28, 0x06	; 6
    6680:	05 c0       	rjmp	.+10     	; 0x668c <strtod+0x156>
    6682:	de 3f       	cpi	r29, 0xFE	; 254
    6684:	51 f4       	brne	.+20     	; 0x669a <strtod+0x164>
    6686:	c3 fd       	sbrc	r28, 3
    6688:	44 c0       	rjmp	.+136    	; 0x6712 <strtod+0x1dc>
    668a:	c8 60       	ori	r28, 0x08	; 8
    668c:	6c 2e       	mov	r6, r28
    668e:	bf ef       	ldi	r27, 0xFF	; 255
    6690:	cb 1a       	sub	r12, r27
    6692:	db 0a       	sbc	r13, r27
    6694:	70 80       	ld	r7, Z
    6696:	c6 2d       	mov	r28, r6
    6698:	c4 cf       	rjmp	.-120    	; 0x6622 <strtod+0xec>
    669a:	2d 2f       	mov	r18, r29
    669c:	2f 7d       	andi	r18, 0xDF	; 223
    669e:	25 31       	cpi	r18, 0x15	; 21
    66a0:	c1 f5       	brne	.+112    	; 0x6712 <strtod+0x1dc>
    66a2:	40 81       	ld	r20, Z
    66a4:	4d 32       	cpi	r20, 0x2D	; 45
    66a6:	11 f4       	brne	.+4      	; 0x66ac <strtod+0x176>
    66a8:	c0 61       	ori	r28, 0x10	; 16
    66aa:	06 c0       	rjmp	.+12     	; 0x66b8 <strtod+0x182>
    66ac:	4b 32       	cpi	r20, 0x2B	; 43
    66ae:	21 f0       	breq	.+8      	; 0x66b8 <strtod+0x182>
    66b0:	31 96       	adiw	r30, 0x01	; 1
    66b2:	21 e0       	ldi	r18, 0x01	; 1
    66b4:	30 e0       	ldi	r19, 0x00	; 0
    66b6:	06 c0       	rjmp	.+12     	; 0x66c4 <strtod+0x18e>
    66b8:	32 96       	adiw	r30, 0x02	; 2
    66ba:	d6 01       	movw	r26, r12
    66bc:	11 96       	adiw	r26, 0x01	; 1
    66be:	4c 91       	ld	r20, X
    66c0:	22 e0       	ldi	r18, 0x02	; 2
    66c2:	30 e0       	ldi	r19, 0x00	; 0
    66c4:	a0 ed       	ldi	r26, 0xD0	; 208
    66c6:	a4 0f       	add	r26, r20
    66c8:	aa 30       	cpi	r26, 0x0A	; 10
    66ca:	18 f0       	brcs	.+6      	; 0x66d2 <strtod+0x19c>
    66cc:	e2 1b       	sub	r30, r18
    66ce:	f3 0b       	sbc	r31, r19
    66d0:	20 c0       	rjmp	.+64     	; 0x6712 <strtod+0x1dc>
    66d2:	40 e0       	ldi	r20, 0x00	; 0
    66d4:	50 e0       	ldi	r21, 0x00	; 0
    66d6:	40 38       	cpi	r20, 0x80	; 128
    66d8:	bc e0       	ldi	r27, 0x0C	; 12
    66da:	5b 07       	cpc	r21, r27
    66dc:	5c f4       	brge	.+22     	; 0x66f4 <strtod+0x1be>
    66de:	9a 01       	movw	r18, r20
    66e0:	22 0f       	add	r18, r18
    66e2:	33 1f       	adc	r19, r19
    66e4:	22 0f       	add	r18, r18
    66e6:	33 1f       	adc	r19, r19
    66e8:	42 0f       	add	r20, r18
    66ea:	53 1f       	adc	r21, r19
    66ec:	44 0f       	add	r20, r20
    66ee:	55 1f       	adc	r21, r21
    66f0:	4a 0f       	add	r20, r26
    66f2:	51 1d       	adc	r21, r1
    66f4:	31 96       	adiw	r30, 0x01	; 1
    66f6:	df 01       	movw	r26, r30
    66f8:	11 97       	sbiw	r26, 0x01	; 1
    66fa:	2c 91       	ld	r18, X
    66fc:	a0 ed       	ldi	r26, 0xD0	; 208
    66fe:	a2 0f       	add	r26, r18
    6700:	aa 30       	cpi	r26, 0x0A	; 10
    6702:	48 f3       	brcs	.-46     	; 0x66d6 <strtod+0x1a0>
    6704:	c4 ff       	sbrs	r28, 4
    6706:	03 c0       	rjmp	.+6      	; 0x670e <strtod+0x1d8>
    6708:	51 95       	neg	r21
    670a:	41 95       	neg	r20
    670c:	51 09       	sbc	r21, r1
    670e:	04 0f       	add	r16, r20
    6710:	15 1f       	adc	r17, r21
    6712:	c1 ff       	sbrs	r28, 1
    6714:	07 c0       	rjmp	.+14     	; 0x6724 <strtod+0x1ee>
    6716:	e1 14       	cp	r14, r1
    6718:	f1 04       	cpc	r15, r1
    671a:	21 f0       	breq	.+8      	; 0x6724 <strtod+0x1ee>
    671c:	31 97       	sbiw	r30, 0x01	; 1
    671e:	d7 01       	movw	r26, r14
    6720:	ed 93       	st	X+, r30
    6722:	fc 93       	st	X, r31
    6724:	0e 94 0d 2c 	call	0x581a	; 0x581a <__floatunsisf>
    6728:	c3 70       	andi	r28, 0x03	; 3
    672a:	c3 30       	cpi	r28, 0x03	; 3
    672c:	19 f0       	breq	.+6      	; 0x6734 <strtod+0x1fe>
    672e:	6b 01       	movw	r12, r22
    6730:	7c 01       	movw	r14, r24
    6732:	06 c0       	rjmp	.+12     	; 0x6740 <strtod+0x20a>
    6734:	6b 01       	movw	r12, r22
    6736:	7c 01       	movw	r14, r24
    6738:	f7 fa       	bst	r15, 7
    673a:	f0 94       	com	r15
    673c:	f7 f8       	bld	r15, 7
    673e:	f0 94       	com	r15
    6740:	20 e0       	ldi	r18, 0x00	; 0
    6742:	30 e0       	ldi	r19, 0x00	; 0
    6744:	a9 01       	movw	r20, r18
    6746:	c7 01       	movw	r24, r14
    6748:	b6 01       	movw	r22, r12
    674a:	0e 94 35 34 	call	0x686a	; 0x686a <__cmpsf2>
    674e:	88 23       	and	r24, r24
    6750:	09 f4       	brne	.+2      	; 0x6754 <strtod+0x21e>
    6752:	45 c0       	rjmp	.+138    	; 0x67de <strtod+0x2a8>
    6754:	17 ff       	sbrs	r17, 7
    6756:	06 c0       	rjmp	.+12     	; 0x6764 <strtod+0x22e>
    6758:	11 95       	neg	r17
    675a:	01 95       	neg	r16
    675c:	11 09       	sbc	r17, r1
    675e:	c5 ea       	ldi	r28, 0xA5	; 165
    6760:	d2 e0       	ldi	r29, 0x02	; 2
    6762:	02 c0       	rjmp	.+4      	; 0x6768 <strtod+0x232>
    6764:	cd eb       	ldi	r28, 0xBD	; 189
    6766:	d2 e0       	ldi	r29, 0x02	; 2
    6768:	5e 01       	movw	r10, r28
    676a:	b8 e1       	ldi	r27, 0x18	; 24
    676c:	ab 1a       	sub	r10, r27
    676e:	b1 08       	sbc	r11, r1
    6770:	46 01       	movw	r8, r12
    6772:	be 2d       	mov	r27, r14
    6774:	af 2d       	mov	r26, r15
    6776:	90 e2       	ldi	r25, 0x20	; 32
    6778:	e9 2e       	mov	r14, r25
    677a:	f1 2c       	mov	r15, r1
    677c:	0e 15       	cp	r16, r14
    677e:	1f 05       	cpc	r17, r15
    6780:	84 f0       	brlt	.+32     	; 0x67a2 <strtod+0x26c>
    6782:	fe 01       	movw	r30, r28
    6784:	25 91       	lpm	r18, Z+
    6786:	35 91       	lpm	r19, Z+
    6788:	45 91       	lpm	r20, Z+
    678a:	54 91       	lpm	r21, Z
    678c:	b4 01       	movw	r22, r8
    678e:	8b 2f       	mov	r24, r27
    6790:	9a 2f       	mov	r25, r26
    6792:	0e 94 9b 2c 	call	0x5936	; 0x5936 <__mulsf3>
    6796:	4b 01       	movw	r8, r22
    6798:	b8 2f       	mov	r27, r24
    679a:	a9 2f       	mov	r26, r25
    679c:	0e 19       	sub	r16, r14
    679e:	1f 09       	sbc	r17, r15
    67a0:	ed cf       	rjmp	.-38     	; 0x677c <strtod+0x246>
    67a2:	24 97       	sbiw	r28, 0x04	; 4
    67a4:	f5 94       	asr	r15
    67a6:	e7 94       	ror	r14
    67a8:	ca 15       	cp	r28, r10
    67aa:	db 05       	cpc	r29, r11
    67ac:	39 f7       	brne	.-50     	; 0x677c <strtod+0x246>
    67ae:	64 01       	movw	r12, r8
    67b0:	eb 2e       	mov	r14, r27
    67b2:	fa 2e       	mov	r15, r26
    67b4:	8e 2d       	mov	r24, r14
    67b6:	88 0f       	add	r24, r24
    67b8:	8f 2d       	mov	r24, r15
    67ba:	88 1f       	adc	r24, r24
    67bc:	8f 3f       	cpi	r24, 0xFF	; 255
    67be:	49 f0       	breq	.+18     	; 0x67d2 <strtod+0x29c>
    67c0:	20 e0       	ldi	r18, 0x00	; 0
    67c2:	30 e0       	ldi	r19, 0x00	; 0
    67c4:	a9 01       	movw	r20, r18
    67c6:	c7 01       	movw	r24, r14
    67c8:	b6 01       	movw	r22, r12
    67ca:	0e 94 35 34 	call	0x686a	; 0x686a <__cmpsf2>
    67ce:	81 11       	cpse	r24, r1
    67d0:	06 c0       	rjmp	.+12     	; 0x67de <strtod+0x2a8>
    67d2:	82 e2       	ldi	r24, 0x22	; 34
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	90 93 bf 0c 	sts	0x0CBF, r25	; 0x800cbf <errno+0x1>
    67da:	80 93 be 0c 	sts	0x0CBE, r24	; 0x800cbe <errno>
    67de:	c7 01       	movw	r24, r14
    67e0:	b6 01       	movw	r22, r12
    67e2:	09 c0       	rjmp	.+18     	; 0x67f6 <strtod+0x2c0>
    67e4:	60 e0       	ldi	r22, 0x00	; 0
    67e6:	70 e0       	ldi	r23, 0x00	; 0
    67e8:	80 e8       	ldi	r24, 0x80	; 128
    67ea:	9f ef       	ldi	r25, 0xFF	; 255
    67ec:	04 c0       	rjmp	.+8      	; 0x67f6 <strtod+0x2c0>
    67ee:	60 e0       	ldi	r22, 0x00	; 0
    67f0:	70 e0       	ldi	r23, 0x00	; 0
    67f2:	80 ec       	ldi	r24, 0xC0	; 192
    67f4:	9f e7       	ldi	r25, 0x7F	; 127
    67f6:	df 91       	pop	r29
    67f8:	cf 91       	pop	r28
    67fa:	1f 91       	pop	r17
    67fc:	0f 91       	pop	r16
    67fe:	ff 90       	pop	r15
    6800:	ef 90       	pop	r14
    6802:	df 90       	pop	r13
    6804:	cf 90       	pop	r12
    6806:	bf 90       	pop	r11
    6808:	af 90       	pop	r10
    680a:	9f 90       	pop	r9
    680c:	8f 90       	pop	r8
    680e:	7f 90       	pop	r7
    6810:	6f 90       	pop	r6
    6812:	08 95       	ret

00006814 <__ctype_isfalse>:
    6814:	99 27       	eor	r25, r25
    6816:	88 27       	eor	r24, r24

00006818 <__ctype_istrue>:
    6818:	08 95       	ret

0000681a <strncasecmp_P>:
    681a:	fb 01       	movw	r30, r22
    681c:	dc 01       	movw	r26, r24
    681e:	41 50       	subi	r20, 0x01	; 1
    6820:	50 40       	sbci	r21, 0x00	; 0
    6822:	88 f0       	brcs	.+34     	; 0x6846 <strncasecmp_P+0x2c>
    6824:	8d 91       	ld	r24, X+
    6826:	81 34       	cpi	r24, 0x41	; 65
    6828:	1c f0       	brlt	.+6      	; 0x6830 <strncasecmp_P+0x16>
    682a:	8b 35       	cpi	r24, 0x5B	; 91
    682c:	0c f4       	brge	.+2      	; 0x6830 <strncasecmp_P+0x16>
    682e:	80 5e       	subi	r24, 0xE0	; 224
    6830:	65 91       	lpm	r22, Z+
    6832:	61 34       	cpi	r22, 0x41	; 65
    6834:	1c f0       	brlt	.+6      	; 0x683c <strncasecmp_P+0x22>
    6836:	6b 35       	cpi	r22, 0x5B	; 91
    6838:	0c f4       	brge	.+2      	; 0x683c <strncasecmp_P+0x22>
    683a:	60 5e       	subi	r22, 0xE0	; 224
    683c:	86 1b       	sub	r24, r22
    683e:	61 11       	cpse	r22, r1
    6840:	71 f3       	breq	.-36     	; 0x681e <strncasecmp_P+0x4>
    6842:	99 0b       	sbc	r25, r25
    6844:	08 95       	ret
    6846:	88 1b       	sub	r24, r24
    6848:	fc cf       	rjmp	.-8      	; 0x6842 <strncasecmp_P+0x28>

0000684a <strrev>:
    684a:	dc 01       	movw	r26, r24
    684c:	fc 01       	movw	r30, r24
    684e:	67 2f       	mov	r22, r23
    6850:	71 91       	ld	r23, Z+
    6852:	77 23       	and	r23, r23
    6854:	e1 f7       	brne	.-8      	; 0x684e <strrev+0x4>
    6856:	32 97       	sbiw	r30, 0x02	; 2
    6858:	04 c0       	rjmp	.+8      	; 0x6862 <strrev+0x18>
    685a:	7c 91       	ld	r23, X
    685c:	6d 93       	st	X+, r22
    685e:	70 83       	st	Z, r23
    6860:	62 91       	ld	r22, -Z
    6862:	ae 17       	cp	r26, r30
    6864:	bf 07       	cpc	r27, r31
    6866:	c8 f3       	brcs	.-14     	; 0x685a <strrev+0x10>
    6868:	08 95       	ret

0000686a <__cmpsf2>:
    686a:	0e 94 3a 34 	call	0x6874	; 0x6874 <__fp_cmp>
    686e:	08 f4       	brcc	.+2      	; 0x6872 <__cmpsf2+0x8>
    6870:	81 e0       	ldi	r24, 0x01	; 1
    6872:	08 95       	ret

00006874 <__fp_cmp>:
    6874:	99 0f       	add	r25, r25
    6876:	00 08       	sbc	r0, r0
    6878:	55 0f       	add	r21, r21
    687a:	aa 0b       	sbc	r26, r26
    687c:	e0 e8       	ldi	r30, 0x80	; 128
    687e:	fe ef       	ldi	r31, 0xFE	; 254
    6880:	16 16       	cp	r1, r22
    6882:	17 06       	cpc	r1, r23
    6884:	e8 07       	cpc	r30, r24
    6886:	f9 07       	cpc	r31, r25
    6888:	c0 f0       	brcs	.+48     	; 0x68ba <__fp_cmp+0x46>
    688a:	12 16       	cp	r1, r18
    688c:	13 06       	cpc	r1, r19
    688e:	e4 07       	cpc	r30, r20
    6890:	f5 07       	cpc	r31, r21
    6892:	98 f0       	brcs	.+38     	; 0x68ba <__fp_cmp+0x46>
    6894:	62 1b       	sub	r22, r18
    6896:	73 0b       	sbc	r23, r19
    6898:	84 0b       	sbc	r24, r20
    689a:	95 0b       	sbc	r25, r21
    689c:	39 f4       	brne	.+14     	; 0x68ac <__fp_cmp+0x38>
    689e:	0a 26       	eor	r0, r26
    68a0:	61 f0       	breq	.+24     	; 0x68ba <__fp_cmp+0x46>
    68a2:	23 2b       	or	r18, r19
    68a4:	24 2b       	or	r18, r20
    68a6:	25 2b       	or	r18, r21
    68a8:	21 f4       	brne	.+8      	; 0x68b2 <__fp_cmp+0x3e>
    68aa:	08 95       	ret
    68ac:	0a 26       	eor	r0, r26
    68ae:	09 f4       	brne	.+2      	; 0x68b2 <__fp_cmp+0x3e>
    68b0:	a1 40       	sbci	r26, 0x01	; 1
    68b2:	a6 95       	lsr	r26
    68b4:	8f ef       	ldi	r24, 0xFF	; 255
    68b6:	81 1d       	adc	r24, r1
    68b8:	81 1d       	adc	r24, r1
    68ba:	08 95       	ret

000068bc <eeprom_read_block>:
    68bc:	dc 01       	movw	r26, r24
    68be:	cb 01       	movw	r24, r22

000068c0 <eeprom_read_blraw>:
    68c0:	fc 01       	movw	r30, r24
    68c2:	f9 99       	sbic	0x1f, 1	; 31
    68c4:	fe cf       	rjmp	.-4      	; 0x68c2 <eeprom_read_blraw+0x2>
    68c6:	06 c0       	rjmp	.+12     	; 0x68d4 <eeprom_read_blraw+0x14>
    68c8:	f2 bd       	out	0x22, r31	; 34
    68ca:	e1 bd       	out	0x21, r30	; 33
    68cc:	f8 9a       	sbi	0x1f, 0	; 31
    68ce:	31 96       	adiw	r30, 0x01	; 1
    68d0:	00 b4       	in	r0, 0x20	; 32
    68d2:	0d 92       	st	X+, r0
    68d4:	41 50       	subi	r20, 0x01	; 1
    68d6:	50 40       	sbci	r21, 0x00	; 0
    68d8:	b8 f7       	brcc	.-18     	; 0x68c8 <eeprom_read_blraw+0x8>
    68da:	08 95       	ret

000068dc <eeprom_update_byte>:
    68dc:	26 2f       	mov	r18, r22

000068de <eeprom_update_r18>:
    68de:	f9 99       	sbic	0x1f, 1	; 31
    68e0:	fe cf       	rjmp	.-4      	; 0x68de <eeprom_update_r18>
    68e2:	92 bd       	out	0x22, r25	; 34
    68e4:	81 bd       	out	0x21, r24	; 33
    68e6:	f8 9a       	sbi	0x1f, 0	; 31
    68e8:	01 97       	sbiw	r24, 0x01	; 1
    68ea:	00 b4       	in	r0, 0x20	; 32
    68ec:	02 16       	cp	r0, r18
    68ee:	39 f0       	breq	.+14     	; 0x68fe <eeprom_update_r18+0x20>
    68f0:	1f ba       	out	0x1f, r1	; 31
    68f2:	20 bd       	out	0x20, r18	; 32
    68f4:	0f b6       	in	r0, 0x3f	; 63
    68f6:	f8 94       	cli
    68f8:	fa 9a       	sbi	0x1f, 2	; 31
    68fa:	f9 9a       	sbi	0x1f, 1	; 31
    68fc:	0f be       	out	0x3f, r0	; 63
    68fe:	08 95       	ret

00006900 <eeprom_write_block>:
    6900:	dc 01       	movw	r26, r24
    6902:	cb 01       	movw	r24, r22
    6904:	03 c0       	rjmp	.+6      	; 0x690c <eeprom_write_block+0xc>
    6906:	2d 91       	ld	r18, X+
    6908:	0e 94 8b 34 	call	0x6916	; 0x6916 <eeprom_write_r18>
    690c:	41 50       	subi	r20, 0x01	; 1
    690e:	50 40       	sbci	r21, 0x00	; 0
    6910:	d0 f7       	brcc	.-12     	; 0x6906 <eeprom_write_block+0x6>
    6912:	08 95       	ret

00006914 <eeprom_write_byte>:
    6914:	26 2f       	mov	r18, r22

00006916 <eeprom_write_r18>:
    6916:	f9 99       	sbic	0x1f, 1	; 31
    6918:	fe cf       	rjmp	.-4      	; 0x6916 <eeprom_write_r18>
    691a:	1f ba       	out	0x1f, r1	; 31
    691c:	92 bd       	out	0x22, r25	; 34
    691e:	81 bd       	out	0x21, r24	; 33
    6920:	20 bd       	out	0x20, r18	; 32
    6922:	0f b6       	in	r0, 0x3f	; 63
    6924:	f8 94       	cli
    6926:	fa 9a       	sbi	0x1f, 2	; 31
    6928:	f9 9a       	sbi	0x1f, 1	; 31
    692a:	0f be       	out	0x3f, r0	; 63
    692c:	01 96       	adiw	r24, 0x01	; 1
    692e:	08 95       	ret

00006930 <__mulsi3>:
    6930:	db 01       	movw	r26, r22
    6932:	8f 93       	push	r24
    6934:	9f 93       	push	r25
    6936:	0e 94 c7 34 	call	0x698e	; 0x698e <__muluhisi3>
    693a:	bf 91       	pop	r27
    693c:	af 91       	pop	r26
    693e:	a2 9f       	mul	r26, r18
    6940:	80 0d       	add	r24, r0
    6942:	91 1d       	adc	r25, r1
    6944:	a3 9f       	mul	r26, r19
    6946:	90 0d       	add	r25, r0
    6948:	b2 9f       	mul	r27, r18
    694a:	90 0d       	add	r25, r0
    694c:	11 24       	eor	r1, r1
    694e:	08 95       	ret

00006950 <__divmodsi4>:
    6950:	05 2e       	mov	r0, r21
    6952:	97 fb       	bst	r25, 7
    6954:	1e f4       	brtc	.+6      	; 0x695c <__divmodsi4+0xc>
    6956:	00 94       	com	r0
    6958:	0e 94 bf 34 	call	0x697e	; 0x697e <__negsi2>
    695c:	57 fd       	sbrc	r21, 7
    695e:	07 d0       	rcall	.+14     	; 0x696e <__divmodsi4_neg2>
    6960:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__udivmodsi4>
    6964:	07 fc       	sbrc	r0, 7
    6966:	03 d0       	rcall	.+6      	; 0x696e <__divmodsi4_neg2>
    6968:	4e f4       	brtc	.+18     	; 0x697c <__divmodsi4_exit>
    696a:	0c 94 bf 34 	jmp	0x697e	; 0x697e <__negsi2>

0000696e <__divmodsi4_neg2>:
    696e:	50 95       	com	r21
    6970:	40 95       	com	r20
    6972:	30 95       	com	r19
    6974:	21 95       	neg	r18
    6976:	3f 4f       	sbci	r19, 0xFF	; 255
    6978:	4f 4f       	sbci	r20, 0xFF	; 255
    697a:	5f 4f       	sbci	r21, 0xFF	; 255

0000697c <__divmodsi4_exit>:
    697c:	08 95       	ret

0000697e <__negsi2>:
    697e:	90 95       	com	r25
    6980:	80 95       	com	r24
    6982:	70 95       	com	r23
    6984:	61 95       	neg	r22
    6986:	7f 4f       	sbci	r23, 0xFF	; 255
    6988:	8f 4f       	sbci	r24, 0xFF	; 255
    698a:	9f 4f       	sbci	r25, 0xFF	; 255
    698c:	08 95       	ret

0000698e <__muluhisi3>:
    698e:	0e 94 da 34 	call	0x69b4	; 0x69b4 <__umulhisi3>
    6992:	a5 9f       	mul	r26, r21
    6994:	90 0d       	add	r25, r0
    6996:	b4 9f       	mul	r27, r20
    6998:	90 0d       	add	r25, r0
    699a:	a4 9f       	mul	r26, r20
    699c:	80 0d       	add	r24, r0
    699e:	91 1d       	adc	r25, r1
    69a0:	11 24       	eor	r1, r1
    69a2:	08 95       	ret

000069a4 <__mulshisi3>:
    69a4:	b7 ff       	sbrs	r27, 7
    69a6:	0c 94 c7 34 	jmp	0x698e	; 0x698e <__muluhisi3>

000069aa <__mulohisi3>:
    69aa:	0e 94 c7 34 	call	0x698e	; 0x698e <__muluhisi3>
    69ae:	82 1b       	sub	r24, r18
    69b0:	93 0b       	sbc	r25, r19
    69b2:	08 95       	ret

000069b4 <__umulhisi3>:
    69b4:	a2 9f       	mul	r26, r18
    69b6:	b0 01       	movw	r22, r0
    69b8:	b3 9f       	mul	r27, r19
    69ba:	c0 01       	movw	r24, r0
    69bc:	a3 9f       	mul	r26, r19
    69be:	70 0d       	add	r23, r0
    69c0:	81 1d       	adc	r24, r1
    69c2:	11 24       	eor	r1, r1
    69c4:	91 1d       	adc	r25, r1
    69c6:	b2 9f       	mul	r27, r18
    69c8:	70 0d       	add	r23, r0
    69ca:	81 1d       	adc	r24, r1
    69cc:	11 24       	eor	r1, r1
    69ce:	91 1d       	adc	r25, r1
    69d0:	08 95       	ret

000069d2 <_exit>:
    69d2:	f8 94       	cli

000069d4 <__stop_program>:
    69d4:	ff cf       	rjmp	.-2      	; 0x69d4 <__stop_program>
