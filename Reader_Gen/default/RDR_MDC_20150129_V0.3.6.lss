
RDR_MDC_20150129_V0.3.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000374  00800200  00006a06  00006a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000077d  00800574  00800574  00006e0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006e0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b08  00000000  00000000  00006eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011088  00000000  00000000  000079b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004846  00000000  00000000  00018a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000aa1a  00000000  00000000  0001d286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e00  00000000  00000000  00027ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00021e5f  00000000  00000000  00029aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006839  00000000  00000000  0004b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000988  00000000  00000000  00052138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be9b  00000000  00000000  00052ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__ctors_end>
       4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
       8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
       c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      10:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      14:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      18:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      20:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      24:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      28:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      30:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__vector_12>
      34:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      38:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      3c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      40:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      44:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      48:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      4c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      50:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      54:	0c 94 37 26 	jmp	0x4c6e	; 0x4c6e <__vector_21>
      58:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      5c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      60:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      64:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      68:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      6c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      70:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      74:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      78:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      7c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      80:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__vector_32>
      84:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      88:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      8c:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__vector_35>
      90:	0c 94 e1 26 	jmp	0x4dc2	; 0x4dc2 <__vector_36>
      94:	0c 94 26 27 	jmp	0x4e4c	; 0x4e4c <__vector_37>
      98:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      9c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      a8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      ac:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      b8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      bc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      c8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      cc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      d8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      dc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      e8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      ec:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__vector_59>
      f0:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__vector_60>
      f4:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__vector_61>
      f8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
      fc:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <__vector_63>
     100:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     104:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     108:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     10c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     110:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     114:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     118:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     11c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
     120:	df 04       	cpc	r13, r15
     122:	e6 04       	cpc	r14, r6
     124:	b2 07       	cpc	r27, r18
     126:	b2 07       	cpc	r27, r18
     128:	b2 07       	cpc	r27, r18
     12a:	b2 07       	cpc	r27, r18
     12c:	d4 05       	cpc	r29, r4
     12e:	a6 06       	cpc	r10, r22
     130:	b2 07       	cpc	r27, r18
     132:	2a 07       	cpc	r18, r26
     134:	b2 07       	cpc	r27, r18
     136:	2e 05       	cpc	r18, r14
     138:	a5 07       	cpc	r26, r21
     13a:	b2 07       	cpc	r27, r18
     13c:	b7 06       	cpc	r11, r23
     13e:	aa 07       	cpc	r26, r26
     140:	b2 07       	cpc	r27, r18
     142:	b2 07       	cpc	r27, r18
     144:	b0 04       	cpc	r11, r0
     146:	3a 07       	cpc	r19, r26
     148:	b2 07       	cpc	r27, r18
     14a:	b2 07       	cpc	r27, r18
     14c:	b2 07       	cpc	r27, r18
     14e:	b2 07       	cpc	r27, r18
     150:	b2 07       	cpc	r27, r18
     152:	ac 07       	cpc	r26, r28
     154:	b2 07       	cpc	r27, r18
     156:	b2 07       	cpc	r27, r18
     158:	b2 07       	cpc	r27, r18
     15a:	b2 07       	cpc	r27, r18
     15c:	d4 05       	cpc	r29, r4
     15e:	b0 07       	cpc	r27, r16
     160:	b2 07       	cpc	r27, r18
     162:	b2 07       	cpc	r27, r18
     164:	b2 07       	cpc	r27, r18
     166:	b2 07       	cpc	r27, r18
     168:	b2 07       	cpc	r27, r18
     16a:	b2 07       	cpc	r27, r18
     16c:	aa 07       	cpc	r26, r26
     16e:	cc 05       	cpc	r28, r12
     170:	59 21       	and	r21, r9
     172:	ba 21       	and	r27, r10
     174:	b7 21       	and	r27, r7
     176:	b4 21       	and	r27, r4
     178:	4b 21       	and	r20, r11
     17a:	72 21       	and	r23, r2
     17c:	52 21       	and	r21, r2
     17e:	7d 21       	and	r23, r13
     180:	85 21       	and	r24, r5
     182:	ac 21       	and	r26, r12

00000184 <__trampolines_end>:
     184:	6e 61       	ori	r22, 0x1E	; 30
     186:	6e 00       	.word	0x006e	; ????

00000188 <__c.2240>:
     188:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     198:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1a8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1b8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1c8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1d8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1e8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1f8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     208:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     218:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     228:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     238:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     248:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     258:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     268:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     278:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000286 <pstr_nan>:
     286:	4e 41 4e                                            NAN

00000289 <pstr_inity>:
     289:	49 4e 49 54 59                                      INITY

0000028e <pstr_inf>:
     28e:	49 4e 46                                            INF

00000291 <pwr_m10>:
     291:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2a1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002a9 <pwr_p10>:
     2a9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2b9:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002c2 <__ctors_end>:
     2c2:	11 24       	eor	r1, r1
     2c4:	1f be       	out	0x3f, r1	; 63
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	d0 e4       	ldi	r29, 0x40	; 64
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61

000002ce <__do_copy_data>:
     2ce:	15 e0       	ldi	r17, 0x05	; 5
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b2 e0       	ldi	r27, 0x02	; 2
     2d4:	e6 e0       	ldi	r30, 0x06	; 6
     2d6:	fa e6       	ldi	r31, 0x6A	; 106
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0b bf       	out	0x3b, r16	; 59
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__do_copy_data+0x14>
     2de:	07 90       	elpm	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	a4 37       	cpi	r26, 0x74	; 116
     2e4:	b1 07       	cpc	r27, r17
     2e6:	d9 f7       	brne	.-10     	; 0x2de <__do_copy_data+0x10>

000002e8 <__do_clear_bss>:
     2e8:	2c e0       	ldi	r18, 0x0C	; 12
     2ea:	a4 e7       	ldi	r26, 0x74	; 116
     2ec:	b5 e0       	ldi	r27, 0x05	; 5
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <.do_clear_bss_start>

000002f0 <.do_clear_bss_loop>:
     2f0:	1d 92       	st	X+, r1

000002f2 <.do_clear_bss_start>:
     2f2:	a1 3f       	cpi	r26, 0xF1	; 241
     2f4:	b2 07       	cpc	r27, r18
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <.do_clear_bss_loop>
     2f8:	0e 94 4f 1a 	call	0x349e	; 0x349e <main>
     2fc:	0c 94 01 35 	jmp	0x6a02	; 0x6a02 <_exit>

00000300 <__bad_interrupt>:
     300:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000304 <ledoff1>:

			}

			void SetBillReturn(void)
			{
				ucReturnBillTimeout = 2;
     304:	a0 98       	cbi	0x14, 0	; 20
     306:	08 95       	ret

00000308 <ledoff2>:
     308:	a1 98       	cbi	0x14, 1	; 20
     30a:	08 95       	ret

0000030c <ValidationTimeout>:
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <VALIDATION_TIMEOUT>
     312:	08 95       	ret

00000314 <CommTimeOut>:
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <TOFlag>
     31a:	e4 e2       	ldi	r30, 0x24	; 36
     31c:	f9 e0       	ldi	r31, 0x09	; 9
     31e:	80 81       	ld	r24, Z
     320:	8f 7b       	andi	r24, 0xBF	; 191
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <KeypressTimeOut>:
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <KPTOFlag>
     32c:	08 95       	ret

0000032e <SetupTimeout>:
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     334:	08 95       	ret

00000336 <SetDeviceState>:
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <ucDeviceStateFlag>
     33c:	08 95       	ret

0000033e <appStartScan>:
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <macInit>
     344:	0c 94 1f 24 	jmp	0x483e	; 0x483e <macScan>

00000348 <appAssociate>:
     348:	ea ec       	ldi	r30, 0xCA	; 202
     34a:	fc e0       	ldi	r31, 0x0C	; 12
     34c:	65 81       	ldd	r22, Z+5	; 0x05
     34e:	83 81       	ldd	r24, Z+3	; 0x03
     350:	94 81       	ldd	r25, Z+4	; 0x04
     352:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <macAssociate>

00000356 <appPingReq>:
     356:	bc 01       	movw	r22, r24
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	0c 94 c7 20 	jmp	0x418e	; 0x418e <macPing>

0000035e <appPingRsp>:
     35e:	0e 94 86 1a 	call	0x350c	; 0x350c <radioGetSavedRssiValue>
     362:	88 23       	and	r24, r24
     364:	19 f0       	breq	.+6      	; 0x36c <appPingRsp+0xe>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 5d 0c 	sts	0x0C5D, r24	; 0x800c5d <macConfig+0x8>
     36c:	08 95       	ret

0000036e <appPacketSendSucceed>:
     36e:	20 91 6a 0c 	lds	r18, 0x0C6A	; 0x800c6a <macConfig+0x15>
     372:	30 91 6b 0c 	lds	r19, 0x0C6B	; 0x800c6b <macConfig+0x16>
     376:	80 91 64 0c 	lds	r24, 0x0C64	; 0x800c64 <macConfig+0xf>
     37a:	90 91 65 0c 	lds	r25, 0x0C65	; 0x800c65 <macConfig+0x10>
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	11 f4       	brne	.+4      	; 0x388 <appPacketSendSucceed+0x1a>
     384:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <failCount>
     388:	08 95       	ret

0000038a <appPacketSendAccessFail>:
     38a:	08 95       	ret

0000038c <appPacketSendFailed>:
     38c:	cf 93       	push	r28
     38e:	0e 94 bc 23 	call	0x4778	; 0x4778 <macIsScanning>
     392:	81 11       	cpse	r24, r1
     394:	40 c0       	rjmp	.+128    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     396:	20 91 64 0c 	lds	r18, 0x0C64	; 0x800c64 <macConfig+0xf>
     39a:	30 91 65 0c 	lds	r19, 0x0C65	; 0x800c65 <macConfig+0x10>
     39e:	c1 e0       	ldi	r28, 0x01	; 1
     3a0:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <macConfig+0x15>
     3a4:	90 91 6b 0c 	lds	r25, 0x0C6B	; 0x800c6b <macConfig+0x16>
     3a8:	82 17       	cp	r24, r18
     3aa:	93 07       	cpc	r25, r19
     3ac:	11 f0       	breq	.+4      	; 0x3b2 <appPacketSendFailed+0x26>
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <appPacketSendFailed+0x30>
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
     3bc:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <failCount>
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
     3c2:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <failCount>
     3c6:	83 30       	cpi	r24, 0x03	; 3
     3c8:	30 f1       	brcs	.+76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3ca:	cc 23       	and	r28, r28
     3cc:	a9 f0       	breq	.+42     	; 0x3f8 <appPacketSendFailed+0x6c>
     3ce:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <macConfig+0x8>
     3d2:	88 e0       	ldi	r24, 0x08	; 8
     3d4:	0e 94 ce 1c 	call	0x399c	; 0x399c <radioRandom>
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	2e 5c       	subi	r18, 0xCE	; 206
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	4e e1       	ldi	r20, 0x1E	; 30
     3e2:	42 9f       	mul	r20, r18
     3e4:	c0 01       	movw	r24, r0
     3e6:	43 9f       	mul	r20, r19
     3e8:	90 0d       	add	r25, r0
     3ea:	11 24       	eor	r1, r1
     3ec:	6f e9       	ldi	r22, 0x9F	; 159
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	88 51       	subi	r24, 0x18	; 24
     3f2:	9c 4f       	sbci	r25, 0xFC	; 252
     3f4:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     3f8:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <macConfig+0x15>
     3fc:	90 91 6b 0c 	lds	r25, 0x0C6B	; 0x800c6b <macConfig+0x16>
     400:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <macIsChild>
     404:	88 23       	and	r24, r24
     406:	39 f0       	breq	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     408:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <macConfig+0x15>
     40c:	90 91 6b 0c 	lds	r25, 0x0C6B	; 0x800c6b <macConfig+0x16>
     410:	cf 91       	pop	r28
     412:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <macRemoveChild>
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <appDataIndication>:
     41a:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <mac_buffer_rx>
     41e:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <ucSendDataSize>
     422:	88 23       	and	r24, r24
     424:	11 f1       	breq	.+68     	; 0x46a <appDataIndication+0x50>
     426:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <mac_buffer_rx+0xe>
     42a:	8f 77       	andi	r24, 0x7F	; 127
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	e9 f4       	brne	.+58     	; 0x46a <appDataIndication+0x50>
     430:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <mac_buffer_rx+0xf>
     434:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <ucDataLength.4437>
     438:	90 e8       	ldi	r25, 0x80	; 128
     43a:	e6 e2       	ldi	r30, 0x26	; 38
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	df 01       	movw	r26, r30
     440:	1d 92       	st	X+, r1
     442:	9a 95       	dec	r25
     444:	e9 f7       	brne	.-6      	; 0x440 <appDataIndication+0x26>
     446:	a1 e6       	ldi	r26, 0x61	; 97
     448:	bb e0       	ldi	r27, 0x0B	; 11
     44a:	9f 01       	movw	r18, r30
     44c:	9e 2f       	mov	r25, r30
     44e:	92 1b       	sub	r25, r18
     450:	98 17       	cp	r25, r24
     452:	18 f4       	brcc	.+6      	; 0x45a <appDataIndication+0x40>
     454:	9d 91       	ld	r25, X+
     456:	91 93       	st	Z+, r25
     458:	f9 cf       	rjmp	.-14     	; 0x44c <appDataIndication+0x32>
     45a:	86 e2       	ldi	r24, 0x26	; 38
     45c:	99 e0       	ldi	r25, 0x09	; 9
     45e:	0e 94 99 09 	call	0x1332	; 0x1332 <extractIncomingMessage>
     462:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
     466:	10 92 23 09 	sts	0x0923, r1	; 0x800923 <ucNumberOfRetry>
     46a:	08 95       	ret

0000046c <appChildAssociated>:
     46c:	a1 9a       	sbi	0x14, 1	; 20
     46e:	64 e8       	ldi	r22, 0x84	; 132
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	8a e0       	ldi	r24, 0x0A	; 10
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <macSetAlarm>

0000047a <appAssociateConfirm>:
     47a:	81 11       	cpse	r24, r1
     47c:	06 c0       	rjmp	.+12     	; 0x48a <appAssociateConfirm+0x10>
     47e:	a1 9a       	sbi	0x14, 1	; 20
     480:	64 e8       	ldi	r22, 0x84	; 132
     482:	71 e0       	ldi	r23, 0x01	; 1
     484:	8a e0       	ldi	r24, 0x0A	; 10
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	11 c0       	rjmp	.+34     	; 0x4ac <appAssociateConfirm+0x32>
     48a:	88 e0       	ldi	r24, 0x08	; 8
     48c:	0e 94 ce 1c 	call	0x399c	; 0x399c <radioRandom>
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	2e 5c       	subi	r18, 0xCE	; 206
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	4e e1       	ldi	r20, 0x1E	; 30
     49a:	42 9f       	mul	r20, r18
     49c:	c0 01       	movw	r24, r0
     49e:	43 9f       	mul	r20, r19
     4a0:	90 0d       	add	r25, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	6f e9       	ldi	r22, 0x9F	; 159
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	88 51       	subi	r24, 0x18	; 24
     4aa:	9c 4f       	sbci	r25, 0xFC	; 252
     4ac:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <macSetAlarm>

000004b0 <appScanConfirm>:
     4b0:	88 23       	and	r24, r24
     4b2:	29 f0       	breq	.+10     	; 0x4be <appScanConfirm+0xe>
     4b4:	64 ea       	ldi	r22, 0xA4	; 164
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	8e e1       	ldi	r24, 0x1E	; 30
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e c0       	rjmp	.+28     	; 0x4da <appScanConfirm+0x2a>
     4be:	88 e0       	ldi	r24, 0x08	; 8
     4c0:	0e 94 ce 1c 	call	0x399c	; 0x399c <radioRandom>
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	05 96       	adiw	r24, 0x05	; 5
     4c8:	6f e9       	ldi	r22, 0x9F	; 159
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	2a e0       	ldi	r18, 0x0A	; 10
     4ce:	ac 01       	movw	r20, r24
     4d0:	24 9f       	mul	r18, r20
     4d2:	c0 01       	movw	r24, r0
     4d4:	25 9f       	mul	r18, r21
     4d6:	90 0d       	add	r25, r0
     4d8:	11 24       	eor	r1, r1
     4da:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <macSetAlarm>

000004de <checkEeprom>:
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	62 97       	sbiw	r28, 0x12	; 18
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	89 8b       	std	Y+17, r24	; 0x11
     50a:	ae 01       	movw	r20, r28
     50c:	47 5f       	subi	r20, 0xF7	; 247
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	68 e0       	ldi	r22, 0x08	; 8
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
     51a:	89 84       	ldd	r8, Y+9	; 0x09
     51c:	9a 84       	ldd	r9, Y+10	; 0x0a
     51e:	ab 84       	ldd	r10, Y+11	; 0x0b
     520:	bc 84       	ldd	r11, Y+12	; 0x0c
     522:	cd 84       	ldd	r12, Y+13	; 0x0d
     524:	de 84       	ldd	r13, Y+14	; 0x0e
     526:	ef 84       	ldd	r14, Y+15	; 0x0f
     528:	f8 88       	ldd	r15, Y+16	; 0x10
     52a:	5f ef       	ldi	r21, 0xFF	; 255
     52c:	85 16       	cp	r8, r21
     52e:	95 06       	cpc	r9, r21
     530:	a5 06       	cpc	r10, r21
     532:	b5 06       	cpc	r11, r21
     534:	09 f0       	breq	.+2      	; 0x538 <checkEeprom+0x5a>
     536:	70 c0       	rjmp	.+224    	; 0x618 <checkEeprom+0x13a>
     538:	94 01       	movw	r18, r8
     53a:	a5 01       	movw	r20, r10
     53c:	b6 01       	movw	r22, r12
     53e:	c7 01       	movw	r24, r14
     540:	00 e2       	ldi	r16, 0x20	; 32
     542:	0e 94 75 2d 	call	0x5aea	; 0x5aea <__lshrdi3>
     546:	69 01       	movw	r12, r18
     548:	7a 01       	movw	r14, r20
     54a:	2f 3f       	cpi	r18, 0xFF	; 255
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
     54e:	4f 4f       	sbci	r20, 0xFF	; 255
     550:	5f 4f       	sbci	r21, 0xFF	; 255
     552:	61 05       	cpc	r22, r1
     554:	71 05       	cpc	r23, r1
     556:	81 05       	cpc	r24, r1
     558:	91 05       	cpc	r25, r1
     55a:	09 f0       	breq	.+2      	; 0x55e <checkEeprom+0x80>
     55c:	50 c0       	rjmp	.+160    	; 0x5fe <checkEeprom+0x120>
     55e:	8e 01       	movw	r16, r28
     560:	0f 5f       	subi	r16, 0xFF	; 255
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	88 e0       	ldi	r24, 0x08	; 8
     566:	f8 01       	movw	r30, r16
     568:	11 92       	st	Z+, r1
     56a:	8a 95       	dec	r24
     56c:	e9 f7       	brne	.-6      	; 0x568 <checkEeprom+0x8a>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 02 1b 	call	0x3604	; 0x3604 <radioInit>
     574:	86 e0       	ldi	r24, 0x06	; 6
     576:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <radioSetTrxState>
     57a:	78 01       	movw	r14, r16
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	dd 24       	eor	r13, r13
     580:	da 94       	dec	r13
     582:	34 30       	cpi	r19, 0x04	; 4
     584:	18 f4       	brcc	.+6      	; 0x58c <checkEeprom+0xae>
     586:	f7 01       	movw	r30, r14
     588:	d0 82       	st	Z, r13
     58a:	1a c0       	rjmp	.+52     	; 0x5c0 <checkEeprom+0xe2>
     58c:	3a 8b       	std	Y+18, r19	; 0x12
     58e:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <radioGetTrxState>
     592:	8f 7e       	andi	r24, 0xEF	; 239
     594:	3a 89       	ldd	r19, Y+18	; 0x12
     596:	86 30       	cpi	r24, 0x06	; 6
     598:	99 f4       	brne	.+38     	; 0x5c0 <checkEeprom+0xe2>
     59a:	44 e0       	ldi	r20, 0x04	; 4
     59c:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
     5a0:	f7 01       	movw	r30, r14
     5a2:	90 81       	ld	r25, Z
     5a4:	f4 e0       	ldi	r31, 0x04	; 4
     5a6:	9f 9f       	mul	r25, r31
     5a8:	c0 01       	movw	r24, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	92 2f       	mov	r25, r18
     5ae:	90 76       	andi	r25, 0x60	; 96
     5b0:	92 95       	swap	r25
     5b2:	96 95       	lsr	r25
     5b4:	97 70       	andi	r25, 0x07	; 7
     5b6:	89 2b       	or	r24, r25
     5b8:	f7 01       	movw	r30, r14
     5ba:	80 83       	st	Z, r24
     5bc:	41 50       	subi	r20, 0x01	; 1
     5be:	71 f7       	brne	.-36     	; 0x59c <checkEeprom+0xbe>
     5c0:	3f 5f       	subi	r19, 0xFF	; 255
     5c2:	ff ef       	ldi	r31, 0xFF	; 255
     5c4:	ef 1a       	sub	r14, r31
     5c6:	ff 0a       	sbc	r15, r31
     5c8:	38 30       	cpi	r19, 0x08	; 8
     5ca:	d9 f6       	brne	.-74     	; 0x582 <checkEeprom+0xa4>
     5cc:	a8 01       	movw	r20, r16
     5ce:	68 e0       	ldi	r22, 0x08	; 8
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     5d8:	ae 01       	movw	r20, r28
     5da:	4f 5e       	subi	r20, 0xEF	; 239
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	62 e0       	ldi	r22, 0x02	; 2
     5e0:	82 e2       	ldi	r24, 0x22	; 34
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	8c e6       	ldi	r24, 0x6C	; 108
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 86 34 	call	0x690c	; 0x690c <eeprom_update_byte>
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	87 e7       	ldi	r24, 0x77	; 119
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 86 34 	call	0x690c	; 0x690c <eeprom_update_byte>
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <checkEeprom+0x13a>
     5fe:	cd 28       	or	r12, r13
     600:	ce 28       	or	r12, r14
     602:	cf 28       	or	r12, r15
     604:	49 f0       	breq	.+18     	; 0x618 <checkEeprom+0x13a>
     606:	ae 01       	movw	r20, r28
     608:	4f 5e       	subi	r20, 0xEF	; 239
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	82 e2       	ldi	r24, 0x22	; 34
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     616:	00 00       	nop
     618:	62 96       	adiw	r28, 0x12	; 18
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	08 95       	ret

0000063e <appInit>:
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	1f 92       	push	r1
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	83 b3       	in	r24, 0x13	; 19
     64e:	87 60       	ori	r24, 0x07	; 7
     650:	83 bb       	out	0x13, r24	; 19
     652:	84 b3       	in	r24, 0x14	; 20
     654:	88 7f       	andi	r24, 0xF8	; 248
     656:	84 bb       	out	0x14, r24	; 20
     658:	84 b3       	in	r24, 0x14	; 20
     65a:	87 60       	ori	r24, 0x07	; 7
     65c:	84 bb       	out	0x14, r24	; 20
     65e:	6b 9a       	sbi	0x0d, 3	; 13
     660:	73 98       	cbi	0x0e, 3	; 14
     662:	84 b3       	in	r24, 0x14	; 20
     664:	88 7f       	andi	r24, 0xF8	; 248
     666:	84 bb       	out	0x14, r24	; 20
     668:	a0 9a       	sbi	0x14, 0	; 20
     66a:	83 e1       	ldi	r24, 0x13	; 19
     66c:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
     670:	62 e8       	ldi	r22, 0x82	; 130
     672:	71 e0       	ldi	r23, 0x01	; 1
     674:	89 e1       	ldi	r24, 0x19	; 25
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <ucDeviceStateFlag>
     682:	0e 94 6f 02 	call	0x4de	; 0x4de <checkEeprom>
     686:	0e 94 9b 13 	call	0x2736	; 0x2736 <initReader>
     68a:	62 e2       	ldi	r22, 0x22	; 34
     68c:	76 e2       	ldi	r23, 0x26	; 38
     68e:	80 e1       	ldi	r24, 0x10	; 16
     690:	97 e2       	ldi	r25, 0x27	; 39
     692:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     696:	08 2f       	mov	r16, r24
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <ucMachineWait>
     69e:	91 11       	cpse	r25, r1
     6a0:	1e c0       	rjmp	.+60     	; 0x6de <appInit+0xa0>
     6a2:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <ucDeviceStateFlag>
     6a6:	91 30       	cpi	r25, 0x01	; 1
     6a8:	51 f4       	brne	.+20     	; 0x6be <appInit+0x80>
     6aa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <initMachine>
     6ae:	6b e9       	ldi	r22, 0x9B	; 155
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	8c e2       	ldi	r24, 0x2C	; 44
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     6ba:	18 2f       	mov	r17, r24
     6bc:	ee cf       	rjmp	.-36     	; 0x69a <appInit+0x5c>
     6be:	92 30       	cpi	r25, 0x02	; 2
     6c0:	39 f4       	brne	.+14     	; 0x6d0 <appInit+0x92>
     6c2:	80 2f       	mov	r24, r16
     6c4:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <macTimerEnd>
     6c8:	81 2f       	mov	r24, r17
     6ca:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <macTimerEnd>
     6ce:	07 c0       	rjmp	.+14     	; 0x6de <appInit+0xa0>
     6d0:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <mac_event_pending>
     6d4:	88 23       	and	r24, r24
     6d6:	09 f3       	breq	.-62     	; 0x69a <appInit+0x5c>
     6d8:	0e 94 35 21 	call	0x426a	; 0x426a <macTask>
     6dc:	de cf       	rjmp	.-68     	; 0x69a <appInit+0x5c>
     6de:	6b e9       	ldi	r22, 0x9B	; 155
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	8c e2       	ldi	r24, 0x2C	; 44
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     6ea:	ae 01       	movw	r20, r28
     6ec:	4f 5f       	subi	r20, 0xFF	; 255
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	8e e1       	ldi	r24, 0x1E	; 30
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <MdcStatus>
     700:	8f 3f       	cpi	r24, 0xFF	; 255
     702:	79 f4       	brne	.+30     	; 0x722 <appInit+0xe4>
     704:	99 23       	and	r25, r25
     706:	69 f0       	breq	.+26     	; 0x722 <appInit+0xe4>
     708:	4d ef       	ldi	r20, 0xFD	; 253
     70a:	5a e0       	ldi	r21, 0x0A	; 10
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	8e e1       	ldi	r24, 0x1E	; 30
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     716:	4e ef       	ldi	r20, 0xFE	; 254
     718:	5a e0       	ldi	r21, 0x0A	; 10
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	8f e1       	ldi	r24, 0x1F	; 31
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	1a c0       	rjmp	.+52     	; 0x756 <appInit+0x118>
     722:	98 17       	cp	r25, r24
     724:	d1 f0       	breq	.+52     	; 0x75a <appInit+0x11c>
     726:	4d ef       	ldi	r20, 0xFD	; 253
     728:	5a e0       	ldi	r21, 0x0A	; 10
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	8e e1       	ldi	r24, 0x1E	; 30
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     734:	4e ef       	ldi	r20, 0xFE	; 254
     736:	5a e0       	ldi	r21, 0x0A	; 10
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	8f e1       	ldi	r24, 0x1F	; 31
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     742:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     746:	82 60       	ori	r24, 0x02	; 2
     748:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
     74c:	44 e2       	ldi	r20, 0x24	; 36
     74e:	59 e0       	ldi	r21, 0x09	; 9
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	82 e2       	ldi	r24, 0x22	; 34
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
     75a:	0e 94 9f 01 	call	0x33e	; 0x33e <appStartScan>
     75e:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <ucDeviceStateFlag>
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	69 f4       	brne	.+26     	; 0x780 <appInit+0x142>
     766:	0e 94 84 0c 	call	0x1908	; 0x1908 <displayVersion>
     76a:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     76e:	81 fd       	sbrc	r24, 1
     770:	07 c0       	rjmp	.+14     	; 0x780 <appInit+0x142>
     772:	0e 94 7d 11 	call	0x22fa	; 0x22fa <setupMachine>
     776:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <ucCardStatus>
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0e 94 36 11 	call	0x226c	; 0x226c <cardRemoved>
     780:	00 00       	nop
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <GetParam>:
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	7a 01       	movw	r14, r20
     79c:	fb 01       	movw	r30, r22
     79e:	01 90       	ld	r0, Z+
     7a0:	00 20       	and	r0, r0
     7a2:	e9 f7       	brne	.-6      	; 0x79e <GetParam+0x10>
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	ef 01       	movw	r28, r30
     7a8:	c6 1b       	sub	r28, r22
     7aa:	d7 0b       	sbc	r29, r23
     7ac:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	c1 f0       	breq	.+48     	; 0x7e4 <GetParam+0x56>
     7b4:	8c 01       	movw	r16, r24
     7b6:	0c 0f       	add	r16, r28
     7b8:	11 1d       	adc	r17, r1
     7ba:	b7 01       	movw	r22, r14
     7bc:	c8 01       	movw	r24, r16
     7be:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	79 f0       	breq	.+30     	; 0x7e4 <GetParam+0x56>
     7c6:	ec 01       	movw	r28, r24
     7c8:	c0 1b       	sub	r28, r16
     7ca:	d1 0b       	sbc	r29, r17
     7cc:	ae 01       	movw	r20, r28
     7ce:	b8 01       	movw	r22, r16
     7d0:	88 e8       	ldi	r24, 0x88	; 136
     7d2:	98 e0       	ldi	r25, 0x08	; 8
     7d4:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <memcpy>
     7d8:	c8 57       	subi	r28, 0x78	; 120
     7da:	d7 4f       	sbci	r29, 0xF7	; 247
     7dc:	18 82       	st	Y, r1
     7de:	88 e8       	ldi	r24, 0x88	; 136
     7e0:	98 e0       	ldi	r25, 0x08	; 8
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <GetParam+0x5a>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	08 95       	ret

000007f6 <DevicePoll>:
     7f6:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <MachineStatus>
     7fa:	6b e9       	ldi	r22, 0x9B	; 155
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	8c e2       	ldi	r24, 0x2C	; 44
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <macSetAlarm>

00000806 <padLeft>:
			}

			char * padLeft(char * string, u8 paddedLength, const char * pad)
			{
     806:	7f 92       	push	r7
     808:	8f 92       	push	r8
     80a:	9f 92       	push	r9
     80c:	af 92       	push	r10
     80e:	bf 92       	push	r11
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	7c 01       	movw	r14, r24
     822:	76 2e       	mov	r7, r22
     824:	4a 01       	movw	r8, r20
				size_t stringLength = strlen(string);
     826:	ec 01       	movw	r28, r24
     828:	09 90       	ld	r0, Y+
     82a:	00 20       	and	r0, r0
     82c:	e9 f7       	brne	.-6      	; 0x828 <padLeft+0x22>
     82e:	21 97       	sbiw	r28, 0x01	; 1
     830:	c8 1b       	sub	r28, r24
     832:	d9 0b       	sbc	r29, r25
				size_t lenpad = strlen(pad);
     834:	fa 01       	movw	r30, r20
     836:	01 90       	ld	r0, Z+
     838:	00 20       	and	r0, r0
     83a:	e9 f7       	brne	.-6      	; 0x836 <padLeft+0x30>
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	8f 01       	movw	r16, r30
     840:	04 1b       	sub	r16, r20
     842:	15 0b       	sbc	r17, r21
				u8 i = paddedLength;
				
				if (stringLength >= paddedLength)
     844:	c6 2e       	mov	r12, r22
     846:	d1 2c       	mov	r13, r1
     848:	cc 15       	cp	r28, r12
     84a:	dd 05       	cpc	r29, r13
     84c:	20 f5       	brcc	.+72     	; 0x896 <padLeft+0x90>
				{
					return NULL;//'\0';
				}

				char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
     84e:	c6 01       	movw	r24, r12
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <malloc>
     856:	5c 01       	movw	r10, r24
				
				for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
     858:	87 2d       	mov	r24, r7
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	c8 17       	cp	r28, r24
     85e:	d9 07       	cpc	r29, r25
     860:	48 f4       	brcc	.+18     	; 0x874 <padLeft+0x6e>
				{
					strncpy(padded, pad, lenpad);
     862:	a8 01       	movw	r20, r16
     864:	b4 01       	movw	r22, r8
     866:	c5 01       	movw	r24, r10
     868:	0e 94 8f 31 	call	0x631e	; 0x631e <strncpy>
					return NULL;//'\0';
				}

				char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
				
				for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
     86c:	7a 94       	dec	r7
     86e:	a0 0e       	add	r10, r16
     870:	b1 1e       	adc	r11, r17
     872:	f2 cf       	rjmp	.-28     	; 0x858 <padLeft+0x52>
				{
					strncpy(padded, pad, lenpad);
				}
				
				strncpy(padded, string, stringLength); /* copy without '\0' */
     874:	ae 01       	movw	r20, r28
     876:	b7 01       	movw	r22, r14
     878:	c5 01       	movw	r24, r10
     87a:	0e 94 8f 31 	call	0x631e	; 0x631e <strncpy>
				padded += stringLength; /* prepare for first append of pad */
     87e:	ca 0d       	add	r28, r10
     880:	db 1d       	adc	r29, r11
				*padded = '\0';
     882:	18 82       	st	Y, r1

				padded = (padded - i);
     884:	cc 19       	sub	r28, r12
     886:	dd 09       	sbc	r29, r13
				strncpy(string,padded,i);
     888:	a6 01       	movw	r20, r12
     88a:	be 01       	movw	r22, r28
     88c:	c7 01       	movw	r24, r14
     88e:	0e 94 8f 31 	call	0x631e	; 0x631e <strncpy>
				
				return padded;
     892:	ce 01       	movw	r24, r28
     894:	02 c0       	rjmp	.+4      	; 0x89a <padLeft+0x94>
				size_t lenpad = strlen(pad);
				u8 i = paddedLength;
				
				if (stringLength >= paddedLength)
				{
					return NULL;//'\0';
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0

				padded = (padded - i);
				strncpy(string,padded,i);
				
				return padded;
			}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	08 95       	ret

000008b6 <appTask>:
	Sample application task loop function.  This function is meant to
	be called periodically.  It receives data from serial and sends it
	to end device.
	*/
	void appTask(void)
	{
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	ab 97       	sbiw	r28, 0x2b	; 43
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
		//vars declaration
		ucSendDataSize = 0;
     8d8:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <ucSendDataSize>
		u8 n = 0;	

		
		#ifdef MACHINE_CONNECTED
		#if (DEVICE_CONNECTED == MDC_MACHINE)
		if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
     8dc:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <ucDeviceStateFlag>
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	41 f5       	brne	.+80     	; 0x934 <appTask+0x7e>
		{
			DevicePoll();
     8e4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DevicePoll>
			
			
			
			if (ucDeviceStateFlag == DEVICE_STATUS_ONLINE)
     8e8:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <ucDeviceStateFlag>
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	11 f5       	brne	.+68     	; 0x934 <appTask+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f0:	8f e1       	ldi	r24, 0x1F	; 31
     8f2:	9e e4       	ldi	r25, 0x4E	; 78
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <appTask+0x3e>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <appTask+0x44>
     8fa:	00 00       	nop
				//if (macConfig.associated == false)
				{
					//appPingReq(DEFAULT_COORD_ADDR);
					//appStartScan();
				}
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
     8fc:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     900:	81 ff       	sbrs	r24, 1
     902:	02 c0       	rjmp	.+4      	; 0x908 <appTask+0x52>
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	14 c0       	rjmp	.+40     	; 0x930 <appTask+0x7a>
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     908:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <macConfig+0x8>
     90c:	91 11       	cpse	r25, r1
     90e:	02 c0       	rjmp	.+4      	; 0x914 <appTask+0x5e>
     910:	83 ff       	sbrs	r24, 3
     912:	02 c0       	rjmp	.+4      	; 0x918 <appTask+0x62>
     914:	84 ff       	sbrs	r24, 4
     916:	02 c0       	rjmp	.+4      	; 0x91c <appTask+0x66>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	0a c0       	rjmp	.+20     	; 0x930 <appTask+0x7a>
				}
				else if (ReaderStateFlag.Busy == true)
     91c:	86 ff       	sbrs	r24, 6
     91e:	0a c0       	rjmp	.+20     	; 0x934 <appTask+0x7e>
				{
					#if (DEVICE_CONNECTED == MDC_MACHINE)
					//Display busy message
					if( OP != WAIT_FOR_SERVER ) // ****need to put op code in a queue****
     920:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <OP>
     924:	87 30       	cpi	r24, 0x07	; 7
     926:	19 f0       	breq	.+6      	; 0x92e <appTask+0x78>
					{
						OP = WAIT_FOR_SERVER;
     928:	87 e0       	ldi	r24, 0x07	; 7
     92a:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
					}
					displayMsg(BUSY_MSG);
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <displayMsg>
		}
		#endif // MDC_MACHINE
		
		#endif

		if(macConfig.associated == true/*/false*/ || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
     934:	20 91 5d 0c 	lds	r18, 0x0C5D	; 0x800c5d <macConfig+0x8>
     938:	21 11       	cpse	r18, r1
     93a:	04 c0       	rjmp	.+8      	; 0x944 <appTask+0x8e>
     93c:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     940:	83 ff       	sbrs	r24, 3
     942:	10 c3       	rjmp	.+1568   	; 0xf64 <appTask+0x6ae>
			{
				DevicePoll();
			}
			#endif //MARS_BA			
			
			switch(OP){
     944:	e0 91 ea 09 	lds	r30, 0x09EA	; 0x8009ea <OP>
     948:	8e 2f       	mov	r24, r30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc 01       	movw	r30, r24
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	e8 32       	cpi	r30, 0x28	; 40
     952:	f1 05       	cpc	r31, r1
     954:	08 f0       	brcs	.+2      	; 0x958 <appTask+0xa2>
     956:	06 c3       	rjmp	.+1548   	; 0xf64 <appTask+0x6ae>
     958:	e0 57       	subi	r30, 0x70	; 112
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	0c 94 6a 2d 	jmp	0x5ad4	; 0x5ad4 <__tablejump2__>
				case VALIDATE_READER:
				//TODO: fix machine type switch
				//
				#if (DEVICE_CONNECTED == MDC_MACHINE)
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
     960:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     964:	83 ff       	sbrs	r24, 3
     966:	04 c0       	rjmp	.+8      	; 0x970 <appTask+0xba>
     968:	81 fd       	sbrc	r24, 1
     96a:	02 c0       	rjmp	.+4      	; 0x970 <appTask+0xba>
				{
					OP = INIT_READER;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	f5 c2       	rjmp	.+1514   	; 0xf5a <appTask+0x6a4>
				}
				else{
					#endif //MDC_MACHINE
					
					#if (DEVICE_CONNECTED == MDC_MACHINE)
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (MdcStatus.MachineType[0] != INVALID_MACHINE) ){
     970:	81 fb       	bst	r24, 1
     972:	99 27       	eor	r25, r25
     974:	90 f9       	bld	r25, 0
     976:	81 fd       	sbrc	r24, 1
     978:	02 c0       	rjmp	.+4      	; 0x97e <appTask+0xc8>
     97a:	80 ff       	sbrs	r24, 0
     97c:	0b c0       	rjmp	.+22     	; 0x994 <appTask+0xde>
     97e:	20 91 fd 0a 	lds	r18, 0x0AFD	; 0x800afd <MdcStatus>
     982:	22 23       	and	r18, r18
     984:	29 f0       	breq	.+10     	; 0x990 <appTask+0xda>
						
						SETUP_TIMEOUT = true;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server
     98c:	8a e0       	ldi	r24, 0x0A	; 10
     98e:	e5 c2       	rjmp	.+1482   	; 0xf5a <appTask+0x6a4>
							//-------------------------------------------
							
							#endif
							
						}
						else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) ){
     990:	91 11       	cpse	r25, r1
     992:	e8 c2       	rjmp	.+1488   	; 0xf64 <appTask+0x6ae>
     994:	82 ff       	sbrs	r24, 2
     996:	ea cf       	rjmp	.-44     	; 0x96c <appTask+0xb6>
							
							VALIDATION_TIMEOUT = false;
     998:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <VALIDATION_TIMEOUT>
							sendValidationRequest();
     99c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <sendValidationRequest>
							// Clear Rx Buffer
							memset(DataBuffer,0,sizeof(DataBuffer));
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	e6 e2       	ldi	r30, 0x26	; 38
     9a4:	f9 e0       	ldi	r31, 0x09	; 9
     9a6:	df 01       	movw	r26, r30
     9a8:	1d 92       	st	X+, r1
     9aa:	8a 95       	dec	r24
     9ac:	e9 f7       	brne	.-6      	; 0x9a8 <appTask+0xf2>
							
							macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
     9ae:	66 e8       	ldi	r22, 0x86	; 134
     9b0:	71 e0       	ldi	r23, 0x01	; 1
     9b2:	8c e3       	ldi	r24, 0x3C	; 60
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <macSetLongAlarm>

							// Wait for validation package to arrive
							OP = VALIDATE_SETUP;
     9ba:	84 e1       	ldi	r24, 0x14	; 20
     9bc:	ce c2       	rjmp	.+1436   	; 0xf5a <appTask+0x6a4>
					break;

					case INIT_READER:
					#if (DEVICE_CONNECTED == MDC_MACHINE)
					
					if( isMachineCycleRunning() )
     9be:	0e 94 57 11 	call	0x22ae	; 0x22ae <isMachineCycleRunning>
     9c2:	88 23       	and	r24, r24
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <appTask+0x112>
     9c6:	c6 c2       	rjmp	.+1420   	; 0xf54 <appTask+0x69e>
					{
						OP = CYCLE_STARTED;
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	c7 c2       	rjmp	.+1422   	; 0xf5a <appTask+0x6a4>
					break;

					case SCANNING: //scan for card swipe

					// Enable Heart beat routine
					if (uiFunctionEntered < (20 * (F_CPU/4000000)))
     9cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uiFunctionEntered>
     9d0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <uiFunctionEntered+0x1>
     9d4:	80 35       	cpi	r24, 0x50	; 80
     9d6:	91 05       	cpc	r25, r1
     9d8:	30 f4       	brcc	.+12     	; 0x9e6 <appTask+0x130>
					{
						uiFunctionEntered++;
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uiFunctionEntered+0x1>
     9e0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uiFunctionEntered>
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <appTask+0x13a>
					else
					{
						#if (DEVICE_CONNECTED == MARS_BA)
						Led2_toggle();
						#else
						Led1_toggle();
     9e6:	90 9a       	sbi	0x12, 0	; 18
						#endif
						uiFunctionEntered = 0;
     9e8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <uiFunctionEntered+0x1>
     9ec:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uiFunctionEntered>
					}

					
					if(!Request(ISO14443_3_REQALL, tmp))
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	82 e5       	ldi	r24, 0x52	; 82
     9f8:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <Request>
     9fc:	89 2b       	or	r24, r25
     9fe:	09 f0       	breq	.+2      	; 0xa02 <appTask+0x14c>
     a00:	b1 c2       	rjmp	.+1378   	; 0xf64 <appTask+0x6ae>
					{
						u8 cardType;
						u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	e1 e2       	ldi	r30, 0x21	; 33
     a06:	f2 e0       	ldi	r31, 0x02	; 2
     a08:	de 01       	movw	r26, r28
     a0a:	5f 96       	adiw	r26, 0x1f	; 31
     a0c:	01 90       	ld	r0, Z+
     a0e:	0d 92       	st	X+, r0
     a10:	8a 95       	dec	r24
     a12:	e1 f7       	brne	.-8      	; 0xa0c <appTask+0x156>
						
						/*anti-collision and select the card*/
						if(!AnticollSelect(0, tmp, &cardType))
     a14:	ae 01       	movw	r20, r28
     a16:	49 5d       	subi	r20, 0xD9	; 217
     a18:	5f 4f       	sbci	r21, 0xFF	; 255
     a1a:	be 01       	movw	r22, r28
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 98 18 	call	0x3130	; 0x3130 <AnticollSelect>
     a26:	89 2b       	or	r24, r25
     a28:	09 f0       	breq	.+2      	; 0xa2c <appTask+0x176>
     a2a:	9c c2       	rjmp	.+1336   	; 0xf64 <appTask+0x6ae>
						{
							if(cardType == MIFARE_1K)
     a2c:	8f a1       	ldd	r24, Y+39	; 0x27
     a2e:	88 30       	cpi	r24, 0x08	; 8
     a30:	69 f4       	brne	.+26     	; 0xa4c <appTask+0x196>
							{
								CurrentAccount.Type = MIFARE_1K;
     a32:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <CurrentAccount>
								
								Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	ae 01       	movw	r20, r28
     a3a:	4f 5f       	subi	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	be 01       	movw	r22, r28
     a40:	61 5e       	subi	r22, 0xE1	; 225
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	80 e6       	ldi	r24, 0x60	; 96
     a46:	0e 94 43 19 	call	0x3286	; 0x3286 <Authentication>
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <appTask+0x19a>
							}
							else
							{
								CurrentAccount.Type = 0;
     a4c:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <CurrentAccount>
							}
							OP = CARD_DETECTED;
     a50:	8c e0       	ldi	r24, 0x0C	; 12
     a52:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
							ledoff1();
     a56:	0e 94 82 01 	call	0x304	; 0x304 <ledoff1>
     a5a:	84 c2       	rjmp	.+1288   	; 0xf64 <appTask+0x6ae>
					
					case CARD_DETECTED:
					{
						

						u8 cardNum[10] = {0};
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	f8 01       	movw	r30, r16
     a66:	11 92       	st	Z+, r1
     a68:	8a 95       	dec	r24
     a6a:	e9 f7       	brne	.-6      	; 0xa66 <appTask+0x1b0>
						//memset(DataBuffer,0,sizeof(DataBuffer));	// Clear Buffer
						
						
						//Read CardID from User Zone
						if(!readCardID(CurrentAccount.Type, &cardNum[0]))
     a6c:	b8 01       	movw	r22, r16
     a6e:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <CurrentAccount>
     a72:	0e 94 e5 19 	call	0x33ca	; 0x33ca <readCardID>
     a76:	89 2b       	or	r24, r25
     a78:	09 f0       	breq	.+2      	; 0xa7c <appTask+0x1c6>
     a7a:	8c c0       	rjmp	.+280    	; 0xb94 <appTask+0x2de>
						{
							padLeft((char*)&cardNum[0],9,"200");
     a7c:	4c e3       	ldi	r20, 0x3C	; 60
     a7e:	52 e0       	ldi	r21, 0x02	; 2
     a80:	69 e0       	ldi	r22, 0x09	; 9
     a82:	c8 01       	movw	r24, r16
     a84:	0e 94 03 04 	call	0x806	; 0x806 <padLeft>
							
							CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
     a88:	4a e0       	ldi	r20, 0x0A	; 10
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	c8 01       	movw	r24, r16
     a92:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <strtoul>
     a96:	60 93 13 09 	sts	0x0913, r22	; 0x800913 <CurrentAccount+0x1>
     a9a:	70 93 14 09 	sts	0x0914, r23	; 0x800914 <CurrentAccount+0x2>
     a9e:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <CurrentAccount+0x3>
     aa2:	90 93 16 09 	sts	0x0916, r25	; 0x800916 <CurrentAccount+0x4>
							
							if(macConfig.associated == true)
     aa6:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
     aaa:	88 23       	and	r24, r24
     aac:	a1 f1       	breq	.+104    	; 0xb16 <appTask+0x260>
							{
								// Send Data Package via Radio
								sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
     aae:	1f 93       	push	r17
     ab0:	0f 93       	push	r16
     ab2:	80 e4       	ldi	r24, 0x40	; 64
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	0b e3       	ldi	r16, 0x3B	; 59
     abc:	1a e0       	ldi	r17, 0x0A	; 10
     abe:	1f 93       	push	r17
     ac0:	0f 93       	push	r16
     ac2:	0e 94 25 32 	call	0x644a	; 0x644a <sprintf>

								ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
     ac6:	f8 01       	movw	r30, r16
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <appTask+0x212>
     ace:	bf 01       	movw	r22, r30
     ad0:	6c 53       	subi	r22, 0x3C	; 60
     ad2:	7a 40       	sbci	r23, 0x0A	; 10
								ucSendDataBuffer[0] = ucSendDataSize;   // Length
     ad4:	60 93 3a 0a 	sts	0x0A3A, r22	; 0x800a3a <ucSendDataBuffer>
								ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
     ad8:	6f 5f       	subi	r22, 0xFF	; 255
     ada:	60 93 32 0b 	sts	0x0B32, r22	; 0x800b32 <ucSendDataSize>
								macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
     ade:	4a e3       	ldi	r20, 0x3A	; 58
     ae0:	5a e0       	ldi	r21, 0x0A	; 10
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
								
								// Clear Rx Buffer
								memset(DataBuffer,0,sizeof(DataBuffer));
     aea:	80 e8       	ldi	r24, 0x80	; 128
     aec:	e6 e2       	ldi	r30, 0x26	; 38
     aee:	f9 e0       	ldi	r31, 0x09	; 9
     af0:	df 01       	movw	r26, r30
     af2:	1d 92       	st	X+, r1
     af4:	8a 95       	dec	r24
     af6:	e9 f7       	brne	.-6      	; 0xaf2 <appTask+0x23c>
								
								OP = WAIT_FOR_SERVER;
     af8:	87 e0       	ldi	r24, 0x07	; 7
     afa:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
								ReaderStateFlag.Busy = true;
     afe:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     b02:	80 64       	ori	r24, 0x40	; 64
     b04:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	3a c0       	rjmp	.+116    	; 0xb8a <appTask+0x2d4>
								
							}
							#if (DEVICE_CONNECTED == MDC_MACHINE)


							else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
     b16:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     b1a:	83 ff       	sbrs	r24, 3
     b1c:	33 c0       	rjmp	.+102    	; 0xb84 <appTask+0x2ce>
     b1e:	84 fd       	sbrc	r24, 4
     b20:	31 c0       	rjmp	.+98     	; 0xb84 <appTask+0x2ce>
							{//allow cycle to start when BOW is down
								CurrentAccount.Value = vendPrice * 100;
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 ec       	ldi	r20, 0xC8	; 200
     b28:	52 e4       	ldi	r21, 0x42	; 66
     b2a:	60 91 e5 0c 	lds	r22, 0x0CE5	; 0x800ce5 <vendPrice>
     b2e:	70 91 e6 0c 	lds	r23, 0x0CE6	; 0x800ce6 <vendPrice+0x1>
     b32:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <vendPrice+0x2>
     b36:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <vendPrice+0x3>
     b3a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__mulsf3>
     b3e:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__fixunssfsi>
     b42:	70 93 1a 09 	sts	0x091A, r23	; 0x80091a <CurrentAccount+0x8>
     b46:	60 93 19 09 	sts	0x0919, r22	; 0x800919 <CurrentAccount+0x7>
								//CurrentAccount.CardState = CARD_IN;
								if( cardInserted(REGULAR_VEND) )
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 45 11 	call	0x228a	; 0x228a <cardInserted>
     b50:	88 23       	and	r24, r24
     b52:	d9 f0       	breq	.+54     	; 0xb8a <appTask+0x2d4>
								{
									
									OP = WAIT_FOR_SELECTION;
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
									
									KPTOFlag = 0;
     b5a:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <KPTOFlag>
									
									if( waitForMachineStartKey() )
     b5e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <waitForMachineStartKey>
     b62:	88 23       	and	r24, r24
     b64:	41 f0       	breq	.+16     	; 0xb76 <appTask+0x2c0>
									{
										macSetLongAlarm(MachineSetupData.KeyPressWaitTime,KeypressTimeOut);
     b66:	80 91 a6 09 	lds	r24, 0x09A6	; 0x8009a6 <MachineSetupData>
     b6a:	63 e9       	ldi	r22, 0x93	; 147
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <macSetLongAlarm>
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <appTask+0x2d4>
									}
									else
									macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     b76:	63 e9       	ldi	r22, 0x93	; 147
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	84 ef       	ldi	r24, 0xF4	; 244
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <appTask+0x2d4>
									
								}
							}
							else{
								OP = SCANNING;
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
							#if (DEBUG)
							Beeps(1);
							#endif

							//Set Timeout timer
							TOFlag = 0;
     b8a:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <TOFlag>
							ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
     b8e:	6a e8       	ldi	r22, 0x8A	; 138
     b90:	71 e0       	ldi	r23, 0x01	; 1
     b92:	d6 c1       	rjmp	.+940    	; 0xf40 <appTask+0x68a>
						else
						{
							#if (DEBUG)
							debugMsgStr("\r\nInvalid CardID\r\n");
							#endif
							OP = SCARD_REMOVED;
     b94:	8d e0       	ldi	r24, 0x0D	; 13
     b96:	e1 c1       	rjmp	.+962    	; 0xf5a <appTask+0x6a4>
					}
					break;

					case SEND_OFFLINE_TRANSACTIONS:
					
					if (timeout.sendingOfflineTransactions)
     b98:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <timeout>
     b9c:	80 ff       	sbrs	r24, 0
     b9e:	e2 c1       	rjmp	.+964    	; 0xf64 <appTask+0x6ae>
					{
						timeout.sendingOfflineTransactions = false;
     ba0:	8e 7f       	andi	r24, 0xFE	; 254
     ba2:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <timeout>
     ba6:	d8 c1       	rjmp	.+944    	; 0xf58 <appTask+0x6a2>
					
					case SHOW_BALANCE_REQUEST:
					case WAIT_FOR_SERVER: //wait for response from server


					if(DataBuffer[0] != '\0')
     ba8:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <DataBuffer>
     bac:	88 23       	and	r24, r24
     bae:	09 f4       	brne	.+2      	; 0xbb2 <appTask+0x2fc>
     bb0:	b8 c0       	rjmp	.+368    	; 0xd22 <appTask+0x46c>
					{
						// Print response
						
						ReaderStateFlag.Busy = false;
     bb2:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     bb6:	8f 7b       	andi	r24, 0xBF	; 191
     bb8:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
						debugMsgStr("\r\n");
						debugMsgStr(DataBuffer);
						debugMsgStr("\r\n");
						#endif

						OP = SCARD_REMOVED;
     bbc:	8d e0       	ldi	r24, 0x0D	; 13
     bbe:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
						}
						#else
						
						
						//Extract the Card Id
						if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
     bc2:	6c e4       	ldi	r22, 0x4C	; 76
     bc4:	72 e0       	ldi	r23, 0x02	; 2
     bc6:	86 e2       	ldi	r24, 0x26	; 38
     bc8:	99 e0       	ldi	r25, 0x09	; 9
     bca:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <appTask+0x31e>
     bd2:	a4 c0       	rjmp	.+328    	; 0xd1c <appTask+0x466>
						{
							CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
     bd4:	4a e0       	ldi	r20, 0x0A	; 10
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	04 96       	adiw	r24, 0x04	; 4
     bde:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <strtoul>
     be2:	60 93 13 09 	sts	0x0913, r22	; 0x800913 <CurrentAccount+0x1>
     be6:	70 93 14 09 	sts	0x0914, r23	; 0x800914 <CurrentAccount+0x2>
     bea:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <CurrentAccount+0x3>
     bee:	90 93 16 09 	sts	0x0916, r25	; 0x800916 <CurrentAccount+0x4>
							

							
							//Display card balance on machine
							double fBalance = 0.0;
							uctempBuf = strstr((char *)DataBuffer,"Balance: ");
     bf2:	61 e5       	ldi	r22, 0x51	; 81
     bf4:	72 e0       	ldi	r23, 0x02	; 2
     bf6:	86 e2       	ldi	r24, 0x26	; 38
     bf8:	99 e0       	ldi	r25, 0x09	; 9
     bfa:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
     bfe:	7c 01       	movw	r14, r24
							
							uctempBuf += 9;
     c00:	8c 01       	movw	r16, r24
     c02:	07 5f       	subi	r16, 0xF7	; 247
     c04:	1f 4f       	sbci	r17, 0xFF	; 255
							ptr = strchr(uctempBuf,'.');
     c06:	6e e2       	ldi	r22, 0x2E	; 46
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	c8 01       	movw	r24, r16
     c0c:	0e 94 74 31 	call	0x62e8	; 0x62e8 <strchr>
							k = ptr - uctempBuf;
     c10:	28 2f       	mov	r18, r24
     c12:	20 1b       	sub	r18, r16
							fBalance = atof(uctempBuf);
     c14:	c8 01       	movw	r24, r16
     c16:	2b a7       	std	Y+43, r18	; 0x2b
     c18:	0e 94 50 30 	call	0x60a0	; 0x60a0 <atof>
							
							// Format the Balance to XX.XX
							if (k <2)
     c1c:	2b a5       	ldd	r18, Y+43	; 0x2b
     c1e:	22 30       	cpi	r18, 0x02	; 2
     c20:	38 f4       	brcc	.+14     	; 0xc30 <appTask+0x37a>
							sprintf(uctempBuf,"0%.2f",fBalance);
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	7f 93       	push	r23
     c28:	6f 93       	push	r22
     c2a:	8b e5       	ldi	r24, 0x5B	; 91
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <appTask+0x38a>
							else if(k == 2)
     c30:	22 30       	cpi	r18, 0x02	; 2
     c32:	91 f4       	brne	.+36     	; 0xc58 <appTask+0x3a2>
							sprintf(uctempBuf,"%.2f",fBalance);
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	7f 93       	push	r23
     c3a:	6f 93       	push	r22
     c3c:	8c e5       	ldi	r24, 0x5C	; 92
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	1f 93       	push	r17
     c46:	0f 93       	push	r16
     c48:	0e 94 25 32 	call	0x644a	; 0x644a <sprintf>
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <appTask+0x3ac>
							else
							strcpy(uctempBuf,"99.99");
     c58:	61 e6       	ldi	r22, 0x61	; 97
     c5a:	72 e0       	ldi	r23, 0x02	; 2
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 88 31 	call	0x6310	; 0x6310 <strcpy>
							
							//Format the Display Balance
							CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     c62:	d7 01       	movw	r26, r14
     c64:	19 96       	adiw	r26, 0x09	; 9
     c66:	2c 91       	ld	r18, X
     c68:	19 97       	sbiw	r26, 0x09	; 9
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	20 53       	subi	r18, 0x30	; 48
     c6e:	31 09       	sbc	r19, r1
     c70:	88 ee       	ldi	r24, 0xE8	; 232
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	28 9f       	mul	r18, r24
     c76:	a0 01       	movw	r20, r0
     c78:	29 9f       	mul	r18, r25
     c7a:	50 0d       	add	r21, r0
     c7c:	38 9f       	mul	r19, r24
     c7e:	50 0d       	add	r21, r0
     c80:	11 24       	eor	r1, r1
     c82:	1a 96       	adiw	r26, 0x0a	; 10
     c84:	2c 91       	ld	r18, X
     c86:	1a 97       	sbiw	r26, 0x0a	; 10
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	20 53       	subi	r18, 0x30	; 48
     c8c:	31 09       	sbc	r19, r1
     c8e:	64 e6       	ldi	r22, 0x64	; 100
     c90:	62 9f       	mul	r22, r18
     c92:	c0 01       	movw	r24, r0
     c94:	63 9f       	mul	r22, r19
     c96:	90 0d       	add	r25, r0
     c98:	11 24       	eor	r1, r1
     c9a:	84 0f       	add	r24, r20
     c9c:	95 1f       	adc	r25, r21
     c9e:	1c 96       	adiw	r26, 0x0c	; 12
     ca0:	4c 91       	ld	r20, X
     ca2:	1c 97       	sbiw	r26, 0x0c	; 12
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	40 53       	subi	r20, 0x30	; 48
     ca8:	51 09       	sbc	r21, r1
     caa:	6a e0       	ldi	r22, 0x0A	; 10
     cac:	64 9f       	mul	r22, r20
     cae:	90 01       	movw	r18, r0
     cb0:	65 9f       	mul	r22, r21
     cb2:	30 0d       	add	r19, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	1d 96       	adiw	r26, 0x0d	; 13
     cbc:	2c 91       	ld	r18, X
     cbe:	82 0f       	add	r24, r18
     cc0:	91 1d       	adc	r25, r1
     cc2:	c0 97       	sbiw	r24, 0x30	; 48
     cc4:	90 93 1a 09 	sts	0x091A, r25	; 0x80091a <CurrentAccount+0x8>
     cc8:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <CurrentAccount+0x7>


							#if(DEVICE_CONNECTED == MDC_MACHINE)
							
							// give display control back to front end controller.
							displayMsg(BLANK_MSG);
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <displayMsg>
     cd2:	bf ef       	ldi	r27, 0xFF	; 255
     cd4:	e1 ee       	ldi	r30, 0xE1	; 225
     cd6:	f4 e0       	ldi	r31, 0x04	; 4
     cd8:	b1 50       	subi	r27, 0x01	; 1
     cda:	e0 40       	sbci	r30, 0x00	; 0
     cdc:	f0 40       	sbci	r31, 0x00	; 0
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <appTask+0x422>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <appTask+0x42c>
     ce2:	00 00       	nop
							_delay_ms(100);
							
							if( cardInserted(REGULAR_VEND) )
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 45 11 	call	0x228a	; 0x228a <cardInserted>
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <appTask+0x43a>
     cee:	3a c1       	rjmp	.+628    	; 0xf64 <appTask+0x6ae>
								#if(DEBUG_BOW)
								debugMsgStr("\r\nSerialSendMachineData(CASH_CARD_INSERTED)\r\n");
								#endif

								//CurrentAccount.CardState = CARD_OUT;
								OP = WAIT_FOR_SELECTION;
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
								//Sound Buzzer
								#if (DEBUG)
								Beeps(2);
								#endif

								KPTOFlag = 0;
     cf6:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <KPTOFlag>
								
								if( waitForMachineStartKey() )
     cfa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <waitForMachineStartKey>
     cfe:	88 23       	and	r24, r24
     d00:	31 f0       	breq	.+12     	; 0xd0e <appTask+0x458>
								{
									macSetLongAlarm(MachineSetupData.KeyPressWaitTime,KeypressTimeOut);
     d02:	80 91 a6 09 	lds	r24, 0x09A6	; 0x8009a6 <MachineSetupData>
     d06:	63 e9       	ldi	r22, 0x93	; 147
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	1b c1       	rjmp	.+566    	; 0xf44 <appTask+0x68e>
								}
								else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     d0e:	63 e9       	ldi	r22, 0x93	; 147
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	84 ef       	ldi	r24, 0xF4	; 244
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
     d1a:	24 c1       	rjmp	.+584    	; 0xf64 <appTask+0x6ae>
							}
							#endif	//MDC_MACHINE
						}	//serial number found in server database
						else //serial number error from server database
						{
							CommTimeOut();//TOFlag = 1;	//force timeout condition
     d1c:	0e 94 8a 01 	call	0x314	; 0x314 <CommTimeOut>
     d20:	21 c1       	rjmp	.+578    	; 0xf64 <appTask+0x6ae>
						}
						#endif//MDC_MACHINE

					}
					else if(TOFlag == 1 || macConfig.associated == false) // server fails to respond in time
     d22:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <TOFlag>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	11 f0       	breq	.+4      	; 0xd2e <appTask+0x478>
     d2a:	21 11       	cpse	r18, r1
     d2c:	1b c1       	rjmp	.+566    	; 0xf64 <appTask+0x6ae>

						// Error Occured
						// Re-enter SCANNING mode

						#if(DEVICE_CONNECTED == MDC_MACHINE)
						if ( cardRemoved(REMOVE_CARD) )
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	0e 94 36 11 	call	0x226c	; 0x226c <cardRemoved>
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <appTask+0x484>
     d38:	15 c1       	rjmp	.+554    	; 0xf64 <appTask+0x6ae>
						{
							//TOFlag = 1;
							ReaderStateFlag.Busy = false;
     d3a:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     d3e:	8f 7b       	andi	r24, 0xBF	; 191
     d40:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
							//send error message to machine display
							displayMsg(CARD_ERR_MSG);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <displayMsg>
     d4a:	06 c1       	rjmp	.+524    	; 0xf58 <appTask+0x6a2>
					break;

					case WAIT_FOR_SELECTION: //wait to see if cycle start has been requested by user

					#if(DEVICE_CONNECTED == MDC_MACHINE)
					if( (MdcStatus.CmdToReader == DEDUCT_VEND_COMMAND || MdcStatus.CmdToReader == DEDUCT_TOPOFF_COMMAND) )
     d4c:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <MdcStatus+0x5>
     d50:	86 54       	subi	r24, 0x46	; 70
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	10 f4       	brcc	.+4      	; 0xd5a <appTask+0x4a4>
					{
						OP = START_CYCLE; // set only if vend price deduction successful.
     d56:	8f e0       	ldi	r24, 0x0F	; 15
     d58:	00 c1       	rjmp	.+512    	; 0xf5a <appTask+0x6a4>

					}
					else if(KPTOFlag == 1)
     d5a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <KPTOFlag>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	09 f0       	breq	.+2      	; 0xd64 <appTask+0x4ae>
     d62:	00 c1       	rjmp	.+512    	; 0xf64 <appTask+0x6ae>
					{
						if ( cardRemoved(CASH_CARD) )
     d64:	0e 94 36 11 	call	0x226c	; 0x226c <cardRemoved>
     d68:	81 11       	cpse	r24, r1
     d6a:	f4 c0       	rjmp	.+488    	; 0xf54 <appTask+0x69e>
     d6c:	fb c0       	rjmp	.+502    	; 0xf64 <appTask+0x6ae>

					case START_CYCLE:	// send start cycle command to machine

					#if(DEVICE_CONNECTED == MDC_MACHINE)

					if( startMachineCycle() )//SerialSendMachineData(MACHINE_START_COMMAND) )
     d6e:	0e 94 89 13 	call	0x2712	; 0x2712 <startMachineCycle>
     d72:	88 23       	and	r24, r24
     d74:	09 f4       	brne	.+2      	; 0xd78 <appTask+0x4c2>
     d76:	6a c0       	rjmp	.+212    	; 0xe4c <appTask+0x596>
						
						structTransaction vend;
						
						
						
						vend.CardId			= CurrentAccount.ID;
     d78:	c0 90 13 09 	lds	r12, 0x0913	; 0x800913 <CurrentAccount+0x1>
     d7c:	d0 90 14 09 	lds	r13, 0x0914	; 0x800914 <CurrentAccount+0x2>
     d80:	e0 90 15 09 	lds	r14, 0x0915	; 0x800915 <CurrentAccount+0x3>
     d84:	f0 90 16 09 	lds	r15, 0x0916	; 0x800916 <CurrentAccount+0x4>
     d88:	ca 86       	std	Y+10, r12	; 0x0a
     d8a:	db 86       	std	Y+11, r13	; 0x0b
     d8c:	ec 86       	std	Y+12, r14	; 0x0c
     d8e:	fd 86       	std	Y+13, r15	; 0x0d
						vend.vendPrice		= vendPrice * 100;
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	48 ec       	ldi	r20, 0xC8	; 200
     d96:	52 e4       	ldi	r21, 0x42	; 66
     d98:	60 91 e5 0c 	lds	r22, 0x0CE5	; 0x800ce5 <vendPrice>
     d9c:	70 91 e6 0c 	lds	r23, 0x0CE6	; 0x800ce6 <vendPrice+0x1>
     da0:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <vendPrice+0x2>
     da4:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <vendPrice+0x3>
     da8:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__mulsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	2b a7       	std	Y+43, r18	; 0x2b
     db2:	38 a7       	std	Y+40, r19	; 0x28
     db4:	49 a7       	std	Y+41, r20	; 0x29
     db6:	5a a7       	std	Y+42, r21	; 0x2a
     db8:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__fixunssfsi>
     dbc:	79 87       	std	Y+9, r23	; 0x09
     dbe:	68 87       	std	Y+8, r22	; 0x08
						vend.LocationId		= ReaderSetup.locationId;
     dc0:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <ReaderSetup+0x6>
     dc4:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <ReaderSetup+0x7>
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
						vend.ManufactureId	= ReaderSetup.manufacturerId;
     dcc:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <ReaderSetup+0x4>
     dd0:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <ReaderSetup+0x5>
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
						vend.MachineId[0]	= deviceStatus.deviceType[0];
     dd8:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <deviceStatus>
     ddc:	8b 83       	std	Y+3, r24	; 0x03
						vend.MachineId[1]	= deviceStatus.deviceType[1];
     dde:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <deviceStatus+0x1>
     de2:	8c 83       	std	Y+4, r24	; 0x04
						
						
						
						if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     de4:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
     de8:	2b a5       	ldd	r18, Y+43	; 0x2b
     dea:	38 a5       	ldd	r19, Y+40	; 0x28
     dec:	49 a5       	ldd	r20, Y+41	; 0x29
     dee:	5a a5       	ldd	r21, Y+42	; 0x2a
     df0:	81 11       	cpse	r24, r1
     df2:	0b c0       	rjmp	.+22     	; 0xe0a <appTask+0x554>
     df4:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     df8:	83 ff       	sbrs	r24, 3
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <appTask+0x554>
						{//must be offline transaction, store a record.
							vend.isOffline = true;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	8d 8b       	std	Y+21, r24	; 0x15
							storeOfflineTransaction(CurrentAccount.ID);
     e00:	c7 01       	movw	r24, r14
     e02:	b6 01       	movw	r22, r12
     e04:	0e 94 0b 14 	call	0x2816	; 0x2816 <storeOfflineTransaction>
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <appTask+0x590>
						}
						else{
							vend.isOffline = false;
     e0a:	1d 8a       	std	Y+21, r1	; 0x15
							CurrentAccount.Value -= (vendPrice*100);
     e0c:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <CurrentAccount+0x7>
     e10:	90 91 1a 09 	lds	r25, 0x091A	; 0x80091a <CurrentAccount+0x8>
     e14:	bc 01       	movw	r22, r24
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	2b a7       	std	Y+43, r18	; 0x2b
     e1c:	38 a7       	std	Y+40, r19	; 0x28
     e1e:	49 a7       	std	Y+41, r20	; 0x29
     e20:	5a a7       	std	Y+42, r21	; 0x2a
     e22:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatunsisf>
     e26:	2b a5       	ldd	r18, Y+43	; 0x2b
     e28:	38 a5       	ldd	r19, Y+40	; 0x28
     e2a:	49 a5       	ldd	r20, Y+41	; 0x29
     e2c:	5a a5       	ldd	r21, Y+42	; 0x2a
     e2e:	0e 94 17 2b 	call	0x562e	; 0x562e <__subsf3>
     e32:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <__fixunssfsi>
     e36:	70 93 1a 09 	sts	0x091A, r23	; 0x80091a <CurrentAccount+0x8>
     e3a:	60 93 19 09 	sts	0x0919, r22	; 0x800919 <CurrentAccount+0x7>
							sendCCTransaction(&vend);
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <sendCCTransaction>
						}
						OP = CYCLE_STARTED;
     e46:	80 e1       	ldi	r24, 0x10	; 16
     e48:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
						
						//let server know machine is in use.

					}
					
					cardRemoved(CASH_CARD);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 36 11 	call	0x226c	; 0x226c <cardRemoved>
					
					
					#endif

					break;
     e52:	88 c0       	rjmp	.+272    	; 0xf64 <appTask+0x6ae>


						break;
						case SETUP_REQUEST:
						
						if( SETUP_TIMEOUT == true)
     e54:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SETUP_TIMEOUT>
     e58:	88 23       	and	r24, r24
     e5a:	09 f4       	brne	.+2      	; 0xe5e <appTask+0x5a8>
     e5c:	83 c0       	rjmp	.+262    	; 0xf64 <appTask+0x6ae>
						{
							#if(DEVICE_CONNECTED == MDC_MACHINE)
							
							#ifdef MACHINE_CONNECTED
							DevicePoll();
     e5e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DevicePoll>
							#else
							deviceStatus.deviceType[0] = 33;
							deviceStatus.deviceType[1] = 1;
							#endif
							#endif //DEVICE_CONNECTED
							sendSetupRequest();
     e62:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <sendSetupRequest>
							
							SETUP_TIMEOUT = false;
     e66:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SETUP_TIMEOUT>
							macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
     e6a:	67 e9       	ldi	r22, 0x97	; 151
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	88 e7       	ldi	r24, 0x78	; 120
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	68 c0       	rjmp	.+208    	; 0xf44 <appTask+0x68e>
						//}
						//break;
						
						case VALIDATE_SETUP:

						if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
     e74:	47 e6       	ldi	r20, 0x67	; 103
     e76:	52 e0       	ldi	r21, 0x02	; 2
     e78:	69 e6       	ldi	r22, 0x69	; 105
     e7a:	72 e0       	ldi	r23, 0x02	; 2
     e7c:	86 e2       	ldi	r24, 0x26	; 38
     e7e:	99 e0       	ldi	r25, 0x09	; 9
     e80:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
     e84:	7c 01       	movw	r14, r24
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	09 f4       	brne	.+2      	; 0xe8c <appTask+0x5d6>
     e8a:	50 c0       	rjmp	.+160    	; 0xf2c <appTask+0x676>
						{
							

							u8 addr[8];
							static u8 Len =0;
							n = strlen(ptr);
     e8c:	fc 01       	movw	r30, r24
     e8e:	01 90       	ld	r0, Z+
     e90:	00 20       	and	r0, r0
     e92:	e9 f7       	brne	.-6      	; 0xe8e <appTask+0x5d8>
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	1e 2f       	mov	r17, r30
     e98:	18 1b       	sub	r17, r24
							k = 0;
							l = 0;
							
							// Get length of Validation code
							halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
     e9a:	44 e7       	ldi	r20, 0x74	; 116
     e9c:	55 e0       	ldi	r21, 0x05	; 5
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	87 e5       	ldi	r24, 0x57	; 87
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
							
							// 	Get Validation Code from EEPROM
							halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
     ea8:	ae 01       	movw	r20, r28
     eaa:	41 5e       	subi	r20, 0xE1	; 225
     eac:	5f 4f       	sbci	r21, 0xFF	; 255
     eae:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <__data_end>
     eb2:	88 e5       	ldi	r24, 0x58	; 88
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>

							u8 addr[8];
							static u8 Len =0;
							n = strlen(ptr);
							k = 0;
							l = 0;
     eba:	00 e0       	ldi	r16, 0x00	; 0
     ebc:	80 2f       	mov	r24, r16
     ebe:	88 0f       	add	r24, r24
							halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
							
							// 	Get Validation Code from EEPROM
							halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
							
							while (k < n)
     ec0:	81 17       	cp	r24, r17
     ec2:	c8 f4       	brcc	.+50     	; 0xef6 <appTask+0x640>
							{
								Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     ec4:	67 01       	movw	r12, r14
     ec6:	c8 0e       	add	r12, r24
     ec8:	d1 1c       	adc	r13, r1
     eca:	d6 01       	movw	r26, r12
     ecc:	8c 91       	ld	r24, X
     ece:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <Ascii_to_nible>
     ed2:	b8 2e       	mov	r11, r24
								+  Ascii_to_nible ( *(ptr+k+1));
     ed4:	f6 01       	movw	r30, r12
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <Ascii_to_nible>
							// 	Get Validation Code from EEPROM
							halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
							
							while (k < n)
							{
								Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     edc:	e1 e0       	ldi	r30, 0x01	; 1
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	ec 0f       	add	r30, r28
     ee2:	fd 1f       	adc	r31, r29
     ee4:	e0 0f       	add	r30, r16
     ee6:	f1 1d       	adc	r31, r1
     ee8:	20 e1       	ldi	r18, 0x10	; 16
     eea:	b2 9e       	mul	r11, r18
     eec:	80 0d       	add	r24, r0
     eee:	11 24       	eor	r1, r1
     ef0:	80 83       	st	Z, r24
								+  Ascii_to_nible ( *(ptr+k+1));
								k += 2;
								l++;
     ef2:	0f 5f       	subi	r16, 0xFF	; 255
     ef4:	e3 cf       	rjmp	.-58     	; 0xebc <appTask+0x606>
							}



							if(memcmp(addr,Setup,Len) == 0)
     ef6:	40 91 74 05 	lds	r20, 0x0574	; 0x800574 <__data_end>
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	be 01       	movw	r22, r28
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	ce 01       	movw	r24, r28
     f04:	4f 96       	adiw	r24, 0x1f	; 31
     f06:	0e 94 5e 31 	call	0x62bc	; 0x62bc <memcmp>
     f0a:	89 2b       	or	r24, r25
     f0c:	49 f4       	brne	.+18     	; 0xf20 <appTask+0x66a>
							{
								ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
     f0e:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
     f12:	8b 7f       	andi	r24, 0xFB	; 251
     f14:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
								OP = VALIDATE_READER;
     f18:	83 e1       	ldi	r24, 0x13	; 19
     f1a:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <appTask+0x676>
							}
							else
							{
								OP = SETUP_REQUEST; // validation failed, request new setup info
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
								SETUP_TIMEOUT = true;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
							}
						}

						// Response TIMEOUT
						if(VALIDATION_TIMEOUT)
     f2c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <VALIDATION_TIMEOUT>
     f30:	88 23       	and	r24, r24
     f32:	c1 f0       	breq	.+48     	; 0xf64 <appTask+0x6ae>
						{
							VALIDATION_TIMEOUT = false;
     f34:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <VALIDATION_TIMEOUT>
							sendValidationRequest();// Re-send Validation Request
     f38:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <sendValidationRequest>
							
							macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
     f3c:	66 e8       	ldi	r22, 0x86	; 134
     f3e:	71 e0       	ldi	r23, 0x01	; 1
     f40:	8c e3       	ldi	r24, 0x3C	; 60
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <macSetLongAlarm>
     f48:	0d c0       	rjmp	.+26     	; 0xf64 <appTask+0x6ae>
						
						break;
						case SCARD_REMOVED:

						#if(DEVICE_CONNECTED == MDC_MACHINE)
						ucCardStatus = CARD_OUT;
     f4a:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <ucCardStatus>
						cardRemoved(REMOVE_CARD);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	0e 94 36 11 	call	0x226c	; 0x226c <cardRemoved>
						#endif

						#if( DEVICE_CONNECTED == MARS_BA )
						OP = WAIT_FOR_BILL;
						#else
						OP = SCANNING;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <appTask+0x6a4>
						#endif
						
						break;
						case BOW_ERROR:
						OP = IDLE;
     f58:	87 e2       	ldi	r24, 0x27	; 39
     f5a:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <OP>
						break;
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <appTask+0x6ae>
						
						case APP_INIT:
						appInit();
     f60:	0e 94 1f 03 	call	0x63e	; 0x63e <appInit>
					} //switch


				}// macConfig.associated

			}
     f64:	ab 96       	adiw	r28, 0x2b	; 43
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	bf 90       	pop	r11
     f82:	08 95       	ret

00000f84 <timeoutWaitingForOLTReponse>:
   
   constructOutgoingString(REQUEST_KEYPAD_ACCOUNT, tmp);
   macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
   
   return true;
}
     f84:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <timeout>
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <timeout>
     f8e:	08 95       	ret

00000f90 <asciiStringToNibble>:
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	7c 01       	movw	r14, r24
     fa8:	6b 01       	movw	r12, r22
     faa:	fc 01       	movw	r30, r24
     fac:	01 90       	ld	r0, Z+
     fae:	00 20       	and	r0, r0
     fb0:	e9 f7       	brne	.-6      	; 0xfac <asciiStringToNibble+0x1c>
     fb2:	31 97       	sbiw	r30, 0x01	; 1
     fb4:	ef 01       	movw	r28, r30
     fb6:	c8 1b       	sub	r28, r24
     fb8:	d9 0b       	sbc	r29, r25
     fba:	0c 2f       	mov	r16, r28
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	10 17       	cp	r17, r16
     fc0:	a8 f4       	brcc	.+42     	; 0xfec <asciiStringToNibble+0x5c>
     fc2:	57 01       	movw	r10, r14
     fc4:	a1 0e       	add	r10, r17
     fc6:	b1 1c       	adc	r11, r1
     fc8:	f5 01       	movw	r30, r10
     fca:	80 81       	ld	r24, Z
     fcc:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <Ascii_to_nible>
     fd0:	98 2e       	mov	r9, r24
     fd2:	f5 01       	movw	r30, r10
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
     fd6:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <Ascii_to_nible>
     fda:	f0 e1       	ldi	r31, 0x10	; 16
     fdc:	9f 9e       	mul	r9, r31
     fde:	80 0d       	add	r24, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	f6 01       	movw	r30, r12
     fe4:	81 93       	st	Z+, r24
     fe6:	6f 01       	movw	r12, r30
     fe8:	1e 5f       	subi	r17, 0xFE	; 254
     fea:	e9 cf       	rjmp	.-46     	; 0xfbe <asciiStringToNibble+0x2e>
     fec:	8c 2f       	mov	r24, r28
     fee:	86 95       	lsr	r24
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	08 95       	ret

00001008 <constructOutgoingString>:
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	8b 01       	movw	r16, r22
    1012:	eb 01       	movw	r28, r22
    1014:	21 96       	adiw	r28, 0x01	; 1
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	09 f4       	brne	.+2      	; 0x101c <constructOutgoingString+0x14>
    101a:	4e c0       	rjmp	.+156    	; 0x10b8 <constructOutgoingString+0xb0>
    101c:	50 f5       	brcc	.+84     	; 0x1072 <constructOutgoingString+0x6a>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	71 f1       	breq	.+92     	; 0x107e <constructOutgoingString+0x76>
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	09 f0       	breq	.+2      	; 0x1028 <constructOutgoingString+0x20>
    1026:	7f c0       	rjmp	.+254    	; 0x1126 <constructOutgoingString+0x11e>
    1028:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <deviceStatus+0x1>
    102c:	1f 92       	push	r1
    102e:	8f 93       	push	r24
    1030:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <deviceStatus>
    1034:	1f 92       	push	r1
    1036:	8f 93       	push	r24
    1038:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <ReaderSetup+0x5>
    103c:	8f 93       	push	r24
    103e:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <ReaderSetup+0x4>
    1042:	8f 93       	push	r24
    1044:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <ReaderSetup+0x7>
    1048:	8f 93       	push	r24
    104a:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <ReaderSetup+0x6>
    104e:	8f 93       	push	r24
    1050:	81 ec       	ldi	r24, 0xC1	; 193
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	9f 93       	push	r25
    1056:	8f 93       	push	r24
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	0e 94 25 32 	call	0x644a	; 0x644a <sprintf>
    1060:	ad b7       	in	r26, 0x3d	; 61
    1062:	be b7       	in	r27, 0x3e	; 62
    1064:	1c 96       	adiw	r26, 0x0c	; 12
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	be bf       	out	0x3e, r27	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	ad bf       	out	0x3d, r26	; 61
    1070:	5a c0       	rjmp	.+180    	; 0x1126 <constructOutgoingString+0x11e>
    1072:	85 30       	cpi	r24, 0x05	; 5
    1074:	71 f1       	breq	.+92     	; 0x10d2 <constructOutgoingString+0xca>
    1076:	30 f1       	brcs	.+76     	; 0x10c4 <constructOutgoingString+0xbc>
    1078:	86 30       	cpi	r24, 0x06	; 6
    107a:	b1 f1       	breq	.+108    	; 0x10e8 <constructOutgoingString+0xe0>
    107c:	54 c0       	rjmp	.+168    	; 0x1126 <constructOutgoingString+0x11e>
    107e:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <deviceStatus+0x1>
    1082:	1f 92       	push	r1
    1084:	8f 93       	push	r24
    1086:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <deviceStatus>
    108a:	1f 92       	push	r1
    108c:	8f 93       	push	r24
    108e:	8e e7       	ldi	r24, 0x7E	; 126
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	88 e8       	ldi	r24, 0x88	; 136
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	9f 93       	push	r25
    109c:	8f 93       	push	r24
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	0e 94 25 32 	call	0x644a	; 0x644a <sprintf>
    10a6:	ad b7       	in	r26, 0x3d	; 61
    10a8:	be b7       	in	r27, 0x3e	; 62
    10aa:	1a 96       	adiw	r26, 0x0a	; 10
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	be bf       	out	0x3e, r27	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	ad bf       	out	0x3d, r26	; 61
    10b6:	37 c0       	rjmp	.+110    	; 0x1126 <constructOutgoingString+0x11e>
    10b8:	68 e2       	ldi	r22, 0x28	; 40
    10ba:	73 e0       	ldi	r23, 0x03	; 3
    10bc:	ce 01       	movw	r24, r28
    10be:	0e 94 88 31 	call	0x6310	; 0x6310 <strcpy>
    10c2:	31 c0       	rjmp	.+98     	; 0x1126 <constructOutgoingString+0x11e>
    10c4:	8d e2       	ldi	r24, 0x2D	; 45
    10c6:	9a e0       	ldi	r25, 0x0A	; 10
    10c8:	9f 93       	push	r25
    10ca:	8f 93       	push	r24
    10cc:	8c e3       	ldi	r24, 0x3C	; 60
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	1e c0       	rjmp	.+60     	; 0x110e <constructOutgoingString+0x106>
    10d2:	8a ef       	ldi	r24, 0xFA	; 250
    10d4:	99 e0       	ldi	r25, 0x09	; 9
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	86 e5       	ldi	r24, 0x56	; 86
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	17 c0       	rjmp	.+46     	; 0x1116 <constructOutgoingString+0x10e>
    10e8:	49 ef       	ldi	r20, 0xF9	; 249
    10ea:	59 e0       	ldi	r21, 0x09	; 9
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
    10f6:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	11 f4       	brne	.+4      	; 0x1102 <constructOutgoingString+0xfa>
    10fe:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <ReaderSetup+0x9>
    1102:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    1106:	1f 92       	push	r1
    1108:	8f 93       	push	r24
    110a:	86 e7       	ldi	r24, 0x76	; 118
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	9f 93       	push	r25
    1110:	8f 93       	push	r24
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	0e 94 25 32 	call	0x644a	; 0x644a <sprintf>
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	fe 01       	movw	r30, r28
    1128:	01 90       	ld	r0, Z+
    112a:	00 20       	and	r0, r0
    112c:	e9 f7       	brne	.-6      	; 0x1128 <constructOutgoingString+0x120>
    112e:	ec 1b       	sub	r30, r28
    1130:	d8 01       	movw	r26, r16
    1132:	ec 93       	st	X, r30
    1134:	8e 2f       	mov	r24, r30
    1136:	80 95       	com	r24
    1138:	88 1f       	adc	r24, r24
    113a:	88 27       	eor	r24, r24
    113c:	88 1f       	adc	r24, r24
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <sendReaderFirmwareVersion>:
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	c0 58       	subi	r28, 0x80	; 128
    1154:	d1 09       	sbc	r29, r1
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	be 01       	movw	r22, r28
    1162:	6f 5f       	subi	r22, 0xFF	; 255
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	80 e8       	ldi	r24, 0x80	; 128
    1168:	fb 01       	movw	r30, r22
    116a:	11 92       	st	Z+, r1
    116c:	8a 95       	dec	r24
    116e:	e9 f7       	brne	.-6      	; 0x116a <sendReaderFirmwareVersion+0x22>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 04 08 	call	0x1008	; 0x1008 <constructOutgoingString>
    1176:	18 2f       	mov	r17, r24
    1178:	88 23       	and	r24, r24
    117a:	41 f0       	breq	.+16     	; 0x118c <sendReaderFirmwareVersion+0x44>
    117c:	ae 01       	movw	r20, r28
    117e:	4e 5f       	subi	r20, 0xFE	; 254
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	69 81       	ldd	r22, Y+1	; 0x01
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
    118c:	81 2f       	mov	r24, r17
    118e:	c0 58       	subi	r28, 0x80	; 128
    1190:	df 4f       	sbci	r29, 0xFF	; 255
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	08 95       	ret

000011a4 <sendSetupRequest>:
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	c0 58       	subi	r28, 0x80	; 128
    11ae:	d1 09       	sbc	r29, r1
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	be 01       	movw	r22, r28
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	fb 01       	movw	r30, r22
    11c4:	11 92       	st	Z+, r1
    11c6:	8a 95       	dec	r24
    11c8:	e9 f7       	brne	.-6      	; 0x11c4 <sendSetupRequest+0x20>
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	0e 94 04 08 	call	0x1008	; 0x1008 <constructOutgoingString>
    11d0:	ae 01       	movw	r20, r28
    11d2:	4e 5f       	subi	r20, 0xFE	; 254
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
    11d6:	69 81       	ldd	r22, Y+1	; 0x01
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	c0 58       	subi	r28, 0x80	; 128
    11e4:	df 4f       	sbci	r29, 0xFF	; 255
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <sendValidationRequest>:
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	69 97       	sbiw	r28, 0x19	; 25
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	be 01       	movw	r22, r28
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	89 e1       	ldi	r24, 0x19	; 25
    1212:	fb 01       	movw	r30, r22
    1214:	11 92       	st	Z+, r1
    1216:	8a 95       	dec	r24
    1218:	e9 f7       	brne	.-6      	; 0x1214 <sendValidationRequest+0x1e>
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	0e 94 04 08 	call	0x1008	; 0x1008 <constructOutgoingString>
    1220:	ae 01       	movw	r20, r28
    1222:	4e 5f       	subi	r20, 0xFE	; 254
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	69 81       	ldd	r22, Y+1	; 0x01
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	69 96       	adiw	r28, 0x19	; 25
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <sendMachineLabel>:
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	a3 97       	sbiw	r28, 0x23	; 35
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	be 01       	movw	r22, r28
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	83 e2       	ldi	r24, 0x23	; 35
    1260:	fb 01       	movw	r30, r22
    1262:	11 92       	st	Z+, r1
    1264:	8a 95       	dec	r24
    1266:	e9 f7       	brne	.-6      	; 0x1262 <sendMachineLabel+0x1e>
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	0e 94 04 08 	call	0x1008	; 0x1008 <constructOutgoingString>
    126e:	ae 01       	movw	r20, r28
    1270:	4e 5f       	subi	r20, 0xFE	; 254
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	69 81       	ldd	r22, Y+1	; 0x01
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	a3 96       	adiw	r28, 0x23	; 35
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <sendMachineDescription>:
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	c5 55       	subi	r28, 0x55	; 85
    129c:	d1 09       	sbc	r29, r1
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	be 01       	movw	r22, r28
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	85 e5       	ldi	r24, 0x55	; 85
    12b0:	fb 01       	movw	r30, r22
    12b2:	11 92       	st	Z+, r1
    12b4:	8a 95       	dec	r24
    12b6:	e9 f7       	brne	.-6      	; 0x12b2 <sendMachineDescription+0x20>
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	0e 94 04 08 	call	0x1008	; 0x1008 <constructOutgoingString>
    12be:	ae 01       	movw	r20, r28
    12c0:	4e 5f       	subi	r20, 0xFE	; 254
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	69 81       	ldd	r22, Y+1	; 0x01
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	cb 5a       	subi	r28, 0xAB	; 171
    12d2:	df 4f       	sbci	r29, 0xFF	; 255
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <sendNumberOfOLT>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	a3 97       	sbiw	r28, 0x23	; 35
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	be 01       	movw	r22, r28
    12fa:	6f 5f       	subi	r22, 0xFF	; 255
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	83 e2       	ldi	r24, 0x23	; 35
    1300:	fb 01       	movw	r30, r22
    1302:	11 92       	st	Z+, r1
    1304:	8a 95       	dec	r24
    1306:	e9 f7       	brne	.-6      	; 0x1302 <sendNumberOfOLT+0x1e>
    1308:	86 e0       	ldi	r24, 0x06	; 6
    130a:	0e 94 04 08 	call	0x1008	; 0x1008 <constructOutgoingString>
    130e:	ae 01       	movw	r20, r28
    1310:	4e 5f       	subi	r20, 0xFE	; 254
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
    1314:	69 81       	ldd	r22, Y+1	; 0x01
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	a3 96       	adiw	r28, 0x23	; 35
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <extractIncomingMessage>:

	return true;
}

u8 extractIncomingMessage(char *dataBuffer)
{
    1332:	8f 92       	push	r8
    1334:	9f 92       	push	r9
    1336:	af 92       	push	r10
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	cd 54       	subi	r28, 0x4D	; 77
    134e:	d1 09       	sbc	r29, r1
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	2e 96       	adiw	r28, 0x0e	; 14
    135c:	9f af       	std	Y+63, r25	; 0x3f
    135e:	8e af       	std	Y+62, r24	; 0x3e
    1360:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
    1362:	6e 01       	movw	r12, r28
    1364:	83 e4       	ldi	r24, 0x43	; 67
    1366:	c8 0e       	add	r12, r24
    1368:	d1 1c       	adc	r13, r1
    136a:	88 e0       	ldi	r24, 0x08	; 8
    136c:	f6 01       	movw	r30, r12
    136e:	98 2f       	mov	r25, r24
    1370:	11 92       	st	Z+, r1
    1372:	9a 95       	dec	r25
    1374:	e9 f7       	brne	.-6      	; 0x1370 <extractIncomingMessage+0x3e>
	u8 MaclongAddr[8]  = {0};
    1376:	5e 01       	movw	r10, r28
    1378:	eb e3       	ldi	r30, 0x3B	; 59
    137a:	ae 0e       	add	r10, r30
    137c:	b1 1c       	adc	r11, r1
    137e:	f5 01       	movw	r30, r10
    1380:	11 92       	st	Z+, r1
    1382:	8a 95       	dec	r24
    1384:	e9 f7       	brne	.-6      	; 0x1380 <extractIncomingMessage+0x4e>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	4c 01       	movw	r8, r24
    138c:	82 e3       	ldi	r24, 0x32	; 50
    138e:	f4 01       	movw	r30, r8
    1390:	11 92       	st	Z+, r1
    1392:	8a 95       	dec	r24
    1394:	e9 f7       	brne	.-6      	; 0x1390 <extractIncomingMessage+0x5e>
	u8 i = 0;
    1396:	2c 96       	adiw	r28, 0x0c	; 12
    1398:	1f ae       	std	Y+63, r1	; 0x3f
    139a:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;	
	u8 returnCode = OP;
    139c:	f0 90 ea 09 	lds	r15, 0x09EA	; 0x8009ea <OP>
*******************************************************************
*************  Extract SetupString from INcomming String **********
******************************************************************* */
            
			
	if(strstr(dataBuffer, "SetupPackage") != NULL)
    13a0:	2e 96       	adiw	r28, 0x0e	; 14
    13a2:	0e ad       	ldd	r16, Y+62	; 0x3e
    13a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    13a6:	2e 97       	sbiw	r28, 0x0e	; 14
    13a8:	64 e8       	ldi	r22, 0x84	; 132
    13aa:	73 e0       	ldi	r23, 0x03	; 3
    13ac:	c8 01       	movw	r24, r16
    13ae:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    13b2:	89 2b       	or	r24, r25
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <extractIncomingMessage+0x86>
    13b6:	9a c0       	rjmp	.+308    	; 0x14ec <extractIncomingMessage+0x1ba>
	{
		if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)
    13b8:	47 e6       	ldi	r20, 0x67	; 103
    13ba:	52 e0       	ldi	r21, 0x02	; 2
    13bc:	61 e9       	ldi	r22, 0x91	; 145
    13be:	73 e0       	ldi	r23, 0x03	; 3
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	29 f1       	breq	.+74     	; 0x1414 <extractIncomingMessage+0xe2>
		{ 
			n = asciiStringToNibble(ptr, nibbleStr);
    13ca:	b4 01       	movw	r22, r8
    13cc:	0e 94 c8 07 	call	0xf90	; 0xf90 <asciiStringToNibble>
    13d0:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n-1, (u8*)nibbleStr); //write machine setup string to eeprom minus "number of offline transactions"
    13d2:	6f ef       	ldi	r22, 0xFF	; 255
    13d4:	68 0f       	add	r22, r24
    13d6:	a4 01       	movw	r20, r8
    13d8:	84 e2       	ldi	r24, 0x24	; 36
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
            
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];
    13e0:	8b a9       	ldd	r24, Y+51	; 0x33
    13e2:	fe 01       	movw	r30, r28
    13e4:	e8 0f       	add	r30, r24
    13e6:	f1 1d       	adc	r31, r1
    13e8:	80 81       	ld	r24, Z
    13ea:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <ReaderSetup+0x8>
			halPutEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"            
    13ee:	48 ef       	ldi	r20, 0xF8	; 248
    13f0:	59 e0       	ldi	r21, 0x09	; 9
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	81 e6       	ldi	r24, 0x61	; 97
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
    13fc:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    1400:	8d 7f       	andi	r24, 0xFD	; 253
    1402:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1406:	44 e2       	ldi	r20, 0x24	; 36
    1408:	59 e0       	ldi	r21, 0x09	; 9
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	82 e2       	ldi	r24, 0x22	; 34
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ValidationCode from INcomming String ********
	******************************************************************* */
            
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
    1414:	47 e6       	ldi	r20, 0x67	; 103
    1416:	52 e0       	ldi	r21, 0x02	; 2
    1418:	6f e9       	ldi	r22, 0x9F	; 159
    141a:	73 e0       	ldi	r23, 0x03	; 3
    141c:	2e 96       	adiw	r28, 0x0e	; 14
    141e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1420:	9f ad       	ldd	r25, Y+63	; 0x3f
    1422:	2e 97       	sbiw	r28, 0x0e	; 14
    1424:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	91 f0       	breq	.+36     	; 0x1450 <extractIncomingMessage+0x11e>
		{      
	
			n = asciiStringToNibble(ptr, nibbleStr);	
    142c:	b4 01       	movw	r22, r8
    142e:	0e 94 c8 07 	call	0xf90	; 0xf90 <asciiStringToNibble>
    1432:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
    1434:	ae 01       	movw	r20, r28
    1436:	4d 5c       	subi	r20, 0xCD	; 205
    1438:	5f 4f       	sbci	r21, 0xFF	; 255
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	87 e5       	ldi	r24, 0x57	; 87
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
    1444:	a4 01       	movw	r20, r8
    1446:	6b a9       	ldd	r22, Y+51	; 0x33
    1448:	88 e5       	ldi	r24, 0x58	; 88
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ReaderID from INcomming String *************
	******************************************************************* */
           
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
    1450:	47 e6       	ldi	r20, 0x67	; 103
    1452:	52 e0       	ldi	r21, 0x02	; 2
    1454:	60 eb       	ldi	r22, 0xB0	; 176
    1456:	73 e0       	ldi	r23, 0x03	; 3
    1458:	2e 96       	adiw	r28, 0x0e	; 14
    145a:	8e ad       	ldd	r24, Y+62	; 0x3e
    145c:	9f ad       	ldd	r25, Y+63	; 0x3f
    145e:	2e 97       	sbiw	r28, 0x0e	; 14
    1460:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	81 f1       	breq	.+96     	; 0x14c8 <extractIncomingMessage+0x196>
	{ //1

					tmp = atoi(ptr);         
    1468:	0e 94 54 30 	call	0x60a8	; 0x60a8 <atoi>
    146c:	2c 96       	adiw	r28, 0x0c	; 12
    146e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1470:	2c 97       	sbiw	r28, 0x0c	; 12
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
	u8 i = 0;
	u8 Nibble = 0;	
    1472:	20 e0       	ldi	r18, 0x00	; 0
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
	{ //1

					tmp = atoi(ptr);         
	
				while (tmp> 0)
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	c9 f0       	breq	.+50     	; 0x14aa <extractIncomingMessage+0x178>
    1478:	e3 2f       	mov	r30, r19
    147a:	f0 e0       	ldi	r31, 0x00	; 0
							Nibble = highNibble;
						break;

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
    147c:	ec 0d       	add	r30, r12
    147e:	fd 1d       	adc	r31, r13
					tmp = atoi(ptr);         
	
				while (tmp> 0)
				{

					switch(Nibble)
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	29 f0       	breq	.+10     	; 0x148e <extractIncomingMessage+0x15c>
					{
			
						case lowNibble:

							TemplongAddr[i] = (tmp % 16); 
    1484:	28 2f       	mov	r18, r24
    1486:	2f 70       	andi	r18, 0x0F	; 15
    1488:	20 83       	st	Z, r18
							Nibble = highNibble;
    148a:	21 e0       	ldi	r18, 0x01	; 1
						break;
    148c:	08 c0       	rjmp	.+16     	; 0x149e <extractIncomingMessage+0x16c>

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
    148e:	40 81       	ld	r20, Z
    1490:	28 2f       	mov	r18, r24
    1492:	22 95       	swap	r18
    1494:	20 7f       	andi	r18, 0xF0	; 240
    1496:	24 2b       	or	r18, r20
    1498:	20 83       	st	Z, r18
							i++;
    149a:	3f 5f       	subi	r19, 0xFF	; 255
							Nibble = lowNibble;
    149c:	20 e0       	ldi	r18, 0x00	; 0
						break;

					}
			
						tmp = tmp / 16;
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	96 95       	lsr	r25
    14a2:	87 95       	ror	r24
    14a4:	6a 95       	dec	r22
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <extractIncomingMessage+0x16e>
    14a8:	e5 cf       	rjmp	.-54     	; 0x1474 <extractIncomingMessage+0x142>
    14aa:	2c 96       	adiw	r28, 0x0c	; 12
    14ac:	3f af       	std	Y+63, r19	; 0x3f
    14ae:	2c 97       	sbiw	r28, 0x0c	; 12
				}

					//Update Reader to eeprom in Hex format
					halPutMacAddr(TemplongAddr);
    14b0:	a6 01       	movw	r20, r12
    14b2:	68 e0       	ldi	r22, 0x08	; 8
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>

					// Verifry write opertaion
					halGetMacAddr(MaclongAddr);
    14bc:	a5 01       	movw	r20, r10
    14be:	68 e0       	ldi	r22, 0x08	; 8
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>




		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
    14c8:	b5 01       	movw	r22, r10
    14ca:	c6 01       	movw	r24, r12
    14cc:	0e 94 7f 31 	call	0x62fe	; 0x62fe <strcmp>
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <extractIncomingMessage+0x1a4>
    14d4:	53 c1       	rjmp	.+678    	; 0x177c <extractIncomingMessage+0x44a>
				#if (DEBUG)
					Beeps(5);// Beeps 5x
				#endif
		                    

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;                                        
    14d6:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    14e0:	44 e2       	ldi	r20, 0x24	; 36
    14e2:	59 e0       	ldi	r21, 0x09	; 9
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	82 e2       	ldi	r24, 0x22	; 34
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	30 c0       	rjmp	.+96     	; 0x154c <extractIncomingMessage+0x21a>
			//appInit();
			returnCode = APP_INIT;	
		}

	}
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
    14ec:	6b eb       	ldi	r22, 0xBB	; 187
    14ee:	73 e0       	ldi	r23, 0x03	; 3
    14f0:	c8 01       	movw	r24, r16
    14f2:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    14f6:	89 2b       	or	r24, r25
    14f8:	09 f0       	breq	.+2      	; 0x14fc <extractIncomingMessage+0x1ca>
    14fa:	38 c1       	rjmp	.+624    	; 0x176c <extractIncomingMessage+0x43a>
	{		
		returnCode = SETUP_REQUEST;
	}
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
    14fc:	68 ec       	ldi	r22, 0xC8	; 200
    14fe:	73 e0       	ldi	r23, 0x03	; 3
    1500:	c8 01       	movw	r24, r16
    1502:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    1506:	89 2b       	or	r24, r25
    1508:	09 f0       	breq	.+2      	; 0x150c <extractIncomingMessage+0x1da>
    150a:	33 c1       	rjmp	.+614    	; 0x1772 <extractIncomingMessage+0x440>
	{
		returnCode = VALIDATE_SETUP;
	}
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
    150c:	6b ed       	ldi	r22, 0xDB	; 219
    150e:	73 e0       	ldi	r23, 0x03	; 3
    1510:	c8 01       	movw	r24, r16
    1512:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    1516:	89 2b       	or	r24, r25
    1518:	19 f0       	breq	.+6      	; 0x1520 <extractIncomingMessage+0x1ee>
	{
		sendReaderFirmwareVersion();
    151a:	0e 94 a4 08 	call	0x1148	; 0x1148 <sendReaderFirmwareVersion>
    151e:	2e c1       	rjmp	.+604    	; 0x177c <extractIncomingMessage+0x44a>
				
	}	
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
    1520:	6e ee       	ldi	r22, 0xEE	; 238
    1522:	73 e0       	ldi	r23, 0x03	; 3
    1524:	c8 01       	movw	r24, r16
    1526:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    152a:	89 2b       	or	r24, r25
    152c:	a1 f0       	breq	.+40     	; 0x1556 <extractIncomingMessage+0x224>
	{
		 unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
    152e:	88 e0       	ldi	r24, 0x08	; 8
    1530:	e7 e2       	ldi	r30, 0x27	; 39
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	de 01       	movw	r26, r28
    1536:	d3 96       	adiw	r26, 0x33	; 51
    1538:	01 90       	ld	r0, Z+
    153a:	0d 92       	st	X+, r0
    153c:	8a 95       	dec	r24
    153e:	e1 f7       	brne	.-8      	; 0x1538 <extractIncomingMessage+0x206>
		 halPutEeprom(0,8,(u8*)reset_eeprom);
    1540:	ae 01       	movw	r20, r28
    1542:	4d 5c       	subi	r20, 0xCD	; 205
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	68 e0       	ldi	r22, 0x08	; 8
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		 
		 
		 // re-associate
		 //appInit();
		 returnCode = APP_INIT;		
    1550:	50 e2       	ldi	r21, 0x20	; 32
    1552:	f5 2e       	mov	r15, r21
    1554:	13 c1       	rjmp	.+550    	; 0x177c <extractIncomingMessage+0x44a>
	}
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
    1556:	6a ef       	ldi	r22, 0xFA	; 250
    1558:	73 e0       	ldi	r23, 0x03	; 3
    155a:	c8 01       	movw	r24, r16
    155c:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    1560:	89 2b       	or	r24, r25
    1562:	09 f4       	brne	.+2      	; 0x1566 <extractIncomingMessage+0x234>
    1564:	3b c0       	rjmp	.+118    	; 0x15dc <extractIncomingMessage+0x2aa>
	{


		// Store Active CHANNEL to EEPROM Address 0xFF2
		// eeprom_write(CHANNEL_ADDR, macConfig.currentChannel[0]);
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
    1566:	49 e6       	ldi	r20, 0x69	; 105
    1568:	5c e0       	ldi	r21, 0x0C	; 12
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	82 ef       	ldi	r24, 0xF2	; 242
    156e:	9f e0       	ldi	r25, 0x0F	; 15
    1570:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
    1574:	40 e6       	ldi	r20, 0x60	; 96
    1576:	5c e0       	ldi	r21, 0x0C	; 12
    1578:	62 e0       	ldi	r22, 0x02	; 2
    157a:	84 ef       	ldi	r24, 0xF4	; 244
    157c:	9f e0       	ldi	r25, 0x0F	; 15
    157e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
    1582:	42 e6       	ldi	r20, 0x62	; 98
    1584:	5c e0       	ldi	r21, 0x0C	; 12
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	86 ef       	ldi	r24, 0xF6	; 246
    158a:	9f e0       	ldi	r25, 0x0F	; 15
    158c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>

		// Store Active DESTINATION ADDR to EEPROM Address 0xFF8
		// halPutEeprom(DESTADDR_ADDR, 2, &MdcStatus.MachineType);

		i = 0x01;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	2c 96       	adiw	r28, 0x0c	; 12
    1594:	8f af       	std	Y+63, r24	; 0x3f
    1596:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
    1598:	ae 01       	movw	r20, r28
    159a:	45 5b       	subi	r20, 0xB5	; 181
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	80 ef       	ldi	r24, 0xF0	; 240
    15a2:	9f e0       	ldi	r25, 0x0F	; 15
    15a4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
				
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
    15a8:	2e 96       	adiw	r28, 0x0e	; 14
    15aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    15ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    15ae:	2e 97       	sbiw	r28, 0x0e	; 14
    15b0:	11 82       	std	Z+1, r1	; 0x01
    15b2:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
    15b4:	ae 01       	movw	r20, r28
    15b6:	44 5b       	subi	r20, 0xB4	; 180
    15b8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ba:	66 e0       	ldi	r22, 0x06	; 6
    15bc:	8a ef       	ldi	r24, 0xFA	; 250
    15be:	9f e0       	ldi	r25, 0x0F	; 15
    15c0:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>

				
		// Initiate watchdog timer
		cli();
    15c4:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    15c6:	9f e0       	ldi	r25, 0x0F	; 15
    15c8:	88 e1       	ldi	r24, 0x18	; 24
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	a8 95       	wdr
    15d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
    15da:	ff cf       	rjmp	.-2      	; 0x15da <extractIncomingMessage+0x2a8>

	}
	else if(strstr(dataBuffer, "SetD") != NULL)
    15dc:	6a e0       	ldi	r22, 0x0A	; 10
    15de:	74 e0       	ldi	r23, 0x04	; 4
    15e0:	c8 01       	movw	r24, r16
    15e2:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    15e6:	89 2b       	or	r24, r25
    15e8:	51 f1       	breq	.+84     	; 0x163e <extractIncomingMessage+0x30c>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
    15ea:	47 e6       	ldi	r20, 0x67	; 103
    15ec:	52 e0       	ldi	r21, 0x02	; 2
    15ee:	6f e0       	ldi	r22, 0x0F	; 15
    15f0:	74 e0       	ldi	r23, 0x04	; 4
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	09 f4       	brne	.+2      	; 0x15fe <extractIncomingMessage+0x2cc>
    15fc:	bf c0       	rjmp	.+382    	; 0x177c <extractIncomingMessage+0x44a>
		{				
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
    15fe:	fc 01       	movw	r30, r24
    1600:	01 90       	ld	r0, Z+
    1602:	00 20       	and	r0, r0
    1604:	e9 f7       	brne	.-6      	; 0x1600 <extractIncomingMessage+0x2ce>
    1606:	31 97       	sbiw	r30, 0x01	; 1
    1608:	8f 01       	movw	r16, r30
    160a:	08 1b       	sub	r16, r24
    160c:	19 0b       	sbc	r17, r25
    160e:	0b ab       	std	Y+51, r16	; 0x33
    1610:	03 33       	cpi	r16, 0x33	; 51
    1612:	08 f0       	brcs	.+2      	; 0x1616 <extractIncomingMessage+0x2e4>
    1614:	b3 c0       	rjmp	.+358    	; 0x177c <extractIncomingMessage+0x44a>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);				
    1616:	bc 01       	movw	r22, r24
    1618:	8a ef       	ldi	r24, 0xFA	; 250
    161a:	99 e0       	ldi	r25, 0x09	; 9
    161c:	0e 94 88 31 	call	0x6310	; 0x6310 <strcpy>
				n++;//add null terminator to string
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	60 0f       	add	r22, r16
    1624:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
    1626:	4a ef       	ldi	r20, 0xFA	; 250
    1628:	59 e0       	ldi	r21, 0x09	; 9
    162a:	87 e7       	ldi	r24, 0x77	; 119
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
    1632:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    1636:	8f 77       	andi	r24, 0x7F	; 127
    1638:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
    163c:	3a c0       	rjmp	.+116    	; 0x16b2 <extractIncomingMessage+0x380>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
			}		
		}
	}	
	else if(strstr(dataBuffer, "GetD") != NULL)
    163e:	66 e1       	ldi	r22, 0x16	; 22
    1640:	74 e0       	ldi	r23, 0x04	; 4
    1642:	c8 01       	movw	r24, r16
    1644:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    1648:	89 2b       	or	r24, r25
    164a:	19 f0       	breq	.+6      	; 0x1652 <extractIncomingMessage+0x320>
	{
		sendMachineDescription();
    164c:	0e 94 49 09 	call	0x1292	; 0x1292 <sendMachineDescription>
    1650:	95 c0       	rjmp	.+298    	; 0x177c <extractIncomingMessage+0x44a>
		
	}	
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
    1652:	6b e1       	ldi	r22, 0x1B	; 27
    1654:	74 e0       	ldi	r23, 0x04	; 4
    1656:	c8 01       	movw	r24, r16
    1658:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    165c:	89 2b       	or	r24, r25
    165e:	89 f1       	breq	.+98     	; 0x16c2 <extractIncomingMessage+0x390>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
    1660:	47 e6       	ldi	r20, 0x67	; 103
    1662:	52 e0       	ldi	r21, 0x02	; 2
    1664:	6b e2       	ldi	r22, 0x2B	; 43
    1666:	74 e0       	ldi	r23, 0x04	; 4
    1668:	c8 01       	movw	r24, r16
    166a:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	09 f4       	brne	.+2      	; 0x1674 <extractIncomingMessage+0x342>
    1672:	84 c0       	rjmp	.+264    	; 0x177c <extractIncomingMessage+0x44a>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
    1674:	fc 01       	movw	r30, r24
    1676:	01 90       	ld	r0, Z+
    1678:	00 20       	and	r0, r0
    167a:	e9 f7       	brne	.-6      	; 0x1676 <extractIncomingMessage+0x344>
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	8f 01       	movw	r16, r30
    1680:	08 1b       	sub	r16, r24
    1682:	19 0b       	sbc	r17, r25
    1684:	0b ab       	std	Y+51, r16	; 0x33
    1686:	0b 30       	cpi	r16, 0x0B	; 11
    1688:	08 f0       	brcs	.+2      	; 0x168c <extractIncomingMessage+0x35a>
    168a:	78 c0       	rjmp	.+240    	; 0x177c <extractIncomingMessage+0x44a>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
    168c:	bc 01       	movw	r22, r24
    168e:	8d e2       	ldi	r24, 0x2D	; 45
    1690:	9a e0       	ldi	r25, 0x0A	; 10
    1692:	0e 94 88 31 	call	0x6310	; 0x6310 <strcpy>
				n++;//add null terminator to string
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	60 0f       	add	r22, r16
    169a:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
    169c:	4d e2       	ldi	r20, 0x2D	; 45
    169e:	5a e0       	ldi	r21, 0x0A	; 10
    16a0:	8c e6       	ldi	r24, 0x6C	; 108
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
    16a8:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <ReaderStateFlag+0x1>
    16ac:	8e 7f       	andi	r24, 0xFE	; 254
    16ae:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    16b2:	44 e2       	ldi	r20, 0x24	; 36
    16b4:	59 e0       	ldi	r21, 0x09	; 9
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	82 e2       	ldi	r24, 0x22	; 34
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
    16c0:	5d c0       	rjmp	.+186    	; 0x177c <extractIncomingMessage+0x44a>
			}
			
		}
	}
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
    16c2:	6d e3       	ldi	r22, 0x3D	; 61
    16c4:	74 e0       	ldi	r23, 0x04	; 4
    16c6:	c8 01       	movw	r24, r16
    16c8:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    16cc:	89 2b       	or	r24, r25
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <extractIncomingMessage+0x3a4>
	{
		sendMachineLabel();			
    16d0:	0e 94 22 09 	call	0x1244	; 0x1244 <sendMachineLabel>
    16d4:	53 c0       	rjmp	.+166    	; 0x177c <extractIncomingMessage+0x44a>
	}
	else if (strstr(dataBuffer, "GetOLT") != NULL)
    16d6:	6d e4       	ldi	r22, 0x4D	; 77
    16d8:	74 e0       	ldi	r23, 0x04	; 4
    16da:	c8 01       	movw	r24, r16
    16dc:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    16e0:	89 2b       	or	r24, r25
    16e2:	69 f0       	breq	.+26     	; 0x16fe <extractIncomingMessage+0x3cc>
	{
		sendNumberOfOLT();
    16e4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    16e8:	62 ec       	ldi	r22, 0xC2	; 194
    16ea:	77 e0       	ldi	r23, 0x07	; 7
    16ec:	8c e3       	ldi	r24, 0x3C	; 60
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <macSetLongAlarm>
    16f4:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <oLTTimerId.3901>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
    16f8:	48 e2       	ldi	r20, 0x28	; 40
    16fa:	f4 2e       	mov	r15, r20
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <extractIncomingMessage+0x44a>
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
    16fe:	64 e5       	ldi	r22, 0x54	; 84
    1700:	74 e0       	ldi	r23, 0x04	; 4
    1702:	c8 01       	movw	r24, r16
    1704:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    1708:	89 2b       	or	r24, r25
    170a:	b1 f5       	brne	.+108    	; 0x1778 <extractIncomingMessage+0x446>
	{
		returnCode = SHOW_BALANCE_REQUEST;		
	}
	else if (strstr(dataBuffer, "faultcode") != NULL)
    170c:	60 e6       	ldi	r22, 0x60	; 96
    170e:	74 e0       	ldi	r23, 0x04	; 4
    1710:	c8 01       	movw	r24, r16
    1712:	0e 94 a9 31 	call	0x6352	; 0x6352 <strstr>
    1716:	89 2b       	or	r24, r25
    1718:	89 f1       	breq	.+98     	; 0x177c <extractIncomingMessage+0x44a>
	{
		char errCode = 0;
    171a:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
    171c:	47 e6       	ldi	r20, 0x67	; 103
    171e:	52 e0       	ldi	r21, 0x02	; 2
    1720:	6a e6       	ldi	r22, 0x6A	; 106
    1722:	74 e0       	ldi	r23, 0x04	; 4
    1724:	c8 01       	movw	r24, r16
    1726:	0e 94 c7 03 	call	0x78e	; 0x78e <GetParam>
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	39 f1       	breq	.+78     	; 0x177c <extractIncomingMessage+0x44a>
		{
			asciiStringToNibble(ptr, &errCode);
    172e:	be 01       	movw	r22, r28
    1730:	6d 5c       	subi	r22, 0xCD	; 205
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	0e 94 c8 07 	call	0xf90	; 0xf90 <asciiStringToNibble>
			
			switch(errCode)
    1738:	8b a9       	ldd	r24, Y+51	; 0x33
    173a:	86 30       	cpi	r24, 0x06	; 6
    173c:	f9 f4       	brne	.+62     	; 0x177c <extractIncomingMessage+0x44a>
			{
				case TRANSACTION_SUCCESSFUL:
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
    173e:	f8 e2       	ldi	r31, 0x28	; 40
    1740:	ff 12       	cpse	r15, r31
    1742:	1c c0       	rjmp	.+56     	; 0x177c <extractIncomingMessage+0x44a>
					{
						macTimerEnd(oLTTimerId);
    1744:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <oLTTimerId.3901>
    1748:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <macTimerEnd>
						if( !sendStoredTransaction() )
    174c:	0e 94 b7 14 	call	0x296e	; 0x296e <sendStoredTransaction>
    1750:	88 23       	and	r24, r24
    1752:	49 f0       	breq	.+18     	; 0x1766 <extractIncomingMessage+0x434>
						{ //All stored transactions have been sent
							returnCode = IDLE;
						}
						else
						{	//set new timer while waiting for next response
							oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    1754:	62 ec       	ldi	r22, 0xC2	; 194
    1756:	77 e0       	ldi	r23, 0x07	; 7
    1758:	8c e3       	ldi	r24, 0x3C	; 60
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <macSetLongAlarm>
    1760:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <oLTTimerId.3901>
    1764:	0b c0       	rjmp	.+22     	; 0x177c <extractIncomingMessage+0x44a>
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
					{
						macTimerEnd(oLTTimerId);
						if( !sendStoredTransaction() )
						{ //All stored transactions have been sent
							returnCode = IDLE;
    1766:	37 e2       	ldi	r19, 0x27	; 39
    1768:	f3 2e       	mov	r15, r19
    176a:	08 c0       	rjmp	.+16     	; 0x177c <extractIncomingMessage+0x44a>
		}

	}
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
	{		
		returnCode = SETUP_REQUEST;
    176c:	2a e0       	ldi	r18, 0x0A	; 10
    176e:	f2 2e       	mov	r15, r18
    1770:	05 c0       	rjmp	.+10     	; 0x177c <extractIncomingMessage+0x44a>
	}
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
	{
		returnCode = VALIDATE_SETUP;
    1772:	94 e1       	ldi	r25, 0x14	; 20
    1774:	f9 2e       	mov	r15, r25
    1776:	02 c0       	rjmp	.+4      	; 0x177c <extractIncomingMessage+0x44a>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
	{
		returnCode = SHOW_BALANCE_REQUEST;		
    1778:	8f e1       	ldi	r24, 0x1F	; 31
    177a:	f8 2e       	mov	r15, r24
	}
	


	return returnCode;
}
    177c:	8f 2d       	mov	r24, r15
    177e:	c3 5b       	subi	r28, 0xB3	; 179
    1780:	df 4f       	sbci	r29, 0xFF	; 255
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	9f 90       	pop	r9
    17a0:	8f 90       	pop	r8
    17a2:	08 95       	ret

000017a4 <sendCCTransaction>:

bool sendCCTransaction(structTransaction *transRecord)
{
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 58       	subi	r28, 0x8A	; 138
    17b6:	d1 09       	sbc	r29, r1
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
    17c4:	7e 01       	movw	r14, r28
    17c6:	81 e8       	ldi	r24, 0x81	; 129
    17c8:	e8 0e       	add	r14, r24
    17ca:	f1 1c       	adc	r15, r1
    17cc:	8a e0       	ldi	r24, 0x0A	; 10
    17ce:	d7 01       	movw	r26, r14
    17d0:	1d 92       	st	X+, r1
    17d2:	8a 95       	dec	r24
    17d4:	e9 f7       	brne	.-6      	; 0x17d0 <sendCCTransaction+0x2c>
	char tempStr[128] = {0};
    17d6:	fe 01       	movw	r30, r28
    17d8:	31 96       	adiw	r30, 0x01	; 1
    17da:	80 e8       	ldi	r24, 0x80	; 128
    17dc:	df 01       	movw	r26, r30
    17de:	1d 92       	st	X+, r1
    17e0:	8a 95       	dec	r24
    17e2:	e9 f7       	brne	.-6      	; 0x17de <sendCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    17e4:	f8 01       	movw	r30, r16
    17e6:	61 85       	ldd	r22, Z+9	; 0x09
    17e8:	72 85       	ldd	r23, Z+10	; 0x0a
    17ea:	83 85       	ldd	r24, Z+11	; 0x0b
    17ec:	94 85       	ldd	r25, Z+12	; 0x0c
    17ee:	2a e0       	ldi	r18, 0x0A	; 10
    17f0:	a7 01       	movw	r20, r14
    17f2:	0e 94 cb 31 	call	0x6396	; 0x6396 <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
    17f6:	d8 01       	movw	r26, r16
    17f8:	54 96       	adiw	r26, 0x14	; 20
    17fa:	8c 91       	ld	r24, X
    17fc:	54 97       	sbiw	r26, 0x14	; 20
    17fe:	1f 92       	push	r1
    1800:	8f 93       	push	r24
    1802:	13 96       	adiw	r26, 0x03	; 3
    1804:	8c 91       	ld	r24, X
    1806:	13 97       	sbiw	r26, 0x03	; 3
    1808:	1f 92       	push	r1
    180a:	8f 93       	push	r24
    180c:	12 96       	adiw	r26, 0x02	; 2
    180e:	8c 91       	ld	r24, X
    1810:	12 97       	sbiw	r26, 0x02	; 2
    1812:	1f 92       	push	r1
    1814:	8f 93       	push	r24
    1816:	15 96       	adiw	r26, 0x05	; 5
    1818:	8c 91       	ld	r24, X
    181a:	15 97       	sbiw	r26, 0x05	; 5
    181c:	8f 93       	push	r24
    181e:	14 96       	adiw	r26, 0x04	; 4
    1820:	8c 91       	ld	r24, X
    1822:	14 97       	sbiw	r26, 0x04	; 4
    1824:	8f 93       	push	r24
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	8c 91       	ld	r24, X
    182a:	11 97       	sbiw	r26, 0x01	; 1
    182c:	8f 93       	push	r24
    182e:	8c 91       	ld	r24, X
    1830:	8f 93       	push	r24
    1832:	17 96       	adiw	r26, 0x07	; 7
    1834:	6d 91       	ld	r22, X+
    1836:	7c 91       	ld	r23, X
    1838:	18 97       	sbiw	r26, 0x08	; 8
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatunsisf>
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	48 ec       	ldi	r20, 0xC8	; 200
    1848:	52 e4       	ldi	r21, 0x42	; 66
    184a:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    184e:	9f 93       	push	r25
    1850:	8f 93       	push	r24
    1852:	7f 93       	push	r23
    1854:	6f 93       	push	r22
    1856:	ff 92       	push	r15
    1858:	ef 92       	push	r14
    185a:	86 e7       	ldi	r24, 0x76	; 118
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	9f 93       	push	r25
    1860:	8f 93       	push	r24
    1862:	8e 01       	movw	r16, r28
    1864:	0e 5f       	subi	r16, 0xFE	; 254
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	1f 93       	push	r17
    186a:	0f 93       	push	r16
    186c:	0e 94 25 32 	call	0x644a	; 0x644a <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    1870:	f8 01       	movw	r30, r16
    1872:	01 90       	ld	r0, Z+
    1874:	00 20       	and	r0, r0
    1876:	e9 f7       	brne	.-6      	; 0x1872 <sendCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    1878:	6e 2f       	mov	r22, r30
    187a:	60 1b       	sub	r22, r16
    187c:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	67 fd       	sbrc	r22, 7
    188a:	07 c0       	rjmp	.+14     	; 0x189a <sendCCTransaction+0xf6>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
    188c:	a8 01       	movw	r20, r16
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 46 20 	call	0x408c	; 0x408c <macDataRequest>
	
	return true;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <sendCCTransaction+0xf8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
    189a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
	
	return true;
}
    189c:	c6 57       	subi	r28, 0x76	; 118
    189e:	df 4f       	sbci	r29, 0xFF	; 255
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	ff 90       	pop	r15
    18b4:	ef 90       	pop	r14
    18b6:	08 95       	ret

000018b8 <displayMsg>:
Led1 to led4 are limited to values defined in "display.h"
***********************************************************************************************
*/

void displayMsg( u8 msg ) 
{
    18b8:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <displayMsg+0xc>
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}

}
    18be:	0f 91       	pop	r16

void displayMsg( u8 msg ) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
    18c0:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <displaySQCardError>
	}
	else if (msg == SETUP_MSG)
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	29 f4       	brne	.+10     	; 0x18d2 <displayMsg+0x1a>
	{
		sendSQDisplayCommand(LED_BLANK,LED_S,LED_U,LED_BLANK,5);
    18c8:	05 e0       	ldi	r16, 0x05	; 5
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	4c e7       	ldi	r20, 0x7C	; 124
    18ce:	6a ed       	ldi	r22, 0xDA	; 218
    18d0:	16 c0       	rjmp	.+44     	; 0x18fe <displayMsg+0x46>
	}
	else if (msg == BUSY_MSG)
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	31 f4       	brne	.+12     	; 0x18e2 <displayMsg+0x2a>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y, 5);
    18d6:	05 e0       	ldi	r16, 0x05	; 5
    18d8:	2c ed       	ldi	r18, 0xDC	; 220
    18da:	4a ed       	ldi	r20, 0xDA	; 218
    18dc:	6c e7       	ldi	r22, 0x7C	; 124
    18de:	88 ef       	ldi	r24, 0xF8	; 248
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <displayMsg+0x48>
	}
	else if (msg == SERVICE_MSG)
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	31 f4       	brne	.+12     	; 0x18f2 <displayMsg+0x3a>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,5);
    18e6:	05 e0       	ldi	r16, 0x05	; 5
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	40 ea       	ldi	r20, 0xA0	; 160
    18ec:	62 ef       	ldi	r22, 0xF2	; 242
    18ee:	8a ed       	ldi	r24, 0xDA	; 218
    18f0:	07 c0       	rjmp	.+14     	; 0x1900 <displayMsg+0x48>
	}
	else if (msg == BLANK_MSG)
    18f2:	85 30       	cpi	r24, 0x05	; 5
    18f4:	39 f4       	brne	.+14     	; 0x1904 <displayMsg+0x4c>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
    18f6:	00 e0       	ldi	r16, 0x00	; 0
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	0e 94 ca 10 	call	0x2194	; 0x2194 <sendSQDisplayCommand>
	}

}
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret

00001908 <displayVersion>:

*/

void displayVersion(void)
{	
	displaySQReaderVersion();
    1908:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <displaySQReaderVersion>

0000190c <getSQSetupData>:
	temp[0] = AUDIO_BEEP_REQUEST_SIZE;
	temp[1] = AUDIO_BEEP_REQUEST;
	temp[2] = beepLength;
	
	return (sendSQData(temp) );		
}
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	e2 97       	sbiw	r28, 0x32	; 50
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	ae 01       	movw	r20, r28
    1926:	4f 5f       	subi	r20, 0xFF	; 255
    1928:	5f 4f       	sbci	r21, 0xFF	; 255
    192a:	82 e3       	ldi	r24, 0x32	; 50
    192c:	fa 01       	movw	r30, r20
    192e:	11 92       	st	Z+, r1
    1930:	8a 95       	dec	r24
    1932:	e9 f7       	brne	.-6      	; 0x192e <getSQSetupData+0x22>
    1934:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <deviceStatus>
    1938:	9f ed       	ldi	r25, 0xDF	; 223
    193a:	98 0f       	add	r25, r24
    193c:	92 30       	cpi	r25, 0x02	; 2
    193e:	18 f0       	brcs	.+6      	; 0x1946 <getSQSetupData+0x3a>
    1940:	84 32       	cpi	r24, 0x24	; 36
    1942:	09 f0       	breq	.+2      	; 0x1946 <getSQSetupData+0x3a>
    1944:	d1 c0       	rjmp	.+418    	; 0x1ae8 <getSQSetupData+0x1dc>
    1946:	60 e1       	ldi	r22, 0x10	; 16
    1948:	84 e2       	ldi	r24, 0x24	; 36
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
    1950:	0a 81       	ldd	r16, Y+2	; 0x02
    1952:	1b 81       	ldd	r17, Y+3	; 0x03
    1954:	60 2f       	mov	r22, r16
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	76 2f       	mov	r23, r22
    195a:	66 27       	eor	r22, r22
    195c:	61 0f       	add	r22, r17
    195e:	71 1d       	adc	r23, r1
    1960:	07 2e       	mov	r0, r23
    1962:	00 0c       	add	r0, r0
    1964:	88 0b       	sbc	r24, r24
    1966:	99 0b       	sbc	r25, r25
    1968:	0e 94 27 2c 	call	0x584e	; 0x584e <__floatsisf>
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	48 ec       	ldi	r20, 0xC8	; 200
    1972:	52 e4       	ldi	r21, 0x42	; 66
    1974:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    1978:	60 93 e5 0c 	sts	0x0CE5, r22	; 0x800ce5 <vendPrice>
    197c:	70 93 e6 0c 	sts	0x0CE6, r23	; 0x800ce6 <vendPrice+0x1>
    1980:	80 93 e7 0c 	sts	0x0CE7, r24	; 0x800ce7 <vendPrice+0x2>
    1984:	90 93 e8 0c 	sts	0x0CE8, r25	; 0x800ce8 <vendPrice+0x3>
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <MachineSetupData>
    198e:	00 93 aa 09 	sts	0x09AA, r16	; 0x8009aa <MachineSetupData+0x4>
    1992:	10 93 ab 09 	sts	0x09AB, r17	; 0x8009ab <MachineSetupData+0x5>
    1996:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <MachineSetupData+0x2b>
    199a:	39 e1       	ldi	r19, 0x19	; 25
    199c:	30 93 d2 09 	sts	0x09D2, r19	; 0x8009d2 <MachineSetupData+0x2c>
    19a0:	10 92 d3 09 	sts	0x09D3, r1	; 0x8009d3 <MachineSetupData+0x2d>
    19a4:	84 e6       	ldi	r24, 0x64	; 100
    19a6:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <MachineSetupData+0x2e>
    19aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ac:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <MachineSetupData+0x2f>
    19b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b2:	90 93 d6 09 	sts	0x09D6, r25	; 0x8009d6 <MachineSetupData+0x30>
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <MachineSetupData+0x31>
    19bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    19be:	90 93 d8 09 	sts	0x09D8, r25	; 0x8009d8 <MachineSetupData+0x32>
    19c2:	28 89       	ldd	r18, Y+16	; 0x10
    19c4:	20 93 d9 09 	sts	0x09D9, r18	; 0x8009d9 <MachineSetupData+0x33>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	20 93 e1 09 	sts	0x09E1, r18	; 0x8009e1 <MachineSetupData+0x3b>
    19ce:	2d 81       	ldd	r18, Y+5	; 0x05
    19d0:	20 93 e2 09 	sts	0x09E2, r18	; 0x8009e2 <MachineSetupData+0x3c>
    19d4:	20 91 fb 0a 	lds	r18, 0x0AFB	; 0x800afb <deviceStatus+0x1>
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	09 f0       	breq	.+2      	; 0x19de <getSQSetupData+0xd2>
    19dc:	02 c1       	rjmp	.+516    	; 0x1be2 <getSQSetupData+0x2d6>
    19de:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <MachineSetupData+0x6>
    19e2:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <MachineSetupData+0x7>
    19e6:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <MachineSetupData+0x8>
    19ea:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <MachineSetupData+0x9>
    19ee:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <MachineSetupData+0xa>
    19f2:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <MachineSetupData+0xb>
    19f6:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <MachineSetupData+0xc>
    19fa:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <MachineSetupData+0xd>
    19fe:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <MachineSetupData+0xe>
    1a02:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <MachineSetupData+0xf>
    1a06:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <MachineSetupData+0x10>
    1a0a:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <MachineSetupData+0x11>
    1a0e:	10 92 b8 09 	sts	0x09B8, r1	; 0x8009b8 <MachineSetupData+0x12>
    1a12:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <MachineSetupData+0x13>
    1a16:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <MachineSetupData+0x14>
    1a1a:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <MachineSetupData+0x15>
    1a1e:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <deviceStatus>
    1a22:	81 32       	cpi	r24, 0x21	; 33
    1a24:	59 f5       	brne	.+86     	; 0x1a7c <getSQSetupData+0x170>
    1a26:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <MachineSetupData+0x16>
    1a2a:	30 93 bd 09 	sts	0x09BD, r19	; 0x8009bd <MachineSetupData+0x17>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <MachineSetupData+0x18>
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <MachineSetupData+0x1a>
    1a3a:	10 92 c1 09 	sts	0x09C1, r1	; 0x8009c1 <MachineSetupData+0x1b>
    1a3e:	10 92 bf 09 	sts	0x09BF, r1	; 0x8009bf <MachineSetupData+0x19>
    1a42:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <MachineSetupData+0x1f>
    1a46:	24 e0       	ldi	r18, 0x04	; 4
    1a48:	20 93 c6 09 	sts	0x09C6, r18	; 0x8009c6 <MachineSetupData+0x20>
    1a4c:	10 92 c7 09 	sts	0x09C7, r1	; 0x8009c7 <MachineSetupData+0x21>
    1a50:	37 e0       	ldi	r19, 0x07	; 7
    1a52:	30 93 c8 09 	sts	0x09C8, r19	; 0x8009c8 <MachineSetupData+0x22>
    1a56:	80 93 c9 09 	sts	0x09C9, r24	; 0x8009c9 <MachineSetupData+0x23>
    1a5a:	20 93 ca 09 	sts	0x09CA, r18	; 0x8009ca <MachineSetupData+0x24>
    1a5e:	10 92 cb 09 	sts	0x09CB, r1	; 0x8009cb <MachineSetupData+0x25>
    1a62:	36 e0       	ldi	r19, 0x06	; 6
    1a64:	30 93 cc 09 	sts	0x09CC, r19	; 0x8009cc <MachineSetupData+0x26>
    1a68:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <MachineSetupData+0x27>
    1a6c:	20 93 ce 09 	sts	0x09CE, r18	; 0x8009ce <MachineSetupData+0x28>
    1a70:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <MachineSetupData+0x29>
    1a74:	85 e0       	ldi	r24, 0x05	; 5
    1a76:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <MachineSetupData+0x2a>
    1a7a:	2a c0       	rjmp	.+84     	; 0x1ad0 <getSQSetupData+0x1c4>
    1a7c:	82 32       	cpi	r24, 0x22	; 34
    1a7e:	89 f4       	brne	.+34     	; 0x1aa2 <getSQSetupData+0x196>
    1a80:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <MachineSetupData+0x16>
    1a84:	82 e3       	ldi	r24, 0x32	; 50
    1a86:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <MachineSetupData+0x17>
    1a8a:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <MachineSetupData+0x1c>
    1a8e:	30 93 c3 09 	sts	0x09C3, r19	; 0x8009c3 <MachineSetupData+0x1d>
    1a92:	20 93 c4 09 	sts	0x09C4, r18	; 0x8009c4 <MachineSetupData+0x1e>
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <MachineSetupData+0x18>
    1a9c:	20 93 e9 09 	sts	0x09E9, r18	; 0x8009e9 <MachineSetupData+0x43>
    1aa0:	17 c0       	rjmp	.+46     	; 0x1ad0 <getSQSetupData+0x1c4>
    1aa2:	84 32       	cpi	r24, 0x24	; 36
    1aa4:	a9 f4       	brne	.+42     	; 0x1ad0 <getSQSetupData+0x1c4>
    1aa6:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <MachineSetupData+0x16>
    1aaa:	82 e3       	ldi	r24, 0x32	; 50
    1aac:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <MachineSetupData+0x17>
    1ab0:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <MachineSetupData+0x1c>
    1ab4:	30 93 c3 09 	sts	0x09C3, r19	; 0x8009c3 <MachineSetupData+0x1d>
    1ab8:	20 93 c4 09 	sts	0x09C4, r18	; 0x8009c4 <MachineSetupData+0x1e>
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <MachineSetupData+0x18>
    1ac2:	20 93 c5 09 	sts	0x09C5, r18	; 0x8009c5 <MachineSetupData+0x1f>
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <MachineSetupData+0x20>
    1acc:	10 92 c7 09 	sts	0x09C7, r1	; 0x8009c7 <MachineSetupData+0x21>
    1ad0:	93 ff       	sbrs	r25, 3
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <getSQSetupData+0x1d0>
    1ad4:	8d e1       	ldi	r24, 0x1D	; 29
    1ad6:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <MachineSetupData+0x41>
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <getSQSetupData+0x1d4>
    1adc:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <MachineSetupData+0x41>
    1ae0:	90 72       	andi	r25, 0x20	; 32
    1ae2:	90 93 e8 09 	sts	0x09E8, r25	; 0x8009e8 <MachineSetupData+0x42>
    1ae6:	7d c0       	rjmp	.+250    	; 0x1be2 <getSQSetupData+0x2d6>
    1ae8:	88 52       	subi	r24, 0x28	; 40
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <getSQSetupData+0x1e4>
    1aee:	79 c0       	rjmp	.+242    	; 0x1be2 <getSQSetupData+0x2d6>
    1af0:	62 e1       	ldi	r22, 0x12	; 18
    1af2:	84 e2       	ldi	r24, 0x24	; 36
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
    1afa:	0a 81       	ldd	r16, Y+2	; 0x02
    1afc:	1b 81       	ldd	r17, Y+3	; 0x03
    1afe:	60 2f       	mov	r22, r16
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	76 2f       	mov	r23, r22
    1b04:	66 27       	eor	r22, r22
    1b06:	61 0f       	add	r22, r17
    1b08:	71 1d       	adc	r23, r1
    1b0a:	07 2e       	mov	r0, r23
    1b0c:	00 0c       	add	r0, r0
    1b0e:	88 0b       	sbc	r24, r24
    1b10:	99 0b       	sbc	r25, r25
    1b12:	0e 94 27 2c 	call	0x584e	; 0x584e <__floatsisf>
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	48 ec       	ldi	r20, 0xC8	; 200
    1b1c:	52 e4       	ldi	r21, 0x42	; 66
    1b1e:	0e 94 84 2b 	call	0x5708	; 0x5708 <__divsf3>
    1b22:	60 93 e5 0c 	sts	0x0CE5, r22	; 0x800ce5 <vendPrice>
    1b26:	70 93 e6 0c 	sts	0x0CE6, r23	; 0x800ce6 <vendPrice+0x1>
    1b2a:	80 93 e7 0c 	sts	0x0CE7, r24	; 0x800ce7 <vendPrice+0x2>
    1b2e:	90 93 e8 0c 	sts	0x0CE8, r25	; 0x800ce8 <vendPrice+0x3>
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <MachineSetupData>
    1b38:	00 93 aa 09 	sts	0x09AA, r16	; 0x8009aa <MachineSetupData+0x4>
    1b3c:	10 93 ab 09 	sts	0x09AB, r17	; 0x8009ab <MachineSetupData+0x5>
    1b40:	2e 81       	ldd	r18, Y+6	; 0x06
    1b42:	20 93 d1 09 	sts	0x09D1, r18	; 0x8009d1 <MachineSetupData+0x2b>
    1b46:	9f 81       	ldd	r25, Y+7	; 0x07
    1b48:	90 93 d2 09 	sts	0x09D2, r25	; 0x8009d2 <MachineSetupData+0x2c>
    1b4c:	20 93 d3 09 	sts	0x09D3, r18	; 0x8009d3 <MachineSetupData+0x2d>
    1b50:	90 93 d4 09 	sts	0x09D4, r25	; 0x8009d4 <MachineSetupData+0x2e>
    1b54:	88 85       	ldd	r24, Y+8	; 0x08
    1b56:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <MachineSetupData+0x2f>
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <MachineSetupData+0x30>
    1b60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b62:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <MachineSetupData+0x31>
    1b66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b68:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <MachineSetupData+0x32>
    1b6c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b6e:	30 93 d9 09 	sts	0x09D9, r19	; 0x8009d9 <MachineSetupData+0x33>
    1b72:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b74:	30 93 da 09 	sts	0x09DA, r19	; 0x8009da <MachineSetupData+0x34>
    1b78:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b7a:	30 93 db 09 	sts	0x09DB, r19	; 0x8009db <MachineSetupData+0x35>
    1b7e:	30 93 dc 09 	sts	0x09DC, r19	; 0x8009dc <MachineSetupData+0x36>
    1b82:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b84:	30 93 dd 09 	sts	0x09DD, r19	; 0x8009dd <MachineSetupData+0x37>
    1b88:	38 89       	ldd	r19, Y+16	; 0x10
    1b8a:	30 93 de 09 	sts	0x09DE, r19	; 0x8009de <MachineSetupData+0x38>
    1b8e:	39 89       	ldd	r19, Y+17	; 0x11
    1b90:	30 93 df 09 	sts	0x09DF, r19	; 0x8009df <MachineSetupData+0x39>
    1b94:	3a 89       	ldd	r19, Y+18	; 0x12
    1b96:	30 93 e0 09 	sts	0x09E0, r19	; 0x8009e0 <MachineSetupData+0x3a>
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	30 93 e1 09 	sts	0x09E1, r19	; 0x8009e1 <MachineSetupData+0x3b>
    1ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba2:	30 93 e2 09 	sts	0x09E2, r19	; 0x8009e2 <MachineSetupData+0x3c>
    1ba6:	30 91 fb 0a 	lds	r19, 0x0AFB	; 0x800afb <deviceStatus+0x1>
    1baa:	32 30       	cpi	r19, 0x02	; 2
    1bac:	d1 f4       	brne	.+52     	; 0x1be2 <getSQSetupData+0x2d6>
    1bae:	00 93 ac 09 	sts	0x09AC, r16	; 0x8009ac <MachineSetupData+0x6>
    1bb2:	10 93 ad 09 	sts	0x09AD, r17	; 0x8009ad <MachineSetupData+0x7>
    1bb6:	20 93 ae 09 	sts	0x09AE, r18	; 0x8009ae <MachineSetupData+0x8>
    1bba:	90 93 af 09 	sts	0x09AF, r25	; 0x8009af <MachineSetupData+0x9>
    1bbe:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <MachineSetupData+0x3e>
    1bc2:	99 23       	and	r25, r25
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <getSQSetupData+0x2c0>
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <MachineSetupData+0x3d>
    1bcc:	83 ff       	sbrs	r24, 3
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <getSQSetupData+0x2cc>
    1bd0:	9d e1       	ldi	r25, 0x1D	; 29
    1bd2:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <MachineSetupData+0x41>
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <getSQSetupData+0x2d0>
    1bd8:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <MachineSetupData+0x41>
    1bdc:	80 72       	andi	r24, 0x20	; 32
    1bde:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <MachineSetupData+0x42>
    1be2:	e2 96       	adiw	r28, 0x32	; 50
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <sendSQData>:
    1bf8:	af 92       	push	r10
    1bfa:	bf 92       	push	r11
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	8c 01       	movw	r16, r24
    1c0e:	98 e0       	ldi	r25, 0x08	; 8
    1c10:	f9 2e       	mov	r15, r25
    1c12:	c0 2e       	mov	r12, r16
    1c14:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <init_rx_buf>
    1c18:	f8 01       	movw	r30, r16
    1c1a:	d0 80       	ld	r13, Z
    1c1c:	d3 94       	inc	r13
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <serial_putchar>
    1c24:	c0 2f       	mov	r28, r16
    1c26:	d1 2f       	mov	r29, r17
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	e8 2e       	mov	r14, r24
    1c2c:	8c 2f       	mov	r24, r28
    1c2e:	8c 19       	sub	r24, r12
    1c30:	8d 15       	cp	r24, r13
    1c32:	40 f4       	brcc	.+16     	; 0x1c44 <sendSQData+0x4c>
    1c34:	5e 01       	movw	r10, r28
    1c36:	89 91       	ld	r24, Y+
    1c38:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <serial_putchar>
    1c3c:	f5 01       	movw	r30, r10
    1c3e:	80 81       	ld	r24, Z
    1c40:	e8 26       	eor	r14, r24
    1c42:	f4 cf       	rjmp	.-24     	; 0x1c2c <sendSQData+0x34>
    1c44:	8e 2d       	mov	r24, r14
    1c46:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <serial_putchar>
    1c4a:	10 92 e4 0c 	sts	0x0CE4, r1	; 0x800ce4 <ucTimerCount>
    1c4e:	78 94       	sei
    1c50:	0e 94 30 26 	call	0x4c60	; 0x4c60 <StartTimerZero>
    1c54:	80 91 e4 0c 	lds	r24, 0x0CE4	; 0x800ce4 <ucTimerCount>
    1c58:	86 34       	cpi	r24, 0x46	; 70
    1c5a:	20 f4       	brcc	.+8      	; 0x1c64 <sendSQData+0x6c>
    1c5c:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <rx_buf_count>
    1c60:	88 23       	and	r24, r24
    1c62:	39 f0       	breq	.+14     	; 0x1c72 <sendSQData+0x7a>
    1c64:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <StopTimerZero>
    1c68:	80 91 e4 0c 	lds	r24, 0x0CE4	; 0x800ce4 <ucTimerCount>
    1c6c:	86 34       	cpi	r24, 0x46	; 70
    1c6e:	40 f0       	brcs	.+16     	; 0x1c80 <sendSQData+0x88>
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <sendSQData+0x94>
    1c72:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <mac_event_pending>
    1c76:	88 23       	and	r24, r24
    1c78:	69 f3       	breq	.-38     	; 0x1c54 <sendSQData+0x5c>
    1c7a:	0e 94 35 21 	call	0x426a	; 0x426a <macTask>
    1c7e:	ea cf       	rjmp	.-44     	; 0x1c54 <sendSQData+0x5c>
    1c80:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serial_getchar>
    1c84:	86 30       	cpi	r24, 0x06	; 6
    1c86:	69 f0       	breq	.+26     	; 0x1ca2 <sendSQData+0xaa>
    1c88:	89 30       	cpi	r24, 0x09	; 9
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <sendSQData+0xa6>
    1c8c:	8f ed       	ldi	r24, 0xDF	; 223
    1c8e:	9e e2       	ldi	r25, 0x2E	; 46
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <sendSQData+0x98>
    1c94:	00 c0       	rjmp	.+0      	; 0x1c96 <sendSQData+0x9e>
    1c96:	00 00       	nop
    1c98:	fa 94       	dec	r15
    1c9a:	f1 10       	cpse	r15, r1
    1c9c:	bb cf       	rjmp	.-138    	; 0x1c14 <sendSQData+0x1c>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <sendSQData+0xac>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	bf 90       	pop	r11
    1cb6:	af 90       	pop	r10
    1cb8:	08 95       	ret

00001cba <sendSQVendPrice>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	28 97       	sbiw	r28, 0x08	; 8
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	90 91 fe 0a 	lds	r25, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    1cd2:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <MdcStatus+0x4>
    1cd6:	92 30       	cpi	r25, 0x02	; 2
    1cd8:	f9 f4       	brne	.+62     	; 0x1d18 <sendSQVendPrice+0x5e>
    1cda:	97 e0       	ldi	r25, 0x07	; 7
    1cdc:	99 83       	std	Y+1, r25	; 0x01
    1cde:	98 e1       	ldi	r25, 0x18	; 24
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	81 11       	cpse	r24, r1
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <sendSQVendPrice+0x40>
    1ce6:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <ReaderStateFlag+0x1>
    1cea:	81 ff       	sbrs	r24, 1
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <sendSQVendPrice+0x40>
    1cee:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x3b>
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    1cf4:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x3c>
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <sendSQVendPrice+0x4a>
    1cfa:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    1d04:	8c 83       	std	Y+4, r24	; 0x04
    1d06:	1d 82       	std	Y+5, r1	; 0x05
    1d08:	1e 82       	std	Y+6, r1	; 0x06
    1d0a:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <MachineSetupData+0x3e>
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <MachineSetupData+0x3f>
    1d14:	88 87       	std	Y+8, r24	; 0x08
    1d16:	19 c0       	rjmp	.+50     	; 0x1d4a <sendSQVendPrice+0x90>
    1d18:	94 e0       	ldi	r25, 0x04	; 4
    1d1a:	99 83       	std	Y+1, r25	; 0x01
    1d1c:	92 e1       	ldi	r25, 0x12	; 18
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	81 11       	cpse	r24, r1
    1d22:	0a c0       	rjmp	.+20     	; 0x1d38 <sendSQVendPrice+0x7e>
    1d24:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <ReaderStateFlag+0x1>
    1d28:	81 ff       	sbrs	r24, 1
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <sendSQVendPrice+0x7e>
    1d2c:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <MachineSetupData+0x3b>
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x3c>
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <sendSQVendPrice+0x88>
    1d38:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    1d42:	8c 83       	std	Y+4, r24	; 0x04
    1d44:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <MachineSetupData+0x40>
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    1d52:	28 96       	adiw	r28, 0x08	; 8
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <getSQData>:
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	7c 01       	movw	r14, r24
    1d74:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serial_getchar>
    1d78:	c8 2f       	mov	r28, r24
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	09 f5       	brne	.+66     	; 0x1dc0 <getSQData+0x5c>
    1d7e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serial_getchar>
    1d82:	d8 2f       	mov	r29, r24
    1d84:	f7 01       	movw	r30, r14
    1d86:	80 81       	ld	r24, Z
    1d88:	8d 17       	cp	r24, r29
    1d8a:	d0 f0       	brcs	.+52     	; 0x1dc0 <getSQData+0x5c>
    1d8c:	cd 27       	eor	r28, r29
    1d8e:	de 2c       	mov	r13, r14
    1d90:	87 01       	movw	r16, r14
    1d92:	80 2f       	mov	r24, r16
    1d94:	8d 19       	sub	r24, r13
    1d96:	8d 17       	cp	r24, r29
    1d98:	38 f4       	brcc	.+14     	; 0x1da8 <getSQData+0x44>
    1d9a:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serial_getchar>
    1d9e:	f8 01       	movw	r30, r16
    1da0:	81 93       	st	Z+, r24
    1da2:	8f 01       	movw	r16, r30
    1da4:	c8 27       	eor	r28, r24
    1da6:	f5 cf       	rjmp	.-22     	; 0x1d92 <getSQData+0x2e>
    1da8:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serial_getchar>
    1dac:	c8 13       	cpse	r28, r24
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <getSQData+0x56>
    1db0:	86 e0       	ldi	r24, 0x06	; 6
    1db2:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <serial_putchar>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <getSQData+0x5e>
    1dba:	85 e1       	ldi	r24, 0x15	; 21
    1dbc:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <serial_putchar>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	08 95       	ret

00001dd2 <getSQStatusData>:
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	62 97       	sbiw	r28, 0x12	; 18
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	c1 f5       	brne	.+112    	; 0x1e5e <getSQStatusData+0x8c>
    1dee:	22 e1       	ldi	r18, 0x12	; 18
    1df0:	ce 01       	movw	r24, r28
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	fc 01       	movw	r30, r24
    1df6:	32 2f       	mov	r19, r18
    1df8:	11 92       	st	Z+, r1
    1dfa:	3a 95       	dec	r19
    1dfc:	e9 f7       	brne	.-6      	; 0x1df8 <getSQStatusData+0x26>
    1dfe:	29 83       	std	Y+1, r18	; 0x01
    1e00:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <getSQData>
    1e04:	88 23       	and	r24, r24
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <getSQStatusData+0x38>
    1e08:	56 c0       	rjmp	.+172    	; 0x1eb6 <getSQStatusData+0xe4>
    1e0a:	99 81       	ldd	r25, Y+1	; 0x01
    1e0c:	97 31       	cpi	r25, 0x17	; 23
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <getSQStatusData+0x40>
    1e10:	52 c0       	rjmp	.+164    	; 0x1eb6 <getSQStatusData+0xe4>
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	90 5e       	subi	r25, 0xE0	; 224
    1e16:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <MdcStatus>
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <MdcStatus+0x4>
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <MdcStatus+0x5>
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <MdcStatus+0x6>
    1e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2e:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <MdcStatus+0x7>
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <MdcStatus+0x8>
    1e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3a:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <MdcStatus+0x9>
    1e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e40:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <MdcStatus+0x2>
    1e44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e46:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <MdcStatus+0x3>
    1e4a:	98 89       	ldd	r25, Y+16	; 0x10
    1e4c:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <MdcStatus+0xa>
    1e50:	99 89       	ldd	r25, Y+17	; 0x11
    1e52:	90 93 08 0b 	sts	0x0B08, r25	; 0x800b08 <MdcStatus+0xb>
    1e56:	9a 89       	ldd	r25, Y+18	; 0x12
    1e58:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <MdcStatus+0xc>
    1e5c:	2d c0       	rjmp	.+90     	; 0x1eb8 <getSQStatusData+0xe6>
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	51 f5       	brne	.+84     	; 0x1eb6 <getSQStatusData+0xe4>
    1e62:	2b e0       	ldi	r18, 0x0B	; 11
    1e64:	ce 01       	movw	r24, r28
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	fc 01       	movw	r30, r24
    1e6a:	32 2f       	mov	r19, r18
    1e6c:	11 92       	st	Z+, r1
    1e6e:	3a 95       	dec	r19
    1e70:	e9 f7       	brne	.-6      	; 0x1e6c <getSQStatusData+0x9a>
    1e72:	29 83       	std	Y+1, r18	; 0x01
    1e74:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <getSQData>
    1e78:	88 23       	and	r24, r24
    1e7a:	e9 f0       	breq	.+58     	; 0x1eb6 <getSQStatusData+0xe4>
    1e7c:	99 81       	ldd	r25, Y+1	; 0x01
    1e7e:	91 31       	cpi	r25, 0x11	; 17
    1e80:	d1 f4       	brne	.+52     	; 0x1eb6 <getSQStatusData+0xe4>
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	90 5e       	subi	r25, 0xE0	; 224
    1e86:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <MdcStatus>
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <MdcStatus+0x2>
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <MdcStatus+0x4>
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <MdcStatus+0x5>
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <MdcStatus+0x6>
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <MdcStatus+0x7>
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <MdcStatus+0x8>
    1eae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb0:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <MdcStatus+0x9>
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <getSQStatusData+0xe6>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	62 96       	adiw	r28, 0x12	; 18
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <getSQMachineStatus>:
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <getSQMachineStatus+0x8>
    1ed2:	1f 92       	push	r1
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	11 f4       	brne	.+4      	; 0x1ee8 <getSQMachineStatus+0x1e>
    1ee4:	86 e1       	ldi	r24, 0x16	; 22
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <getSQMachineStatus+0x20>
    1ee8:	80 e1       	ldi	r24, 0x10	; 16
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <CurrentAccount+0x9>
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    1efa:	81 11       	cpse	r24, r1
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <getSQMachineStatus+0x38>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	15 c0       	rjmp	.+42     	; 0x1f2c <getSQMachineStatus+0x62>
    1f02:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <getSQStatusData>
    1f06:	18 2f       	mov	r17, r24
    1f08:	88 23       	and	r24, r24
    1f0a:	c9 f3       	breq	.-14     	; 0x1efe <getSQMachineStatus+0x34>
    1f0c:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <ReaderStateFlag>
    1f10:	91 fb       	bst	r25, 1
    1f12:	88 27       	eor	r24, r24
    1f14:	80 f9       	bld	r24, 0
    1f16:	91 fd       	sbrc	r25, 1
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <getSQMachineStatus+0x62>
    1f1a:	8f ed       	ldi	r24, 0xDF	; 223
    1f1c:	9e e2       	ldi	r25, 0x2E	; 46
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <getSQMachineStatus+0x54>
    1f22:	00 c0       	rjmp	.+0      	; 0x1f24 <getSQMachineStatus+0x5a>
    1f24:	00 00       	nop
    1f26:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <sendSQVendPrice>
    1f2a:	81 2f       	mov	r24, r17
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	08 95       	ret

00001f3a <getSQInitData>:
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	2a 97       	sbiw	r28, 0x0a	; 10
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	8a e0       	ldi	r24, 0x0A	; 10
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <getSQData>
    1f5a:	88 23       	and	r24, r24
    1f5c:	61 f0       	breq	.+24     	; 0x1f76 <getSQInitData+0x3c>
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	90 93 a7 09 	sts	0x09A7, r25	; 0x8009a7 <MachineSetupData+0x1>
    1f64:	9b 81       	ldd	r25, Y+3	; 0x03
    1f66:	90 93 a8 09 	sts	0x09A8, r25	; 0x8009a8 <MachineSetupData+0x2>
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <MachineSetupData+0x3>
    1f70:	9d 81       	ldd	r25, Y+5	; 0x05
    1f72:	90 93 d8 09 	sts	0x09D8, r25	; 0x8009d8 <MachineSetupData+0x32>
    1f76:	2a 96       	adiw	r28, 0x0a	; 10
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	08 95       	ret

00001f88 <isQuantum>:
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	28 97       	sbiw	r28, 0x08	; 8
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	88 e0       	ldi	r24, 0x08	; 8
    1f9e:	ef e2       	ldi	r30, 0x2F	; 47
    1fa0:	f2 e0       	ldi	r31, 0x02	; 2
    1fa2:	de 01       	movw	r26, r28
    1fa4:	11 96       	adiw	r26, 0x01	; 1
    1fa6:	01 90       	ld	r0, Z+
    1fa8:	0d 92       	st	X+, r0
    1faa:	8a 95       	dec	r24
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <isQuantum+0x1e>
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	8e 83       	std	Y+6, r24	; 0x06
    1fb2:	86 e0       	ldi	r24, 0x06	; 6
    1fb4:	8f 83       	std	Y+7, r24	; 0x07
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <getSQInitData>
    1fc4:	28 96       	adiw	r28, 0x08	; 8
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <waitSQStartKey>:
    1fd6:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	19 f4       	brne	.+6      	; 0x1fe4 <waitSQStartKey+0xe>
    1fde:	80 91 03 0b 	lds	r24, 0x0B03	; 0x800b03 <MdcStatus+0x6>
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <waitSQStartKey+0x16>
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	79 f4       	brne	.+30     	; 0x2006 <waitSQStartKey+0x30>
    1fe8:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <MdcStatus+0x7>
    1fec:	81 fd       	sbrc	r24, 1
    1fee:	09 c0       	rjmp	.+18     	; 0x2002 <waitSQStartKey+0x2c>
    1ff0:	80 31       	cpi	r24, 0x10	; 16
    1ff2:	49 f4       	brne	.+18     	; 0x2006 <waitSQStartKey+0x30>
    1ff4:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <MdcStatus>
    1ff8:	98 52       	subi	r25, 0x28	; 40
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	92 30       	cpi	r25, 0x02	; 2
    1ffe:	20 f0       	brcs	.+8      	; 0x2008 <waitSQStartKey+0x32>
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <waitSQStartKey+0x30>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	08 95       	ret
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	08 95       	ret

0000200a <isSQCycleRunning>:
    200a:	80 91 03 0b 	lds	r24, 0x0B03	; 0x800b03 <MdcStatus+0x6>
    200e:	80 31       	cpi	r24, 0x10	; 16
    2010:	39 f0       	breq	.+14     	; 0x2020 <isSQCycleRunning+0x16>
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 91 04 0b 	lds	r25, 0x0B04	; 0x800b04 <MdcStatus+0x7>
    2018:	90 31       	cpi	r25, 0x10	; 16
    201a:	19 f0       	breq	.+6      	; 0x2022 <isSQCycleRunning+0x18>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <isSQCycleRunning+0x18>
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	81 70       	andi	r24, 0x01	; 1
    2024:	08 95       	ret

00002026 <sendSQCashCardInserted>:
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	00 d0       	rcall	.+0      	; 0x202c <sendSQCashCardInserted+0x6>
    202c:	00 d0       	rcall	.+0      	; 0x202e <sendSQCashCardInserted+0x8>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <sendSQCashCardInserted+0xa>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	26 e0       	ldi	r18, 0x06	; 6
    203a:	fc 01       	movw	r30, r24
    203c:	11 92       	st	Z+, r1
    203e:	2a 95       	dec	r18
    2040:	e9 f7       	brne	.-6      	; 0x203c <sendSQCashCardInserted+0x16>
    2042:	40 91 fe 0a 	lds	r20, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    2046:	20 91 19 09 	lds	r18, 0x0919	; 0x800919 <CurrentAccount+0x7>
    204a:	30 91 1a 09 	lds	r19, 0x091A	; 0x80091a <CurrentAccount+0x8>
    204e:	42 30       	cpi	r20, 0x02	; 2
    2050:	39 f4       	brne	.+14     	; 0x2060 <sendSQCashCardInserted+0x3a>
    2052:	43 e0       	ldi	r20, 0x03	; 3
    2054:	49 83       	std	Y+1, r20	; 0x01
    2056:	40 e4       	ldi	r20, 0x40	; 64
    2058:	4a 83       	std	Y+2, r20	; 0x02
    205a:	3b 83       	std	Y+3, r19	; 0x03
    205c:	2c 83       	std	Y+4, r18	; 0x04
    205e:	0c c0       	rjmp	.+24     	; 0x2078 <sendSQCashCardInserted+0x52>
    2060:	45 e0       	ldi	r20, 0x05	; 5
    2062:	49 83       	std	Y+1, r20	; 0x01
    2064:	40 e4       	ldi	r20, 0x40	; 64
    2066:	4a 83       	std	Y+2, r20	; 0x02
    2068:	3b 83       	std	Y+3, r19	; 0x03
    206a:	2c 83       	std	Y+4, r18	; 0x04
    206c:	20 91 aa 09 	lds	r18, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    2070:	2d 83       	std	Y+5, r18	; 0x05
    2072:	20 91 ab 09 	lds	r18, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    2076:	2e 83       	std	Y+6, r18	; 0x06
    2078:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    207c:	26 96       	adiw	r28, 0x06	; 6
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <sendSQCashCardInsetedForTopoff>:
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	27 97       	sbiw	r28, 0x07	; 7
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	ce 01       	movw	r24, r28
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	27 e0       	ldi	r18, 0x07	; 7
    20a8:	fc 01       	movw	r30, r24
    20aa:	11 92       	st	Z+, r1
    20ac:	2a 95       	dec	r18
    20ae:	e9 f7       	brne	.-6      	; 0x20aa <sendSQCashCardInsetedForTopoff+0x1c>
    20b0:	40 91 fe 0a 	lds	r20, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    20b4:	20 91 19 09 	lds	r18, 0x0919	; 0x800919 <CurrentAccount+0x7>
    20b8:	30 91 1a 09 	lds	r19, 0x091A	; 0x80091a <CurrentAccount+0x8>
    20bc:	42 30       	cpi	r20, 0x02	; 2
    20be:	39 f4       	brne	.+14     	; 0x20ce <sendSQCashCardInsetedForTopoff+0x40>
    20c0:	43 e0       	ldi	r20, 0x03	; 3
    20c2:	49 83       	std	Y+1, r20	; 0x01
    20c4:	42 e4       	ldi	r20, 0x42	; 66
    20c6:	4a 83       	std	Y+2, r20	; 0x02
    20c8:	3b 83       	std	Y+3, r19	; 0x03
    20ca:	2c 83       	std	Y+4, r18	; 0x04
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <sendSQCashCardInsetedForTopoff+0x5e>
    20ce:	46 e0       	ldi	r20, 0x06	; 6
    20d0:	49 83       	std	Y+1, r20	; 0x01
    20d2:	42 e4       	ldi	r20, 0x42	; 66
    20d4:	4a 83       	std	Y+2, r20	; 0x02
    20d6:	3b 83       	std	Y+3, r19	; 0x03
    20d8:	2c 83       	std	Y+4, r18	; 0x04
    20da:	20 91 aa 09 	lds	r18, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    20de:	2d 83       	std	Y+5, r18	; 0x05
    20e0:	20 91 ab 09 	lds	r18, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    20e4:	2e 83       	std	Y+6, r18	; 0x06
    20e6:	20 91 db 09 	lds	r18, 0x09DB	; 0x8009db <MachineSetupData+0x35>
    20ea:	2f 83       	std	Y+7, r18	; 0x07
    20ec:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    20f0:	27 96       	adiw	r28, 0x07	; 7
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <sendSQCardRemoved>:
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	00 d0       	rcall	.+0      	; 0x2108 <sendSQCardRemoved+0x6>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	81 e4       	ldi	r24, 0x41	; 65
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	08 95       	ret

00002126 <sendSQCashCardRemoved>:
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	27 97       	sbiw	r28, 0x07	; 7
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	ce 01       	movw	r24, r28
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	27 e0       	ldi	r18, 0x07	; 7
    2140:	fc 01       	movw	r30, r24
    2142:	11 92       	st	Z+, r1
    2144:	2a 95       	dec	r18
    2146:	e9 f7       	brne	.-6      	; 0x2142 <sendSQCashCardRemoved+0x1c>
    2148:	40 91 fe 0a 	lds	r20, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    214c:	20 91 19 09 	lds	r18, 0x0919	; 0x800919 <CurrentAccount+0x7>
    2150:	30 91 1a 09 	lds	r19, 0x091A	; 0x80091a <CurrentAccount+0x8>
    2154:	42 30       	cpi	r20, 0x02	; 2
    2156:	39 f4       	brne	.+14     	; 0x2166 <sendSQCashCardRemoved+0x40>
    2158:	43 e0       	ldi	r20, 0x03	; 3
    215a:	49 83       	std	Y+1, r20	; 0x01
    215c:	41 e4       	ldi	r20, 0x41	; 65
    215e:	4a 83       	std	Y+2, r20	; 0x02
    2160:	3b 83       	std	Y+3, r19	; 0x03
    2162:	2c 83       	std	Y+4, r18	; 0x04
    2164:	0c c0       	rjmp	.+24     	; 0x217e <sendSQCashCardRemoved+0x58>
    2166:	45 e0       	ldi	r20, 0x05	; 5
    2168:	49 83       	std	Y+1, r20	; 0x01
    216a:	41 e4       	ldi	r20, 0x41	; 65
    216c:	4a 83       	std	Y+2, r20	; 0x02
    216e:	3b 83       	std	Y+3, r19	; 0x03
    2170:	2c 83       	std	Y+4, r18	; 0x04
    2172:	20 91 aa 09 	lds	r18, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    2176:	2d 83       	std	Y+5, r18	; 0x05
    2178:	20 91 ab 09 	lds	r18, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    217c:	2e 83       	std	Y+6, r18	; 0x06
    217e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
    2182:	27 96       	adiw	r28, 0x07	; 7
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <sendSQDisplayCommand>:
Led1 to led4 are limited to values defined in "display.h"
***********************************************************************************************
*/

bool sendSQDisplayCommand( u8 led1, u8 led2,u8 led3, u8 led4, u8 duration) 
{
    2194:	0f 93       	push	r16
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	2a 97       	sbiw	r28, 0x0a	; 10
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
	u8 temp[10]={0};
    21aa:	fe 01       	movw	r30, r28
    21ac:	31 96       	adiw	r30, 0x01	; 1
    21ae:	9a e0       	ldi	r25, 0x0A	; 10
    21b0:	df 01       	movw	r26, r30
    21b2:	1d 92       	st	X+, r1
    21b4:	9a 95       	dec	r25
    21b6:	e9 f7       	brne	.-6      	; 0x21b2 <sendSQDisplayCommand+0x1e>
	
	temp[0] = DISPLAY_REQUEST_SIZE;	//Number of actual data bytes to be transferred to the MDC including command data exclude bbc byte
    21b8:	96 e0       	ldi	r25, 0x06	; 6
    21ba:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = DISPLAY_REQUEST;		//MDC command to be requested 
    21bc:	90 e6       	ldi	r25, 0x60	; 96
    21be:	9a 83       	std	Y+2, r25	; 0x02
	temp[2] = led1;				//Left most digit display character 4
    21c0:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = led2;				//Display character 3
    21c2:	6c 83       	std	Y+4, r22	; 0x04
	temp[4] = led3;				//Display character 2
    21c4:	4d 83       	std	Y+5, r20	; 0x05
	temp[5] = led4;				//Display character 1
    21c6:	2e 83       	std	Y+6, r18	; 0x06
	temp[6] = duration;			//Duration of display in seconds
    21c8:	0f 83       	std	Y+7, r16	; 0x07
															
	return (sendSQData(temp) );
    21ca:	cf 01       	movw	r24, r30
    21cc:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
}
    21d0:	2a 96       	adiw	r28, 0x0a	; 10
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <displaySQReaderVersion>:
on the MDC display for a minimum of 2 seconds.

*/

bool displaySQReaderVersion(void)
{	
    21e4:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_r, msgNumber[__APP_MAJOR__],msgNumber[__APP_MINOR__],msgNumber[__APP_REVISION__],5) )
    21e6:	05 e0       	ldi	r16, 0x05	; 5
    21e8:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <msgNumber+0x6>
    21ec:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <msgNumber+0x3>
    21f0:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <msgNumber>
    21f4:	80 ea       	ldi	r24, 0xA0	; 160
    21f6:	0e 94 ca 10 	call	0x2194	; 0x2194 <sendSQDisplayCommand>
    21fa:	88 23       	and	r24, r24
    21fc:	49 f0       	breq	.+18     	; 0x2210 <displaySQReaderVersion+0x2c>
    21fe:	2f ef       	ldi	r18, 0xFF	; 255
    2200:	37 ea       	ldi	r19, 0xA7	; 167
    2202:	91 e6       	ldi	r25, 0x61	; 97
    2204:	21 50       	subi	r18, 0x01	; 1
    2206:	30 40       	sbci	r19, 0x00	; 0
    2208:	90 40       	sbci	r25, 0x00	; 0
    220a:	e1 f7       	brne	.-8      	; 0x2204 <displaySQReaderVersion+0x20>
    220c:	00 c0       	rjmp	.+0      	; 0x220e <displaySQReaderVersion+0x2a>
    220e:	00 00       	nop
	{
		_delay_ms(2000);
		return true;	
	}
	return false;	
}	
    2210:	0f 91       	pop	r16
    2212:	08 95       	ret

00002214 <displaySQCardError>:

bool displaySQCardError(void)
{
    2214:	0f 93       	push	r16
    2216:	cf 93       	push	r28
	if( sendSQDisplayCommand(LED_C, LED_A,LED_r,LED_d,4) )
    2218:	04 e0       	ldi	r16, 0x04	; 4
    221a:	2c eb       	ldi	r18, 0xBC	; 188
    221c:	40 ea       	ldi	r20, 0xA0	; 160
    221e:	6e ee       	ldi	r22, 0xEE	; 238
    2220:	82 e7       	ldi	r24, 0x72	; 114
    2222:	0e 94 ca 10 	call	0x2194	; 0x2194 <sendSQDisplayCommand>
    2226:	c8 2f       	mov	r28, r24
    2228:	88 23       	and	r24, r24
    222a:	e1 f0       	breq	.+56     	; 0x2264 <displaySQCardError+0x50>
    222c:	2f ef       	ldi	r18, 0xFF	; 255
    222e:	37 ea       	ldi	r19, 0xA7	; 167
    2230:	81 e6       	ldi	r24, 0x61	; 97
    2232:	21 50       	subi	r18, 0x01	; 1
    2234:	30 40       	sbci	r19, 0x00	; 0
    2236:	80 40       	sbci	r24, 0x00	; 0
    2238:	e1 f7       	brne	.-8      	; 0x2232 <displaySQCardError+0x1e>
    223a:	00 c0       	rjmp	.+0      	; 0x223c <displaySQCardError+0x28>
    223c:	00 00       	nop
	{
		_delay_ms(2000);
		if( sendSQDisplayCommand(LED_E, LED_r,LED_r,LED_BLANK,3) )
    223e:	03 e0       	ldi	r16, 0x03	; 3
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	40 ea       	ldi	r20, 0xA0	; 160
    2244:	60 ea       	ldi	r22, 0xA0	; 160
    2246:	82 ef       	ldi	r24, 0xF2	; 242
    2248:	0e 94 ca 10 	call	0x2194	; 0x2194 <sendSQDisplayCommand>
    224c:	88 23       	and	r24, r24
    224e:	51 f0       	breq	.+20     	; 0x2264 <displaySQCardError+0x50>
    2250:	9f ef       	ldi	r25, 0xFF	; 255
    2252:	27 ea       	ldi	r18, 0xA7	; 167
    2254:	31 e6       	ldi	r19, 0x61	; 97
    2256:	91 50       	subi	r25, 0x01	; 1
    2258:	20 40       	sbci	r18, 0x00	; 0
    225a:	30 40       	sbci	r19, 0x00	; 0
    225c:	e1 f7       	brne	.-8      	; 0x2256 <displaySQCardError+0x42>
    225e:	00 c0       	rjmp	.+0      	; 0x2260 <displaySQCardError+0x4c>
    2260:	00 00       	nop
			_delay_ms(2000);
			
		return true;	
    2262:	c8 2f       	mov	r28, r24
	}
	return false;	
}	
    2264:	8c 2f       	mov	r24, r28
    2266:	cf 91       	pop	r28
    2268:	0f 91       	pop	r16
    226a:	08 95       	ret

0000226c <cardRemoved>:

bool cardRemoved(u8 cardType)
{
	if( cardType == CASH_CARD ) 
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	51 f4       	brne	.+20     	; 0x2284 <cardRemoved+0x18>
	{
		if( sendSQCashCardRemoved() )
    2270:	0e 94 93 10 	call	0x2126	; 0x2126 <sendSQCashCardRemoved>
    2274:	81 11       	cpse	r24, r1
    2276:	02 c0       	rjmp	.+4      	; 0x227c <cardRemoved+0x10>
		{
			CurrentAccount.CardState = CARD_OUT;
			return true;
		}
	}		
	return false;
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	08 95       	ret
{
	if( cardType == CASH_CARD ) 
	{
		if( sendSQCashCardRemoved() )
		{
			CurrentAccount.CardState = CARD_OUT;
    227c:	10 92 1b 09 	sts	0x091B, r1	; 0x80091b <CurrentAccount+0x9>
			return true;			
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	08 95       	ret
		
	}
	else
	{
	
		if ( sendSQCardRemoved() )
    2284:	0e 94 81 10 	call	0x2102	; 0x2102 <sendSQCardRemoved>
    2288:	f5 cf       	rjmp	.-22     	; 0x2274 <cardRemoved+0x8>

0000228a <cardInserted>:
	}		
	return false;
}			
bool cardInserted(u8 cardType)
{
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	59 f4       	brne	.+22     	; 0x22a4 <cardInserted+0x1a>
    228e:	0e 94 13 10 	call	0x2026	; 0x2026 <sendSQCashCardInserted>
    2292:	81 11       	cpse	r24, r1
    2294:	02 c0       	rjmp	.+4      	; 0x229a <cardInserted+0x10>
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
	{
		CurrentAccount.CardState = CARD_IN;
		return true;
	}
	return false;
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	08 95       	ret
}			
bool cardInserted(u8 cardType)
{
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
	{
		CurrentAccount.CardState = CARD_IN;
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <CurrentAccount+0x9>
		return true;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	08 95       	ret
	}
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
    22a4:	82 30       	cpi	r24, 0x02	; 2
    22a6:	b9 f7       	brne	.-18     	; 0x2296 <cardInserted+0xc>
    22a8:	0e 94 47 10 	call	0x208e	; 0x208e <sendSQCashCardInsetedForTopoff>
    22ac:	f2 cf       	rjmp	.-28     	; 0x2292 <cardInserted+0x8>

000022ae <isMachineCycleRunning>:
	deviceStatus.deviceType[1] = MdcStatus.MachineType[1];
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
    22ae:	0c 94 05 10 	jmp	0x200a	; 0x200a <isSQCycleRunning>

000022b2 <waitForMachineStartKey>:
}
bool waitForMachineStartKey()
{
	
	return waitSQStartKey();
    22b2:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <waitSQStartKey>

000022b6 <MachineStatus>:
}

void MachineStatus(void)
{
  
	if( getSQMachineStatus() )
    22b6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <getSQMachineStatus>
    22ba:	88 23       	and	r24, r24
    22bc:	19 f0       	breq	.+6      	; 0x22c4 <MachineStatus+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = DEVICE_STATUS_ONLINE; //machine status has been done
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <ucDeviceStateFlag>
    22c4:	08 95       	ret

000022c6 <initMachine>:
	}
	return false;
}
void initMachine(void)
{
	if( isQuantum() )
    22c6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <isQuantum>
    22ca:	88 23       	and	r24, r24
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <initMachine+0xc>
	{
		//set q flag
		MdcStatus.MachineType[1] = QUANTUM_SERIES;
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <initMachine+0xe>
		
	}
	else //if (isMDC())
	{
		//set MDC flag
		MdcStatus.MachineType[1] = MDC_SERIES;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <MdcStatus+0x1>
    22d8:	8f e3       	ldi	r24, 0x3F	; 63
    22da:	9f e1       	ldi	r25, 0x1F	; 31
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <initMachine+0x16>
    22e0:	00 c0       	rjmp	.+0      	; 0x22e2 <initMachine+0x1c>
    22e2:	00 00       	nop
		
	}
	
	_delay_ms(2);
	MachineStatus();
    22e4:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <MachineStatus>
	deviceStatus.deviceType[0] = MdcStatus.MachineType[0];
    22e8:	80 91 fd 0a 	lds	r24, 0x0AFD	; 0x800afd <MdcStatus>
    22ec:	80 93 fa 0a 	sts	0x0AFA, r24	; 0x800afa <deviceStatus>
	deviceStatus.deviceType[1] = MdcStatus.MachineType[1];
    22f0:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    22f4:	80 93 fb 0a 	sts	0x0AFB, r24	; 0x800afb <deviceStatus+0x1>
    22f8:	08 95       	ret

000022fa <setupMachine>:
	}
	
}

bool setupMachine(void)
{
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	e2 97       	sbiw	r28, 0x32	; 50
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
	u8 temp[MDC_MAX_PACKET_SIZE] = {0};
    230e:	fe 01       	movw	r30, r28
    2310:	31 96       	adiw	r30, 0x01	; 1
    2312:	82 e3       	ldi	r24, 0x32	; 50
    2314:	df 01       	movw	r26, r30
    2316:	1d 92       	st	X+, r1
    2318:	8a 95       	dec	r24
    231a:	e9 f7       	brne	.-6      	; 0x2316 <setupMachine+0x1c>
	
	//getSQSetupData(); 
	if( deviceStatus.deviceType[1] == QUANTUM_SERIES)
    231c:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <deviceStatus+0x1>
    2320:	82 30       	cpi	r24, 0x02	; 2
    2322:	09 f0       	breq	.+2      	; 0x2326 <setupMachine+0x2c>
    2324:	a4 c1       	rjmp	.+840    	; 0x266e <setupMachine+0x374>
	{
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_TOPLOAD )
    2326:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <deviceStatus>
    232a:	91 32       	cpi	r25, 0x21	; 33
    232c:	09 f0       	breq	.+2      	; 0x2330 <setupMachine+0x36>
    232e:	7e c0       	rjmp	.+252    	; 0x242c <setupMachine+0x132>
		{
			temp[0] = QTL_PROGRAMMING_DATA_SIZE;
    2330:	8d e2       	ldi	r24, 0x2D	; 45
    2332:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    2334:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    2336:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <MachineSetupData+0x1>
    233a:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    233c:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <MachineSetupData+0x2>
    2340:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    2342:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <MachineSetupData+0x3>
    2346:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = 0;
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    2348:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    234c:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    234e:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    2352:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    2354:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <MachineSetupData+0x6>
    2358:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    235a:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <MachineSetupData+0x7>
    235e:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    2360:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <MachineSetupData+0x8>
    2364:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    2366:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <MachineSetupData+0x9>
    236a:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    236c:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <MachineSetupData+0xa>
    2370:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    2372:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    2374:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <MachineSetupData+0xd>
    2378:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    237a:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <MachineSetupData+0xc>
    237e:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    2380:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <MachineSetupData+0xf>
    2384:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    2386:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <MachineSetupData+0xe>
    238a:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    238c:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <MachineSetupData+0x10>
    2390:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    2392:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <MachineSetupData+0x11>
    2396:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    2398:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <MachineSetupData+0x12>
    239c:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    239e:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <MachineSetupData+0x13>
    23a2:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    23a4:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <MachineSetupData+0x14>
    23a8:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    23aa:	80 91 bb 09 	lds	r24, 0x09BB	; 0x8009bb <MachineSetupData+0x15>
    23ae:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.HeavyCycle_vendPrice[0];
    23b0:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <MachineSetupData+0x16>
    23b4:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.HeavyCycle_vendPrice[1];
    23b6:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <MachineSetupData+0x17>
    23ba:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.HeavyCycle_option;
    23bc:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <MachineSetupData+0x18>
    23c0:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.HeavyCycle_extraWashTime;
    23c2:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <MachineSetupData+0x1a>
    23c6:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.HeavyCycle_extraRiseTime;
    23c8:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <MachineSetupData+0x1b>
    23cc:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.HeavyCycle_warmRinseOption;
    23ce:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <MachineSetupData+0x19>
    23d2:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.NormalCycle_washAgitateTime;
    23d4:	80 91 c5 09 	lds	r24, 0x09C5	; 0x8009c5 <MachineSetupData+0x1f>
    23d8:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.NormalCycle_rinseAgitateTime;
    23da:	80 91 c6 09 	lds	r24, 0x09C6	; 0x8009c6 <MachineSetupData+0x20>
    23de:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.NormalCycle_rinseAgitateTime;
    23e0:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.NormalCycle_finalSpinTime;
    23e2:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <MachineSetupData+0x22>
    23e6:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = MachineSetupData.PermPressCycle_washAgitateTime;
    23e8:	80 91 c9 09 	lds	r24, 0x09C9	; 0x8009c9 <MachineSetupData+0x23>
    23ec:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = MachineSetupData.PermPressCycle_extraRinseAgitateTime;
    23ee:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <MachineSetupData+0x25>
    23f2:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = MachineSetupData.PermPressCycle_rinseAgitateTime;
    23f4:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <MachineSetupData+0x24>
    23f8:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = MachineSetupData.PermPressCycle_finalSpinTime;
    23fa:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <MachineSetupData+0x26>
    23fe:	8f a3       	std	Y+39, r24	; 0x27
			temp[39] = MachineSetupData.DelicateCycle_washAgitateTime;
    2400:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <MachineSetupData+0x27>
    2404:	88 a7       	std	Y+40, r24	; 0x28
			temp[40] = MachineSetupData.DelicateCycle_extraRinseAgitateTime;
    2406:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <MachineSetupData+0x29>
    240a:	89 a7       	std	Y+41, r24	; 0x29
			temp[41] = MachineSetupData.DelicateCycle_rinseAgitateTime;
    240c:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <MachineSetupData+0x28>
    2410:	8a a7       	std	Y+42, r24	; 0x2a
			temp[42] = MachineSetupData.DelicateCycle_finalSpinTime;
    2412:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <MachineSetupData+0x2a>
    2416:	8b a7       	std	Y+43, r24	; 0x2b
			temp[43] = MachineSetupData.DefaultCycle;
    2418:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0x33>
    241c:	8c a7       	std	Y+44, r24	; 0x2c
			temp[44] = MachineSetupData.AudioSetting;
    241e:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x41>
    2422:	8d a7       	std	Y+45, r24	; 0x2d
			temp[45] = MachineSetupData.CardReaderDisplayControl;
    2424:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x42>
    2428:	8e a7       	std	Y+46, r24	; 0x2e
    242a:	cd c0       	rjmp	.+410    	; 0x25c6 <setupMachine+0x2cc>
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_FRONTLOAD )
    242c:	92 32       	cpi	r25, 0x22	; 34
    242e:	09 f0       	breq	.+2      	; 0x2432 <setupMachine+0x138>
    2430:	5e c0       	rjmp	.+188    	; 0x24ee <setupMachine+0x1f4>
		{
			temp[0] = QFL_PROGRAMMING_DATA_SIZE;
    2432:	99 83       	std	Y+1, r25	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    2434:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    2436:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <MachineSetupData+0x1>
    243a:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    243c:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <MachineSetupData+0x2>
    2440:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    2442:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <MachineSetupData+0x3>
    2446:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = 0;
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    2448:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    244c:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    244e:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    2452:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    2454:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <MachineSetupData+0x6>
    2458:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    245a:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <MachineSetupData+0x7>
    245e:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    2460:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <MachineSetupData+0x8>
    2464:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    2466:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <MachineSetupData+0x9>
    246a:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    246c:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <MachineSetupData+0xa>
    2470:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    2472:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    2474:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <MachineSetupData+0xd>
    2478:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    247a:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <MachineSetupData+0xc>
    247e:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    2480:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <MachineSetupData+0xf>
    2484:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    2486:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <MachineSetupData+0xe>
    248a:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    248c:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <MachineSetupData+0x10>
    2490:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    2492:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <MachineSetupData+0x11>
    2496:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    2498:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <MachineSetupData+0x12>
    249c:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    249e:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <MachineSetupData+0x13>
    24a2:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    24a4:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <MachineSetupData+0x14>
    24a8:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    24aa:	80 91 bb 09 	lds	r24, 0x09BB	; 0x8009bb <MachineSetupData+0x15>
    24ae:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.MediumCycle_vendPrice[0];
    24b0:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <MachineSetupData+0x1c>
    24b4:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.MediumCycle_vendPrice[1];
    24b6:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <MachineSetupData+0x1d>
    24ba:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.HeavyCycle_vendPrice[0];
    24bc:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <MachineSetupData+0x16>
    24c0:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.HeavyCycle_vendPrice[1];
    24c2:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <MachineSetupData+0x17>
    24c6:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.MediumCycle_option;
    24c8:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <MachineSetupData+0x1e>
    24cc:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.HeavyCycle_option;
    24ce:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <MachineSetupData+0x18>
    24d2:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.CycleModifierExtraWashTime;
    24d4:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <MachineSetupData+0x43>
    24d8:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.DefaultCycle;
    24da:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0x33>
    24de:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.AudioSetting;
    24e0:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x41>
    24e4:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.CardReaderDisplayControl;
    24e6:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x42>
    24ea:	8b a3       	std	Y+35, r24	; 0x23
    24ec:	6c c0       	rjmp	.+216    	; 0x25c6 <setupMachine+0x2cc>
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_WASHER_EXTRACTOR )
    24ee:	94 32       	cpi	r25, 0x24	; 36
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <setupMachine+0x1fa>
    24f2:	69 c0       	rjmp	.+210    	; 0x25c6 <setupMachine+0x2cc>
		{
			temp[0] = QWE_PROGRAMMING_DATA_SIZE;
    24f4:	86 e2       	ldi	r24, 0x26	; 38
    24f6:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    24f8:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    24fa:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <MachineSetupData+0x1>
    24fe:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    2500:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <MachineSetupData+0x2>
    2504:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    2506:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <MachineSetupData+0x3>
    250a:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = MachineSetupData.ControlConfig;
    250c:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0x32>
    2510:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = 0;
			temp[7] = MachineSetupData.VendPrice[0];
    2512:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    2516:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    2518:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    251c:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];
    251e:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <MachineSetupData+0x6>
    2522:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    2524:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <MachineSetupData+0x7>
    2528:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0];
    252a:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <MachineSetupData+0x8>
    252e:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    2530:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <MachineSetupData+0x9>
    2534:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.VendPrice3[0];
    2536:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <MachineSetupData+0xa>
    253a:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = MachineSetupData.VendPrice3[0];
    253c:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = MachineSetupData.VendPrice4[1];
    253e:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <MachineSetupData+0xd>
    2542:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = MachineSetupData.VendPrice4[0];
    2544:	80 91 b2 09 	lds	r24, 0x09B2	; 0x8009b2 <MachineSetupData+0xc>
    2548:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = MachineSetupData.VendPrice5[1];
    254a:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <MachineSetupData+0xf>
    254e:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = MachineSetupData.VendPrice5[0];
    2550:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <MachineSetupData+0xe>
    2554:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = MachineSetupData.VendPrice6[0];
    2556:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <MachineSetupData+0x10>
    255a:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = MachineSetupData.VendPrice6[1];
    255c:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <MachineSetupData+0x11>
    2560:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = MachineSetupData.VendPrice7[0];
    2562:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <MachineSetupData+0x12>
    2566:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.VendPrice7[1];
    2568:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <MachineSetupData+0x13>
    256c:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = MachineSetupData.VendPrice8[0];
    256e:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <MachineSetupData+0x14>
    2572:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = MachineSetupData.VendPrice8[1];
    2574:	80 91 bb 09 	lds	r24, 0x09BB	; 0x8009bb <MachineSetupData+0x15>
    2578:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.ModifiedCycleVendPrice[0];
    257a:	20 91 e1 09 	lds	r18, 0x09E1	; 0x8009e1 <MachineSetupData+0x3b>
    257e:	2a 8f       	std	Y+26, r18	; 0x1a
			temp[26] = MachineSetupData.ModifiedCycleVendPrice[1];
    2580:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <MachineSetupData+0x3c>
    2584:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.ModifiedCycleVendPrice[0];
    2586:	2c 8f       	std	Y+28, r18	; 0x1c
			temp[28] = MachineSetupData.ModifiedCycleVendPrice[1];
    2588:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.MediumCycle_vendPrice[0];
    258a:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <MachineSetupData+0x1c>
    258e:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.MediumCycle_vendPrice[1];
    2590:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <MachineSetupData+0x1d>
    2594:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = MachineSetupData.HeavyCycle_vendPrice[0];
    2596:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <MachineSetupData+0x16>
    259a:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = MachineSetupData.HeavyCycle_vendPrice[1];
    259c:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <MachineSetupData+0x17>
    25a0:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = MachineSetupData.MediumCycle_option;
    25a2:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <MachineSetupData+0x1e>
    25a6:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = MachineSetupData.HeavyCycle_option;
    25a8:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <MachineSetupData+0x18>
    25ac:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = MachineSetupData.CycleModifierExtraWashTime;
    25ae:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <MachineSetupData+0x43>
    25b2:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = MachineSetupData.DefaultCycle;
    25b4:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0x33>
    25b8:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = MachineSetupData.AudioSetting;
    25ba:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x41>
    25be:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = MachineSetupData.CardReaderDisplayControl;
    25c0:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x42>
    25c4:	8f a3       	std	Y+39, r24	; 0x27
		}
		if ( deviceStatus.deviceType[0] == PROGRAMMING_DATA_DRYER || deviceStatus.deviceType[0] == PROGRAMMING_DATA_TUMBLER )
    25c6:	88 ed       	ldi	r24, 0xD8	; 216
    25c8:	89 0f       	add	r24, r25
    25ca:	82 30       	cpi	r24, 0x02	; 2
    25cc:	08 f0       	brcs	.+2      	; 0x25d0 <setupMachine+0x2d6>
    25ce:	95 c0       	rjmp	.+298    	; 0x26fa <setupMachine+0x400>
		{
			temp[0] = QDT_PROGRAMMING_DATA_SIZE;
    25d0:	81 e2       	ldi	r24, 0x21	; 33
    25d2:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];
    25d4:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = MachineSetupData.ProductByte[0];
    25d6:	80 91 a7 09 	lds	r24, 0x09A7	; 0x8009a7 <MachineSetupData+0x1>
    25da:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = MachineSetupData.ProductByte[1];
    25dc:	80 91 a8 09 	lds	r24, 0x09A8	; 0x8009a8 <MachineSetupData+0x2>
    25e0:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = MachineSetupData.ProductByte[2];
    25e2:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <MachineSetupData+0x3>
    25e6:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = MachineSetupData.ControlConfig;
    25e8:	80 91 d8 09 	lds	r24, 0x09D8	; 0x8009d8 <MachineSetupData+0x32>
    25ec:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = 0;
    25ee:	1f 82       	std	Y+7, r1	; 0x07
			temp[7] = MachineSetupData.VendPrice[0]; //heat vend price
    25f0:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    25f4:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = MachineSetupData.VendPrice[1];
    25f6:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    25fa:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = MachineSetupData.VendPrice1[0];// no heat vend price
    25fc:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <MachineSetupData+0x6>
    2600:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = MachineSetupData.VendPrice1[1];
    2602:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <MachineSetupData+0x7>
    2606:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = MachineSetupData.VendPrice2[0]; //topoff vend price
    2608:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <MachineSetupData+0x8>
    260c:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = MachineSetupData.VendPrice2[1];
    260e:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <MachineSetupData+0x9>
    2612:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = MachineSetupData.CycleLength; //heat cycle time in minutes
    2614:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0x31>
    2618:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = 0; //heat cycle time in seconds
    261a:	1f 86       	std	Y+15, r1	; 0x0f
			temp[15] = MachineSetupData.CycleLength; //no heat cycle time in minutes
    261c:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = 0; //no heat cycle time in seconds
    261e:	19 8a       	std	Y+17, r1	; 0x11
			temp[17] = MachineSetupData.CoolDownTime;
    2620:	90 91 da 09 	lds	r25, 0x09DA	; 0x8009da <MachineSetupData+0x34>
    2624:	9a 8b       	std	Y+18, r25	; 0x12
			temp[18] = MachineSetupData.CoolDownTime;
    2626:	9b 8b       	std	Y+19, r25	; 0x13
			temp[19] = MachineSetupData.CoolDownTime;
    2628:	9c 8b       	std	Y+20, r25	; 0x14
			temp[20] = MachineSetupData.CoolDownTime;
    262a:	9d 8b       	std	Y+21, r25	; 0x15
			temp[21] = MachineSetupData.TopoffOn;
    262c:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <MachineSetupData+0x3d>
    2630:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = MachineSetupData.TopoffTime;
    2632:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <MachineSetupData+0x3e>
    2636:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = 0; //seconds
    2638:	18 8e       	std	Y+24, r1	; 0x18
			temp[24] = MachineSetupData.HighTempSetting;
    263a:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <MachineSetupData+0x37>
    263e:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = MachineSetupData.MediumTempSetting;
    2640:	80 91 de 09 	lds	r24, 0x09DE	; 0x8009de <MachineSetupData+0x38>
    2644:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = MachineSetupData.LowTempSetting;
    2646:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <MachineSetupData+0x39>
    264a:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = MachineSetupData.DelicateTempSetting;
    264c:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <MachineSetupData+0x3a>
    2650:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = MachineSetupData.DefaultCycle;
    2652:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0x33>
    2656:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = MachineSetupData.AudioSetting;
    2658:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <MachineSetupData+0x41>
    265c:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = MachineSetupData.CardReaderDisplayControl;
    265e:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <MachineSetupData+0x42>
    2662:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = 0; //fahrenheit
    2664:	18 a2       	std	Y+32, r1	; 0x20
			temp[32] = 1; //display minutes only
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = 0; //disable reversing mode
    266a:	1a a2       	std	Y+34, r1	; 0x22
    266c:	46 c0       	rjmp	.+140    	; 0x26fa <setupMachine+0x400>
		}		
	}
	else if( deviceStatus.deviceType[1] == MDC_SERIES /*|| MdcStatus.MachineType[1] == QUANTUM_SERIES */)
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	09 f0       	breq	.+2      	; 0x2674 <setupMachine+0x37a>
    2672:	43 c0       	rjmp	.+134    	; 0x26fa <setupMachine+0x400>
	{
		temp[0] = PROGRAMMING_DATA_SIZE;
    2674:	8b e2       	ldi	r24, 0x2B	; 43
    2676:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];
    2678:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <deviceStatus>
    267c:	8a 83       	std	Y+2, r24	; 0x02
		temp[2] = MachineSetupData.VendPrice[0];
    267e:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <MachineSetupData+0x4>
    2682:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = MachineSetupData.VendPrice[1];
    2684:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    2688:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = MachineSetupData.Coin1[0];
    268a:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <MachineSetupData+0x2b>
    268e:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = MachineSetupData.Coin1[1];	
    2690:	80 91 d2 09 	lds	r24, 0x09D2	; 0x8009d2 <MachineSetupData+0x2c>
    2694:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = MachineSetupData.Coin2[0];
    2696:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <MachineSetupData+0x2d>
    269a:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = MachineSetupData.Coin2[1];	
    269c:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <MachineSetupData+0x2e>
    26a0:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = MachineSetupData.StartPulse[0];
    26a2:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <MachineSetupData+0x2f>
    26a6:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = MachineSetupData.StartPulse[1];
    26a8:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <MachineSetupData+0x30>
    26ac:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = MachineSetupData.CycleLength;
    26ae:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <MachineSetupData+0x31>
    26b2:	8b 87       	std	Y+11, r24	; 0x0b
	
		if(MdcStatus.MachineType[0] == PROGRAMMING_DATA_DRYER || MdcStatus.MachineType[0] == PROGRAMMING_DATA_TUMBLER)
    26b4:	90 91 fd 0a 	lds	r25, 0x0AFD	; 0x800afd <MdcStatus>
    26b8:	98 52       	subi	r25, 0x28	; 40
    26ba:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <MachineSetupData+0x33>
    26be:	20 91 d8 09 	lds	r18, 0x09D8	; 0x8009d8 <MachineSetupData+0x32>
    26c2:	92 30       	cpi	r25, 0x02	; 2
    26c4:	c0 f4       	brcc	.+48     	; 0x26f6 <setupMachine+0x3fc>
		{
			temp[11] = MachineSetupData.CoolDownTime;
    26c6:	90 91 da 09 	lds	r25, 0x09DA	; 0x8009da <MachineSetupData+0x34>
    26ca:	9c 87       	std	Y+12, r25	; 0x0c
			temp[12] = MachineSetupData.Coin1TopoffTime;
    26cc:	90 91 db 09 	lds	r25, 0x09DB	; 0x8009db <MachineSetupData+0x35>
    26d0:	9d 87       	std	Y+13, r25	; 0x0d
			temp[13] = MachineSetupData.Coin2TopoffTime;
    26d2:	90 91 dc 09 	lds	r25, 0x09DC	; 0x8009dc <MachineSetupData+0x36>
    26d6:	9e 87       	std	Y+14, r25	; 0x0e
			temp[14] = MachineSetupData.HighTempSetting;
    26d8:	90 91 dd 09 	lds	r25, 0x09DD	; 0x8009dd <MachineSetupData+0x37>
    26dc:	9f 87       	std	Y+15, r25	; 0x0f
			temp[15] = MachineSetupData.MediumTempSetting;
    26de:	90 91 de 09 	lds	r25, 0x09DE	; 0x8009de <MachineSetupData+0x38>
    26e2:	98 8b       	std	Y+16, r25	; 0x10
			temp[16] = MachineSetupData.LowTempSetting;
    26e4:	90 91 df 09 	lds	r25, 0x09DF	; 0x8009df <MachineSetupData+0x39>
    26e8:	99 8b       	std	Y+17, r25	; 0x11
			temp[17] = MachineSetupData.DelicateTempSetting;
    26ea:	90 91 e0 09 	lds	r25, 0x09E0	; 0x8009e0 <MachineSetupData+0x3a>
    26ee:	9a 8b       	std	Y+18, r25	; 0x12
			temp[18] = MachineSetupData.ControlConfig;
    26f0:	2b 8b       	std	Y+19, r18	; 0x13
			temp[19] = MachineSetupData.DefaultCycle;
    26f2:	8c 8b       	std	Y+20, r24	; 0x14
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <setupMachine+0x400>
		}
		else
		{
			temp[11] = MachineSetupData.ControlConfig;
    26f6:	2c 87       	std	Y+12, r18	; 0x0c
			temp[12] = MachineSetupData.DefaultCycle;
    26f8:	8d 87       	std	Y+13, r24	; 0x0d
		}
	}
	return (sendSQData(temp) );		
    26fa:	cf 01       	movw	r24, r30
    26fc:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
}
    2700:	e2 96       	adiw	r28, 0x32	; 50
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <startMachineCycle>:

bool startMachineCycle()
{
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	00 d0       	rcall	.+0      	; 0x2718 <startMachineCycle+0x6>
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
	u8 temp[2];
	
	temp[0] = MACHINE_START_PACKET_SIZE;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = MACHINE_START_COMMAND;
    2720:	88 e4       	ldi	r24, 0x48	; 72
    2722:	8a 83       	std	Y+2, r24	; 0x02
	
	return (sendSQData(temp) );	
    2724:	ce 01       	movw	r24, r28
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <sendSQData>
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <initReader>:
*
*/
void initReader(void)
{

halGetEeprom(READER_STATE_ADDR, READER_STATE_FLAG_SIZE, (u8*)&ReaderStateFlag); 
    2736:	44 e2       	ldi	r20, 0x24	; 36
    2738:	59 e0       	ldi	r21, 0x09	; 9
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	82 e2       	ldi	r24, 0x22	; 34
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
halGetEeprom(MACHINE_TYPE_ADDR, MACHINE_TYPE_SIZE, (u8*)&deviceStatus.deviceType);
    2744:	4a ef       	ldi	r20, 0xFA	; 250
    2746:	5a e0       	ldi	r21, 0x0A	; 10
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	8e e1       	ldi	r24, 0x1E	; 30
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
	
ReaderSetup.customerId = 0;
    2752:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <ReaderSetup>
    2756:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <ReaderSetup+0x1>
    275a:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <ReaderSetup+0x2>
    275e:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <ReaderSetup+0x3>
ReaderSetup.manufacturerId = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	90 93 f5 09 	sts	0x09F5, r25	; 0x8009f5 <ReaderSetup+0x5>
    276a:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <ReaderSetup+0x4>
ReaderSetup.locationId = 1;
    276e:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <ReaderSetup+0x7>
    2772:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <ReaderSetup+0x6>
//ReaderSetup.MaxOfflineTransaction = MAX_NUM_OFFLINE_TRANS; // to become variable once setup is done.
ReaderStateFlag.Busy = false;
    2776:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    277a:	8f 7b       	andi	r24, 0xBF	; 191
    277c:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
//check setup status then set reader state flag
	
#if (DEVICE_CONNECTED == MDC_MACHINE)
	//Init machine variables

	if (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE)
    2780:	81 fd       	sbrc	r24, 1
    2782:	47 c0       	rjmp	.+142    	; 0x2812 <initReader+0xdc>
	{
        //a valid reader ID has been detected. check for valid setup
        getSQSetupData();  
    2784:	0e 94 86 0c 	call	0x190c	; 0x190c <getSQSetupData>
		ReaderStateFlag.ValidateSetup = VALIDATE_READER_SETUP;
    2788:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    278c:	84 60       	ori	r24, 0x04	; 4
    278e:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
		halGetEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction);
    2792:	48 ef       	ldi	r20, 0xF8	; 248
    2794:	59 e0       	ldi	r21, 0x09	; 9
    2796:	61 e0       	ldi	r22, 0x01	; 1
    2798:	81 e6       	ldi	r24, 0x61	; 97
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
		if (ReaderSetup.maxOfflineTransaction)
    27a0:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <ReaderSetup+0x8>
    27a4:	88 23       	and	r24, r24
    27a6:	c9 f0       	breq	.+50     	; 0x27da <initReader+0xa4>
		{
			ReaderStateFlag.EnableOfflineTransaction = true;
    27a8:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    27ac:	88 60       	ori	r24, 0x08	; 8
    27ae:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    27b2:	49 ef       	ldi	r20, 0xF9	; 249
    27b4:	59 e0       	ldi	r21, 0x09	; 9
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
    27c0:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    27c4:	8f 3f       	cpi	r24, 0xFF	; 255
    27c6:	49 f4       	brne	.+18     	; 0x27da <initReader+0xa4>
			{
				ReaderSetup.numOfSavedTransactions = 0;
    27c8:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <ReaderSetup+0x9>
				halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    27cc:	49 ef       	ldi	r20, 0xF9	; 249
    27ce:	59 e0       	ldi	r21, 0x09	; 9
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
			}
			 
		}
		//clear buffers
		memset(ReaderSetup.machineLabel,0,MACHINE_LABEL_SIZE+1);
    27da:	8b e0       	ldi	r24, 0x0B	; 11
    27dc:	ed e2       	ldi	r30, 0x2D	; 45
    27de:	fa e0       	ldi	r31, 0x0A	; 10
    27e0:	df 01       	movw	r26, r30
    27e2:	1d 92       	st	X+, r1
    27e4:	8a 95       	dec	r24
    27e6:	e9 f7       	brne	.-6      	; 0x27e2 <initReader+0xac>
		memset(ReaderSetup.machineDescription,0,MACHINE_NAME_SIZE+1);
    27e8:	83 e3       	ldi	r24, 0x33	; 51
    27ea:	ea ef       	ldi	r30, 0xFA	; 250
    27ec:	f9 e0       	ldi	r31, 0x09	; 9
    27ee:	df 01       	movw	r26, r30
    27f0:	1d 92       	st	X+, r1
    27f2:	8a 95       	dec	r24
    27f4:	e9 f7       	brne	.-6      	; 0x27f0 <initReader+0xba>
		halGetEeprom(MACHINE_LABEL_ADDR, MACHINE_LABEL_SIZE, (u8*)&ReaderSetup.machineLabel);
    27f6:	4d e2       	ldi	r20, 0x2D	; 45
    27f8:	5a e0       	ldi	r21, 0x0A	; 10
    27fa:	6a e0       	ldi	r22, 0x0A	; 10
    27fc:	8c e6       	ldi	r24, 0x6C	; 108
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
		halGetEeprom(MACHINE_DESCRIPTION_ADDR, MACHINE_NAME_SIZE, (u8*)&ReaderSetup.machineDescription);
    2804:	4a ef       	ldi	r20, 0xFA	; 250
    2806:	59 e0       	ldi	r21, 0x09	; 9
    2808:	62 e3       	ldi	r22, 0x32	; 50
    280a:	87 e7       	ldi	r24, 0x77	; 119
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <halGetEeprom>
	}
	else{
		SetDefaultMachineSetup();
    2812:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <SetDefaultMachineSetup>

00002816 <storeOfflineTransaction>:
Store transactions,that occur when server is off line, in EEPROM.
*/

#if(DEVICE_CONNECTED == MDC_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	67 97       	sbiw	r28, 0x17	; 23
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
	u8 addr[2];
	u16 temp;
	structTransaction OfflineTransaction;
	
	temp  = (u16)OFFLINE_TRANSACTION_ADDR_START;
	addr[1] = temp >> 8;
    282a:	21 e0       	ldi	r18, 0x01	; 1
    282c:	2f 8b       	std	Y+23, r18	; 0x17
	addr[0] = temp;
    282e:	38 e1       	ldi	r19, 0x18	; 24
    2830:	3e 8b       	std	Y+22, r19	; 0x16
	
	OfflineTransaction.CardId		= cardNum;	
    2832:	6a 87       	std	Y+10, r22	; 0x0a
    2834:	7b 87       	std	Y+11, r23	; 0x0b
    2836:	8c 87       	std	Y+12, r24	; 0x0c
    2838:	9d 87       	std	Y+13, r25	; 0x0d
	OfflineTransaction.LocationId	= ReaderSetup.locationId;	
    283a:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <ReaderSetup+0x6>
    283e:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <ReaderSetup+0x7>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
	OfflineTransaction.MachineId[0] = MdcStatus.MachineType[0];
    2846:	80 91 fd 0a 	lds	r24, 0x0AFD	; 0x800afd <MdcStatus>
    284a:	8b 83       	std	Y+3, r24	; 0x03
	OfflineTransaction.MachineId[1] = MdcStatus.MachineType[1];
    284c:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <MdcStatus+0x1>
    2850:	8c 83       	std	Y+4, r24	; 0x04
	OfflineTransaction.CycleType	= MdcStatus.CycleType;
    2852:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <MdcStatus+0x4>
    2856:	8f 83       	std	Y+7, r24	; 0x07
	
	OfflineTransaction.ManufactureId = ReaderSetup.manufacturerId;
    2858:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <ReaderSetup+0x4>
    285c:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <ReaderSetup+0x5>
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
	OfflineTransaction.vendPrice = MachineSetupData.VendPrice[0];
	OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | MachineSetupData.VendPrice[1];
    2864:	80 91 ab 09 	lds	r24, 0x09AB	; 0x8009ab <MachineSetupData+0x5>
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	99 87       	std	Y+9, r25	; 0x09
    286c:	88 87       	std	Y+8, r24	; 0x08
	
	OfflineTransaction.Date[0] = 0x00;
    286e:	1e 86       	std	Y+14, r1	; 0x0e
	OfflineTransaction.Date[1] = 0x00;
    2870:	1f 86       	std	Y+15, r1	; 0x0f
	OfflineTransaction.Date[2] = 0x00;
    2872:	18 8a       	std	Y+16, r1	; 0x10
	OfflineTransaction.Date[3] = 0x00;
    2874:	19 8a       	std	Y+17, r1	; 0x11
	
	OfflineTransaction.Time[0] = 0x00;	
    2876:	1a 8a       	std	Y+18, r1	; 0x12
	OfflineTransaction.Time[1] = 0x00;	
    2878:	1b 8a       	std	Y+19, r1	; 0x13
	OfflineTransaction.Time[2] = 0x00;
    287a:	1c 8a       	std	Y+20, r1	; 0x14
	
	OfflineTransaction.isOffline = true;
    287c:	2d 8b       	std	Y+21, r18	; 0x15
	//get number of stored records
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    287e:	49 ef       	ldi	r20, 0xF9	; 249
    2880:	59 e0       	ldi	r21, 0x09	; 9
    2882:	61 e0       	ldi	r22, 0x01	; 1
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
	//store structure in the next EEPROM record address
	if ((ReaderSetup.numOfSavedTransactions == 0xff) || (ReaderSetup.numOfSavedTransactions < ReaderSetup.maxOfflineTransaction))
    288c:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    2890:	8f 3f       	cpi	r24, 0xFF	; 255
    2892:	29 f0       	breq	.+10     	; 0x289e <storeOfflineTransaction+0x88>
    2894:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <ReaderSetup+0x8>
    2898:	89 17       	cp	r24, r25
    289a:	08 f0       	brcs	.+2      	; 0x289e <storeOfflineTransaction+0x88>
    289c:	48 c0       	rjmp	.+144    	; 0x292e <storeOfflineTransaction+0x118>
	{	
		if (ReaderSetup.numOfSavedTransactions == 0xff || ReaderSetup.numOfSavedTransactions == 0x00)
    289e:	81 50       	subi	r24, 0x01	; 1
    28a0:	8e 3f       	cpi	r24, 0xFE	; 254
    28a2:	50 f0       	brcs	.+20     	; 0x28b8 <storeOfflineTransaction+0xa2>
		{
			ReaderSetup.numOfSavedTransactions = 0;
    28a4:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <ReaderSetup+0x9>
			//halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR,1, &num_of_trans);
			//store first transaction records address.
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);
    28a8:	ae 01       	movw	r20, r28
    28aa:	4a 5e       	subi	r20, 0xEA	; 234
    28ac:	5f 4f       	sbci	r21, 0xFF	; 255
    28ae:	62 e0       	ldi	r22, 0x02	; 2
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
/*		else{
			//start at end of existing records
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);  
		}	*/		
					
		halPutEeprom((u8*)(OFFLINE_TRANSACTION_ADDR_START + (ReaderSetup.numOfSavedTransactions * OFFLINE_TRANSACTION_NUM_BYTE)), OFFLINE_TRANSACTION_NUM_BYTE, (u8*)&OfflineTransaction);
    28b8:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    28bc:	25 e1       	ldi	r18, 0x15	; 21
    28be:	82 9f       	mul	r24, r18
    28c0:	c0 01       	movw	r24, r0
    28c2:	11 24       	eor	r1, r1
    28c4:	ae 01       	movw	r20, r28
    28c6:	4f 5f       	subi	r20, 0xFF	; 255
    28c8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ca:	65 e1       	ldi	r22, 0x15	; 21
    28cc:	88 5e       	subi	r24, 0xE8	; 232
    28ce:	9e 4f       	sbci	r25, 0xFE	; 254
    28d0:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		ReaderSetup.numOfSavedTransactions++;
    28d4:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    28d8:	8f 5f       	subi	r24, 0xFF	; 255
    28da:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <ReaderSetup+0x9>
		halPutEeprom((u8*)OFFLINE_TRANSACTION_RECORD_ADDR,1,&ReaderSetup.numOfSavedTransactions);
    28de:	49 ef       	ldi	r20, 0xF9	; 249
    28e0:	59 e0       	ldi	r21, 0x09	; 9
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		if(ReaderStateFlag.OfflineTransactionExist == false)
    28ec:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    28f0:	85 fd       	sbrc	r24, 5
    28f2:	0a c0       	rjmp	.+20     	; 0x2908 <storeOfflineTransaction+0xf2>
		{
			ReaderStateFlag.OfflineTransactionExist = true;
    28f4:	80 62       	ori	r24, 0x20	; 32
    28f6:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);	
    28fa:	44 e2       	ldi	r20, 0x24	; 36
    28fc:	59 e0       	ldi	r21, 0x09	; 9
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	82 e2       	ldi	r24, 0x22	; 34
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		}
		if (ReaderSetup.numOfSavedTransactions == ReaderSetup.maxOfflineTransaction)
    2908:	90 91 f9 09 	lds	r25, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    290c:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <ReaderSetup+0x8>
    2910:	98 13       	cpse	r25, r24
    2912:	23 c0       	rjmp	.+70     	; 0x295a <storeOfflineTransaction+0x144>
		{
			ReaderStateFlag.MaxNumTransReached = true;
    2914:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
    2918:	80 61       	ori	r24, 0x10	; 16
    291a:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);
    291e:	44 e2       	ldi	r20, 0x24	; 36
    2920:	59 e0       	ldi	r21, 0x09	; 9
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	82 e2       	ldi	r24, 0x22	; 34
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
    292c:	16 c0       	rjmp	.+44     	; 0x295a <storeOfflineTransaction+0x144>
		}
	}
	else if(ReaderSetup.numOfSavedTransactions >= ReaderSetup.maxOfflineTransaction){
		halGetEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
    292e:	44 e2       	ldi	r20, 0x24	; 36
    2930:	59 e0       	ldi	r21, 0x09	; 9
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	82 e2       	ldi	r24, 0x22	; 34
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
		ReaderStateFlag.EnableOfflineTransaction = false; // stop conducting off line transaction, EEPROM is full.
    293c:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = true;
    2940:	87 7f       	andi	r24, 0xF7	; 247
    2942:	80 61       	ori	r24, 0x10	; 16
    2944:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    2948:	44 e2       	ldi	r20, 0x24	; 36
    294a:	59 e0       	ldi	r21, 0x09	; 9
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	82 e2       	ldi	r24, 0x22	; 34
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		return_code = 0;
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	01 c0       	rjmp	.+2      	; 0x295c <storeOfflineTransaction+0x146>
*/

#if(DEVICE_CONNECTED == MDC_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
	u8 return_code = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
		ReaderStateFlag.MaxNumTransReached = true;
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
		return_code = 0;
	}
	return return_code;	
}
    295c:	67 96       	adiw	r28, 0x17	; 23
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	08 95       	ret

0000296e <sendStoredTransaction>:
	
	return count;
}
*/
u8 sendStoredTransaction(void)
{	
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	67 97       	sbiw	r28, 0x17	; 23
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
	//get total number of stored off line transactions from EEPROM.
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    2982:	49 ef       	ldi	r20, 0xF9	; 249
    2984:	59 e0       	ldi	r21, 0x09	; 9
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
	
	//build buffer of transactions to be transmitted.
	if (ReaderSetup.numOfSavedTransactions > 0 && ReaderSetup.numOfSavedTransactions < 0xFF) // valid number of transactions stored, prepare to send to BOW
    2990:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    2994:	81 50       	subi	r24, 0x01	; 1
    2996:	8e 3f       	cpi	r24, 0xFE	; 254
    2998:	78 f5       	brcc	.+94     	; 0x29f8 <sendStoredTransaction+0x8a>
		structTransaction record;
		u16 addr;
		
		//send data to BOW

		halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);		
    299a:	ae 01       	movw	r20, r28
    299c:	4a 5e       	subi	r20, 0xEA	; 234
    299e:	5f 4f       	sbci	r21, 0xFF	; 255
    29a0:	62 e0       	ldi	r22, 0x02	; 2
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
		halGetEeprom((void*)addr,OFFLINE_TRANSACTION_NUM_BYTE,(u8*)&record); // get transaction record
    29aa:	ae 01       	movw	r20, r28
    29ac:	4f 5f       	subi	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	65 e1       	ldi	r22, 0x15	; 21
    29b2:	8e 89       	ldd	r24, Y+22	; 0x16
    29b4:	9f 89       	ldd	r25, Y+23	; 0x17
    29b6:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>
			
		if( sendCCTransaction(&record) )
    29ba:	ce 01       	movw	r24, r28
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <sendCCTransaction>
    29c2:	88 23       	and	r24, r24
    29c4:	c9 f0       	breq	.+50     	; 0x29f8 <sendStoredTransaction+0x8a>
		{//update current record address
			addr = addr + OFFLINE_TRANSACTION_NUM_BYTE;
    29c6:	8e 89       	ldd	r24, Y+22	; 0x16
    29c8:	9f 89       	ldd	r25, Y+23	; 0x17
    29ca:	45 96       	adiw	r24, 0x15	; 21
    29cc:	9f 8b       	std	Y+23, r25	; 0x17
    29ce:	8e 8b       	std	Y+22, r24	; 0x16
			
			ReaderSetup.numOfSavedTransactions--;
    29d0:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    29d4:	81 50       	subi	r24, 0x01	; 1
    29d6:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <ReaderSetup+0x9>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);
    29da:	ae 01       	movw	r20, r28
    29dc:	4a 5e       	subi	r20, 0xEA	; 234
    29de:	5f 4f       	sbci	r21, 0xFF	; 255
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    29ea:	49 ef       	ldi	r20, 0xF9	; 249
    29ec:	59 e0       	ldi	r21, 0x09	; 9
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
		}
	}
	if (ReaderSetup.numOfSavedTransactions == 0)
    29f8:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    29fc:	81 11       	cpse	r24, r1
    29fe:	0d c0       	rjmp	.+26     	; 0x2a1a <sendStoredTransaction+0xac>
	{
		ReaderStateFlag.OfflineTransactionExist = false;
    2a00:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = false;
    2a04:	8f 7d       	andi	r24, 0xDF	; 223
    2a06:	8f 7e       	andi	r24, 0xEF	; 239
    2a08:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    2a0c:	44 e2       	ldi	r20, 0x24	; 36
    2a0e:	59 e0       	ldi	r21, 0x09	; 9
    2a10:	61 e0       	ldi	r22, 0x01	; 1
    2a12:	82 e2       	ldi	r24, 0x22	; 34
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <halPutEeprom>
	}
	
	return ReaderSetup.numOfSavedTransactions;
}
    2a1a:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <ReaderSetup+0x9>
    2a1e:	67 96       	adiw	r28, 0x17	; 23
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

00002a30 <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	1f 92       	push	r1
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	64 e6       	ldi	r22, 0x64	; 100
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__udivmodhi4>
    2a44:	16 2f       	mov	r17, r22
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	8a e2       	ldi	r24, 0x2A	; 42
    2a4c:	79 83       	std	Y+1, r23	; 0x01
    2a4e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2a52:	66 ea       	ldi	r22, 0xA6	; 166
    2a54:	8b e2       	ldi	r24, 0x2B	; 43
    2a56:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2a5a:	8a e2       	ldi	r24, 0x2A	; 42
    2a5c:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2a60:	80 7f       	andi	r24, 0xF0	; 240
    2a62:	68 2f       	mov	r22, r24
    2a64:	62 60       	ori	r22, 0x02	; 2
    2a66:	8a e2       	ldi	r24, 0x2A	; 42
    2a68:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2a6c:	61 2f       	mov	r22, r17
    2a6e:	8d e2       	ldi	r24, 0x2D	; 45
    2a70:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2a74:	79 81       	ldd	r23, Y+1	; 0x01
    2a76:	67 2f       	mov	r22, r23
    2a78:	8c e2       	ldi	r24, 0x2C	; 44
    2a7a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0f 90       	pop	r0
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	08 95       	ret

00002a8c <Rc522Init>:
    2a8c:	6f e0       	ldi	r22, 0x0F	; 15
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2a94:	60 e4       	ldi	r22, 0x40	; 64
    2a96:	85 e1       	ldi	r24, 0x15	; 21
    2a98:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2a9c:	48 e0       	ldi	r20, 0x08	; 8
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	88 e0       	ldi	r24, 0x08	; 8
    2aa2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2aa6:	82 e1       	ldi	r24, 0x12	; 18
    2aa8:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2aac:	88 70       	andi	r24, 0x08	; 8
    2aae:	68 2f       	mov	r22, r24
    2ab0:	60 68       	ori	r22, 0x80	; 128
    2ab2:	82 e1       	ldi	r24, 0x12	; 18
    2ab4:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2ab8:	83 e1       	ldi	r24, 0x13	; 19
    2aba:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2abe:	88 70       	andi	r24, 0x08	; 8
    2ac0:	68 2f       	mov	r22, r24
    2ac2:	60 68       	ori	r22, 0x80	; 128
    2ac4:	83 e1       	ldi	r24, 0x13	; 19
    2ac6:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2aca:	6d e6       	ldi	r22, 0x6D	; 109
    2acc:	89 e1       	ldi	r24, 0x19	; 25
    2ace:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2ad2:	68 e4       	ldi	r22, 0x48	; 72
    2ad4:	86 e2       	ldi	r24, 0x26	; 38
    2ad6:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2ada:	65 e5       	ldi	r22, 0x55	; 85
    2adc:	88 e1       	ldi	r24, 0x18	; 24
    2ade:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2ae2:	66 e2       	ldi	r22, 0x26	; 38
    2ae4:	84 e2       	ldi	r24, 0x24	; 36
    2ae6:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2aea:	64 ef       	ldi	r22, 0xF4	; 244
    2aec:	87 e2       	ldi	r24, 0x27	; 39
    2aee:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2af2:	88 e8       	ldi	r24, 0x88	; 136
    2af4:	93 e1       	ldi	r25, 0x13	; 19
    2af6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    2afa:	43 e0       	ldi	r20, 0x03	; 3
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	84 e1       	ldi	r24, 0x14	; 20
    2b00:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2b04:	40 e4       	ldi	r20, 0x40	; 64
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	8c e0       	ldi	r24, 0x0C	; 12
    2b0a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2b0e:	84 e0       	ldi	r24, 0x04	; 4
    2b10:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2b14:	80 ff       	sbrs	r24, 0
    2b16:	fb cf       	rjmp	.-10     	; 0x2b0e <Rc522Init+0x82>
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	84 e0       	ldi	r24, 0x04	; 4
    2b1c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b20:	88 e8       	ldi	r24, 0x88	; 136
    2b22:	93 e1       	ldi	r25, 0x13	; 19
    2b24:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    2b28:	6a e1       	ldi	r22, 0x1A	; 26
    2b2a:	8b e0       	ldi	r24, 0x0B	; 11
    2b2c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b30:	60 e1       	ldi	r22, 0x10	; 16
    2b32:	86 e1       	ldi	r24, 0x16	; 22
    2b34:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b38:	64 e8       	ldi	r22, 0x84	; 132
    2b3a:	87 e1       	ldi	r24, 0x17	; 23
    2b3c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b48:	80 ed       	ldi	r24, 0xD0	; 208
    2b4a:	97 e0       	ldi	r25, 0x07	; 7
    2b4c:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <SetTimeOut>

00002b50 <M522PcdCmd>:
    2b50:	9f 92       	push	r9
    2b52:	af 92       	push	r10
    2b54:	bf 92       	push	r11
    2b56:	cf 92       	push	r12
    2b58:	df 92       	push	r13
    2b5a:	ef 92       	push	r14
    2b5c:	ff 92       	push	r15
    2b5e:	0f 93       	push	r16
    2b60:	1f 93       	push	r17
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	18 2f       	mov	r17, r24
    2b68:	7b 01       	movw	r14, r22
    2b6a:	ea 01       	movw	r28, r20
    2b6c:	62 e4       	ldi	r22, 0x42	; 66
    2b6e:	84 e0       	ldi	r24, 0x04	; 4
    2b70:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b7c:	60 e8       	ldi	r22, 0x80	; 128
    2b7e:	8a e0       	ldi	r24, 0x0A	; 10
    2b80:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2b8a:	68 2f       	mov	r22, r24
    2b8c:	60 7f       	andi	r22, 0xF0	; 240
    2b8e:	1c 30       	cpi	r17, 0x0C	; 12
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <M522PcdCmd+0x44>
    2b92:	6c 60       	ori	r22, 0x0C	; 12
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2b9a:	d0 93 7c 05 	sts	0x057C, r29	; 0x80057c <MpIsrInfo+0x1>
    2b9e:	c0 93 7b 05 	sts	0x057B, r28	; 0x80057b <MpIsrInfo>
    2ba2:	10 31       	cpi	r17, 0x10	; 16
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <M522PcdCmd+0x58>
    2ba6:	63 c0       	rjmp	.+198    	; 0x2c6e <M522PcdCmd+0x11e>
    2ba8:	81 2f       	mov	r24, r17
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	fc 01       	movw	r30, r24
    2bae:	ee 0f       	add	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	ed 5a       	subi	r30, 0xAD	; 173
    2bb4:	fa 4f       	sbci	r31, 0xFA	; 250
    2bb6:	c0 81       	ld	r28, Z
    2bb8:	d1 81       	ldd	r29, Z+1	; 0x01
    2bba:	fc 01       	movw	r30, r24
    2bbc:	ed 5b       	subi	r30, 0xBD	; 189
    2bbe:	fa 4f       	sbci	r31, 0xFA	; 250
    2bc0:	c0 80       	ld	r12, Z
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	ed 5c       	subi	r30, 0xCD	; 205
    2bc6:	fa 4f       	sbci	r31, 0xFA	; 250
    2bc8:	00 81       	ld	r16, Z
    2bca:	fc 01       	movw	r30, r24
    2bcc:	ed 5d       	subi	r30, 0xDD	; 221
    2bce:	fa 4f       	sbci	r31, 0xFA	; 250
    2bd0:	90 80       	ld	r9, Z
    2bd2:	20 97       	sbiw	r28, 0x00	; 0
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <M522PcdCmd+0x88>
    2bd6:	50 c0       	rjmp	.+160    	; 0x2c78 <M522PcdCmd+0x128>
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2bde:	68 2f       	mov	r22, r24
    2be0:	6c 29       	or	r22, r12
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2bee:	68 2f       	mov	r22, r24
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2bf6:	d1 2c       	mov	r13, r1
    2bf8:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <MpIsrInfo>
    2bfc:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <MpIsrInfo+0x1>
    2c00:	83 81       	ldd	r24, Z+3	; 0x03
    2c02:	d8 16       	cp	r13, r24
    2c04:	48 f4       	brcc	.+18     	; 0x2c18 <M522PcdCmd+0xc8>
    2c06:	f7 01       	movw	r30, r14
    2c08:	ed 0d       	add	r30, r13
    2c0a:	f1 1d       	adc	r31, r1
    2c0c:	60 81       	ld	r22, Z
    2c0e:	89 e0       	ldi	r24, 0x09	; 9
    2c10:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2c14:	d3 94       	inc	r13
    2c16:	f0 cf       	rjmp	.-32     	; 0x2bf8 <M522PcdCmd+0xa8>
    2c18:	1c 30       	cpi	r17, 0x0C	; 12
    2c1a:	31 f4       	brne	.+12     	; 0x2c28 <M522PcdCmd+0xd8>
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	8d e0       	ldi	r24, 0x0D	; 13
    2c22:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2c26:	09 c0       	rjmp	.+18     	; 0x2c3a <M522PcdCmd+0xea>
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2c2e:	80 7f       	andi	r24, 0xF0	; 240
    2c30:	68 2f       	mov	r22, r24
    2c32:	61 2b       	or	r22, r17
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2c3a:	aa 24       	eor	r10, r10
    2c3c:	a3 94       	inc	r10
    2c3e:	ba 2c       	mov	r11, r10
    2c40:	10 e0       	ldi	r17, 0x00	; 0
    2c42:	00 23       	and	r16, r16
    2c44:	71 f0       	breq	.+28     	; 0x2c62 <M522PcdCmd+0x112>
    2c46:	81 2f       	mov	r24, r17
    2c48:	80 23       	and	r24, r16
    2c4a:	59 f4       	brne	.+22     	; 0x2c62 <M522PcdCmd+0x112>
    2c4c:	84 e0       	ldi	r24, 0x04	; 4
    2c4e:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2c52:	18 2f       	mov	r17, r24
    2c54:	85 e0       	ldi	r24, 0x05	; 5
    2c56:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	a8 1a       	sub	r10, r24
    2c5e:	b1 08       	sbc	r11, r1
    2c60:	81 f7       	brne	.-32     	; 0x2c42 <M522PcdCmd+0xf2>
    2c62:	01 23       	and	r16, r17
    2c64:	11 70       	andi	r17, 0x01	; 1
    2c66:	c1 2f       	mov	r28, r17
    2c68:	e0 e0       	ldi	r30, 0x00	; 0
    2c6a:	de 2f       	mov	r29, r30
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <M522PcdCmd+0x128>
    2c6e:	91 2c       	mov	r9, r1
    2c70:	c1 2c       	mov	r12, r1
    2c72:	02 e4       	ldi	r16, 0x42	; 66
    2c74:	c3 e0       	ldi	r28, 0x03	; 3
    2c76:	d1 e0       	ldi	r29, 0x01	; 1
    2c78:	4c 2d       	mov	r20, r12
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	83 e0       	ldi	r24, 0x03	; 3
    2c88:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2c8c:	99 20       	and	r9, r9
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <M522PcdCmd+0x142>
    2c90:	7e c0       	rjmp	.+252    	; 0x2d8e <M522PcdCmd+0x23e>
    2c92:	20 97       	sbiw	r28, 0x00	; 0
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <M522PcdCmd+0x148>
    2c96:	7b c0       	rjmp	.+246    	; 0x2d8e <M522PcdCmd+0x23e>
    2c98:	c0 90 7b 05 	lds	r12, 0x057B	; 0x80057b <MpIsrInfo>
    2c9c:	d0 90 7c 05 	lds	r13, 0x057C	; 0x80057c <MpIsrInfo+0x1>
    2ca0:	8a e0       	ldi	r24, 0x0A	; 10
    2ca2:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2ca6:	f6 01       	movw	r30, r12
    2ca8:	84 83       	std	Z+4, r24	; 0x04
    2caa:	8c e0       	ldi	r24, 0x0C	; 12
    2cac:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2cb0:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <MpIsrInfo>
    2cb4:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <MpIsrInfo+0x1>
    2cb8:	87 70       	andi	r24, 0x07	; 7
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	96 83       	std	Z+6, r25	; 0x06
    2cbe:	85 83       	std	Z+5, r24	; 0x05
    2cc0:	86 e0       	ldi	r24, 0x06	; 6
    2cc2:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2cc6:	18 2f       	mov	r17, r24
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f4       	brne	.+2      	; 0x2cce <M522PcdCmd+0x17e>
    2ccc:	46 c0       	rjmp	.+140    	; 0x2d5a <M522PcdCmd+0x20a>
    2cce:	83 fd       	sbrc	r24, 3
    2cd0:	05 c0       	rjmp	.+10     	; 0x2cdc <M522PcdCmd+0x18c>
    2cd2:	81 ff       	sbrs	r24, 1
    2cd4:	05 c0       	rjmp	.+10     	; 0x2ce0 <M522PcdCmd+0x190>
    2cd6:	c3 e0       	ldi	r28, 0x03	; 3
    2cd8:	d0 e0       	ldi	r29, 0x00	; 0
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <M522PcdCmd+0x190>
    2cdc:	c6 e0       	ldi	r28, 0x06	; 6
    2cde:	d0 e0       	ldi	r29, 0x00	; 0
    2ce0:	10 fd       	sbrc	r17, 0
    2ce2:	22 c0       	rjmp	.+68     	; 0x2d28 <M522PcdCmd+0x1d8>
    2ce4:	14 fd       	sbrc	r17, 4
    2ce6:	23 c0       	rjmp	.+70     	; 0x2d2e <M522PcdCmd+0x1de>
    2ce8:	12 ff       	sbrs	r17, 2
    2cea:	19 c0       	rjmp	.+50     	; 0x2d1e <M522PcdCmd+0x1ce>
    2cec:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <MpIsrInfo>
    2cf0:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <MpIsrInfo+0x1>
    2cf4:	c4 81       	ldd	r28, Z+4	; 0x04
    2cf6:	c1 30       	cpi	r28, 0x01	; 1
    2cf8:	e9 f4       	brne	.+58     	; 0x2d34 <M522PcdCmd+0x1e4>
    2cfa:	85 81       	ldd	r24, Z+5	; 0x05
    2cfc:	96 81       	ldd	r25, Z+6	; 0x06
    2cfe:	8b 7f       	andi	r24, 0xFB	; 251
    2d00:	89 2b       	or	r24, r25
    2d02:	c1 f4       	brne	.+48     	; 0x2d34 <M522PcdCmd+0x1e4>
    2d04:	89 e0       	ldi	r24, 0x09	; 9
    2d06:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2d0a:	f7 01       	movw	r30, r14
    2d0c:	80 83       	st	Z, r24
    2d0e:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <MpIsrInfo>
    2d12:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <MpIsrInfo+0x1>
    2d16:	c4 83       	std	Z+4, r28	; 0x04
    2d18:	c2 e0       	ldi	r28, 0x02	; 2
    2d1a:	d2 e0       	ldi	r29, 0x02	; 2
    2d1c:	0d c0       	rjmp	.+26     	; 0x2d38 <M522PcdCmd+0x1e8>
    2d1e:	16 ff       	sbrs	r17, 6
    2d20:	0b c0       	rjmp	.+22     	; 0x2d38 <M522PcdCmd+0x1e8>
    2d22:	c4 e0       	ldi	r28, 0x04	; 4
    2d24:	de e7       	ldi	r29, 0x7E	; 126
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <M522PcdCmd+0x1e8>
    2d28:	cb e0       	ldi	r28, 0x0B	; 11
    2d2a:	d0 e0       	ldi	r29, 0x00	; 0
    2d2c:	05 c0       	rjmp	.+10     	; 0x2d38 <M522PcdCmd+0x1e8>
    2d2e:	c9 e0       	ldi	r28, 0x09	; 9
    2d30:	d0 e0       	ldi	r29, 0x00	; 0
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <M522PcdCmd+0x1e8>
    2d34:	c2 e0       	ldi	r28, 0x02	; 2
    2d36:	d0 e0       	ldi	r29, 0x00	; 0
    2d38:	17 fd       	sbrc	r17, 7
    2d3a:	05 c0       	rjmp	.+10     	; 0x2d46 <M522PcdCmd+0x1f6>
    2d3c:	20 97       	sbiw	r28, 0x00	; 0
    2d3e:	29 f4       	brne	.+10     	; 0x2d4a <M522PcdCmd+0x1fa>
    2d40:	cc e0       	ldi	r28, 0x0C	; 12
    2d42:	d0 e0       	ldi	r29, 0x00	; 0
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <M522PcdCmd+0x1fa>
    2d46:	cd e0       	ldi	r28, 0x0D	; 13
    2d48:	d0 e0       	ldi	r29, 0x00	; 0
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	86 e0       	ldi	r24, 0x06	; 6
    2d4e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2d52:	c2 30       	cpi	r28, 0x02	; 2
    2d54:	f2 e0       	ldi	r31, 0x02	; 2
    2d56:	df 07       	cpc	r29, r31
    2d58:	d1 f0       	breq	.+52     	; 0x2d8e <M522PcdCmd+0x23e>
    2d5a:	10 e0       	ldi	r17, 0x00	; 0
    2d5c:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <MpIsrInfo>
    2d60:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <MpIsrInfo+0x1>
    2d64:	84 81       	ldd	r24, Z+4	; 0x04
    2d66:	18 17       	cp	r17, r24
    2d68:	50 f4       	brcc	.+20     	; 0x2d7e <M522PcdCmd+0x22e>
    2d6a:	67 01       	movw	r12, r14
    2d6c:	c1 0e       	add	r12, r17
    2d6e:	d1 1c       	adc	r13, r1
    2d70:	89 e0       	ldi	r24, 0x09	; 9
    2d72:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    2d76:	f6 01       	movw	r30, r12
    2d78:	80 83       	st	Z, r24
    2d7a:	1f 5f       	subi	r17, 0xFF	; 255
    2d7c:	ef cf       	rjmp	.-34     	; 0x2d5c <M522PcdCmd+0x20c>
    2d7e:	25 81       	ldd	r18, Z+5	; 0x05
    2d80:	36 81       	ldd	r19, Z+6	; 0x06
    2d82:	23 2b       	or	r18, r19
    2d84:	21 f0       	breq	.+8      	; 0x2d8e <M522PcdCmd+0x23e>
    2d86:	88 23       	and	r24, r24
    2d88:	11 f0       	breq	.+4      	; 0x2d8e <M522PcdCmd+0x23e>
    2d8a:	81 50       	subi	r24, 0x01	; 1
    2d8c:	84 83       	std	Z+4, r24	; 0x04
    2d8e:	60 2f       	mov	r22, r16
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	85 e0       	ldi	r24, 0x05	; 5
    2d9a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2d9e:	60 e8       	ldi	r22, 0x80	; 128
    2da0:	8a e0       	ldi	r24, 0x0A	; 10
    2da2:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2da6:	61 e0       	ldi	r22, 0x01	; 1
    2da8:	84 e0       	ldi	r24, 0x04	; 4
    2daa:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	8d e0       	ldi	r24, 0x0D	; 13
    2db2:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2db6:	ce 01       	movw	r24, r28
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	bf 90       	pop	r11
    2dca:	af 90       	pop	r10
    2dcc:	9f 90       	pop	r9
    2dce:	08 95       	ret

00002dd0 <Request>:
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	18 2f       	mov	r17, r24
    2dd8:	eb 01       	movw	r28, r22
    2dda:	48 e0       	ldi	r20, 0x08	; 8
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	88 e0       	ldi	r24, 0x08	; 8
    2de0:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2de4:	60 e8       	ldi	r22, 0x80	; 128
    2de6:	8e e0       	ldi	r24, 0x0E	; 14
    2de8:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	82 e1       	ldi	r24, 0x12	; 18
    2df2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	83 e1       	ldi	r24, 0x13	; 19
    2dfc:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2e00:	67 e0       	ldi	r22, 0x07	; 7
    2e02:	8d e0       	ldi	r24, 0x0D	; 13
    2e04:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2e08:	10 92 49 0b 	sts	0x0B49, r1	; 0x800b49 <MInfo>
    2e0c:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <MInfo+0x1>
    2e10:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <MInfo+0x2>
    2e14:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <MInfo+0x4>
    2e18:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <MInfo+0x6>
    2e1c:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <MInfo+0x5>
    2e20:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <MInfo+0x7>
    2e24:	10 93 35 0b 	sts	0x0B35, r17	; 0x800b35 <SerBuffer>
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <MInfo+0x3>
    2e2e:	80 e9       	ldi	r24, 0x90	; 144
    2e30:	91 e0       	ldi	r25, 0x01	; 1
    2e32:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    2e36:	49 e4       	ldi	r20, 0x49	; 73
    2e38:	5b e0       	ldi	r21, 0x0B	; 11
    2e3a:	65 e3       	ldi	r22, 0x35	; 53
    2e3c:	7b e0       	ldi	r23, 0x0B	; 11
    2e3e:	8c e0       	ldi	r24, 0x0C	; 12
    2e40:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <M522PcdCmd>
    2e44:	88 23       	and	r24, r24
    2e46:	11 f0       	breq	.+4      	; 0x2e4c <Request+0x7c>
    2e48:	86 30       	cpi	r24, 0x06	; 6
    2e4a:	89 f4       	brne	.+34     	; 0x2e6e <Request+0x9e>
    2e4c:	90 91 4d 0b 	lds	r25, 0x0B4D	; 0x800b4d <MInfo+0x4>
    2e50:	92 30       	cpi	r25, 0x02	; 2
    2e52:	81 f4       	brne	.+32     	; 0x2e74 <Request+0xa4>
    2e54:	20 91 4e 0b 	lds	r18, 0x0B4E	; 0x800b4e <MInfo+0x5>
    2e58:	30 91 4f 0b 	lds	r19, 0x0B4F	; 0x800b4f <MInfo+0x6>
    2e5c:	23 2b       	or	r18, r19
    2e5e:	51 f4       	brne	.+20     	; 0x2e74 <Request+0xa4>
    2e60:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <SerBuffer>
    2e64:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <SerBuffer+0x1>
    2e68:	39 83       	std	Y+1, r19	; 0x01
    2e6a:	28 83       	st	Y, r18
    2e6c:	04 c0       	rjmp	.+8      	; 0x2e76 <Request+0xa6>
    2e6e:	18 82       	st	Y, r1
    2e70:	19 82       	std	Y+1, r1	; 0x01
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <Request+0xa6>
    2e74:	8b e0       	ldi	r24, 0x0B	; 11
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	08 95       	ret

00002e80 <CascAnticoll>:
    2e80:	6f 92       	push	r6
    2e82:	7f 92       	push	r7
    2e84:	9f 92       	push	r9
    2e86:	af 92       	push	r10
    2e88:	bf 92       	push	r11
    2e8a:	cf 92       	push	r12
    2e8c:	df 92       	push	r13
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	1f 92       	push	r1
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	e8 2e       	mov	r14, r24
    2ea2:	f6 2e       	mov	r15, r22
    2ea4:	3a 01       	movw	r6, r20
    2ea6:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <SerBuffer+0x2>
    2eaa:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <SerBuffer+0x3>
    2eae:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <SerBuffer+0x4>
    2eb2:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <SerBuffer+0x5>
    2eb6:	10 92 3b 0b 	sts	0x0B3B, r1	; 0x800b3b <SerBuffer+0x6>
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	82 e1       	ldi	r24, 0x12	; 18
    2ec0:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	83 e1       	ldi	r24, 0x13	; 19
    2eca:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	8e e0       	ldi	r24, 0x0E	; 14
    2ed2:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2ed6:	b6 2c       	mov	r11, r6
    2ed8:	84 e0       	ldi	r24, 0x04	; 4
    2eda:	c8 2e       	mov	r12, r24
    2edc:	d1 2c       	mov	r13, r1
    2ede:	30 e2       	ldi	r19, 0x20	; 32
    2ee0:	3f 15       	cp	r19, r15
    2ee2:	08 f4       	brcc	.+2      	; 0x2ee6 <CascAnticoll+0x66>
    2ee4:	a9 c0       	rjmp	.+338    	; 0x3038 <CascAnticoll+0x1b8>
    2ee6:	2f 2d       	mov	r18, r15
    2ee8:	27 70       	andi	r18, 0x07	; 7
    2eea:	9f 2d       	mov	r25, r15
    2eec:	96 95       	lsr	r25
    2eee:	96 95       	lsr	r25
    2ef0:	96 95       	lsr	r25
    2ef2:	22 23       	and	r18, r18
    2ef4:	21 f0       	breq	.+8      	; 0x2efe <CascAnticoll+0x7e>
    2ef6:	aa 24       	eor	r10, r10
    2ef8:	a3 94       	inc	r10
    2efa:	a9 0e       	add	r10, r25
    2efc:	01 c0       	rjmp	.+2      	; 0x2f00 <CascAnticoll+0x80>
    2efe:	a9 2e       	mov	r10, r25
    2f00:	e0 92 35 0b 	sts	0x0B35, r14	; 0x800b35 <SerBuffer>
    2f04:	80 e2       	ldi	r24, 0x20	; 32
    2f06:	82 0f       	add	r24, r18
    2f08:	e0 e1       	ldi	r30, 0x10	; 16
    2f0a:	9e 9f       	mul	r25, r30
    2f0c:	80 0d       	add	r24, r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <SerBuffer+0x1>
    2f14:	a7 e3       	ldi	r26, 0x37	; 55
    2f16:	bb e0       	ldi	r27, 0x0B	; 11
    2f18:	f3 01       	movw	r30, r6
    2f1a:	8e 2f       	mov	r24, r30
    2f1c:	8b 19       	sub	r24, r11
    2f1e:	8a 15       	cp	r24, r10
    2f20:	18 f4       	brcc	.+6      	; 0x2f28 <CascAnticoll+0xa8>
    2f22:	81 91       	ld	r24, Z+
    2f24:	8d 93       	st	X+, r24
    2f26:	f9 cf       	rjmp	.-14     	; 0x2f1a <CascAnticoll+0x9a>
    2f28:	f0 e1       	ldi	r31, 0x10	; 16
    2f2a:	2f 9f       	mul	r18, r31
    2f2c:	b0 01       	movw	r22, r0
    2f2e:	11 24       	eor	r1, r1
    2f30:	62 2b       	or	r22, r18
    2f32:	8d e0       	ldi	r24, 0x0D	; 13
    2f34:	29 83       	std	Y+1, r18	; 0x01
    2f36:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    2f3a:	10 92 49 0b 	sts	0x0B49, r1	; 0x800b49 <MInfo>
    2f3e:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <MInfo+0x1>
    2f42:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <MInfo+0x2>
    2f46:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <MInfo+0x4>
    2f4a:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <MInfo+0x6>
    2f4e:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <MInfo+0x5>
    2f52:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <MInfo+0x7>
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	8a 0d       	add	r24, r10
    2f5a:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <MInfo+0x3>
    2f5e:	80 e1       	ldi	r24, 0x10	; 16
    2f60:	97 e2       	ldi	r25, 0x27	; 39
    2f62:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    2f66:	49 e4       	ldi	r20, 0x49	; 73
    2f68:	5b e0       	ldi	r21, 0x0B	; 11
    2f6a:	65 e3       	ldi	r22, 0x35	; 53
    2f6c:	7b e0       	ldi	r23, 0x0B	; 11
    2f6e:	8c e0       	ldi	r24, 0x0C	; 12
    2f70:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <M522PcdCmd>
    2f74:	8c 01       	movw	r16, r24
    2f76:	29 81       	ldd	r18, Y+1	; 0x01
    2f78:	86 30       	cpi	r24, 0x06	; 6
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	19 f0       	breq	.+6      	; 0x2f84 <CascAnticoll+0x104>
    2f7e:	89 2b       	or	r24, r25
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <CascAnticoll+0x104>
    2f82:	5f c0       	rjmp	.+190    	; 0x3042 <CascAnticoll+0x1c2>
    2f84:	60 91 4e 0b 	lds	r22, 0x0B4E	; 0x800b4e <MInfo+0x5>
    2f88:	70 91 4f 0b 	lds	r23, 0x0B4F	; 0x800b4f <MInfo+0x6>
    2f8c:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <MInfo+0x4>
    2f90:	a6 2f       	mov	r26, r22
    2f92:	38 e0       	ldi	r19, 0x08	; 8
    2f94:	83 9f       	mul	r24, r19
    2f96:	a0 0d       	add	r26, r0
    2f98:	11 24       	eor	r1, r1
    2f9a:	a2 1b       	sub	r26, r18
    2f9c:	4f 2d       	mov	r20, r15
    2f9e:	50 e0       	ldi	r21, 0x00	; 0
    2fa0:	4a 0f       	add	r20, r26
    2fa2:	51 1d       	adc	r21, r1
    2fa4:	49 32       	cpi	r20, 0x29	; 41
    2fa6:	51 05       	cpc	r21, r1
    2fa8:	0c f0       	brlt	.+2      	; 0x2fac <CascAnticoll+0x12c>
    2faa:	49 c0       	rjmp	.+146    	; 0x303e <CascAnticoll+0x1be>
    2fac:	67 2b       	or	r22, r23
    2fae:	19 f0       	breq	.+6      	; 0x2fb6 <CascAnticoll+0x136>
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	80 93 4d 0b 	sts	0x0B4D, r24	; 0x800b4d <MInfo+0x4>
    2fb6:	4a 2d       	mov	r20, r10
    2fb8:	50 e0       	ldi	r21, 0x00	; 0
    2fba:	22 23       	and	r18, r18
    2fbc:	59 f0       	breq	.+22     	; 0x2fd4 <CascAnticoll+0x154>
    2fbe:	fa 01       	movw	r30, r20
    2fc0:	31 97       	sbiw	r30, 0x01	; 1
    2fc2:	e6 0d       	add	r30, r6
    2fc4:	f7 1d       	adc	r31, r7
    2fc6:	90 81       	ld	r25, Z
    2fc8:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <SerBuffer>
    2fcc:	89 2b       	or	r24, r25
    2fce:	80 83       	st	Z, r24
    2fd0:	b1 e0       	ldi	r27, 0x01	; 1
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <CascAnticoll+0x156>
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	a1 2c       	mov	r10, r1
    2fd8:	c6 01       	movw	r24, r12
    2fda:	84 1b       	sub	r24, r20
    2fdc:	95 0b       	sbc	r25, r21
    2fde:	6b 2f       	mov	r22, r27
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	2a 2d       	mov	r18, r10
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	28 17       	cp	r18, r24
    2fe8:	39 07       	cpc	r19, r25
    2fea:	74 f4       	brge	.+28     	; 0x3008 <CascAnticoll+0x188>
    2fec:	f9 01       	movw	r30, r18
    2fee:	eb 5c       	subi	r30, 0xCB	; 203
    2ff0:	f4 4f       	sbci	r31, 0xF4	; 244
    2ff2:	e6 0f       	add	r30, r22
    2ff4:	f7 1f       	adc	r31, r23
    2ff6:	90 80       	ld	r9, Z
    2ff8:	26 0d       	add	r18, r6
    2ffa:	37 1d       	adc	r19, r7
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	e4 0f       	add	r30, r20
    3000:	f5 1f       	adc	r31, r21
    3002:	90 82       	st	Z, r9
    3004:	a3 94       	inc	r10
    3006:	ed cf       	rjmp	.-38     	; 0x2fe2 <CascAnticoll+0x162>
    3008:	06 30       	cpi	r16, 0x06	; 6
    300a:	11 05       	cpc	r17, r1
    300c:	11 f4       	brne	.+4      	; 0x3012 <CascAnticoll+0x192>
    300e:	fa 0e       	add	r15, r26
    3010:	66 cf       	rjmp	.-308    	; 0x2ede <CascAnticoll+0x5e>
    3012:	f3 01       	movw	r30, r6
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	80 81       	ld	r24, Z
    3018:	89 27       	eor	r24, r25
    301a:	92 81       	ldd	r25, Z+2	; 0x02
    301c:	89 27       	eor	r24, r25
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	89 27       	eor	r24, r25
    3022:	2b 5c       	subi	r18, 0xCB	; 203
    3024:	34 4f       	sbci	r19, 0xF4	; 244
    3026:	f9 01       	movw	r30, r18
    3028:	eb 0f       	add	r30, r27
    302a:	f1 1d       	adc	r31, r1
    302c:	90 81       	ld	r25, Z
    302e:	89 17       	cp	r24, r25
    3030:	41 f0       	breq	.+16     	; 0x3042 <CascAnticoll+0x1c2>
    3032:	01 e0       	ldi	r16, 0x01	; 1
    3034:	15 e0       	ldi	r17, 0x05	; 5
    3036:	05 c0       	rjmp	.+10     	; 0x3042 <CascAnticoll+0x1c2>
    3038:	01 e0       	ldi	r16, 0x01	; 1
    303a:	11 e0       	ldi	r17, 0x01	; 1
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <CascAnticoll+0x1c2>
    303e:	04 e0       	ldi	r16, 0x04	; 4
    3040:	10 e0       	ldi	r17, 0x00	; 0
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	8d e0       	ldi	r24, 0x0D	; 13
    3046:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    304a:	60 e8       	ldi	r22, 0x80	; 128
    304c:	8e e0       	ldi	r24, 0x0E	; 14
    304e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <RcSetReg>
    3052:	c8 01       	movw	r24, r16
    3054:	0f 90       	pop	r0
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	bf 90       	pop	r11
    3068:	af 90       	pop	r10
    306a:	9f 90       	pop	r9
    306c:	7f 90       	pop	r7
    306e:	6f 90       	pop	r6
    3070:	08 95       	ret

00003072 <Select>:
    3072:	ff 92       	push	r15
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	f8 2e       	mov	r15, r24
    307e:	eb 01       	movw	r28, r22
    3080:	8a 01       	movw	r16, r20
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	61 e0       	ldi	r22, 0x01	; 1
    3086:	82 e1       	ldi	r24, 0x12	; 18
    3088:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	83 e1       	ldi	r24, 0x13	; 19
    3092:	0e 94 0a 1a 	call	0x3414	; 0x3414 <RcModifyReg>
    3096:	f0 92 35 0b 	sts	0x0B35, r15	; 0x800b35 <SerBuffer>
    309a:	80 e7       	ldi	r24, 0x70	; 112
    309c:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <SerBuffer+0x1>
    30a0:	fe 01       	movw	r30, r28
    30a2:	a7 e3       	ldi	r26, 0x37	; 55
    30a4:	bb e0       	ldi	r27, 0x0B	; 11
    30a6:	ce 01       	movw	r24, r28
    30a8:	04 96       	adiw	r24, 0x04	; 4
    30aa:	21 91       	ld	r18, Z+
    30ac:	2d 93       	st	X+, r18
    30ae:	e8 17       	cp	r30, r24
    30b0:	f9 07       	cpc	r31, r25
    30b2:	d9 f7       	brne	.-10     	; 0x30aa <Select+0x38>
    30b4:	99 81       	ldd	r25, Y+1	; 0x01
    30b6:	88 81       	ld	r24, Y
    30b8:	89 27       	eor	r24, r25
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	89 27       	eor	r24, r25
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	89 27       	eor	r24, r25
    30c2:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <SerBuffer+0x6>
    30c6:	10 92 49 0b 	sts	0x0B49, r1	; 0x800b49 <MInfo>
    30ca:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <MInfo+0x1>
    30ce:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <MInfo+0x2>
    30d2:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <MInfo+0x4>
    30d6:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <MInfo+0x6>
    30da:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <MInfo+0x5>
    30de:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <MInfo+0x7>
    30e2:	87 e0       	ldi	r24, 0x07	; 7
    30e4:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <MInfo+0x3>
    30e8:	80 ed       	ldi	r24, 0xD0	; 208
    30ea:	97 e0       	ldi	r25, 0x07	; 7
    30ec:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    30f0:	49 e4       	ldi	r20, 0x49	; 73
    30f2:	5b e0       	ldi	r21, 0x0B	; 11
    30f4:	65 e3       	ldi	r22, 0x35	; 53
    30f6:	7b e0       	ldi	r23, 0x0B	; 11
    30f8:	8c e0       	ldi	r24, 0x0C	; 12
    30fa:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <M522PcdCmd>
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	89 f4       	brne	.+34     	; 0x3124 <Select+0xb2>
    3102:	20 91 4d 0b 	lds	r18, 0x0B4D	; 0x800b4d <MInfo+0x4>
    3106:	21 30       	cpi	r18, 0x01	; 1
    3108:	59 f4       	brne	.+22     	; 0x3120 <Select+0xae>
    310a:	20 91 4e 0b 	lds	r18, 0x0B4E	; 0x800b4e <MInfo+0x5>
    310e:	30 91 4f 0b 	lds	r19, 0x0B4F	; 0x800b4f <MInfo+0x6>
    3112:	23 2b       	or	r18, r19
    3114:	29 f4       	brne	.+10     	; 0x3120 <Select+0xae>
    3116:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <SerBuffer>
    311a:	f8 01       	movw	r30, r16
    311c:	20 83       	st	Z, r18
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <Select+0xb2>
    3120:	84 e0       	ldi	r24, 0x04	; 4
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	ff 90       	pop	r15
    312e:	08 95       	ret

00003130 <AnticollSelect>:
    3130:	6f 92       	push	r6
    3132:	7f 92       	push	r7
    3134:	8f 92       	push	r8
    3136:	9f 92       	push	r9
    3138:	af 92       	push	r10
    313a:	bf 92       	push	r11
    313c:	cf 92       	push	r12
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	2d 97       	sbiw	r28, 0x0d	; 13
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	7b 01       	movw	r14, r22
    315e:	6a 01       	movw	r12, r20
    3160:	9e 01       	movw	r18, r28
    3162:	2f 5f       	subi	r18, 0xFF	; 255
    3164:	3f 4f       	sbci	r19, 0xFF	; 255
    3166:	59 01       	movw	r10, r18
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	10 e0       	ldi	r17, 0x00	; 0
    316e:	88 23       	and	r24, r24
    3170:	a1 f0       	breq	.+40     	; 0x319a <AnticollSelect+0x6a>
    3172:	81 32       	cpi	r24, 0x21	; 33
    3174:	40 f0       	brcs	.+16     	; 0x3186 <AnticollSelect+0x56>
    3176:	00 ee       	ldi	r16, 0xE0	; 224
    3178:	08 0f       	add	r16, r24
    317a:	11 30       	cpi	r17, 0x01	; 1
    317c:	61 f0       	breq	.+24     	; 0x3196 <AnticollSelect+0x66>
    317e:	12 30       	cpi	r17, 0x02	; 2
    3180:	71 f5       	brne	.+92     	; 0x31de <AnticollSelect+0xae>
    3182:	80 e2       	ldi	r24, 0x20	; 32
    3184:	05 c0       	rjmp	.+10     	; 0x3190 <AnticollSelect+0x60>
    3186:	11 30       	cpi	r17, 0x01	; 1
    3188:	51 f0       	breq	.+20     	; 0x319e <AnticollSelect+0x6e>
    318a:	12 30       	cpi	r17, 0x02	; 2
    318c:	99 f4       	brne	.+38     	; 0x31b4 <AnticollSelect+0x84>
    318e:	00 e0       	ldi	r16, 0x00	; 0
    3190:	67 e9       	ldi	r22, 0x97	; 151
    3192:	96 2e       	mov	r9, r22
    3194:	12 c0       	rjmp	.+36     	; 0x31ba <AnticollSelect+0x8a>
    3196:	80 e2       	ldi	r24, 0x20	; 32
    3198:	03 c0       	rjmp	.+6      	; 0x31a0 <AnticollSelect+0x70>
    319a:	11 30       	cpi	r17, 0x01	; 1
    319c:	89 f4       	brne	.+34     	; 0x31c0 <AnticollSelect+0x90>
    319e:	00 e0       	ldi	r16, 0x00	; 0
    31a0:	6a 80       	ldd	r6, Y+2	; 0x02
    31a2:	7b 80       	ldd	r7, Y+3	; 0x03
    31a4:	8c 80       	ldd	r8, Y+4	; 0x04
    31a6:	f7 01       	movw	r30, r14
    31a8:	60 82       	st	Z, r6
    31aa:	71 82       	std	Z+1, r7	; 0x01
    31ac:	82 82       	std	Z+2, r8	; 0x02
    31ae:	55 e9       	ldi	r21, 0x95	; 149
    31b0:	95 2e       	mov	r9, r21
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <AnticollSelect+0x8a>
    31b4:	00 e0       	ldi	r16, 0x00	; 0
    31b6:	43 e9       	ldi	r20, 0x93	; 147
    31b8:	94 2e       	mov	r9, r20
    31ba:	80 32       	cpi	r24, 0x20	; 32
    31bc:	31 f4       	brne	.+12     	; 0x31ca <AnticollSelect+0x9a>
    31be:	11 c0       	rjmp	.+34     	; 0x31e2 <AnticollSelect+0xb2>
    31c0:	12 30       	cpi	r17, 0x02	; 2
    31c2:	29 f3       	breq	.-54     	; 0x318e <AnticollSelect+0x5e>
    31c4:	00 e0       	ldi	r16, 0x00	; 0
    31c6:	93 e9       	ldi	r25, 0x93	; 147
    31c8:	99 2e       	mov	r9, r25
    31ca:	21 15       	cp	r18, r1
    31cc:	31 05       	cpc	r19, r1
    31ce:	09 f5       	brne	.+66     	; 0x3212 <AnticollSelect+0xe2>
    31d0:	a5 01       	movw	r20, r10
    31d2:	68 2f       	mov	r22, r24
    31d4:	89 2d       	mov	r24, r9
    31d6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <CascAnticoll>
    31da:	9c 01       	movw	r18, r24
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <AnticollSelect+0xb2>
    31de:	83 e9       	ldi	r24, 0x93	; 147
    31e0:	98 2e       	mov	r9, r24
    31e2:	21 15       	cp	r18, r1
    31e4:	31 05       	cpc	r19, r1
    31e6:	a9 f4       	brne	.+42     	; 0x3212 <AnticollSelect+0xe2>
    31e8:	ae 01       	movw	r20, r28
    31ea:	43 5f       	subi	r20, 0xF3	; 243
    31ec:	5f 4f       	sbci	r21, 0xFF	; 255
    31ee:	b5 01       	movw	r22, r10
    31f0:	89 2d       	mov	r24, r9
    31f2:	0e 94 39 18 	call	0x3072	; 0x3072 <Select>
    31f6:	9c 01       	movw	r18, r24
    31f8:	89 2b       	or	r24, r25
    31fa:	19 f4       	brne	.+6      	; 0x3202 <AnticollSelect+0xd2>
    31fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fe:	82 ff       	sbrs	r24, 2
    3200:	08 c0       	rjmp	.+16     	; 0x3212 <AnticollSelect+0xe2>
    3202:	1f 5f       	subi	r17, 0xFF	; 255
    3204:	f4 e0       	ldi	r31, 0x04	; 4
    3206:	af 0e       	add	r10, r31
    3208:	b1 1c       	adc	r11, r1
    320a:	13 30       	cpi	r17, 0x03	; 3
    320c:	d1 f0       	breq	.+52     	; 0x3242 <AnticollSelect+0x112>
    320e:	80 2f       	mov	r24, r16
    3210:	ae cf       	rjmp	.-164    	; 0x316e <AnticollSelect+0x3e>
    3212:	11 30       	cpi	r17, 0x01	; 1
    3214:	61 f0       	breq	.+24     	; 0x322e <AnticollSelect+0xfe>
    3216:	12 30       	cpi	r17, 0x02	; 2
    3218:	a1 f4       	brne	.+40     	; 0x3242 <AnticollSelect+0x112>
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	af 81       	ldd	r26, Y+7	; 0x07
    3220:	b8 85       	ldd	r27, Y+8	; 0x08
    3222:	f7 01       	movw	r30, r14
    3224:	86 83       	std	Z+6, r24	; 0x06
    3226:	97 83       	std	Z+7, r25	; 0x07
    3228:	a0 87       	std	Z+8, r26	; 0x08
    322a:	b1 87       	std	Z+9, r27	; 0x09
    322c:	13 c0       	rjmp	.+38     	; 0x3254 <AnticollSelect+0x124>
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	af 81       	ldd	r26, Y+7	; 0x07
    3234:	b8 85       	ldd	r27, Y+8	; 0x08
    3236:	f7 01       	movw	r30, r14
    3238:	83 83       	std	Z+3, r24	; 0x03
    323a:	94 83       	std	Z+4, r25	; 0x04
    323c:	a5 83       	std	Z+5, r26	; 0x05
    323e:	b6 83       	std	Z+6, r27	; 0x06
    3240:	09 c0       	rjmp	.+18     	; 0x3254 <AnticollSelect+0x124>
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	9a 81       	ldd	r25, Y+2	; 0x02
    3246:	ab 81       	ldd	r26, Y+3	; 0x03
    3248:	bc 81       	ldd	r27, Y+4	; 0x04
    324a:	f7 01       	movw	r30, r14
    324c:	80 83       	st	Z, r24
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	a2 83       	std	Z+2, r26	; 0x02
    3252:	b3 83       	std	Z+3, r27	; 0x03
    3254:	8d 85       	ldd	r24, Y+13	; 0x0d
    3256:	f6 01       	movw	r30, r12
    3258:	80 83       	st	Z, r24
    325a:	c9 01       	movw	r24, r18
    325c:	2d 96       	adiw	r28, 0x0d	; 13
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	ff 90       	pop	r15
    3272:	ef 90       	pop	r14
    3274:	df 90       	pop	r13
    3276:	cf 90       	pop	r12
    3278:	bf 90       	pop	r11
    327a:	af 90       	pop	r10
    327c:	9f 90       	pop	r9
    327e:	8f 90       	pop	r8
    3280:	7f 90       	pop	r7
    3282:	6f 90       	pop	r6
    3284:	08 95       	ret

00003286 <Authentication>:
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	10 92 49 0b 	sts	0x0B49, r1	; 0x800b49 <MInfo>
    328e:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <MInfo+0x1>
    3292:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <MInfo+0x2>
    3296:	10 92 4c 0b 	sts	0x0B4C, r1	; 0x800b4c <MInfo+0x3>
    329a:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <MInfo+0x4>
    329e:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <MInfo+0x6>
    32a2:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <MInfo+0x5>
    32a6:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <MInfo+0x7>
    32aa:	80 93 35 0b 	sts	0x0B35, r24	; 0x800b35 <SerBuffer>
    32ae:	20 93 36 0b 	sts	0x0B36, r18	; 0x800b36 <SerBuffer+0x1>
    32b2:	86 e0       	ldi	r24, 0x06	; 6
    32b4:	fb 01       	movw	r30, r22
    32b6:	a7 e3       	ldi	r26, 0x37	; 55
    32b8:	bb e0       	ldi	r27, 0x0B	; 11
    32ba:	01 90       	ld	r0, Z+
    32bc:	0d 92       	st	X+, r0
    32be:	8a 95       	dec	r24
    32c0:	e1 f7       	brne	.-8      	; 0x32ba <Authentication+0x34>
    32c2:	fa 01       	movw	r30, r20
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	a2 81       	ldd	r26, Z+2	; 0x02
    32ca:	b3 81       	ldd	r27, Z+3	; 0x03
    32cc:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <SerBuffer+0x8>
    32d0:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <SerBuffer+0x9>
    32d4:	a0 93 3f 0b 	sts	0x0B3F, r26	; 0x800b3f <SerBuffer+0xa>
    32d8:	b0 93 40 0b 	sts	0x0B40, r27	; 0x800b40 <SerBuffer+0xb>
    32dc:	8c e0       	ldi	r24, 0x0C	; 12
    32de:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <MInfo+0x3>
    32e2:	80 ed       	ldi	r24, 0xD0	; 208
    32e4:	97 e0       	ldi	r25, 0x07	; 7
    32e6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    32ea:	49 e4       	ldi	r20, 0x49	; 73
    32ec:	5b e0       	ldi	r21, 0x0B	; 11
    32ee:	65 e3       	ldi	r22, 0x35	; 53
    32f0:	7b e0       	ldi	r23, 0x0B	; 11
    32f2:	8e e0       	ldi	r24, 0x0E	; 14
    32f4:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <M522PcdCmd>
    32f8:	ec 01       	movw	r28, r24
    32fa:	89 2b       	or	r24, r25
    32fc:	41 f4       	brne	.+16     	; 0x330e <Authentication+0x88>
    32fe:	88 e0       	ldi	r24, 0x08	; 8
    3300:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    3304:	8f 70       	andi	r24, 0x0F	; 15
    3306:	88 30       	cpi	r24, 0x08	; 8
    3308:	11 f0       	breq	.+4      	; 0x330e <Authentication+0x88>
    330a:	c1 e0       	ldi	r28, 0x01	; 1
    330c:	d2 e0       	ldi	r29, 0x02	; 2
    330e:	ce 01       	movw	r24, r28
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	08 95       	ret

00003316 <Read>:
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	eb 01       	movw	r28, r22
    331c:	10 92 49 0b 	sts	0x0B49, r1	; 0x800b49 <MInfo>
    3320:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <MInfo+0x1>
    3324:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <MInfo+0x2>
    3328:	10 92 4d 0b 	sts	0x0B4D, r1	; 0x800b4d <MInfo+0x4>
    332c:	10 92 4f 0b 	sts	0x0B4F, r1	; 0x800b4f <MInfo+0x6>
    3330:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <MInfo+0x5>
    3334:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <MInfo+0x7>
    3338:	90 e3       	ldi	r25, 0x30	; 48
    333a:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <SerBuffer>
    333e:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <SerBuffer+0x1>
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <MInfo+0x3>
    3348:	80 e1       	ldi	r24, 0x10	; 16
    334a:	97 e2       	ldi	r25, 0x27	; 39
    334c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SetTimeOut>
    3350:	49 e4       	ldi	r20, 0x49	; 73
    3352:	5b e0       	ldi	r21, 0x0B	; 11
    3354:	65 e3       	ldi	r22, 0x35	; 53
    3356:	7b e0       	ldi	r23, 0x0B	; 11
    3358:	8c e0       	ldi	r24, 0x0C	; 12
    335a:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <M522PcdCmd>
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	e9 f0       	breq	.+58     	; 0x339c <Read+0x86>
    3362:	81 30       	cpi	r24, 0x01	; 1
    3364:	91 05       	cpc	r25, r1
    3366:	a1 f0       	breq	.+40     	; 0x3390 <Read+0x7a>
    3368:	20 91 4e 0b 	lds	r18, 0x0B4E	; 0x800b4e <MInfo+0x5>
    336c:	30 91 4f 0b 	lds	r19, 0x0B4F	; 0x800b4f <MInfo+0x6>
    3370:	24 30       	cpi	r18, 0x04	; 4
    3372:	31 05       	cpc	r19, r1
    3374:	69 f4       	brne	.+26     	; 0x3390 <Read+0x7a>
    3376:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <SerBuffer>
    337a:	98 2f       	mov	r25, r24
    337c:	9f 70       	andi	r25, 0x0F	; 15
    337e:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <SerBuffer>
    3382:	8a 70       	andi	r24, 0x0A	; 10
    3384:	19 f0       	breq	.+6      	; 0x338c <Read+0x76>
    3386:	85 e0       	ldi	r24, 0x05	; 5
    3388:	91 e0       	ldi	r25, 0x01	; 1
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <Read+0x7a>
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	92 e0       	ldi	r25, 0x02	; 2
    3390:	20 e1       	ldi	r18, 0x10	; 16
    3392:	fe 01       	movw	r30, r28
    3394:	11 92       	st	Z+, r1
    3396:	2a 95       	dec	r18
    3398:	e9 f7       	brne	.-6      	; 0x3394 <Read+0x7e>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <Read+0xae>
    339c:	20 91 4d 0b 	lds	r18, 0x0B4D	; 0x800b4d <MInfo+0x4>
    33a0:	20 31       	cpi	r18, 0x10	; 16
    33a2:	41 f0       	breq	.+16     	; 0x33b4 <Read+0x9e>
    33a4:	80 e1       	ldi	r24, 0x10	; 16
    33a6:	fe 01       	movw	r30, r28
    33a8:	11 92       	st	Z+, r1
    33aa:	8a 95       	dec	r24
    33ac:	e9 f7       	brne	.-6      	; 0x33a8 <Read+0x92>
    33ae:	88 e0       	ldi	r24, 0x08	; 8
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	08 c0       	rjmp	.+16     	; 0x33c4 <Read+0xae>
    33b4:	20 e1       	ldi	r18, 0x10	; 16
    33b6:	e5 e3       	ldi	r30, 0x35	; 53
    33b8:	fb e0       	ldi	r31, 0x0B	; 11
    33ba:	de 01       	movw	r26, r28
    33bc:	01 90       	ld	r0, Z+
    33be:	0d 92       	st	X+, r0
    33c0:	2a 95       	dec	r18
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <Read+0xa6>
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	08 95       	ret

000033ca <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    33ca:	88 30       	cpi	r24, 0x08	; 8
    33cc:	11 f4       	brne	.+4      	; 0x33d2 <readCardID+0x8>
	{
		zone = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    33d2:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    33d4:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <Read>

000033d8 <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	1f 92       	push	r1
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    33e2:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    33e4:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    33e6:	8e 77       	andi	r24, 0x7E	; 126
    33e8:	69 83       	std	Y+1, r22	; 0x01
    33ea:	0e 94 3f 1a 	call	0x347e	; 0x347e <Spi_send>
	Spi_send(RegVal);
    33ee:	69 81       	ldd	r22, Y+1	; 0x01
    33f0:	86 2f       	mov	r24, r22
    33f2:	0e 94 3f 1a 	call	0x347e	; 0x347e <Spi_send>

	Spi_ss_high;
    33f6:	71 9a       	sbi	0x0e, 1	; 14

}
    33f8:	0f 90       	pop	r0
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	08 95       	ret

00003400 <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3400:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    3402:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    3404:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    3406:	80 68       	ori	r24, 0x80	; 128
    3408:	0e 94 3f 1a 	call	0x347e	; 0x347e <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    340c:	0e 94 44 1a 	call	0x3488	; 0x3488 <Spi_receive>
	
	Spi_ss_high;
    3410:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    3412:	08 95       	ret

00003414 <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	00 d0       	rcall	.+0      	; 0x341c <RcModifyReg+0x8>
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    3422:	4a 83       	std	Y+2, r20	; 0x02
    3424:	69 83       	std	Y+1, r22	; 0x01
    3426:	0e 94 00 1a 	call	0x3400	; 0x3400 <RcGetReg>
    if(ModifyVal)
    342a:	69 81       	ldd	r22, Y+1	; 0x01
    342c:	4a 81       	ldd	r20, Y+2	; 0x02
    342e:	66 23       	and	r22, r22
    3430:	19 f0       	breq	.+6      	; 0x3438 <RcModifyReg+0x24>
    {
        RegVal |= MaskByte;
    3432:	68 2f       	mov	r22, r24
    3434:	64 2b       	or	r22, r20
    3436:	03 c0       	rjmp	.+6      	; 0x343e <RcModifyReg+0x2a>
    }
    else
    {
        RegVal &= (~MaskByte);
    3438:	64 2f       	mov	r22, r20
    343a:	60 95       	com	r22
    343c:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    343e:	81 2f       	mov	r24, r17
}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    344a:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <RcSetReg>

0000344e <Spi_initialize>:
 * \param ucData is data to be sent.
 * \return ucData1 is received data from SPI
 */
void Spi_send_only ( uint8_t ucData )
{
   Spi_send_and_receive(ucData);
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	1f 92       	push	r1
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	84 b1       	in	r24, 0x04	; 4
    345a:	87 60       	ori	r24, 0x07	; 7
    345c:	84 b9       	out	0x04, r24	; 4
    345e:	23 98       	cbi	0x04, 3	; 4
    3460:	28 9a       	sbi	0x05, 0	; 5
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	8d b9       	out	0x0d, r24	; 13
    3466:	71 9a       	sbi	0x0e, 1	; 14
    3468:	29 98       	cbi	0x05, 1	; 5
    346a:	82 e5       	ldi	r24, 0x52	; 82
    346c:	8c bd       	out	0x2c, r24	; 44
    346e:	8d b5       	in	r24, 0x2d	; 45
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	8e b5       	in	r24, 0x2e	; 46
    3474:	89 83       	std	Y+1, r24	; 0x01
    3476:	0f 90       	pop	r0
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    347e:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    3480:	0d b4       	in	r0, 0x2d	; 45
    3482:	07 fe       	sbrs	r0, 7
    3484:	fd cf       	rjmp	.-6      	; 0x3480 <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    3486:	08 95       	ret

00003488 <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    348c:	0d b4       	in	r0, 0x2d	; 45
    348e:	07 fe       	sbrs	r0, 7
    3490:	fd cf       	rjmp	.-6      	; 0x348c <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    3492:	8e b5       	in	r24, 0x2e	; 46
}
    3494:	08 95       	ret

00003496 <mifareInit>:
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    3496:	0e 94 27 1a 	call	0x344e	; 0x344e <Spi_initialize>
	Rc522Init();	
    349a:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <Rc522Init>

0000349e <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    349e:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	a8 95       	wdr
    34a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34aa:	88 61       	ori	r24, 0x18	; 24
    34ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34b4:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <serial_init>
#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
#endif

    // Init the timer system for the MAC
    timerInit();
    34be:	0e 94 67 25 	call	0x4ace	; 0x4ace <timerInit>

#if (DEVICE_CONNECTED == MDC_MACHINE)
	InitTimerZero();	//timer for MDC machine comm.
    34c2:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <InitTimerZero>
#endif

    sei();
    34c6:	78 94       	sei
{
	getPressedKey();
	_delay_ms(1000);	
}*/
    // Init the (sample) application
    appInit();
    34c8:	0e 94 1f 03 	call	0x63e	; 0x63e <appInit>
#if( DEBUG )
	Beeps(2);
#endif
       
    // Initialize mifare
	mifareInit();
    34cc:	0e 94 4b 1a 	call	0x3496	; 0x3496 <mifareInit>
    for(;;)
    {
        // Turn interrupts on if they are off.  They should always be on
        // at this point in the loop, so just turn them on every time, in
        // case interrupts were inadvertently turned off elsewhere.
        sei();
    34d0:	78 94       	sei

        // Task functions called from main loop.  Either add your own task loop
        // or edit the example appTask().
        appTask();
    34d2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <appTask>
        macTask();
    34d6:	0e 94 35 21 	call	0x426a	; 0x426a <macTask>

    }
    34da:	fa cf       	rjmp	.-12     	; 0x34d0 <main+0x32>

000034dc <isSleeping>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    34dc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    34e0:	86 95       	lsr	r24
    34e2:	81 70       	andi	r24, 0x01	; 1
    34e4:	08 95       	ret

000034e6 <radioGetPartnum>:
    34e6:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <radio_part_number.3584>
    34ea:	81 11       	cpse	r24, r1
    34ec:	04 c0       	rjmp	.+8      	; 0x34f6 <radioGetPartnum+0x10>
    34ee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    34f2:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <radio_part_number.3584>
    34f6:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <radio_part_number.3584>
    34fa:	08 95       	ret

000034fc <radioRxStartEvent>:
    34fc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3500:	8f 71       	andi	r24, 0x1F	; 31
    3502:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <rssi_val>
    3506:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <macConfig+0x17>
    350a:	08 95       	ret

0000350c <radioGetSavedRssiValue>:
    350c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    3510:	82 30       	cpi	r24, 0x02	; 2
    3512:	19 f0       	breq	.+6      	; 0x351a <radioGetSavedRssiValue+0xe>
    3514:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <rssi_val>
    3518:	08 95       	ret
    351a:	86 e1       	ldi	r24, 0x16	; 22
    351c:	08 95       	ret

0000351e <radioGetSavedLqiValue>:
    351e:	80 91 d1 0b 	lds	r24, 0x0BD1	; 0x800bd1 <mac_buffer_rx+0x80>
    3522:	08 95       	ret

00003524 <radioSetOperatingChannel>:
    3524:	cf 93       	push	r28
    3526:	95 ef       	ldi	r25, 0xF5	; 245
    3528:	98 0f       	add	r25, r24
    352a:	90 31       	cpi	r25, 0x10	; 16
    352c:	18 f5       	brcc	.+70     	; 0x3574 <radioSetOperatingChannel+0x50>
    352e:	c8 2f       	mov	r28, r24
    3530:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <isSleeping>
    3534:	81 11       	cpse	r24, r1
    3536:	20 c0       	rjmp	.+64     	; 0x3578 <radioSetOperatingChannel+0x54>
    3538:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    353c:	8f 71       	andi	r24, 0x1F	; 31
    353e:	8c 17       	cp	r24, r28
    3540:	e9 f0       	breq	.+58     	; 0x357c <radioSetOperatingChannel+0x58>
    3542:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3546:	80 7e       	andi	r24, 0xE0	; 224
    3548:	9c 2f       	mov	r25, r28
    354a:	9f 71       	andi	r25, 0x1F	; 31
    354c:	89 2b       	or	r24, r25
    354e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3552:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3556:	8f 71       	andi	r24, 0x1F	; 31
    3558:	86 30       	cpi	r24, 0x06	; 6
    355a:	11 f0       	breq	.+4      	; 0x3560 <radioSetOperatingChannel+0x3c>
    355c:	89 30       	cpi	r24, 0x09	; 9
    355e:	21 f4       	brne	.+8      	; 0x3568 <radioSetOperatingChannel+0x44>
    3560:	8d e2       	ldi	r24, 0x2D	; 45
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <radioSetOperatingChannel+0x40>
    3568:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    356c:	8f 71       	andi	r24, 0x1F	; 31
    356e:	8c 13       	cpse	r24, r28
    3570:	07 c0       	rjmp	.+14     	; 0x3580 <radioSetOperatingChannel+0x5c>
    3572:	04 c0       	rjmp	.+8      	; 0x357c <radioSetOperatingChannel+0x58>
    3574:	82 e4       	ldi	r24, 0x42	; 66
    3576:	05 c0       	rjmp	.+10     	; 0x3582 <radioSetOperatingChannel+0x5e>
    3578:	84 e4       	ldi	r24, 0x44	; 68
    357a:	03 c0       	rjmp	.+6      	; 0x3582 <radioSetOperatingChannel+0x5e>
    357c:	80 e4       	ldi	r24, 0x40	; 64
    357e:	01 c0       	rjmp	.+2      	; 0x3582 <radioSetOperatingChannel+0x5e>
    3580:	83 e4       	ldi	r24, 0x43	; 67
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <radioSetClockSpeed>:
    3586:	66 30       	cpi	r22, 0x06	; 6
    3588:	98 f4       	brcc	.+38     	; 0x35b0 <radioSetClockSpeed+0x2a>
    358a:	81 11       	cpse	r24, r1
    358c:	04 c0       	rjmp	.+8      	; 0x3596 <radioSetClockSpeed+0x10>
    358e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3592:	88 60       	ori	r24, 0x08	; 8
    3594:	03 c0       	rjmp	.+6      	; 0x359c <radioSetClockSpeed+0x16>
    3596:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    359a:	87 7f       	andi	r24, 0xF7	; 247
    359c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    35a0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    35a4:	88 7f       	andi	r24, 0xF8	; 248
    35a6:	68 2b       	or	r22, r24
    35a8:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    35ac:	80 e4       	ldi	r24, 0x40	; 64
    35ae:	08 95       	ret
    35b0:	82 e4       	ldi	r24, 0x42	; 66
    35b2:	08 95       	ret

000035b4 <radioGetTrxState>:
    35b4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    35b8:	8f 71       	andi	r24, 0x1F	; 31
    35ba:	08 95       	ret

000035bc <radioResetStateMachine>:
    35bc:	e9 e3       	ldi	r30, 0x39	; 57
    35be:	f1 e0       	ldi	r31, 0x01	; 1
    35c0:	80 81       	ld	r24, Z
    35c2:	8d 7f       	andi	r24, 0xFD	; 253
    35c4:	80 83       	st	Z, r24
    35c6:	8d e0       	ldi	r24, 0x0D	; 13
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <radioResetStateMachine+0xe>
    35ce:	e2 e4       	ldi	r30, 0x42	; 66
    35d0:	f1 e0       	ldi	r31, 0x01	; 1
    35d2:	80 81       	ld	r24, Z
    35d4:	80 7e       	andi	r24, 0xE0	; 224
    35d6:	83 60       	ori	r24, 0x03	; 3
    35d8:	80 83       	st	Z, r24
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <radioResetStateMachine+0x22>
    35e2:	08 95       	ret

000035e4 <radioResetTrx>:
    35e4:	e9 e3       	ldi	r30, 0x39	; 57
    35e6:	f1 e0       	ldi	r31, 0x01	; 1
    35e8:	80 81       	ld	r24, Z
    35ea:	81 60       	ori	r24, 0x01	; 1
    35ec:	80 83       	st	Z, r24
    35ee:	80 81       	ld	r24, Z
    35f0:	8d 7f       	andi	r24, 0xFD	; 253
    35f2:	80 83       	st	Z, r24
    35f4:	8d e0       	ldi	r24, 0x0D	; 13
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <radioResetTrx+0x14>
    35fc:	80 81       	ld	r24, Z
    35fe:	8e 7f       	andi	r24, 0xFE	; 254
    3600:	80 83       	st	Z, r24
    3602:	08 95       	ret

00003604 <radioInit>:
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	1f 92       	push	r1
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62
    3612:	0d ef       	ldi	r16, 0xFD	; 253
    3614:	13 e0       	ldi	r17, 0x03	; 3
    3616:	f8 01       	movw	r30, r16
    3618:	31 97       	sbiw	r30, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <radioInit+0x14>
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <radioResetTrx>
    3622:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3626:	90 7e       	andi	r25, 0xE0	; 224
    3628:	93 60       	ori	r25, 0x03	; 3
    362a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    362e:	f8 01       	movw	r30, r16
    3630:	31 97       	sbiw	r30, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <radioInit+0x2c>
    3634:	9c e4       	ldi	r25, 0x4C	; 76
    3636:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    363a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    363e:	90 7f       	andi	r25, 0xF0	; 240
    3640:	97 60       	ori	r25, 0x07	; 7
    3642:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	81 11       	cpse	r24, r1
    364a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <calibrate_rc_osc>
    364e:	80 e4       	ldi	r24, 0x40	; 64
    3650:	0f 90       	pop	r0
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	1f 91       	pop	r17
    3658:	0f 91       	pop	r16
    365a:	08 95       	ret

0000365c <radioUseAutoTxCrc>:
    365c:	cf 93       	push	r28
    365e:	c8 2f       	mov	r28, r24
    3660:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	31 f4       	brne	.+12     	; 0x3674 <radioUseAutoTxCrc+0x18>
    3668:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    366c:	c0 fb       	bst	r28, 0
    366e:	87 f9       	bld	r24, 7
    3670:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    3674:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    3678:	83 30       	cpi	r24, 0x03	; 3
    367a:	61 f4       	brne	.+24     	; 0x3694 <radioUseAutoTxCrc+0x38>
    367c:	20 91 04 00 	lds	r18, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    3680:	30 e2       	ldi	r19, 0x20	; 32
    3682:	c3 9f       	mul	r28, r19
    3684:	c0 01       	movw	r24, r0
    3686:	11 24       	eor	r1, r1
    3688:	80 72       	andi	r24, 0x20	; 32
    368a:	92 2f       	mov	r25, r18
    368c:	9f 7d       	andi	r25, 0xDF	; 223
    368e:	89 2b       	or	r24, r25
    3690:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    3694:	cf 91       	pop	r28
    3696:	08 95       	ret

00003698 <radioIsBusy>:
    3698:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    369c:	98 2f       	mov	r25, r24
    369e:	9f 70       	andi	r25, 0x0F	; 15
    36a0:	91 50       	subi	r25, 0x01	; 1
    36a2:	92 30       	cpi	r25, 0x02	; 2
    36a4:	38 f0       	brcs	.+14     	; 0x36b4 <radioIsBusy+0x1c>
    36a6:	98 2f       	mov	r25, r24
    36a8:	9f 71       	andi	r25, 0x1F	; 31
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	9e 31       	cpi	r25, 0x1E	; 30
    36ae:	19 f0       	breq	.+6      	; 0x36b6 <radioIsBusy+0x1e>
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	08 95       	ret
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	08 95       	ret

000036b8 <radioSetTrxState>:
    36b8:	cf 93       	push	r28
    36ba:	c8 2f       	mov	r28, r24
    36bc:	88 ef       	ldi	r24, 0xF8	; 248
    36be:	8c 0f       	add	r24, r28
    36c0:	82 30       	cpi	r24, 0x02	; 2
    36c2:	38 f0       	brcs	.+14     	; 0x36d2 <radioSetTrxState+0x1a>
    36c4:	8c 2f       	mov	r24, r28
    36c6:	8f 7e       	andi	r24, 0xEF	; 239
    36c8:	86 30       	cpi	r24, 0x06	; 6
    36ca:	19 f0       	breq	.+6      	; 0x36d2 <radioSetTrxState+0x1a>
    36cc:	c9 31       	cpi	r28, 0x19	; 25
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <radioSetTrxState+0x1a>
    36d0:	55 c0       	rjmp	.+170    	; 0x377c <radioSetTrxState+0xc4>
    36d2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <isSleeping>
    36d6:	81 11       	cpse	r24, r1
    36d8:	53 c0       	rjmp	.+166    	; 0x3780 <radioSetTrxState+0xc8>
    36da:	0e 94 4c 1b 	call	0x3698	; 0x3698 <radioIsBusy>
    36de:	81 11       	cpse	r24, r1
    36e0:	fc cf       	rjmp	.-8      	; 0x36da <radioSetTrxState+0x22>
    36e2:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    36e6:	82 30       	cpi	r24, 0x02	; 2
    36e8:	39 f4       	brne	.+14     	; 0x36f8 <radioSetTrxState+0x40>
    36ea:	0e 94 bc 23 	call	0x4778	; 0x4778 <macIsScanning>
    36ee:	88 23       	and	r24, r24
    36f0:	19 f0       	breq	.+6      	; 0x36f8 <radioSetTrxState+0x40>
    36f2:	c6 31       	cpi	r28, 0x16	; 22
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <radioSetTrxState+0x40>
    36f6:	c6 e0       	ldi	r28, 0x06	; 6
    36f8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    36fc:	8f 71       	andi	r24, 0x1F	; 31
    36fe:	c8 17       	cp	r28, r24
    3700:	09 f4       	brne	.+2      	; 0x3704 <radioSetTrxState+0x4c>
    3702:	40 c0       	rjmp	.+128    	; 0x3784 <radioSetTrxState+0xcc>
    3704:	c8 30       	cpi	r28, 0x08	; 8
    3706:	19 f4       	brne	.+6      	; 0x370e <radioSetTrxState+0x56>
    3708:	0e 94 de 1a 	call	0x35bc	; 0x35bc <radioResetStateMachine>
    370c:	31 c0       	rjmp	.+98     	; 0x3770 <radioSetTrxState+0xb8>
    370e:	c9 31       	cpi	r28, 0x19	; 25
    3710:	59 f4       	brne	.+22     	; 0x3728 <radioSetTrxState+0x70>
    3712:	89 30       	cpi	r24, 0x09	; 9
    3714:	e1 f0       	breq	.+56     	; 0x374e <radioSetTrxState+0x96>
    3716:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    371a:	90 7e       	andi	r25, 0xE0	; 224
    371c:	99 60       	ori	r25, 0x09	; 9
    371e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3722:	86 31       	cpi	r24, 0x16	; 22
    3724:	81 f4       	brne	.+32     	; 0x3746 <radioSetTrxState+0x8e>
    3726:	0c c0       	rjmp	.+24     	; 0x3740 <radioSetTrxState+0x88>
    3728:	c6 31       	cpi	r28, 0x16	; 22
    372a:	89 f4       	brne	.+34     	; 0x374e <radioSetTrxState+0x96>
    372c:	89 30       	cpi	r24, 0x09	; 9
    372e:	79 f0       	breq	.+30     	; 0x374e <radioSetTrxState+0x96>
    3730:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3734:	90 7e       	andi	r25, 0xE0	; 224
    3736:	99 60       	ori	r25, 0x09	; 9
    3738:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    373c:	89 31       	cpi	r24, 0x19	; 25
    373e:	19 f4       	brne	.+6      	; 0x3746 <radioSetTrxState+0x8e>
    3740:	e3 e0       	ldi	r30, 0x03	; 3
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	02 c0       	rjmp	.+4      	; 0x374a <radioSetTrxState+0x92>
    3746:	e9 e6       	ldi	r30, 0x69	; 105
    3748:	f1 e0       	ldi	r31, 0x01	; 1
    374a:	31 97       	sbiw	r30, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <radioSetTrxState+0x92>
    374e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3752:	90 7e       	andi	r25, 0xE0	; 224
    3754:	2c 2f       	mov	r18, r28
    3756:	2f 71       	andi	r18, 0x1F	; 31
    3758:	92 2b       	or	r25, r18
    375a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    375e:	88 30       	cpi	r24, 0x08	; 8
    3760:	19 f4       	brne	.+6      	; 0x3768 <radioSetTrxState+0xb0>
    3762:	89 e6       	ldi	r24, 0x69	; 105
    3764:	91 e0       	ldi	r25, 0x01	; 1
    3766:	02 c0       	rjmp	.+4      	; 0x376c <radioSetTrxState+0xb4>
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <radioSetTrxState+0xb4>
    3770:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3774:	8f 71       	andi	r24, 0x1F	; 31
    3776:	8c 13       	cpse	r24, r28
    3778:	07 c0       	rjmp	.+14     	; 0x3788 <radioSetTrxState+0xd0>
    377a:	04 c0       	rjmp	.+8      	; 0x3784 <radioSetTrxState+0xcc>
    377c:	82 e4       	ldi	r24, 0x42	; 66
    377e:	05 c0       	rjmp	.+10     	; 0x378a <radioSetTrxState+0xd2>
    3780:	84 e4       	ldi	r24, 0x44	; 68
    3782:	03 c0       	rjmp	.+6      	; 0x378a <radioSetTrxState+0xd2>
    3784:	80 e4       	ldi	r24, 0x40	; 64
    3786:	01 c0       	rjmp	.+2      	; 0x378a <radioSetTrxState+0xd2>
    3788:	83 e4       	ldi	r24, 0x43	; 67
    378a:	cf 91       	pop	r28
    378c:	08 95       	ret

0000378e <radioTrxEndEvent>:
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	00 d0       	rcall	.+0      	; 0x3794 <radioTrxEndEvent+0x6>
    3794:	00 d0       	rcall	.+0      	; 0x3796 <radioTrxEndEvent+0x8>
    3796:	1f 92       	push	r1
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    37a0:	8f 71       	andi	r24, 0x1F	; 31
    37a2:	8c 83       	std	Y+4, r24	; 0x04
    37a4:	8c 81       	ldd	r24, Y+4	; 0x04
    37a6:	81 31       	cpi	r24, 0x11	; 17
    37a8:	51 f0       	breq	.+20     	; 0x37be <radioTrxEndEvent+0x30>
    37aa:	8c 81       	ldd	r24, Y+4	; 0x04
    37ac:	86 30       	cpi	r24, 0x06	; 6
    37ae:	39 f0       	breq	.+14     	; 0x37be <radioTrxEndEvent+0x30>
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	81 30       	cpi	r24, 0x01	; 1
    37b4:	21 f0       	breq	.+8      	; 0x37be <radioTrxEndEvent+0x30>
    37b6:	8c 81       	ldd	r24, Y+4	; 0x04
    37b8:	86 31       	cpi	r24, 0x16	; 22
    37ba:	09 f0       	breq	.+2      	; 0x37be <radioTrxEndEvent+0x30>
    37bc:	5f c0       	rjmp	.+190    	; 0x387c <radioTrxEndEvent+0xee>
    37be:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	60 e8       	ldi	r22, 0x80	; 128
    37c6:	71 e0       	ldi	r23, 0x01	; 1
    37c8:	82 e5       	ldi	r24, 0x52	; 82
    37ca:	9b e0       	ldi	r25, 0x0B	; 11
    37cc:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <memcpy>
    37d0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    37d4:	80 93 51 0b 	sts	0x0B51, r24	; 0x800b51 <mac_buffer_rx>
    37d8:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	ef 5a       	subi	r30, 0xAF	; 175
    37e0:	f4 4f       	sbci	r31, 0xF4	; 244
    37e2:	80 81       	ld	r24, Z
    37e4:	80 93 d1 0b 	sts	0x0BD1, r24	; 0x800bd1 <mac_buffer_rx+0x80>
    37e8:	19 82       	std	Y+1, r1	; 0x01
    37ea:	1b 82       	std	Y+3, r1	; 0x03
    37ec:	1a 82       	std	Y+2, r1	; 0x02
    37ee:	20 91 52 0b 	lds	r18, 0x0B52	; 0x800b52 <mac_buffer_rx+0x1>
    37f2:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <mac_buffer_rx+0x2>
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	98 2f       	mov	r25, r24
    37fa:	88 27       	eor	r24, r24
    37fc:	82 0f       	add	r24, r18
    37fe:	91 1d       	adc	r25, r1
    3800:	90 93 53 0b 	sts	0x0B53, r25	; 0x800b53 <mac_buffer_rx+0x2>
    3804:	80 93 52 0b 	sts	0x0B52, r24	; 0x800b52 <mac_buffer_rx+0x1>
    3808:	81 36       	cpi	r24, 0x61	; 97
    380a:	28 e8       	ldi	r18, 0x88	; 136
    380c:	92 07       	cpc	r25, r18
    380e:	09 f1       	breq	.+66     	; 0x3852 <radioTrxEndEvent+0xc4>
    3810:	40 f4       	brcc	.+16     	; 0x3822 <radioTrxEndEvent+0x94>
    3812:	83 30       	cpi	r24, 0x03	; 3
    3814:	28 e0       	ldi	r18, 0x08	; 8
    3816:	92 07       	cpc	r25, r18
    3818:	81 f0       	breq	.+32     	; 0x383a <radioTrxEndEvent+0xac>
    381a:	81 15       	cp	r24, r1
    381c:	90 48       	sbci	r25, 0x80	; 128
    381e:	99 f0       	breq	.+38     	; 0x3846 <radioTrxEndEvent+0xb8>
    3820:	28 c0       	rjmp	.+80     	; 0x3872 <radioTrxEndEvent+0xe4>
    3822:	83 36       	cpi	r24, 0x63	; 99
    3824:	2c e8       	ldi	r18, 0x8C	; 140
    3826:	92 07       	cpc	r25, r18
    3828:	01 f1       	breq	.+64     	; 0x386a <radioTrxEndEvent+0xdc>
    382a:	83 36       	cpi	r24, 0x63	; 99
    382c:	28 ec       	ldi	r18, 0xC8	; 200
    382e:	92 07       	cpc	r25, r18
    3830:	d1 f0       	breq	.+52     	; 0x3866 <radioTrxEndEvent+0xd8>
    3832:	83 36       	cpi	r24, 0x63	; 99
    3834:	98 48       	sbci	r25, 0x88	; 136
    3836:	e9 f4       	brne	.+58     	; 0x3872 <radioTrxEndEvent+0xe4>
    3838:	0e c0       	rjmp	.+28     	; 0x3856 <radioTrxEndEvent+0xc8>
    383a:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    383e:	88 23       	and	r24, r24
    3840:	c1 f0       	breq	.+48     	; 0x3872 <radioTrxEndEvent+0xe4>
    3842:	85 e1       	ldi	r24, 0x15	; 21
    3844:	15 c0       	rjmp	.+42     	; 0x3870 <radioTrxEndEvent+0xe2>
    3846:	0e 94 bc 23 	call	0x4778	; 0x4778 <macIsScanning>
    384a:	88 23       	and	r24, r24
    384c:	91 f0       	breq	.+36     	; 0x3872 <radioTrxEndEvent+0xe4>
    384e:	84 e1       	ldi	r24, 0x14	; 20
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <radioTrxEndEvent+0xe2>
    3852:	80 e1       	ldi	r24, 0x10	; 16
    3854:	0d c0       	rjmp	.+26     	; 0x3870 <radioTrxEndEvent+0xe2>
    3856:	80 91 5b 0b 	lds	r24, 0x0B5B	; 0x800b5b <mac_buffer_rx+0xa>
    385a:	82 30       	cpi	r24, 0x02	; 2
    385c:	31 f0       	breq	.+12     	; 0x386a <radioTrxEndEvent+0xdc>
    385e:	8b 3b       	cpi	r24, 0xBB	; 187
    3860:	31 f0       	breq	.+12     	; 0x386e <radioTrxEndEvent+0xe0>
    3862:	81 30       	cpi	r24, 0x01	; 1
    3864:	31 f4       	brne	.+12     	; 0x3872 <radioTrxEndEvent+0xe4>
    3866:	87 e1       	ldi	r24, 0x17	; 23
    3868:	03 c0       	rjmp	.+6      	; 0x3870 <radioTrxEndEvent+0xe2>
    386a:	88 e1       	ldi	r24, 0x18	; 24
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <radioTrxEndEvent+0xe2>
    386e:	89 e1       	ldi	r24, 0x19	; 25
    3870:	89 83       	std	Y+1, r24	; 0x01
    3872:	ce 01       	movw	r24, r28
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <mac_put_event>
    387a:	35 c0       	rjmp	.+106    	; 0x38e6 <radioTrxEndEvent+0x158>
    387c:	8c 81       	ldd	r24, Y+4	; 0x04
    387e:	82 30       	cpi	r24, 0x02	; 2
    3880:	49 f0       	breq	.+18     	; 0x3894 <radioTrxEndEvent+0x106>
    3882:	8c 81       	ldd	r24, Y+4	; 0x04
    3884:	82 31       	cpi	r24, 0x12	; 18
    3886:	31 f0       	breq	.+12     	; 0x3894 <radioTrxEndEvent+0x106>
    3888:	8c 81       	ldd	r24, Y+4	; 0x04
    388a:	89 31       	cpi	r24, 0x19	; 25
    388c:	19 f0       	breq	.+6      	; 0x3894 <radioTrxEndEvent+0x106>
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	89 30       	cpi	r24, 0x09	; 9
    3892:	49 f5       	brne	.+82     	; 0x38e6 <radioTrxEndEvent+0x158>
    3894:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <macConfig+0x17>
    3898:	19 82       	std	Y+1, r1	; 0x01
    389a:	1b 82       	std	Y+3, r1	; 0x03
    389c:	1a 82       	std	Y+2, r1	; 0x02
    389e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    38a2:	82 95       	swap	r24
    38a4:	86 95       	lsr	r24
    38a6:	87 70       	andi	r24, 0x07	; 7
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	8d 81       	ldd	r24, Y+5	; 0x05
    38ac:	83 30       	cpi	r24, 0x03	; 3
    38ae:	49 f0       	breq	.+18     	; 0x38c2 <radioTrxEndEvent+0x134>
    38b0:	20 f4       	brcc	.+8      	; 0x38ba <radioTrxEndEvent+0x12c>
    38b2:	82 30       	cpi	r24, 0x02	; 2
    38b4:	40 f4       	brcc	.+16     	; 0x38c6 <radioTrxEndEvent+0x138>
    38b6:	81 e1       	ldi	r24, 0x11	; 17
    38b8:	05 c0       	rjmp	.+10     	; 0x38c4 <radioTrxEndEvent+0x136>
    38ba:	85 30       	cpi	r24, 0x05	; 5
    38bc:	21 f4       	brne	.+8      	; 0x38c6 <radioTrxEndEvent+0x138>
    38be:	82 e1       	ldi	r24, 0x12	; 18
    38c0:	01 c0       	rjmp	.+2      	; 0x38c4 <radioTrxEndEvent+0x136>
    38c2:	83 e1       	ldi	r24, 0x13	; 19
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	88 23       	and	r24, r24
    38ca:	21 f0       	breq	.+8      	; 0x38d4 <radioTrxEndEvent+0x146>
    38cc:	ce 01       	movw	r24, r28
    38ce:	01 96       	adiw	r24, 0x01	; 1
    38d0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <mac_put_event>
    38d4:	86 e1       	ldi	r24, 0x16	; 22
    38d6:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <radioSetTrxState>
    38da:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    38de:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    38e2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <srand>
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	08 95       	ret

000038f6 <radioSendData>:
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	cf 93       	push	r28
    38fc:	c8 2f       	mov	r28, r24
    38fe:	8b 01       	movw	r16, r22
    3900:	87 fd       	sbrc	r24, 7
    3902:	2b c0       	rjmp	.+86     	; 0x395a <radioSendData+0x64>
    3904:	0e 94 4c 1b 	call	0x3698	; 0x3698 <radioIsBusy>
    3908:	81 11       	cpse	r24, r1
    390a:	fc cf       	rjmp	.-8      	; 0x3904 <radioSendData+0xe>
    390c:	89 e1       	ldi	r24, 0x19	; 25
    390e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <radioSetTrxState>
    3912:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3916:	8f 71       	andi	r24, 0x1F	; 31
    3918:	89 31       	cpi	r24, 0x19	; 25
    391a:	c1 f7       	brne	.-16     	; 0x390c <radioSendData+0x16>
    391c:	f8 01       	movw	r30, r16
    391e:	85 81       	ldd	r24, Z+5	; 0x05
    3920:	96 81       	ldd	r25, Z+6	; 0x06
    3922:	90 93 6b 0c 	sts	0x0C6B, r25	; 0x800c6b <macConfig+0x16>
    3926:	80 93 6a 0c 	sts	0x0C6A, r24	; 0x800c6a <macConfig+0x15>
    392a:	4c 2f       	mov	r20, r28
    392c:	50 e0       	ldi	r21, 0x00	; 0
    392e:	4e 5f       	subi	r20, 0xFE	; 254
    3930:	5f 4f       	sbci	r21, 0xFF	; 255
    3932:	b8 01       	movw	r22, r16
    3934:	81 e8       	ldi	r24, 0x81	; 129
    3936:	91 e0       	ldi	r25, 0x01	; 1
    3938:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <memcpy>
    393c:	ce 5f       	subi	r28, 0xFE	; 254
    393e:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    3942:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3946:	82 60       	ori	r24, 0x02	; 2
    3948:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    394c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3950:	8d 7f       	andi	r24, 0xFD	; 253
    3952:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3956:	80 e4       	ldi	r24, 0x40	; 64
    3958:	01 c0       	rjmp	.+2      	; 0x395c <radioSendData+0x66>
    395a:	82 e4       	ldi	r24, 0x42	; 66
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	08 95       	ret

00003964 <radioSetDeviceRole>:
    3964:	ee e6       	ldi	r30, 0x6E	; 110
    3966:	f1 e0       	ldi	r31, 0x01	; 1
    3968:	90 81       	ld	r25, Z
    396a:	80 fb       	bst	r24, 0
    396c:	93 f9       	bld	r25, 3
    396e:	90 83       	st	Z, r25
    3970:	08 95       	ret

00003972 <radioSetPanId>:
    3972:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    3976:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    397a:	08 95       	ret

0000397c <radioSetShortAddress>:
    397c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    3980:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    3984:	08 95       	ret

00003986 <radioSetExtendedAddress>:
    3986:	e4 e6       	ldi	r30, 0x64	; 100
    3988:	f1 e0       	ldi	r31, 0x01	; 1
    398a:	dc 01       	movw	r26, r24
    398c:	2d 91       	ld	r18, X+
    398e:	cd 01       	movw	r24, r26
    3990:	21 93       	st	Z+, r18
    3992:	ec 36       	cpi	r30, 0x6C	; 108
    3994:	b1 e0       	ldi	r27, 0x01	; 1
    3996:	fb 07       	cpc	r31, r27
    3998:	c1 f7       	brne	.-16     	; 0x398a <radioSetExtendedAddress+0x4>
    399a:	08 95       	ret

0000399c <radioRandom>:
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
    39a0:	c8 2f       	mov	r28, r24
    39a2:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    39a6:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    39aa:	83 30       	cpi	r24, 0x03	; 3
    39ac:	39 f4       	brne	.+14     	; 0x39bc <radioRandom+0x20>
    39ae:	df 70       	andi	r29, 0x0F	; 15
    39b0:	d6 30       	cpi	r29, 0x06	; 6
    39b2:	f1 f4       	brne	.+60     	; 0x39f0 <radioRandom+0x54>
    39b4:	c6 95       	lsr	r28
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	09 c0       	rjmp	.+18     	; 0x39ce <radioRandom+0x32>
    39bc:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    39c0:	83 38       	cpi	r24, 0x83	; 131
    39c2:	a9 f3       	breq	.-22     	; 0x39ae <radioRandom+0x12>
    39c4:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <radioGetPartnum>
    39c8:	87 30       	cpi	r24, 0x07	; 7
    39ca:	91 f4       	brne	.+36     	; 0x39f0 <radioRandom+0x54>
    39cc:	f0 cf       	rjmp	.-32     	; 0x39ae <radioRandom+0x12>
    39ce:	9c 17       	cp	r25, r28
    39d0:	69 f0       	breq	.+26     	; 0x39ec <radioRandom+0x50>
    39d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    39d6:	44 e0       	ldi	r20, 0x04	; 4
    39d8:	24 9f       	mul	r18, r20
    39da:	90 01       	movw	r18, r0
    39dc:	11 24       	eor	r1, r1
    39de:	80 76       	andi	r24, 0x60	; 96
    39e0:	82 95       	swap	r24
    39e2:	86 95       	lsr	r24
    39e4:	87 70       	andi	r24, 0x07	; 7
    39e6:	28 2b       	or	r18, r24
    39e8:	9f 5f       	subi	r25, 0xFF	; 255
    39ea:	f1 cf       	rjmp	.-30     	; 0x39ce <radioRandom+0x32>
    39ec:	82 2f       	mov	r24, r18
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <radioRandom+0x58>
    39f0:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <rand>
    39f4:	df 91       	pop	r29
    39f6:	cf 91       	pop	r28
    39f8:	08 95       	ret

000039fa <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    39fa:	08 95       	ret

000039fc <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    39fc:	1f 92       	push	r1
    39fe:	0f 92       	push	r0
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	0f 92       	push	r0
    3a04:	11 24       	eor	r1, r1
    3a06:	0b b6       	in	r0, 0x3b	; 59
    3a08:	0f 92       	push	r0
    3a0a:	2f 93       	push	r18
    3a0c:	3f 93       	push	r19
    3a0e:	4f 93       	push	r20
    3a10:	5f 93       	push	r21
    3a12:	6f 93       	push	r22
    3a14:	7f 93       	push	r23
    3a16:	8f 93       	push	r24
    3a18:	9f 93       	push	r25
    3a1a:	af 93       	push	r26
    3a1c:	bf 93       	push	r27
    3a1e:	ef 93       	push	r30
    3a20:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    3a22:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <radioRxStartEvent>
	}
    3a26:	ff 91       	pop	r31
    3a28:	ef 91       	pop	r30
    3a2a:	bf 91       	pop	r27
    3a2c:	af 91       	pop	r26
    3a2e:	9f 91       	pop	r25
    3a30:	8f 91       	pop	r24
    3a32:	7f 91       	pop	r23
    3a34:	6f 91       	pop	r22
    3a36:	5f 91       	pop	r21
    3a38:	4f 91       	pop	r20
    3a3a:	3f 91       	pop	r19
    3a3c:	2f 91       	pop	r18
    3a3e:	0f 90       	pop	r0
    3a40:	0b be       	out	0x3b, r0	; 59
    3a42:	0f 90       	pop	r0
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	0f 90       	pop	r0
    3a48:	1f 90       	pop	r1
    3a4a:	18 95       	reti

00003a4c <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    3a4c:	1f 92       	push	r1
    3a4e:	0f 92       	push	r0
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	0f 92       	push	r0
    3a54:	11 24       	eor	r1, r1
    3a56:	0b b6       	in	r0, 0x3b	; 59
    3a58:	0f 92       	push	r0
    3a5a:	2f 93       	push	r18
    3a5c:	3f 93       	push	r19
    3a5e:	4f 93       	push	r20
    3a60:	5f 93       	push	r21
    3a62:	6f 93       	push	r22
    3a64:	7f 93       	push	r23
    3a66:	8f 93       	push	r24
    3a68:	9f 93       	push	r25
    3a6a:	af 93       	push	r26
    3a6c:	bf 93       	push	r27
    3a6e:	ef 93       	push	r30
    3a70:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    3a72:	0e 94 c7 1b 	call	0x378e	; 0x378e <radioTrxEndEvent>
	}
    3a76:	ff 91       	pop	r31
    3a78:	ef 91       	pop	r30
    3a7a:	bf 91       	pop	r27
    3a7c:	af 91       	pop	r26
    3a7e:	9f 91       	pop	r25
    3a80:	8f 91       	pop	r24
    3a82:	7f 91       	pop	r23
    3a84:	6f 91       	pop	r22
    3a86:	5f 91       	pop	r21
    3a88:	4f 91       	pop	r20
    3a8a:	3f 91       	pop	r19
    3a8c:	2f 91       	pop	r18
    3a8e:	0f 90       	pop	r0
    3a90:	0b be       	out	0x3b, r0	; 59
    3a92:	0f 90       	pop	r0
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	0f 90       	pop	r0
    3a98:	1f 90       	pop	r1
    3a9a:	18 95       	reti

00003a9c <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    3a9c:	1f 92       	push	r1
    3a9e:	0f 92       	push	r0
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	0f 92       	push	r0
    3aa4:	11 24       	eor	r1, r1
    3aa6:	0b b6       	in	r0, 0x3b	; 59
    3aa8:	0f 92       	push	r0
    3aaa:	2f 93       	push	r18
    3aac:	3f 93       	push	r19
    3aae:	4f 93       	push	r20
    3ab0:	5f 93       	push	r21
    3ab2:	6f 93       	push	r22
    3ab4:	7f 93       	push	r23
    3ab6:	8f 93       	push	r24
    3ab8:	9f 93       	push	r25
    3aba:	af 93       	push	r26
    3abc:	bf 93       	push	r27
    3abe:	ef 93       	push	r30
    3ac0:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    3ac2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3ac6:	8f 71       	andi	r24, 0x1F	; 31
    3ac8:	86 31       	cpi	r24, 0x16	; 22
    3aca:	11 f0       	breq	.+4      	; 0x3ad0 <__vector_63+0x34>
        radioTrxEndEvent();
    3acc:	0e 94 c7 1b 	call	0x378e	; 0x378e <radioTrxEndEvent>
}
    3ad0:	ff 91       	pop	r31
    3ad2:	ef 91       	pop	r30
    3ad4:	bf 91       	pop	r27
    3ad6:	af 91       	pop	r26
    3ad8:	9f 91       	pop	r25
    3ada:	8f 91       	pop	r24
    3adc:	7f 91       	pop	r23
    3ade:	6f 91       	pop	r22
    3ae0:	5f 91       	pop	r21
    3ae2:	4f 91       	pop	r20
    3ae4:	3f 91       	pop	r19
    3ae6:	2f 91       	pop	r18
    3ae8:	0f 90       	pop	r0
    3aea:	0b be       	out	0x3b, r0	; 59
    3aec:	0f 90       	pop	r0
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	0f 90       	pop	r0
    3af2:	1f 90       	pop	r1
    3af4:	18 95       	reti

00003af6 <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    3af6:	1f 92       	push	r1
    3af8:	0f 92       	push	r0
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	0f 92       	push	r0
    3afe:	11 24       	eor	r1, r1
    3b00:	0b b6       	in	r0, 0x3b	; 59
    3b02:	0f 92       	push	r0
    3b04:	2f 93       	push	r18
    3b06:	3f 93       	push	r19
    3b08:	4f 93       	push	r20
    3b0a:	5f 93       	push	r21
    3b0c:	6f 93       	push	r22
    3b0e:	7f 93       	push	r23
    3b10:	8f 93       	push	r24
    3b12:	9f 93       	push	r25
    3b14:	af 93       	push	r26
    3b16:	bf 93       	push	r27
    3b18:	ef 93       	push	r30
    3b1a:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    3b1c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <macEdCallback>
	}
    3b20:	ff 91       	pop	r31
    3b22:	ef 91       	pop	r30
    3b24:	bf 91       	pop	r27
    3b26:	af 91       	pop	r26
    3b28:	9f 91       	pop	r25
    3b2a:	8f 91       	pop	r24
    3b2c:	7f 91       	pop	r23
    3b2e:	6f 91       	pop	r22
    3b30:	5f 91       	pop	r21
    3b32:	4f 91       	pop	r20
    3b34:	3f 91       	pop	r19
    3b36:	2f 91       	pop	r18
    3b38:	0f 90       	pop	r0
    3b3a:	0b be       	out	0x3b, r0	; 59
    3b3c:	0f 90       	pop	r0
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	0f 90       	pop	r0
    3b42:	1f 90       	pop	r1
    3b44:	18 95       	reti

00003b46 <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    3b46:	cf 92       	push	r12
    3b48:	df 92       	push	r13
    3b4a:	ef 92       	push	r14
    3b4c:	ff 92       	push	r15
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <calibrate_rc_osc+0x12>
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    3b5c:	10 91 7f 05 	lds	r17, 0x057F	; 0x80057f <once.3484>
    3b60:	11 23       	and	r17, r17
    3b62:	11 f0       	breq	.+4      	; 0x3b68 <calibrate_rc_osc+0x22>
            // Only calibrate once
            return true;
    3b64:	11 e0       	ldi	r17, 0x01	; 1
    3b66:	58 c0       	rjmp	.+176    	; 0x3c18 <calibrate_rc_osc+0xd2>

        once = true;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    3b6e:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    3b72:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    3b74:	61 e0       	ldi	r22, 0x01	; 1
    3b76:	0e 94 c3 1a 	call	0x3586	; 0x3586 <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    3b7a:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    3b7e:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    3b82:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    3b86:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    3b8a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    3b8e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3b92:	88 ee       	ldi	r24, 0xE8	; 232
    3b94:	93 e0       	ldi	r25, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3b96:	43 e0       	ldi	r20, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3b98:	56 e0       	ldi	r21, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    3b9a:	3f ef       	ldi	r19, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3b9c:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3ba0:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    3ba4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    3ba8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3bac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    3bb0:	36 bb       	out	0x16, r19	; 22
            TIFR2 = 0xFF;
    3bb2:	37 bb       	out	0x17, r19	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    3bb4:	b8 9b       	sbis	0x17, 0	; 23
    3bb6:	fe cf       	rjmp	.-4      	; 0x3bb4 <calibrate_rc_osc+0x6e>
                ;

            temp = TCNT1;
    3bb8:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3bbc:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3bc0:	7a 83       	std	Y+2, r23	; 0x02
    3bc2:	69 83       	std	Y+1, r22	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    3bc4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    3bc8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    3bcc:	69 81       	ldd	r22, Y+1	; 0x01
    3bce:	7a 81       	ldd	r23, Y+2	; 0x02
    3bd0:	6d 3f       	cpi	r22, 0xFD	; 253
    3bd2:	71 40       	sbci	r23, 0x01	; 1
    3bd4:	20 f4       	brcc	.+8      	; 0x3bde <calibrate_rc_osc+0x98>
            {
                // Too fast, slow down
                OSCCAL--;
    3bd6:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3bda:	21 50       	subi	r18, 0x01	; 1
    3bdc:	08 c0       	rjmp	.+16     	; 0x3bee <calibrate_rc_osc+0xa8>
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    3bde:	69 81       	ldd	r22, Y+1	; 0x01
    3be0:	7a 81       	ldd	r23, Y+2	; 0x02
    3be2:	63 30       	cpi	r22, 0x03	; 3
    3be4:	72 40       	sbci	r23, 0x02	; 2
    3be6:	48 f0       	brcs	.+18     	; 0x3bfa <calibrate_rc_osc+0xb4>
            {
                // Too slow, speed up
                OSCCAL++;
    3be8:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3bec:	2f 5f       	subi	r18, 0xFF	; 255
    3bee:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    3bf4:	99 f6       	brne	.-90     	; 0x3b9c <calibrate_rc_osc+0x56>
*/
bool calibrate_rc_osc(void)
{
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
    3bf6:	00 e0       	ldi	r16, 0x00	; 0
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <calibrate_rc_osc+0xb6>
            }
            else
            {
                // We are within +/- 0.5 % of our target frequency, so we're
                // done.
                success = true;
    3bfa:	01 e0       	ldi	r16, 0x01	; 1
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	0e 94 c3 1a 	call	0x3586	; 0x3586 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    3c04:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    3c08:	d0 92 81 00 	sts	0x0081, r13	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    3c0c:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
    3c10:	01 11       	cpse	r16, r1
    3c12:	a8 cf       	rjmp	.-176    	; 0x3b64 <calibrate_rc_osc+0x1e>
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    3c14:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

        return success;
    }
    else
        return 0;
}
    3c18:	81 2f       	mov	r24, r17
    3c1a:	0f 90       	pop	r0
    3c1c:	0f 90       	pop	r0
    3c1e:	df 91       	pop	r29
    3c20:	cf 91       	pop	r28
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	ff 90       	pop	r15
    3c28:	ef 90       	pop	r14
    3c2a:	df 90       	pop	r13
    3c2c:	cf 90       	pop	r12
    3c2e:	08 95       	ret

00003c30 <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	1f 92       	push	r1
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3c3e:	3f b7       	in	r19, 0x3f	; 63
    3c40:	39 83       	std	Y+1, r19	; 0x01
    3c42:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    3c44:	46 2f       	mov	r20, r22
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	bf 01       	movw	r22, r30
    3c4a:	0e 94 76 34 	call	0x68ec	; 0x68ec <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	8f bf       	out	0x3f, r24	; 63
}
    3c52:	0f 90       	pop	r0
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	08 95       	ret

00003c5a <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	1f 92       	push	r1
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	fc 01       	movw	r30, r24
    3c66:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3c68:	3f b7       	in	r19, 0x3f	; 63
    3c6a:	39 83       	std	Y+1, r19	; 0x01
    3c6c:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    3c6e:	46 2f       	mov	r20, r22
    3c70:	50 e0       	ldi	r21, 0x00	; 0
    3c72:	bf 01       	movw	r22, r30
    3c74:	0e 94 98 34 	call	0x6930	; 0x6930 <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	8f bf       	out	0x3f, r24	; 63
}
    3c7c:	0f 90       	pop	r0
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	08 95       	ret

00003c84 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    3c84:	1f 93       	push	r17
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	28 97       	sbiw	r28, 0x08	; 8
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    3c9c:	2f ef       	ldi	r18, 0xFF	; 255
    3c9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ca0:	30 93 61 0c 	sts	0x0C61, r19	; 0x800c61 <macConfig+0xc>
    3ca4:	20 93 60 0c 	sts	0x0C60, r18	; 0x800c60 <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    3ca8:	30 93 63 0c 	sts	0x0C63, r19	; 0x800c63 <macConfig+0xe>
    3cac:	20 93 62 0c 	sts	0x0C62, r18	; 0x800c62 <macConfig+0xd>
    macConfig.associated = false;
    3cb0:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    3cb4:	30 93 65 0c 	sts	0x0C65, r19	; 0x800c65 <macConfig+0x10>
    3cb8:	20 93 64 0c 	sts	0x0C64, r18	; 0x800c64 <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    3cbc:	30 93 67 0c 	sts	0x0C67, r19	; 0x800c67 <macConfig+0x12>
    3cc0:	20 93 66 0c 	sts	0x0C66, r18	; 0x800c66 <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    3cc4:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <macConfig+0x13>
    macConfig.busy = 0;
    3cc8:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    3cd2:	0e 94 02 1b 	call	0x3604	; 0x3604 <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    3cd6:	10 93 69 0c 	sts	0x0C69, r17	; 0x800c69 <macConfig+0x14>
    if (Channel != 0xff)
    3cda:	1f 3f       	cpi	r17, 0xFF	; 255
    3cdc:	19 f0       	breq	.+6      	; 0x3ce4 <macInit+0x60>
        radioSetOperatingChannel(Channel);
    3cde:	81 2f       	mov	r24, r17
    3ce0:	0e 94 92 1a 	call	0x3524	; 0x3524 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	0e 94 2e 1b 	call	0x365c	; 0x365c <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    3cea:	88 e0       	ldi	r24, 0x08	; 8
    3cec:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    3cf0:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    3cf4:	86 e1       	ldi	r24, 0x16	; 22
    3cf6:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    3cfa:	45 e5       	ldi	r20, 0x55	; 85
    3cfc:	5c e0       	ldi	r21, 0x0C	; 12
    3cfe:	68 e0       	ldi	r22, 0x08	; 8
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    3d0e:	8f ef       	ldi	r24, 0xFF	; 255
    3d10:	9f ef       	ldi	r25, 0xFF	; 255
    3d12:	0e 94 be 1c 	call	0x397c	; 0x397c <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
    3d18:	9f ef       	ldi	r25, 0xFF	; 255
    3d1a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    3d1e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    3d22:	8f 70       	andi	r24, 0x0F	; 15
    3d24:	80 62       	ori	r24, 0x20	; 32
    3d26:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    3d2a:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <macConfig>
    3d2e:	89 83       	std	Y+1, r24	; 0x01
    3d30:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <macConfig+0x1>
    3d34:	8a 83       	std	Y+2, r24	; 0x02
    3d36:	80 91 57 0c 	lds	r24, 0x0C57	; 0x800c57 <macConfig+0x2>
    3d3a:	8b 83       	std	Y+3, r24	; 0x03
    3d3c:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <macConfig+0x3>
    3d40:	8c 83       	std	Y+4, r24	; 0x04
    3d42:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <macConfig+0x4>
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <macConfig+0x5>
    3d4c:	8e 83       	std	Y+6, r24	; 0x06
    3d4e:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <macConfig+0x6>
    3d52:	8f 83       	std	Y+7, r24	; 0x07
    3d54:	80 91 5c 0c 	lds	r24, 0x0C5C	; 0x800c5c <macConfig+0x7>
    3d58:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    3d5a:	ce 01       	movw	r24, r28
    3d5c:	01 96       	adiw	r24, 0x01	; 1
    3d5e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    3d62:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <macInitNodes>
}
    3d66:	28 96       	adiw	r28, 0x08	; 8
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	f8 94       	cli
    3d6c:	de bf       	out	0x3e, r29	; 62
    3d6e:	0f be       	out	0x3f, r0	; 63
    3d70:	cd bf       	out	0x3d, r28	; 61
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	08 95       	ret

00003d7a <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    3d7a:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    3d7e:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <radioSetOperatingChannel>

00003d82 <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    3d82:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <associationTimer>
    3d86:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <macTimerEnd>
    3d8a:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <macConfig+0x8>
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	89 27       	eor	r24, r25
    3d92:	0c 94 3d 02 	jmp	0x47a	; 0x47a <appAssociateConfirm>

00003d96 <macAssociate>:
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	ec 01       	movw	r28, r24
    3d9c:	86 2f       	mov	r24, r22
    3d9e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <macSetOperatingChannel>
    3da2:	e3 ed       	ldi	r30, 0xD3	; 211
    3da4:	fb e0       	ldi	r31, 0x0B	; 11
    3da6:	83 e6       	ldi	r24, 0x63	; 99
    3da8:	98 ec       	ldi	r25, 0xC8	; 200
    3daa:	92 83       	std	Z+2, r25	; 0x02
    3dac:	81 83       	std	Z+1, r24	; 0x01
    3dae:	a5 e5       	ldi	r26, 0x55	; 85
    3db0:	bc e0       	ldi	r27, 0x0C	; 12
    3db2:	1a 96       	adiw	r26, 0x0a	; 10
    3db4:	8c 91       	ld	r24, X
    3db6:	1a 97       	sbiw	r26, 0x0a	; 10
    3db8:	91 e0       	ldi	r25, 0x01	; 1
    3dba:	98 0f       	add	r25, r24
    3dbc:	1a 96       	adiw	r26, 0x0a	; 10
    3dbe:	9c 93       	st	X, r25
    3dc0:	1a 97       	sbiw	r26, 0x0a	; 10
    3dc2:	83 83       	std	Z+3, r24	; 0x03
    3dc4:	1b 96       	adiw	r26, 0x0b	; 11
    3dc6:	8d 91       	ld	r24, X+
    3dc8:	9c 91       	ld	r25, X
    3dca:	1c 97       	sbiw	r26, 0x0c	; 12
    3dcc:	95 83       	std	Z+5, r25	; 0x05
    3dce:	84 83       	std	Z+4, r24	; 0x04
    3dd0:	d7 83       	std	Z+7, r29	; 0x07
    3dd2:	c6 83       	std	Z+6, r28	; 0x06
    3dd4:	8c 91       	ld	r24, X
    3dd6:	80 87       	std	Z+8, r24	; 0x08
    3dd8:	11 96       	adiw	r26, 0x01	; 1
    3dda:	8c 91       	ld	r24, X
    3ddc:	11 97       	sbiw	r26, 0x01	; 1
    3dde:	81 87       	std	Z+9, r24	; 0x09
    3de0:	12 96       	adiw	r26, 0x02	; 2
    3de2:	8c 91       	ld	r24, X
    3de4:	12 97       	sbiw	r26, 0x02	; 2
    3de6:	82 87       	std	Z+10, r24	; 0x0a
    3de8:	13 96       	adiw	r26, 0x03	; 3
    3dea:	8c 91       	ld	r24, X
    3dec:	13 97       	sbiw	r26, 0x03	; 3
    3dee:	83 87       	std	Z+11, r24	; 0x0b
    3df0:	14 96       	adiw	r26, 0x04	; 4
    3df2:	8c 91       	ld	r24, X
    3df4:	14 97       	sbiw	r26, 0x04	; 4
    3df6:	84 87       	std	Z+12, r24	; 0x0c
    3df8:	15 96       	adiw	r26, 0x05	; 5
    3dfa:	8c 91       	ld	r24, X
    3dfc:	15 97       	sbiw	r26, 0x05	; 5
    3dfe:	85 87       	std	Z+13, r24	; 0x0d
    3e00:	16 96       	adiw	r26, 0x06	; 6
    3e02:	8c 91       	ld	r24, X
    3e04:	16 97       	sbiw	r26, 0x06	; 6
    3e06:	86 87       	std	Z+14, r24	; 0x0e
    3e08:	17 96       	adiw	r26, 0x07	; 7
    3e0a:	8c 91       	ld	r24, X
    3e0c:	87 87       	std	Z+15, r24	; 0x0f
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	80 8b       	std	Z+16, r24	; 0x10
    3e12:	d2 8b       	std	Z+18, r29	; 0x12
    3e14:	c1 8b       	std	Z+17, r28	; 0x11
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	83 8b       	std	Z+19, r24	; 0x13
    3e1a:	64 ed       	ldi	r22, 0xD4	; 212
    3e1c:	7b e0       	ldi	r23, 0x0B	; 11
    3e1e:	83 e1       	ldi	r24, 0x13	; 19
    3e20:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <radioSendData>
    3e24:	61 ec       	ldi	r22, 0xC1	; 193
    3e26:	7e e1       	ldi	r23, 0x1E	; 30
    3e28:	88 ee       	ldi	r24, 0xE8	; 232
    3e2a:	93 e0       	ldi	r25, 0x03	; 3
    3e2c:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
    3e30:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <associationTimer>
    3e34:	df 91       	pop	r29
    3e36:	cf 91       	pop	r28
    3e38:	08 95       	ret

00003e3a <macIsChild>:
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	61 f0       	breq	.+24     	; 0x3e56 <macIsChild+0x1c>
    3e3e:	e0 e8       	ldi	r30, 0x80	; 128
    3e40:	f5 e0       	ldi	r31, 0x05	; 5
    3e42:	20 81       	ld	r18, Z
    3e44:	31 81       	ldd	r19, Z+1	; 0x01
    3e46:	28 17       	cp	r18, r24
    3e48:	39 07       	cpc	r19, r25
    3e4a:	39 f0       	breq	.+14     	; 0x3e5a <macIsChild+0x20>
    3e4c:	33 96       	adiw	r30, 0x03	; 3
    3e4e:	26 e0       	ldi	r18, 0x06	; 6
    3e50:	ec 3a       	cpi	r30, 0xAC	; 172
    3e52:	f2 07       	cpc	r31, r18
    3e54:	b1 f7       	brne	.-20     	; 0x3e42 <macIsChild+0x8>
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	08 95       	ret
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	08 95       	ret

00003e5e <macAddChild>:
    3e5e:	e0 e8       	ldi	r30, 0x80	; 128
    3e60:	f5 e0       	ldi	r31, 0x05	; 5
    3e62:	df 01       	movw	r26, r30
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	4d 91       	ld	r20, X+
    3e6a:	5c 91       	ld	r21, X
    3e6c:	11 97       	sbiw	r26, 0x01	; 1
    3e6e:	48 17       	cp	r20, r24
    3e70:	59 07       	cpc	r21, r25
    3e72:	69 f4       	brne	.+26     	; 0x3e8e <macAddChild+0x30>
    3e74:	f9 01       	movw	r30, r18
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	2e 0f       	add	r18, r30
    3e7c:	3f 1f       	adc	r19, r31
    3e7e:	f9 01       	movw	r30, r18
    3e80:	ee 57       	subi	r30, 0x7E	; 126
    3e82:	fa 4f       	sbci	r31, 0xFA	; 250
    3e84:	80 81       	ld	r24, Z
    3e86:	8e 7f       	andi	r24, 0xFE	; 254
    3e88:	8d 7f       	andi	r24, 0xFD	; 253
    3e8a:	80 83       	st	Z, r24
    3e8c:	08 95       	ret
    3e8e:	2f 5f       	subi	r18, 0xFF	; 255
    3e90:	3f 4f       	sbci	r19, 0xFF	; 255
    3e92:	13 96       	adiw	r26, 0x03	; 3
    3e94:	24 36       	cpi	r18, 0x64	; 100
    3e96:	31 05       	cpc	r19, r1
    3e98:	39 f7       	brne	.-50     	; 0x3e68 <macAddChild+0xa>
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	42 2f       	mov	r20, r18
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	67 2b       	or	r22, r23
    3ea6:	a9 f4       	brne	.+42     	; 0x3ed2 <macAddChild+0x74>
    3ea8:	f9 01       	movw	r30, r18
    3eaa:	ee 0f       	add	r30, r30
    3eac:	ff 1f       	adc	r31, r31
    3eae:	2e 0f       	add	r18, r30
    3eb0:	3f 1f       	adc	r19, r31
    3eb2:	f9 01       	movw	r30, r18
    3eb4:	e0 58       	subi	r30, 0x80	; 128
    3eb6:	fa 4f       	sbci	r31, 0xFA	; 250
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	f9 01       	movw	r30, r18
    3ebe:	ee 57       	subi	r30, 0x7E	; 126
    3ec0:	fa 4f       	sbci	r31, 0xFA	; 250
    3ec2:	90 81       	ld	r25, Z
    3ec4:	9e 7f       	andi	r25, 0xFE	; 254
    3ec6:	9d 7f       	andi	r25, 0xFD	; 253
    3ec8:	90 83       	st	Z, r25
    3eca:	84 2f       	mov	r24, r20
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0c 94 36 02 	jmp	0x46c	; 0x46c <appChildAssociated>
    3ed2:	2f 5f       	subi	r18, 0xFF	; 255
    3ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed6:	33 96       	adiw	r30, 0x03	; 3
    3ed8:	24 36       	cpi	r18, 0x64	; 100
    3eda:	31 05       	cpc	r19, r1
    3edc:	01 f7       	brne	.-64     	; 0x3e9e <macAddChild+0x40>
    3ede:	08 95       	ret

00003ee0 <macRemoveChild>:
    3ee0:	e0 e8       	ldi	r30, 0x80	; 128
    3ee2:	f5 e0       	ldi	r31, 0x05	; 5
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 81       	ld	r20, Z
    3eea:	51 81       	ldd	r21, Z+1	; 0x01
    3eec:	48 17       	cp	r20, r24
    3eee:	59 07       	cpc	r21, r25
    3ef0:	59 f4       	brne	.+22     	; 0x3f08 <macRemoveChild+0x28>
    3ef2:	f9 01       	movw	r30, r18
    3ef4:	ee 0f       	add	r30, r30
    3ef6:	ff 1f       	adc	r31, r31
    3ef8:	2e 0f       	add	r18, r30
    3efa:	3f 1f       	adc	r19, r31
    3efc:	f9 01       	movw	r30, r18
    3efe:	e0 58       	subi	r30, 0x80	; 128
    3f00:	fa 4f       	sbci	r31, 0xFA	; 250
    3f02:	11 82       	std	Z+1, r1	; 0x01
    3f04:	10 82       	st	Z, r1
    3f06:	08 95       	ret
    3f08:	2f 5f       	subi	r18, 0xFF	; 255
    3f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0c:	33 96       	adiw	r30, 0x03	; 3
    3f0e:	24 36       	cpi	r18, 0x64	; 100
    3f10:	31 05       	cpc	r19, r1
    3f12:	51 f7       	brne	.-44     	; 0x3ee8 <macRemoveChild+0x8>
    3f14:	08 95       	ret

00003f16 <macInitNodes>:
    3f16:	08 95       	ret

00003f18 <macWakeChildNode>:
    3f18:	08 95       	ret

00003f1a <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    3f1a:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    3f1c:	95 85       	ldd	r25, Z+13	; 0x0d
    3f1e:	9f 77       	andi	r25, 0x7F	; 127
    3f20:	95 87       	std	Z+13, r25	; 0x0d
    3f22:	08 95       	ret

00003f24 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    3f24:	e3 ed       	ldi	r30, 0xD3	; 211
    3f26:	fb e0       	ldi	r31, 0x0B	; 11
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e8       	ldi	r25, 0x80	; 128
    3f2c:	92 83       	std	Z+2, r25	; 0x02
    3f2e:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    3f30:	a5 e5       	ldi	r26, 0x55	; 85
    3f32:	bc e0       	ldi	r27, 0x0C	; 12
    3f34:	19 96       	adiw	r26, 0x09	; 9
    3f36:	8c 91       	ld	r24, X
    3f38:	19 97       	sbiw	r26, 0x09	; 9
    3f3a:	91 e0       	ldi	r25, 0x01	; 1
    3f3c:	98 0f       	add	r25, r24
    3f3e:	19 96       	adiw	r26, 0x09	; 9
    3f40:	9c 93       	st	X, r25
    3f42:	19 97       	sbiw	r26, 0x09	; 9
    3f44:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    3f46:	1b 96       	adiw	r26, 0x0b	; 11
    3f48:	8d 91       	ld	r24, X+
    3f4a:	9c 91       	ld	r25, X
    3f4c:	1c 97       	sbiw	r26, 0x0c	; 12
    3f4e:	95 83       	std	Z+5, r25	; 0x05
    3f50:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    3f52:	1d 96       	adiw	r26, 0x0d	; 13
    3f54:	8d 91       	ld	r24, X+
    3f56:	9c 91       	ld	r25, X
    3f58:	1e 97       	sbiw	r26, 0x0e	; 14
    3f5a:	97 83       	std	Z+7, r25	; 0x07
    3f5c:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    3f5e:	8f ef       	ldi	r24, 0xFF	; 255
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	91 87       	std	Z+9, r25	; 0x09
    3f64:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    3f66:	86 e0       	ldi	r24, 0x06	; 6
    3f68:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    3f6a:	53 96       	adiw	r26, 0x13	; 19
    3f6c:	8c 91       	ld	r24, X
    3f6e:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    3f70:	64 ed       	ldi	r22, 0xD4	; 212
    3f72:	7b e0       	ldi	r23, 0x0B	; 11
    3f74:	8b e0       	ldi	r24, 0x0B	; 11
    3f76:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <radioSendData>

00003f7a <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    3f7a:	64 ed       	ldi	r22, 0xD4	; 212
    3f7c:	7b e0       	ldi	r23, 0x0B	; 11
    3f7e:	80 91 d3 0b 	lds	r24, 0x0BD3	; 0x800bd3 <mac_buffer_tx>
    3f82:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <radioSendData>

00003f86 <macDataRequestInt>:
    3f86:	ef 92       	push	r14
    3f88:	ff 92       	push	r15
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	e0 91 62 0c 	lds	r30, 0x0C62	; 0x800c62 <macConfig+0xd>
    3f96:	f0 91 63 0c 	lds	r31, 0x0C63	; 0x800c63 <macConfig+0xe>
    3f9a:	8e 17       	cp	r24, r30
    3f9c:	9f 07       	cpc	r25, r31
    3f9e:	09 f4       	brne	.+2      	; 0x3fa2 <macDataRequestInt+0x1c>
    3fa0:	6e c0       	rjmp	.+220    	; 0x407e <__stack+0x7e>
    3fa2:	8f 3f       	cpi	r24, 0xFF	; 255
    3fa4:	3f ef       	ldi	r19, 0xFF	; 255
    3fa6:	93 07       	cpc	r25, r19
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <macDataRequestInt+0x26>
    3faa:	69 c0       	rjmp	.+210    	; 0x407e <__stack+0x7e>
    3fac:	30 91 5d 0c 	lds	r19, 0x0C5D	; 0x800c5d <macConfig+0x8>
    3fb0:	33 23       	and	r19, r19
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <macDataRequestInt+0x30>
    3fb4:	64 c0       	rjmp	.+200    	; 0x407e <__stack+0x7e>
    3fb6:	c2 2f       	mov	r28, r18
    3fb8:	7a 01       	movw	r14, r20
    3fba:	d6 2f       	mov	r29, r22
    3fbc:	8c 01       	movw	r16, r24
    3fbe:	81 e6       	ldi	r24, 0x61	; 97
    3fc0:	98 e8       	ldi	r25, 0x88	; 136
    3fc2:	90 93 d5 0b 	sts	0x0BD5, r25	; 0x800bd5 <mac_buffer_tx+0x2>
    3fc6:	80 93 d4 0b 	sts	0x0BD4, r24	; 0x800bd4 <mac_buffer_tx+0x1>
    3fca:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <macConfig+0xa>
    3fce:	91 e0       	ldi	r25, 0x01	; 1
    3fd0:	98 0f       	add	r25, r24
    3fd2:	90 93 5f 0c 	sts	0x0C5F, r25	; 0x800c5f <macConfig+0xa>
    3fd6:	80 93 d6 0b 	sts	0x0BD6, r24	; 0x800bd6 <mac_buffer_tx+0x3>
    3fda:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <macConfig+0xb>
    3fde:	90 91 61 0c 	lds	r25, 0x0C61	; 0x800c61 <macConfig+0xc>
    3fe2:	90 93 d8 0b 	sts	0x0BD8, r25	; 0x800bd8 <mac_buffer_tx+0x5>
    3fe6:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <mac_buffer_tx+0x4>
    3fea:	f0 93 dc 0b 	sts	0x0BDC, r31	; 0x800bdc <mac_buffer_tx+0x9>
    3fee:	e0 93 db 0b 	sts	0x0BDB, r30	; 0x800bdb <mac_buffer_tx+0x8>
    3ff2:	10 93 de 0b 	sts	0x0BDE, r17	; 0x800bde <mac_buffer_tx+0xb>
    3ff6:	00 93 dd 0b 	sts	0x0BDD, r16	; 0x800bdd <mac_buffer_tx+0xa>
    3ffa:	f0 93 e0 0b 	sts	0x0BE0, r31	; 0x800be0 <mac_buffer_tx+0xd>
    3ffe:	e0 93 df 0b 	sts	0x0BDF, r30	; 0x800bdf <mac_buffer_tx+0xc>
    4002:	c8 01       	movw	r24, r16
    4004:	0e 94 94 23 	call	0x4728	; 0x4728 <macSendRoutingPacket>
    4008:	c6 30       	cpi	r28, 0x06	; 6
    400a:	29 f4       	brne	.+10     	; 0x4016 <__stack+0x16>
    400c:	10 93 da 0b 	sts	0x0BDA, r17	; 0x800bda <mac_buffer_tx+0x7>
    4010:	00 93 d9 0b 	sts	0x0BD9, r16	; 0x800bd9 <mac_buffer_tx+0x6>
    4014:	08 c0       	rjmp	.+16     	; 0x4026 <__stack+0x26>
    4016:	80 91 64 0c 	lds	r24, 0x0C64	; 0x800c64 <macConfig+0xf>
    401a:	90 91 65 0c 	lds	r25, 0x0C65	; 0x800c65 <macConfig+0x10>
    401e:	90 93 da 0b 	sts	0x0BDA, r25	; 0x800bda <mac_buffer_tx+0x7>
    4022:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <mac_buffer_tx+0x6>
    4026:	c0 93 e1 0b 	sts	0x0BE1, r28	; 0x800be1 <mac_buffer_tx+0xe>
    402a:	f7 01       	movw	r30, r14
    402c:	22 ee       	ldi	r18, 0xE2	; 226
    402e:	3b e0       	ldi	r19, 0x0B	; 11
    4030:	d9 01       	movw	r26, r18
    4032:	8a 2f       	mov	r24, r26
    4034:	82 1b       	sub	r24, r18
    4036:	8d 17       	cp	r24, r29
    4038:	18 f4       	brcc	.+6      	; 0x4040 <__stack+0x40>
    403a:	81 91       	ld	r24, Z+
    403c:	8d 93       	st	X+, r24
    403e:	f9 cf       	rjmp	.-14     	; 0x4032 <__stack+0x32>
    4040:	80 91 d9 0b 	lds	r24, 0x0BD9	; 0x800bd9 <mac_buffer_tx+0x6>
    4044:	90 91 da 0b 	lds	r25, 0x0BDA	; 0x800bda <mac_buffer_tx+0x7>
    4048:	20 91 62 0c 	lds	r18, 0x0C62	; 0x800c62 <macConfig+0xd>
    404c:	30 91 63 0c 	lds	r19, 0x0C63	; 0x800c63 <macConfig+0xe>
    4050:	82 17       	cp	r24, r18
    4052:	93 07       	cpc	r25, r19
    4054:	a1 f0       	breq	.+40     	; 0x407e <__stack+0x7e>
    4056:	01 96       	adiw	r24, 0x01	; 1
    4058:	91 f0       	breq	.+36     	; 0x407e <__stack+0x7e>
    405a:	d2 5f       	subi	r29, 0xF2	; 242
    405c:	d0 93 d3 0b 	sts	0x0BD3, r29	; 0x800bd3 <mac_buffer_tx>
    4060:	c6 50       	subi	r28, 0x06	; 6
    4062:	c2 30       	cpi	r28, 0x02	; 2
    4064:	18 f0       	brcs	.+6      	; 0x406c <__stack+0x6c>
    4066:	87 e0       	ldi	r24, 0x07	; 7
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	02 c0       	rjmp	.+4      	; 0x4070 <__stack+0x70>
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	6d eb       	ldi	r22, 0xBD	; 189
    4072:	7f e1       	ldi	r23, 0x1F	; 31
    4074:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	80 93 6c 0c 	sts	0x0C6C, r24	; 0x800c6c <macConfig+0x17>
    407e:	df 91       	pop	r29
    4080:	cf 91       	pop	r28
    4082:	1f 91       	pop	r17
    4084:	0f 91       	pop	r16
    4086:	ff 90       	pop	r15
    4088:	ef 90       	pop	r14
    408a:	08 95       	ret

0000408c <macDataRequest>:
    408c:	21 e0       	ldi	r18, 0x01	; 1
    408e:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <macDataRequestInt>

00004092 <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    4092:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <mac_buffer_rx+0xe>
    4096:	8f 77       	andi	r24, 0x7F	; 127
    4098:	83 30       	cpi	r24, 0x03	; 3
    409a:	29 f1       	breq	.+74     	; 0x40e6 <macDataIndication+0x54>
    409c:	28 f4       	brcc	.+10     	; 0x40a8 <macDataIndication+0x16>
    409e:	81 30       	cpi	r24, 0x01	; 1
    40a0:	41 f0       	breq	.+16     	; 0x40b2 <macDataIndication+0x20>
    40a2:	82 30       	cpi	r24, 0x02	; 2
    40a4:	d1 f0       	breq	.+52     	; 0x40da <macDataIndication+0x48>
    40a6:	08 95       	ret
    40a8:	84 30       	cpi	r24, 0x04	; 4
    40aa:	19 f1       	breq	.+70     	; 0x40f2 <macDataIndication+0x60>
    40ac:	86 30       	cpi	r24, 0x06	; 6
    40ae:	19 f0       	breq	.+6      	; 0x40b6 <macDataIndication+0x24>
    40b0:	08 95       	ret
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    40b2:	0c 94 0d 02 	jmp	0x41a	; 0x41a <appDataIndication>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    40b6:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <mac_buffer_rx+0xf>
    40ba:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    40be:	40 91 59 0b 	lds	r20, 0x0B59	; 0x800b59 <mac_buffer_rx+0x8>
    40c2:	50 91 5a 0b 	lds	r21, 0x0B5A	; 0x800b5a <mac_buffer_rx+0x9>
    40c6:	20 91 64 0c 	lds	r18, 0x0C64	; 0x800c64 <macConfig+0xf>
    40ca:	30 91 65 0c 	lds	r19, 0x0C65	; 0x800c65 <macConfig+0x10>
    40ce:	42 17       	cp	r20, r18
    40d0:	53 07       	cpc	r21, r19
    40d2:	a9 f4       	brne	.+42     	; 0x40fe <macDataIndication+0x6c>
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    40d4:	99 27       	eor	r25, r25
    40d6:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <macWakeChildNode>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    40da:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <mac_buffer_rx+0xc>
    40de:	90 91 5e 0b 	lds	r25, 0x0B5E	; 0x800b5e <mac_buffer_rx+0xd>
    40e2:	0c 94 ab 01 	jmp	0x356	; 0x356 <appPingReq>
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    40e6:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <mac_buffer_rx+0xc>
    40ea:	90 91 5e 0b 	lds	r25, 0x0B5E	; 0x800b5e <mac_buffer_rx+0xd>
    40ee:	0c 94 af 01 	jmp	0x35e	; 0x35e <appPingRsp>
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    40f2:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <mac_buffer_rx+0xf>
    40f6:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <mac_buffer_rx+0x10>
    40fa:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <macRemoveChild>
    40fe:	08 95       	ret

00004100 <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    4100:	0f 93       	push	r16
    4102:	1f 93       	push	r17
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	cd b7       	in	r28, 0x3d	; 61
    410a:	de b7       	in	r29, 0x3e	; 62
    410c:	60 97       	sbiw	r28, 0x10	; 16
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    4118:	81 e6       	ldi	r24, 0x61	; 97
    411a:	98 e8       	ldi	r25, 0x88	; 136
    411c:	9a 83       	std	Y+2, r25	; 0x02
    411e:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    4120:	05 e5       	ldi	r16, 0x55	; 85
    4122:	1c e0       	ldi	r17, 0x0C	; 12
    4124:	f8 01       	movw	r30, r16
    4126:	82 85       	ldd	r24, Z+10	; 0x0a
    4128:	91 e0       	ldi	r25, 0x01	; 1
    412a:	98 0f       	add	r25, r24
    412c:	92 87       	std	Z+10, r25	; 0x0a
    412e:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    4130:	83 85       	ldd	r24, Z+11	; 0x0b
    4132:	94 85       	ldd	r25, Z+12	; 0x0c
    4134:	9d 83       	std	Y+5, r25	; 0x05
    4136:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    4138:	85 85       	ldd	r24, Z+13	; 0x0d
    413a:	96 85       	ldd	r25, Z+14	; 0x0e
    413c:	99 87       	std	Y+9, r25	; 0x09
    413e:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    4140:	9d 87       	std	Y+13, r25	; 0x0d
    4142:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    4144:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <pingAddr>
    4148:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <pingAddr+0x1>
    414c:	9b 87       	std	Y+11, r25	; 0x0b
    414e:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    4150:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <pingType>
    4154:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    4156:	0e 94 86 1a 	call	0x350c	; 0x350c <radioGetSavedRssiValue>
    415a:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    415c:	0e 94 8f 1a 	call	0x351e	; 0x351e <radioGetSavedLqiValue>
    4160:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    4162:	f8 01       	movw	r30, r16
    4164:	87 85       	ldd	r24, Z+15	; 0x0f
    4166:	90 89       	ldd	r25, Z+16	; 0x10
    4168:	9f 83       	std	Y+7, r25	; 0x07
    416a:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    416c:	be 01       	movw	r22, r28
    416e:	6f 5f       	subi	r22, 0xFF	; 255
    4170:	7f 4f       	sbci	r23, 0xFF	; 255
    4172:	80 e1       	ldi	r24, 0x10	; 16
    4174:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <radioSendData>
}
    4178:	60 96       	adiw	r28, 0x10	; 16
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	f8 94       	cli
    417e:	de bf       	out	0x3e, r29	; 62
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	cd bf       	out	0x3d, r28	; 61
    4184:	df 91       	pop	r29
    4186:	cf 91       	pop	r28
    4188:	1f 91       	pop	r17
    418a:	0f 91       	pop	r16
    418c:	08 95       	ret

0000418e <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    418e:	20 91 62 0c 	lds	r18, 0x0C62	; 0x800c62 <macConfig+0xd>
    4192:	30 91 63 0c 	lds	r19, 0x0C63	; 0x800c63 <macConfig+0xe>
    4196:	62 17       	cp	r22, r18
    4198:	73 07       	cpc	r23, r19
    419a:	91 f0       	breq	.+36     	; 0x41c0 <macPing+0x32>
        // Don't send to self
        return;

    if (!macConfig.associated)
    419c:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <macConfig+0x8>
    41a0:	99 23       	and	r25, r25
    41a2:	71 f0       	breq	.+28     	; 0x41c0 <macPing+0x32>
        // Broadcast addr
        return;

    pingAddr = addr;
    41a4:	70 93 b0 06 	sts	0x06B0, r23	; 0x8006b0 <pingAddr+0x1>
    41a8:	60 93 af 06 	sts	0x06AF, r22	; 0x8006af <pingAddr>
    pingType = pingTypeArg;
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <pingType+0x1>
    41b2:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    41b6:	0e 94 80 20 	call	0x4100	; 0x4100 <mp>
        macConfig.busy = true;
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	80 93 6c 0c 	sts	0x0C6C, r24	; 0x800c6c <macConfig+0x17>
    41c0:	08 95       	ret

000041c2 <mac_event_pending>:

    @return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
    u8 head = event_queue.head;
    41c2:	20 91 6e 0c 	lds	r18, 0x0C6E	; 0x800c6e <event_queue>
    return (head != event_queue.tail);
    41c6:	90 91 6f 0c 	lds	r25, 0x0C6F	; 0x800c6f <event_queue+0x1>
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	29 13       	cpse	r18, r25
    41ce:	01 c0       	rjmp	.+2      	; 0x41d2 <mac_event_pending+0x10>
    41d0:	80 e0       	ldi	r24, 0x00	; 0
}
    41d2:	08 95       	ret

000041d4 <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
*/
void mac_put_event(event_object_t *object)
{
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	ec 01       	movw	r28, r24
    u8 newhead = event_queue.head;
    41da:	40 91 6e 0c 	lds	r20, 0x0C6E	; 0x800c6e <event_queue>

    if ((newhead + 1) % MAX_EVENTS == event_queue.tail)
    41de:	24 2f       	mov	r18, r20
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	e0 91 6f 0c 	lds	r30, 0x0C6F	; 0x800c6f <event_queue+0x1>
    41e6:	c9 01       	movw	r24, r18
    41e8:	01 96       	adiw	r24, 0x01	; 1
    41ea:	6e e1       	ldi	r22, 0x1E	; 30
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__divmodhi4>
    41f2:	6e 2f       	mov	r22, r30
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	86 17       	cp	r24, r22
    41f8:	97 07       	cpc	r25, r23
    41fa:	a9 f0       	breq	.+42     	; 0x4226 <mac_put_event+0x52>
        return;

    //    newhead = event_queue.head;

    // store in queue
    event_queue.event_object[newhead] = *object;
    41fc:	f9 01       	movw	r30, r18
    41fe:	ee 0f       	add	r30, r30
    4200:	ff 1f       	adc	r31, r31
    4202:	2e 0f       	add	r18, r30
    4204:	3f 1f       	adc	r19, r31
    4206:	f9 01       	movw	r30, r18
    4208:	e2 59       	subi	r30, 0x92	; 146
    420a:	f3 4f       	sbci	r31, 0xF3	; 243
    420c:	88 81       	ld	r24, Y
    420e:	99 81       	ldd	r25, Y+1	; 0x01
    4210:	aa 81       	ldd	r26, Y+2	; 0x02
    4212:	82 83       	std	Z+2, r24	; 0x02
    4214:	93 83       	std	Z+3, r25	; 0x03
    4216:	a4 83       	std	Z+4, r26	; 0x04

    // calculate new head index
    newhead++;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	84 0f       	add	r24, r20
    if (newhead >= MAX_EVENTS)
    421c:	8e 31       	cpi	r24, 0x1E	; 30
    421e:	08 f0       	brcs	.+2      	; 0x4222 <mac_put_event+0x4e>
        newhead = 0;
    4220:	80 e0       	ldi	r24, 0x00	; 0
    event_queue.head = newhead;
    4222:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <event_queue>
}
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	08 95       	ret

0000422c <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
*/
event_object_t * mac_get_event(void)
{
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	1f 92       	push	r1
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    event_object_t *object = NULL;
    volatile u8 newtail;

    newtail = event_queue.tail;
    4236:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <event_queue+0x1>
    423a:	89 83       	std	Y+1, r24	; 0x01

    object = &(event_queue.event_object[newtail]);
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9c 01       	movw	r18, r24
    4242:	22 0f       	add	r18, r18
    4244:	33 1f       	adc	r19, r19
    4246:	82 0f       	add	r24, r18
    4248:	93 1f       	adc	r25, r19
    424a:	80 59       	subi	r24, 0x90	; 144
    424c:	93 4f       	sbci	r25, 0xF3	; 243

    // calculate new tail
    newtail++;
    424e:	29 81       	ldd	r18, Y+1	; 0x01
    4250:	2f 5f       	subi	r18, 0xFF	; 255
    4252:	29 83       	std	Y+1, r18	; 0x01
    if (newtail >= MAX_EVENTS)
    4254:	29 81       	ldd	r18, Y+1	; 0x01
    4256:	2e 31       	cpi	r18, 0x1E	; 30
    4258:	08 f0       	brcs	.+2      	; 0x425c <mac_get_event+0x30>
        newtail = 0;
    425a:	19 82       	std	Y+1, r1	; 0x01

    event_queue.tail = newtail;
    425c:	29 81       	ldd	r18, Y+1	; 0x01
    425e:	20 93 6f 0c 	sts	0x0C6F, r18	; 0x800c6f <event_queue+0x1>

    return(object);
}
    4262:	0f 90       	pop	r0
    4264:	df 91       	pop	r29
    4266:	cf 91       	pop	r28
    4268:	08 95       	ret

0000426a <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
*/
void macTask(void)
{
    426a:	cf 93       	push	r28
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    426c:	c1 e0       	ldi	r28, 0x01	; 1
void macTask(void)
{
    event_object_t *event;

    event = 0;
    while(mac_event_pending())
    426e:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <mac_event_pending>
    4272:	88 23       	and	r24, r24
    4274:	09 f4       	brne	.+2      	; 0x4278 <macTask+0xe>
    4276:	81 c0       	rjmp	.+258    	; 0x437a <macTask+0x110>
    {
        event = mac_get_event();
    4278:	0e 94 16 21 	call	0x422c	; 0x422c <mac_get_event>
        switch (event->event)
    427c:	dc 01       	movw	r26, r24
    427e:	ec 91       	ld	r30, X
    4280:	4e 2f       	mov	r20, r30
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	fa 01       	movw	r30, r20
    4286:	70 97       	sbiw	r30, 0x10	; 16
    4288:	ea 30       	cpi	r30, 0x0A	; 10
    428a:	f1 05       	cpc	r31, r1
    428c:	80 f7       	brcc	.-32     	; 0x426e <macTask+0x4>
    428e:	e8 54       	subi	r30, 0x48	; 72
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	0c 94 6a 2d 	jmp	0x5ad4	; 0x5ad4 <__tablejump2__>
        {
        case MAC_EVENT_SCAN:
            // A beacon has been received as a result of an active scan.
            // Record the pan descriptor and store it until the scan has
            // completed.
            if (!macConfig.associated)
    4296:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    429a:	81 11       	cpse	r24, r1
    429c:	e8 cf       	rjmp	.-48     	; 0x426e <macTask+0x4>
                mac_logPanDescriptors();
    429e:	0e 94 bf 23 	call	0x477e	; 0x477e <mac_logPanDescriptors>
    42a2:	e5 cf       	rjmp	.-54     	; 0x426e <macTask+0x4>
            break;
// ETG #if __AVR__ || __AVR32__
#if __AVR__ || __AVR32__
       case MAC_EVENT_TIMER:
           // Timer has expired, just callback the stored function pointer
           ((void (*)(void))event->data)();  // cast data to function pointer
    42a4:	dc 01       	movw	r26, r24
    42a6:	11 96       	adiw	r26, 0x01	; 1
    42a8:	ed 91       	ld	r30, X+
    42aa:	fc 91       	ld	r31, X
    42ac:	12 97       	sbiw	r26, 0x02	; 2
    42ae:	09 95       	icall
           break;
    42b0:	de cf       	rjmp	.-68     	; 0x426e <macTask+0x4>
#endif
        case MAC_EVENT_RX:
            if (macConfig.associated)
    42b2:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    42b6:	88 23       	and	r24, r24
    42b8:	d1 f2       	breq	.-76     	; 0x426e <macTask+0x4>
                frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
                frame->originAddr = ntohs_16(frame->originAddr);

                // Wake up
                if (NODETYPE != ENDDEVICE)
                    macChildIsAwake((ftData*)(mac_buffer_rx+1));
    42ba:	82 e5       	ldi	r24, 0x52	; 82
    42bc:	9b e0       	ldi	r25, 0x0B	; 11
    42be:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <macChildIsAwake>
                // Received a data frame, process it or route it
                if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    42c2:	20 91 5b 0b 	lds	r18, 0x0B5B	; 0x800b5b <mac_buffer_rx+0xa>
    42c6:	30 91 5c 0b 	lds	r19, 0x0B5C	; 0x800b5c <mac_buffer_rx+0xb>
    42ca:	80 91 62 0c 	lds	r24, 0x0C62	; 0x800c62 <macConfig+0xd>
    42ce:	90 91 63 0c 	lds	r25, 0x0C63	; 0x800c63 <macConfig+0xe>
    42d2:	28 17       	cp	r18, r24
    42d4:	39 07       	cpc	r19, r25
    42d6:	19 f4       	brne	.+6      	; 0x42de <macTask+0x74>
                    // This data frame is for this node
                    macDataIndication();
    42d8:	0e 94 49 20 	call	0x4092	; 0x4092 <macDataIndication>
    42dc:	c8 cf       	rjmp	.-112    	; 0x426e <macTask+0x4>
                else
                    // Route the packet up/down stream
                    if (NODETYPE != ENDDEVICE)
                        macRouteData();
    42de:	0e 94 3b 23 	call	0x4676	; 0x4676 <macRouteData>
    42e2:	c5 cf       	rjmp	.-118    	; 0x426e <macTask+0x4>
            {
                ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
                frame->panid = ntohs_16(frame->panid);
                
                // Generate and send the beacon.
                if (NODETYPE == ROUTER && macConfig.associated)
    42e4:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    42e8:	88 23       	and	r24, r24
    42ea:	09 f2       	breq	.-126    	; 0x426e <macTask+0x4>
                    macSetAlarm(1, sendBeaconFrame);
    42ec:	62 e9       	ldi	r22, 0x92	; 146
    42ee:	7f e1       	ldi	r23, 0x1F	; 31
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>
    42f8:	ba cf       	rjmp	.-140    	; 0x426e <macTask+0x4>
                break;                
            }
            if (NODETYPE == COORD)
                // Pan Coord has received this request.
                macAssociationResponse();
            if (NODETYPE == ROUTER && macConfig.associated)
    42fa:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    42fe:	88 23       	and	r24, r24
    4300:	09 f4       	brne	.+2      	; 0x4304 <macTask+0x9a>
    4302:	b5 cf       	rjmp	.-150    	; 0x426e <macTask+0x4>
            {
                // Send this packet along to parent
                macRouteAssociateRequest();
    4304:	0e 94 9a 22 	call	0x4534	; 0x4534 <macRouteAssociateRequest>
    4308:	b2 cf       	rjmp	.-156    	; 0x426e <macTask+0x4>
        case MAC_EVENT_ASSOCIATION_RESPONSE:
            // End device has recieved this response.
            if (NODETYPE != COORD)
            {
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    430a:	80 91 53 0b 	lds	r24, 0x0B53	; 0x800b53 <mac_buffer_rx+0x2>
    430e:	8c 38       	cpi	r24, 0x8C	; 140
    4310:	d9 f4       	brne	.+54     	; 0x4348 <macTask+0xde>
    4312:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <mac_buffer_rx+0x1>
    4316:	83 36       	cpi	r24, 0x63	; 99
    4318:	b9 f4       	brne	.+46     	; 0x4348 <macTask+0xde>
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    431a:	c0 93 5d 0c 	sts	0x0C5D, r28	; 0x800c5d <macConfig+0x8>
                    macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    431e:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <mac_buffer_rx+0xe>
    4322:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <mac_buffer_rx+0xf>
    4326:	90 93 65 0c 	sts	0x0C65, r25	; 0x800c65 <macConfig+0x10>
    432a:	80 93 64 0c 	sts	0x0C64, r24	; 0x800c64 <macConfig+0xf>
                    macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    432e:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <mac_buffer_rx+0x11>
    4332:	90 91 63 0b 	lds	r25, 0x0B63	; 0x800b63 <mac_buffer_rx+0x12>
    4336:	90 93 63 0c 	sts	0x0C63, r25	; 0x800c63 <macConfig+0xe>
    433a:	80 93 62 0c 	sts	0x0C62, r24	; 0x800c62 <macConfig+0xd>

                    radioSetShortAddress(macConfig.shortAddress);
    433e:	0e 94 be 1c 	call	0x397c	; 0x397c <radioSetShortAddress>
                    macAssociationConfirm();
    4342:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <macAssociationConfirm>
    4346:	93 cf       	rjmp	.-218    	; 0x426e <macTask+0x4>
                }
                else
                {
                    // we are indirect, so just send this packet along.
                    if (NODETYPE == ROUTER && macConfig.associated)
    4348:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    434c:	88 23       	and	r24, r24
    434e:	09 f4       	brne	.+2      	; 0x4352 <macTask+0xe8>
    4350:	8e cf       	rjmp	.-228    	; 0x426e <macTask+0x4>
                        frame->srcAddr = ntohs_16(frame->srcAddr);
                        frame->parentAddr = ntohs_16(frame->parentAddr);
                        frame->shortAddr = ntohs_16(frame->shortAddr);
                        frame->macAddr = ntohs_64(frame->macAddr);
                        // Route the packet
                        macRouteAssociateResponse();
    4352:	0e 94 0b 22 	call	0x4416	; 0x4416 <macRouteAssociateResponse>
    4356:	8b cf       	rjmp	.-234    	; 0x426e <macTask+0x4>
                }
            }
            break;
        case MAC_EVENT_ROUTE:
            // Routing packet received, forward it
            if (NODETYPE == ROUTER && macConfig.associated)
    4358:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    435c:	88 23       	and	r24, r24
    435e:	09 f4       	brne	.+2      	; 0x4362 <macTask+0xf8>
    4360:	86 cf       	rjmp	.-244    	; 0x426e <macTask+0x4>
                macForwardRoutingPacket();
    4362:	0e 94 bf 21 	call	0x437e	; 0x437e <macForwardRoutingPacket>
    4366:	83 cf       	rjmp	.-250    	; 0x426e <macTask+0x4>
            break;
        case MAC_EVENT_ACCESS:
            // Channel access failure
            appPacketSendAccessFail();
    4368:	0e 94 c5 01 	call	0x38a	; 0x38a <appPacketSendAccessFail>
            break;
    436c:	80 cf       	rjmp	.-256    	; 0x426e <macTask+0x4>
        case MAC_EVENT_NACK:
            // Packet failed to be sent, alert application
            appPacketSendFailed();
    436e:	0e 94 c6 01 	call	0x38c	; 0x38c <appPacketSendFailed>
            break;
    4372:	7d cf       	rjmp	.-262    	; 0x426e <macTask+0x4>
        case MAC_EVENT_ACK:
            // Packet got through, alert application
            appPacketSendSucceed();
    4374:	0e 94 b7 01 	call	0x36e	; 0x36e <appPacketSendSucceed>
            break;
    4378:	7a cf       	rjmp	.-268    	; 0x426e <macTask+0x4>
        default:
            break;
        }
    }
}
    437a:	cf 91       	pop	r28
    437c:	08 95       	ret

0000437e <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    437e:	80 91 51 0b 	lds	r24, 0x0B51	; 0x800b51 <mac_buffer_rx>
    4382:	92 e8       	ldi	r25, 0x82	; 130
    4384:	e1 e5       	ldi	r30, 0x51	; 81
    4386:	fb e0       	ldi	r31, 0x0B	; 11
    4388:	a3 ed       	ldi	r26, 0xD3	; 211
    438a:	bb e0       	ldi	r27, 0x0B	; 11
    438c:	01 90       	ld	r0, Z+
    438e:	0d 92       	st	X+, r0
    4390:	9a 95       	dec	r25
    4392:	e1 f7       	brne	.-8      	; 0x438c <macForwardRoutingPacket+0xe>
    4394:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <macConfig+0x8>
    4398:	99 23       	and	r25, r25
    439a:	e1 f1       	breq	.+120    	; 0x4414 <macForwardRoutingPacket+0x96>
    439c:	8c 50       	subi	r24, 0x0C	; 12
    439e:	86 95       	lsr	r24
    43a0:	e8 2f       	mov	r30, r24
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	ee 0f       	add	r30, r30
    43a6:	ff 1f       	adc	r31, r31
    43a8:	e4 52       	subi	r30, 0x24	; 36
    43aa:	f4 4f       	sbci	r31, 0xF4	; 244
    43ac:	20 81       	ld	r18, Z
    43ae:	31 81       	ldd	r19, Z+1	; 0x01
    43b0:	30 93 67 0c 	sts	0x0C67, r19	; 0x800c67 <macConfig+0x12>
    43b4:	20 93 66 0c 	sts	0x0C66, r18	; 0x800c66 <macConfig+0x11>
    43b8:	82 30       	cpi	r24, 0x02	; 2
    43ba:	60 f1       	brcs	.+88     	; 0x4414 <macForwardRoutingPacket+0x96>
    43bc:	81 50       	subi	r24, 0x01	; 1
    43be:	23 e6       	ldi	r18, 0x63	; 99
    43c0:	38 e8       	ldi	r19, 0x88	; 136
    43c2:	30 93 d5 0b 	sts	0x0BD5, r19	; 0x800bd5 <mac_buffer_tx+0x2>
    43c6:	20 93 d4 0b 	sts	0x0BD4, r18	; 0x800bd4 <mac_buffer_tx+0x1>
    43ca:	90 91 5f 0c 	lds	r25, 0x0C5F	; 0x800c5f <macConfig+0xa>
    43ce:	21 e0       	ldi	r18, 0x01	; 1
    43d0:	29 0f       	add	r18, r25
    43d2:	20 93 5f 0c 	sts	0x0C5F, r18	; 0x800c5f <macConfig+0xa>
    43d6:	90 93 d6 0b 	sts	0x0BD6, r25	; 0x800bd6 <mac_buffer_tx+0x3>
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	fc 01       	movw	r30, r24
    43de:	ee 0f       	add	r30, r30
    43e0:	ff 1f       	adc	r31, r31
    43e2:	e2 52       	subi	r30, 0x22	; 34
    43e4:	f4 4f       	sbci	r31, 0xF4	; 244
    43e6:	20 81       	ld	r18, Z
    43e8:	31 81       	ldd	r19, Z+1	; 0x01
    43ea:	30 93 da 0b 	sts	0x0BDA, r19	; 0x800bda <mac_buffer_tx+0x7>
    43ee:	20 93 d9 0b 	sts	0x0BD9, r18	; 0x800bd9 <mac_buffer_tx+0x6>
    43f2:	20 91 62 0c 	lds	r18, 0x0C62	; 0x800c62 <macConfig+0xd>
    43f6:	30 91 63 0c 	lds	r19, 0x0C63	; 0x800c63 <macConfig+0xe>
    43fa:	30 93 dc 0b 	sts	0x0BDC, r19	; 0x800bdc <mac_buffer_tx+0x9>
    43fe:	20 93 db 0b 	sts	0x0BDB, r18	; 0x800bdb <mac_buffer_tx+0x8>
    4402:	9b eb       	ldi	r25, 0xBB	; 187
    4404:	90 93 dd 0b 	sts	0x0BDD, r25	; 0x800bdd <mac_buffer_tx+0xa>
    4408:	8b 5f       	subi	r24, 0xFB	; 251
    440a:	64 ed       	ldi	r22, 0xD4	; 212
    440c:	7b e0       	ldi	r23, 0x0B	; 11
    440e:	88 0f       	add	r24, r24
    4410:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <radioSendData>
    4414:	08 95       	ret

00004416 <macRouteAssociateResponse>:
    4416:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <macConfig+0x8>
    441a:	88 23       	and	r24, r24
    441c:	09 f4       	brne	.+2      	; 0x4420 <macRouteAssociateResponse+0xa>
    441e:	89 c0       	rjmp	.+274    	; 0x4532 <macRouteAssociateResponse+0x11c>
    4420:	20 91 5c 0b 	lds	r18, 0x0B5C	; 0x800b5c <mac_buffer_rx+0xb>
    4424:	30 91 5d 0b 	lds	r19, 0x0B5D	; 0x800b5d <mac_buffer_rx+0xc>
    4428:	80 91 62 0c 	lds	r24, 0x0C62	; 0x800c62 <macConfig+0xd>
    442c:	90 91 63 0c 	lds	r25, 0x0C63	; 0x800c63 <macConfig+0xe>
    4430:	28 17       	cp	r18, r24
    4432:	39 07       	cpc	r19, r25
    4434:	09 f0       	breq	.+2      	; 0x4438 <macRouteAssociateResponse+0x22>
    4436:	4b c0       	rjmp	.+150    	; 0x44ce <macRouteAssociateResponse+0xb8>
    4438:	83 e6       	ldi	r24, 0x63	; 99
    443a:	9c e8       	ldi	r25, 0x8C	; 140
    443c:	90 93 d4 0b 	sts	0x0BD4, r25	; 0x800bd4 <mac_buffer_tx+0x1>
    4440:	80 93 d3 0b 	sts	0x0BD3, r24	; 0x800bd3 <mac_buffer_tx>
    4444:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <macConfig+0xa>
    4448:	91 e0       	ldi	r25, 0x01	; 1
    444a:	98 0f       	add	r25, r24
    444c:	90 93 5f 0c 	sts	0x0C5F, r25	; 0x800c5f <macConfig+0xa>
    4450:	80 93 d5 0b 	sts	0x0BD5, r24	; 0x800bd5 <mac_buffer_tx+0x2>
    4454:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <macConfig+0xb>
    4458:	90 91 61 0c 	lds	r25, 0x0C61	; 0x800c61 <macConfig+0xc>
    445c:	90 93 d7 0b 	sts	0x0BD7, r25	; 0x800bd7 <mac_buffer_tx+0x4>
    4460:	80 93 d6 0b 	sts	0x0BD6, r24	; 0x800bd6 <mac_buffer_tx+0x3>
    4464:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <mac_buffer_rx+0xd>
    4468:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <mac_buffer_tx+0x5>
    446c:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <mac_buffer_rx+0xe>
    4470:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <mac_buffer_tx+0x6>
    4474:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <mac_buffer_rx+0xf>
    4478:	80 93 da 0b 	sts	0x0BDA, r24	; 0x800bda <mac_buffer_tx+0x7>
    447c:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <mac_buffer_rx+0x10>
    4480:	80 93 db 0b 	sts	0x0BDB, r24	; 0x800bdb <mac_buffer_tx+0x8>
    4484:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <mac_buffer_rx+0x11>
    4488:	80 93 dc 0b 	sts	0x0BDC, r24	; 0x800bdc <mac_buffer_tx+0x9>
    448c:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <mac_buffer_rx+0x12>
    4490:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <mac_buffer_tx+0xa>
    4494:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <mac_buffer_rx+0x13>
    4498:	80 93 de 0b 	sts	0x0BDE, r24	; 0x800bde <mac_buffer_tx+0xb>
    449c:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <mac_buffer_rx+0x14>
    44a0:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <mac_buffer_tx+0xc>
    44a4:	30 93 e1 0b 	sts	0x0BE1, r19	; 0x800be1 <mac_buffer_tx+0xe>
    44a8:	20 93 e0 0b 	sts	0x0BE0, r18	; 0x800be0 <mac_buffer_tx+0xd>
    44ac:	82 e0       	ldi	r24, 0x02	; 2
    44ae:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <mac_buffer_tx+0xf>
    44b2:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <mac_buffer_rx+0x15>
    44b6:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <mac_buffer_rx+0x16>
    44ba:	90 93 e4 0b 	sts	0x0BE4, r25	; 0x800be4 <mac_buffer_tx+0x11>
    44be:	80 93 e3 0b 	sts	0x0BE3, r24	; 0x800be3 <mac_buffer_tx+0x10>
    44c2:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <macAddChild>
    44c6:	63 ed       	ldi	r22, 0xD3	; 211
    44c8:	7b e0       	ldi	r23, 0x0B	; 11
    44ca:	82 e1       	ldi	r24, 0x12	; 18
    44cc:	30 c0       	rjmp	.+96     	; 0x452e <macRouteAssociateResponse+0x118>
    44ce:	22 e8       	ldi	r18, 0x82	; 130
    44d0:	e1 e5       	ldi	r30, 0x51	; 81
    44d2:	fb e0       	ldi	r31, 0x0B	; 11
    44d4:	a3 ed       	ldi	r26, 0xD3	; 211
    44d6:	bb e0       	ldi	r27, 0x0B	; 11
    44d8:	01 90       	ld	r0, Z+
    44da:	0d 92       	st	X+, r0
    44dc:	2a 95       	dec	r18
    44de:	e1 f7       	brne	.-8      	; 0x44d8 <macRouteAssociateResponse+0xc2>
    44e0:	20 91 5f 0c 	lds	r18, 0x0C5F	; 0x800c5f <macConfig+0xa>
    44e4:	31 e0       	ldi	r19, 0x01	; 1
    44e6:	32 0f       	add	r19, r18
    44e8:	30 93 5f 0c 	sts	0x0C5F, r19	; 0x800c5f <macConfig+0xa>
    44ec:	20 93 d6 0b 	sts	0x0BD6, r18	; 0x800bd6 <mac_buffer_tx+0x3>
    44f0:	20 91 66 0c 	lds	r18, 0x0C66	; 0x800c66 <macConfig+0x11>
    44f4:	30 91 67 0c 	lds	r19, 0x0C67	; 0x800c67 <macConfig+0x12>
    44f8:	30 93 da 0b 	sts	0x0BDA, r19	; 0x800bda <mac_buffer_tx+0x7>
    44fc:	20 93 d9 0b 	sts	0x0BD9, r18	; 0x800bd9 <mac_buffer_tx+0x6>
    4500:	90 93 dc 0b 	sts	0x0BDC, r25	; 0x800bdc <mac_buffer_tx+0x9>
    4504:	80 93 db 0b 	sts	0x0BDB, r24	; 0x800bdb <mac_buffer_tx+0x8>
    4508:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <mac_buffer_tx+0xb>
    450c:	90 91 df 0b 	lds	r25, 0x0BDF	; 0x800bdf <mac_buffer_tx+0xc>
    4510:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <macIsChild>
    4514:	88 23       	and	r24, r24
    4516:	41 f0       	breq	.+16     	; 0x4528 <macRouteAssociateResponse+0x112>
    4518:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <mac_buffer_tx+0xb>
    451c:	90 91 df 0b 	lds	r25, 0x0BDF	; 0x800bdf <mac_buffer_tx+0xc>
    4520:	90 93 da 0b 	sts	0x0BDA, r25	; 0x800bda <mac_buffer_tx+0x7>
    4524:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <mac_buffer_tx+0x6>
    4528:	64 ed       	ldi	r22, 0xD4	; 212
    452a:	7b e0       	ldi	r23, 0x0B	; 11
    452c:	86 e1       	ldi	r24, 0x16	; 22
    452e:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <radioSendData>
    4532:	08 95       	ret

00004534 <macRouteAssociateRequest>:
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	65 97       	sbiw	r28, 0x15	; 21
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	a0 91 53 0b 	lds	r26, 0x0B53	; 0x800b53 <mac_buffer_rx+0x2>
    454c:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <macConfig+0xa>
    4550:	e0 91 60 0c 	lds	r30, 0x0C60	; 0x800c60 <macConfig+0xb>
    4554:	f0 91 61 0c 	lds	r31, 0x0C61	; 0x800c61 <macConfig+0xc>
    4558:	60 91 64 0c 	lds	r22, 0x0C64	; 0x800c64 <macConfig+0xf>
    455c:	70 91 65 0c 	lds	r23, 0x0C65	; 0x800c65 <macConfig+0x10>
    4560:	40 91 62 0c 	lds	r20, 0x0C62	; 0x800c62 <macConfig+0xd>
    4564:	50 91 63 0c 	lds	r21, 0x0C63	; 0x800c63 <macConfig+0xe>
    4568:	30 91 5e 0b 	lds	r19, 0x0B5E	; 0x800b5e <mac_buffer_rx+0xd>
    456c:	20 91 5f 0b 	lds	r18, 0x0B5F	; 0x800b5f <mac_buffer_rx+0xe>
    4570:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <mac_buffer_rx+0xf>
    4574:	a8 3c       	cpi	r26, 0xC8	; 200
    4576:	81 f5       	brne	.+96     	; 0x45d8 <macRouteAssociateRequest+0xa4>
    4578:	a3 e6       	ldi	r26, 0x63	; 99
    457a:	b8 e8       	ldi	r27, 0x88	; 136
    457c:	ba 83       	std	Y+2, r27	; 0x02
    457e:	a9 83       	std	Y+1, r26	; 0x01
    4580:	a1 e0       	ldi	r26, 0x01	; 1
    4582:	a8 0f       	add	r26, r24
    4584:	a0 93 5f 0c 	sts	0x0C5F, r26	; 0x800c5f <macConfig+0xa>
    4588:	8b 83       	std	Y+3, r24	; 0x03
    458a:	fd 83       	std	Y+5, r31	; 0x05
    458c:	ec 83       	std	Y+4, r30	; 0x04
    458e:	7f 83       	std	Y+7, r23	; 0x07
    4590:	6e 83       	std	Y+6, r22	; 0x06
    4592:	59 87       	std	Y+9, r21	; 0x09
    4594:	48 87       	std	Y+8, r20	; 0x08
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	8a 87       	std	Y+10, r24	; 0x0a
    459a:	40 91 62 0b 	lds	r20, 0x0B62	; 0x800b62 <mac_buffer_rx+0x11>
    459e:	50 91 63 0b 	lds	r21, 0x0B63	; 0x800b63 <mac_buffer_rx+0x12>
    45a2:	5c 87       	std	Y+12, r21	; 0x0c
    45a4:	4b 87       	std	Y+11, r20	; 0x0b
    45a6:	80 91 59 0b 	lds	r24, 0x0B59	; 0x800b59 <mac_buffer_rx+0x8>
    45aa:	8d 87       	std	Y+13, r24	; 0x0d
    45ac:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <mac_buffer_rx+0x9>
    45b0:	8e 87       	std	Y+14, r24	; 0x0e
    45b2:	80 91 5b 0b 	lds	r24, 0x0B5B	; 0x800b5b <mac_buffer_rx+0xa>
    45b6:	8f 87       	std	Y+15, r24	; 0x0f
    45b8:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <mac_buffer_rx+0xb>
    45bc:	88 8b       	std	Y+16, r24	; 0x10
    45be:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <mac_buffer_rx+0xc>
    45c2:	89 8b       	std	Y+17, r24	; 0x11
    45c4:	3a 8b       	std	Y+18, r19	; 0x12
    45c6:	2b 8b       	std	Y+19, r18	; 0x13
    45c8:	9c 8b       	std	Y+20, r25	; 0x14
    45ca:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <mac_buffer_rx+0x13>
    45ce:	8d 8b       	std	Y+21, r24	; 0x15
    45d0:	be 01       	movw	r22, r28
    45d2:	6f 5f       	subi	r22, 0xFF	; 255
    45d4:	7f 4f       	sbci	r23, 0xFF	; 255
    45d6:	43 c0       	rjmp	.+134    	; 0x465e <macRouteAssociateRequest+0x12a>
    45d8:	a3 e6       	ldi	r26, 0x63	; 99
    45da:	b8 e8       	ldi	r27, 0x88	; 136
    45dc:	b0 93 d4 0b 	sts	0x0BD4, r27	; 0x800bd4 <mac_buffer_tx+0x1>
    45e0:	a0 93 d3 0b 	sts	0x0BD3, r26	; 0x800bd3 <mac_buffer_tx>
    45e4:	a1 e0       	ldi	r26, 0x01	; 1
    45e6:	a8 0f       	add	r26, r24
    45e8:	a0 93 5f 0c 	sts	0x0C5F, r26	; 0x800c5f <macConfig+0xa>
    45ec:	80 93 d5 0b 	sts	0x0BD5, r24	; 0x800bd5 <mac_buffer_tx+0x2>
    45f0:	f0 93 d7 0b 	sts	0x0BD7, r31	; 0x800bd7 <mac_buffer_tx+0x4>
    45f4:	e0 93 d6 0b 	sts	0x0BD6, r30	; 0x800bd6 <mac_buffer_tx+0x3>
    45f8:	70 93 d9 0b 	sts	0x0BD9, r23	; 0x800bd9 <mac_buffer_tx+0x6>
    45fc:	60 93 d8 0b 	sts	0x0BD8, r22	; 0x800bd8 <mac_buffer_tx+0x5>
    4600:	50 93 db 0b 	sts	0x0BDB, r21	; 0x800bdb <mac_buffer_tx+0x8>
    4604:	40 93 da 0b 	sts	0x0BDA, r20	; 0x800bda <mac_buffer_tx+0x7>
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	80 93 dc 0b 	sts	0x0BDC, r24	; 0x800bdc <mac_buffer_tx+0x9>
    460e:	40 91 5c 0b 	lds	r20, 0x0B5C	; 0x800b5c <mac_buffer_rx+0xb>
    4612:	50 91 5d 0b 	lds	r21, 0x0B5D	; 0x800b5d <mac_buffer_rx+0xc>
    4616:	50 93 de 0b 	sts	0x0BDE, r21	; 0x800bde <mac_buffer_tx+0xb>
    461a:	40 93 dd 0b 	sts	0x0BDD, r20	; 0x800bdd <mac_buffer_tx+0xa>
    461e:	30 93 df 0b 	sts	0x0BDF, r19	; 0x800bdf <mac_buffer_tx+0xc>
    4622:	20 93 e0 0b 	sts	0x0BE0, r18	; 0x800be0 <mac_buffer_tx+0xd>
    4626:	90 93 e1 0b 	sts	0x0BE1, r25	; 0x800be1 <mac_buffer_tx+0xe>
    462a:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <mac_buffer_rx+0x10>
    462e:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <mac_buffer_tx+0xf>
    4632:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <mac_buffer_rx+0x11>
    4636:	80 93 e3 0b 	sts	0x0BE3, r24	; 0x800be3 <mac_buffer_tx+0x10>
    463a:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <mac_buffer_rx+0x12>
    463e:	80 93 e4 0b 	sts	0x0BE4, r24	; 0x800be4 <mac_buffer_tx+0x11>
    4642:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <mac_buffer_rx+0x13>
    4646:	80 93 e5 0b 	sts	0x0BE5, r24	; 0x800be5 <mac_buffer_tx+0x12>
    464a:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <mac_buffer_rx+0x14>
    464e:	80 93 e6 0b 	sts	0x0BE6, r24	; 0x800be6 <mac_buffer_tx+0x13>
    4652:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <mac_buffer_rx+0x15>
    4656:	80 93 e7 0b 	sts	0x0BE7, r24	; 0x800be7 <mac_buffer_tx+0x14>
    465a:	63 ed       	ldi	r22, 0xD3	; 211
    465c:	7b e0       	ldi	r23, 0x0B	; 11
    465e:	85 e1       	ldi	r24, 0x15	; 21
    4660:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <radioSendData>
    4664:	65 96       	adiw	r28, 0x15	; 21
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	08 95       	ret

00004676 <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    4676:	82 e8       	ldi	r24, 0x82	; 130
    4678:	e1 e5       	ldi	r30, 0x51	; 81
    467a:	fb e0       	ldi	r31, 0x0B	; 11
    467c:	a3 ed       	ldi	r26, 0xD3	; 211
    467e:	bb e0       	ldi	r27, 0x0B	; 11
    4680:	01 90       	ld	r0, Z+
    4682:	0d 92       	st	X+, r0
    4684:	8a 95       	dec	r24
    4686:	e1 f7       	brne	.-8      	; 0x4680 <macRouteData+0xa>

        Led1_on();
    4688:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    468a:	62 e8       	ldi	r22, 0x82	; 130
    468c:	71 e0       	ldi	r23, 0x01	; 1
    468e:	8a e0       	ldi	r24, 0x0A	; 10
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	0e 94 b1 24 	call	0x4962	; 0x4962 <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    4696:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <mac_buffer_tx+0xa>
    469a:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <mac_buffer_tx+0xb>
    469e:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <macIsChild>
    46a2:	90 91 5f 0c 	lds	r25, 0x0C5F	; 0x800c5f <macConfig+0xa>
    46a6:	20 91 62 0c 	lds	r18, 0x0C62	; 0x800c62 <macConfig+0xd>
    46aa:	30 91 63 0c 	lds	r19, 0x0C63	; 0x800c63 <macConfig+0xe>
    46ae:	88 23       	and	r24, r24
    46b0:	59 f0       	breq	.+22     	; 0x46c8 <macRouteData+0x52>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	89 0f       	add	r24, r25
    46b6:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <macConfig+0xa>
    46ba:	90 93 d6 0b 	sts	0x0BD6, r25	; 0x800bd6 <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    46be:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <mac_buffer_tx+0xa>
    46c2:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <mac_buffer_tx+0xb>
    46c6:	15 c0       	rjmp	.+42     	; 0x46f2 <macRouteData+0x7c>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    46c8:	40 91 64 0c 	lds	r20, 0x0C64	; 0x800c64 <macConfig+0xf>
    46cc:	50 91 65 0c 	lds	r21, 0x0C65	; 0x800c65 <macConfig+0x10>
    46d0:	60 91 db 0b 	lds	r22, 0x0BDB	; 0x800bdb <mac_buffer_tx+0x8>
    46d4:	70 91 dc 0b 	lds	r23, 0x0BDC	; 0x800bdc <mac_buffer_tx+0x9>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	89 0f       	add	r24, r25
    46dc:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <macConfig+0xa>
    46e0:	90 93 d6 0b 	sts	0x0BD6, r25	; 0x800bd6 <mac_buffer_tx+0x3>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    46e4:	64 17       	cp	r22, r20
    46e6:	75 07       	cpc	r23, r21
    46e8:	49 f4       	brne	.+18     	; 0x46fc <macRouteData+0x86>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.lastRoute;
    46ea:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <macConfig+0x11>
    46ee:	90 91 67 0c 	lds	r25, 0x0C67	; 0x800c67 <macConfig+0x12>
    46f2:	90 93 da 0b 	sts	0x0BDA, r25	; 0x800bda <mac_buffer_tx+0x7>
    46f6:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <mac_buffer_tx+0x6>
    46fa:	04 c0       	rjmp	.+8      	; 0x4704 <macRouteData+0x8e>
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.parentShortAddress;
    46fc:	50 93 da 0b 	sts	0x0BDA, r21	; 0x800bda <mac_buffer_tx+0x7>
    4700:	40 93 d9 0b 	sts	0x0BD9, r20	; 0x800bd9 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4704:	30 93 dc 0b 	sts	0x0BDC, r19	; 0x800bdc <mac_buffer_tx+0x9>
    4708:	20 93 db 0b 	sts	0x0BDB, r18	; 0x800bdb <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    470c:	80 91 d9 0b 	lds	r24, 0x0BD9	; 0x800bd9 <mac_buffer_tx+0x6>
    4710:	90 91 da 0b 	lds	r25, 0x0BDA	; 0x800bda <mac_buffer_tx+0x7>
    4714:	01 96       	adiw	r24, 0x01	; 1
    4716:	39 f0       	breq	.+14     	; 0x4726 <macRouteData+0xb0>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    4718:	80 91 d3 0b 	lds	r24, 0x0BD3	; 0x800bd3 <mac_buffer_tx>
    471c:	64 ed       	ldi	r22, 0xD4	; 212
    471e:	7b e0       	ldi	r23, 0x0B	; 11
    4720:	82 50       	subi	r24, 0x02	; 2
    4722:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <radioSendData>
    4726:	08 95       	ret

00004728 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	08 95       	ret

0000472c <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	e1 e5       	ldi	r30, 0x51	; 81
    4732:	fb e0       	ldi	r31, 0x0B	; 11
    4734:	20 91 d1 0b 	lds	r18, 0x0BD1	; 0x800bd1 <mac_buffer_rx+0x80>
    4738:	ca ec       	ldi	r28, 0xCA	; 202
    473a:	dc e0       	ldi	r29, 0x0C	; 12
    473c:	81 81       	ldd	r24, Z+1	; 0x01
    473e:	92 81       	ldd	r25, Z+2	; 0x02
    4740:	84 e0       	ldi	r24, 0x04	; 4
    4742:	98 9f       	mul	r25, r24
    4744:	81 2d       	mov	r24, r1
    4746:	99 27       	eor	r25, r25
    4748:	11 24       	eor	r1, r1
    474a:	88 83       	st	Y, r24
    474c:	84 81       	ldd	r24, Z+4	; 0x04
    474e:	95 81       	ldd	r25, Z+5	; 0x05
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	86 81       	ldd	r24, Z+6	; 0x06
    4756:	97 81       	ldd	r25, Z+7	; 0x07
    4758:	9c 83       	std	Y+4, r25	; 0x04
    475a:	8b 83       	std	Y+3, r24	; 0x03
    475c:	83 85       	ldd	r24, Z+11	; 0x0b
    475e:	89 87       	std	Y+9, r24	; 0x09
    4760:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <macConfig+0x14>
    4764:	81 50       	subi	r24, 0x01	; 1
    4766:	8d 83       	std	Y+5, r24	; 0x05
    4768:	1e 82       	std	Y+6, r1	; 0x06
    476a:	2a 87       	std	Y+10, r18	; 0x0a
    476c:	0e 94 86 1a 	call	0x350c	; 0x350c <radioGetSavedRssiValue>
    4770:	8b 87       	std	Y+11, r24	; 0x0b
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	08 95       	ret

00004778 <macIsScanning>:
    4778:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <scanInProcess>
    477c:	08 95       	ret

0000477e <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    477e:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    4780:	80 91 d1 0b 	lds	r24, 0x0BD1	; 0x800bd1 <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    4784:	40 91 59 0b 	lds	r20, 0x0B59	; 0x800b59 <mac_buffer_rx+0x8>
    4788:	50 91 5a 0b 	lds	r21, 0x0B5A	; 0x800b5a <mac_buffer_rx+0x9>


    if (!scanInProcess)
    478c:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <scanInProcess>
    4790:	99 23       	and	r25, r25
    4792:	61 f1       	breq	.+88     	; 0x47ec <mac_logPanDescriptors+0x6e>
        return;
    if (frame->netID != 6)
    4794:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <mac_buffer_rx+0xa>
    4798:	96 30       	cpi	r25, 0x06	; 6
    479a:	41 f5       	brne	.+80     	; 0x47ec <mac_logPanDescriptors+0x6e>
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    479c:	20 91 d1 0c 	lds	r18, 0x0CD1	; 0x800cd1 <panDescriptor+0x7>
    47a0:	30 91 d2 0c 	lds	r19, 0x0CD2	; 0x800cd2 <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    47a4:	50 93 d2 0c 	sts	0x0CD2, r21	; 0x800cd2 <panDescriptor+0x8>
    47a8:	40 93 d1 0c 	sts	0x0CD1, r20	; 0x800cd1 <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    47ac:	90 91 d2 0c 	lds	r25, 0x0CD2	; 0x800cd2 <panDescriptor+0x8>
    47b0:	97 ff       	sbrs	r25, 7
    47b2:	05 c0       	rjmp	.+10     	; 0x47be <mac_logPanDescriptors+0x40>
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    47b4:	30 93 d2 0c 	sts	0x0CD2, r19	; 0x800cd2 <panDescriptor+0x8>
    47b8:	20 93 d1 0c 	sts	0x0CD1, r18	; 0x800cd1 <panDescriptor+0x7>
            return;
    47bc:	17 c0       	rjmp	.+46     	; 0x47ec <mac_logPanDescriptors+0x6e>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    47be:	90 91 d4 0c 	lds	r25, 0x0CD4	; 0x800cd4 <panDescriptor+0xa>
    47c2:	98 17       	cp	r25, r24
    47c4:	18 f4       	brcc	.+6      	; 0x47cc <mac_logPanDescriptors+0x4e>
            {
                store_pandescriptors();
            }
        }
    }
}
    47c6:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    47c8:	0c 94 96 23 	jmp	0x472c	; 0x472c <store_pandescriptors>
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    47cc:	98 13       	cpse	r25, r24
    47ce:	0e c0       	rjmp	.+28     	; 0x47ec <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    47d0:	90 91 d3 0c 	lds	r25, 0x0CD3	; 0x800cd3 <panDescriptor+0x9>
    47d4:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <mac_buffer_rx+0xb>
    47d8:	89 17       	cp	r24, r25
    47da:	a8 f3       	brcs	.-22     	; 0x47c6 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    47dc:	98 13       	cpse	r25, r24
    47de:	06 c0       	rjmp	.+12     	; 0x47ec <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    47e0:	c0 91 d5 0c 	lds	r28, 0x0CD5	; 0x800cd5 <panDescriptor+0xb>
    47e4:	0e 94 86 1a 	call	0x350c	; 0x350c <radioGetSavedRssiValue>
    47e8:	c8 17       	cp	r28, r24
    47ea:	68 f3       	brcs	.-38     	; 0x47c6 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
        }
    }
}
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret

000047f0 <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    47f0:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    47f2:	c1 e0       	ldi	r28, 0x01	; 1
    47f4:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <panDescriptor+0x5>
    47f8:	8f 3f       	cpi	r24, 0xFF	; 255
    47fa:	11 f4       	brne	.+4      	; 0x4800 <mac_scanConfirm+0x10>
    47fc:	c0 e0       	ldi	r28, 0x00	; 0
    47fe:	1b c0       	rjmp	.+54     	; 0x4836 <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    4800:	80 91 cb 0c 	lds	r24, 0x0CCB	; 0x800ccb <panDescriptor+0x1>
    4804:	90 91 cc 0c 	lds	r25, 0x0CCC	; 0x800ccc <panDescriptor+0x2>
    4808:	90 93 61 0c 	sts	0x0C61, r25	; 0x800c61 <macConfig+0xc>
    480c:	80 93 60 0c 	sts	0x0C60, r24	; 0x800c60 <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    4810:	20 91 cd 0c 	lds	r18, 0x0CCD	; 0x800ccd <panDescriptor+0x3>
    4814:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <panDescriptor+0x4>
    4818:	30 93 65 0c 	sts	0x0C65, r19	; 0x800c65 <macConfig+0x10>
    481c:	20 93 64 0c 	sts	0x0C64, r18	; 0x800c64 <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    4820:	0e 94 b9 1c 	call	0x3972	; 0x3972 <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    4824:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <panDescriptor+0x5>
    4828:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    482c:	90 91 d3 0c 	lds	r25, 0x0CD3	; 0x800cd3 <panDescriptor+0x9>
    4830:	9f 5f       	subi	r25, 0xFF	; 255
    4832:	90 93 68 0c 	sts	0x0C68, r25	; 0x800c68 <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4836:	8c 2f       	mov	r24, r28
}
    4838:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    483a:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <appScanConfirm>

0000483e <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    483e:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <macConfig+0x14>
    4842:	8f 3f       	cpi	r24, 0xFF	; 255
    4844:	b1 f4       	brne	.+44     	; 0x4872 <macScan+0x34>
    {
        scanInProcess = true;
    4846:	91 e0       	ldi	r25, 0x01	; 1
    4848:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    484c:	96 e1       	ldi	r25, 0x16	; 22
    484e:	ea ec       	ldi	r30, 0xCA	; 202
    4850:	fc e0       	ldi	r31, 0x0C	; 12
    4852:	df 01       	movw	r26, r30
    4854:	1d 92       	st	X+, r1
    4856:	9a 95       	dec	r25
    4858:	e9 f7       	brne	.-6      	; 0x4854 <macScan+0x16>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    485a:	80 93 cf 0c 	sts	0x0CCF, r24	; 0x800ccf <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    485e:	8b e0       	ldi	r24, 0x0B	; 11
    4860:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    4864:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <scanChannel>
    4868:	80 38       	cpi	r24, 0x80	; 128
    486a:	a9 f0       	breq	.+42     	; 0x4896 <macScan+0x58>
            macConfig.currentChannel = scanChannel;
    486c:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <macConfig+0x14>
    4870:	12 c0       	rjmp	.+36     	; 0x4896 <macScan+0x58>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4872:	8b 31       	cpi	r24, 0x1B	; 27
    4874:	48 f4       	brcc	.+18     	; 0x4888 <macScan+0x4a>
       macConfig.currentChannel == scanChannel + 1)
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <scanChannel>
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	2f 5f       	subi	r18, 0xFF	; 255
    4880:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4882:	82 17       	cp	r24, r18
    4884:	93 07       	cpc	r25, r19
    4886:	39 f4       	brne	.+14     	; 0x4896 <macScan+0x58>
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    4888:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <scanInProcess>
            macConfig.currentChannel = 0xFF;
    488c:	8f ef       	ldi	r24, 0xFF	; 255
    488e:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <macConfig+0x14>

            mac_scanConfirm();
    4892:	0c 94 f8 23 	jmp	0x47f0	; 0x47f0 <mac_scanConfirm>
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    4896:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <macConfig+0x14>
    489a:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    489e:	83 e0       	ldi	r24, 0x03	; 3
    48a0:	98 e0       	ldi	r25, 0x08	; 8
    48a2:	90 93 d5 0b 	sts	0x0BD5, r25	; 0x800bd5 <mac_buffer_tx+0x2>
    48a6:	80 93 d4 0b 	sts	0x0BD4, r24	; 0x800bd4 <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    48aa:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <macConfig+0x9>
    48ae:	91 e0       	ldi	r25, 0x01	; 1
    48b0:	98 0f       	add	r25, r24
    48b2:	90 93 5e 0c 	sts	0x0C5E, r25	; 0x800c5e <macConfig+0x9>
    48b6:	80 93 d6 0b 	sts	0x0BD6, r24	; 0x800bd6 <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    48ba:	8f ef       	ldi	r24, 0xFF	; 255
    48bc:	9f ef       	ldi	r25, 0xFF	; 255
    48be:	90 93 d8 0b 	sts	0x0BD8, r25	; 0x800bd8 <mac_buffer_tx+0x5>
    48c2:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    48c6:	90 93 da 0b 	sts	0x0BDA, r25	; 0x800bda <mac_buffer_tx+0x7>
    48ca:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    48ce:	87 e0       	ldi	r24, 0x07	; 7
    48d0:	80 93 db 0b 	sts	0x0BDB, r24	; 0x800bdb <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    48d4:	64 ed       	ldi	r22, 0xD4	; 212
    48d6:	7b e0       	ldi	r23, 0x0B	; 11
    48d8:	88 e0       	ldi	r24, 0x08	; 8
    48da:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    48de:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <macConfig+0x14>
    48e2:	8f 5f       	subi	r24, 0xFF	; 255
    48e4:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    48e8:	6f e1       	ldi	r22, 0x1F	; 31
    48ea:	74 e2       	ldi	r23, 0x24	; 36
    48ec:	84 e1       	ldi	r24, 0x14	; 20
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <macSetAlarm>

000048f4 <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    48f4:	08 95       	ret

000048f6 <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    48f6:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <currentTimerID.3607>
    48fa:	8f 5f       	subi	r24, 0xFF	; 255
    48fc:	09 f4       	brne	.+2      	; 0x4900 <getUniqueID+0xa>
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	91 e0       	ldi	r25, 0x01	; 1
    4906:	f9 01       	movw	r30, r18
    4908:	e6 5e       	subi	r30, 0xE6	; 230
    490a:	f8 4f       	sbci	r31, 0xF8	; 248
    490c:	42 81       	ldd	r20, Z+2	; 0x02
    490e:	48 13       	cpse	r20, r24
    4910:	01 c0       	rjmp	.+2      	; 0x4914 <getUniqueID+0x1e>
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	2b 5f       	subi	r18, 0xFB	; 251
    4916:	3f 4f       	sbci	r19, 0xFF	; 255
    4918:	24 36       	cpi	r18, 0x64	; 100
    491a:	31 05       	cpc	r19, r1
    491c:	a1 f7       	brne	.-24     	; 0x4906 <getUniqueID+0x10>
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	f9 01       	movw	r30, r18
    4924:	ea 54       	subi	r30, 0x4A	; 74
    4926:	f9 4f       	sbci	r31, 0xF9	; 249
    4928:	42 81       	ldd	r20, Z+2	; 0x02
    492a:	48 13       	cpse	r20, r24
    492c:	01 c0       	rjmp	.+2      	; 0x4930 <getUniqueID+0x3a>
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	2b 5f       	subi	r18, 0xFB	; 251
    4932:	3f 4f       	sbci	r19, 0xFF	; 255
    4934:	24 36       	cpi	r18, 0x64	; 100
    4936:	31 05       	cpc	r19, r1
    4938:	a1 f7       	brne	.-24     	; 0x4922 <getUniqueID+0x2c>
    493a:	99 23       	and	r25, r25
    493c:	f1 f2       	breq	.-68     	; 0x48fa <getUniqueID+0x4>
    493e:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <currentTimerID.3607>
    4942:	08 95       	ret

00004944 <timerStart>:
    4944:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <timerRunning>
    4948:	81 11       	cpse	r24, r1
    494a:	0a c0       	rjmp	.+20     	; 0x4960 <timerStart+0x1c>
    494c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4950:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4954:	82 e0       	ldi	r24, 0x02	; 2
    4956:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <timerRunning>
    4960:	08 95       	ret

00004962 <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	1f 92       	push	r1
    496c:	cd b7       	in	r28, 0x3d	; 61
    496e:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    4970:	00 97       	sbiw	r24, 0x00	; 0
    4972:	19 f4       	brne	.+6      	; 0x497a <macSetAlarm+0x18>
    {
        // Don't delay, just call it
        callback();
    4974:	fb 01       	movw	r30, r22
    4976:	09 95       	icall
    4978:	12 c0       	rjmp	.+36     	; 0x499e <macSetAlarm+0x3c>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    497a:	2f b7       	in	r18, 0x3f	; 63
    497c:	29 83       	std	Y+1, r18	; 0x01
    497e:	f8 94       	cli
    4980:	aa e1       	ldi	r26, 0x1A	; 26
    4982:	b7 e0       	ldi	r27, 0x07	; 7
    4984:	20 e0       	ldi	r18, 0x00	; 0
    4986:	30 e0       	ldi	r19, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    4988:	4d 91       	ld	r20, X+
    498a:	5c 91       	ld	r21, X
    498c:	11 97       	sbiw	r26, 0x01	; 1
    498e:	45 2b       	or	r20, r21
    4990:	41 f0       	breq	.+16     	; 0x49a2 <macSetAlarm+0x40>
    4992:	2f 5f       	subi	r18, 0xFF	; 255
    4994:	3f 4f       	sbci	r19, 0xFF	; 255
    4996:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4998:	24 31       	cpi	r18, 0x14	; 20
    499a:	31 05       	cpc	r19, r1
    499c:	a9 f7       	brne	.-22     	; 0x4988 <macSetAlarm+0x26>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	23 c0       	rjmp	.+70     	; 0x49e8 <macSetAlarm+0x86>

    timerEvents[i].time = ticks;
    49a2:	45 e0       	ldi	r20, 0x05	; 5
    49a4:	42 9f       	mul	r20, r18
    49a6:	d0 01       	movw	r26, r0
    49a8:	43 9f       	mul	r20, r19
    49aa:	b0 0d       	add	r27, r0
    49ac:	11 24       	eor	r1, r1
    49ae:	a6 5e       	subi	r26, 0xE6	; 230
    49b0:	b8 4f       	sbci	r27, 0xF8	; 248
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	11 f4       	brne	.+4      	; 0x49ba <macSetAlarm+0x58>
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	90 e0       	ldi	r25, 0x00	; 0

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    49ba:	8d 93       	st	X+, r24
    49bc:	9c 93       	st	X, r25
    timerEvents[i].callback = callback;
    49be:	85 e0       	ldi	r24, 0x05	; 5
    49c0:	82 9f       	mul	r24, r18
    49c2:	80 01       	movw	r16, r0
    49c4:	83 9f       	mul	r24, r19
    49c6:	10 0d       	add	r17, r0
    49c8:	11 24       	eor	r1, r1
    49ca:	06 5e       	subi	r16, 0xE6	; 230
    49cc:	18 4f       	sbci	r17, 0xF8	; 248
    49ce:	f8 01       	movw	r30, r16
    49d0:	74 83       	std	Z+4, r23	; 0x04
    49d2:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    49d4:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <getUniqueID>
    49d8:	f8 01       	movw	r30, r16
    49da:	82 83       	std	Z+2, r24	; 0x02

    // start timer running, since we have at least one timer running
    timerStart();
    49dc:	0e 94 a2 24 	call	0x4944	; 0x4944 <timerStart>
    AVR_LEAVE_CRITICAL_REGION();
    49e0:	89 81       	ldd	r24, Y+1	; 0x01
    49e2:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    49e4:	f8 01       	movw	r30, r16
    49e6:	82 81       	ldd	r24, Z+2	; 0x02
}
    49e8:	0f 90       	pop	r0
    49ea:	df 91       	pop	r29
    49ec:	cf 91       	pop	r28
    49ee:	1f 91       	pop	r17
    49f0:	0f 91       	pop	r16
    49f2:	08 95       	ret

000049f4 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    49f4:	0f 93       	push	r16
    49f6:	1f 93       	push	r17
    49f8:	cf 93       	push	r28
    49fa:	df 93       	push	r29
    49fc:	1f 92       	push	r1
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	19 f4       	brne	.+6      	; 0x4a0c <macSetLongAlarm+0x18>
        {
            // Just go right now
            callback();
    4a06:	fb 01       	movw	r30, r22
    4a08:	09 95       	icall
    4a0a:	0f c0       	rjmp	.+30     	; 0x4a2a <macSetLongAlarm+0x36>
    4a0c:	a6 eb       	ldi	r26, 0xB6	; 182
    4a0e:	b6 e0       	ldi	r27, 0x06	; 6
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    4a14:	4d 91       	ld	r20, X+
    4a16:	5c 91       	ld	r21, X
    4a18:	11 97       	sbiw	r26, 0x01	; 1
    4a1a:	45 2b       	or	r20, r21
    4a1c:	41 f0       	breq	.+16     	; 0x4a2e <macSetLongAlarm+0x3a>
    4a1e:	2f 5f       	subi	r18, 0xFF	; 255
    4a20:	3f 4f       	sbci	r19, 0xFF	; 255
    4a22:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4a24:	24 31       	cpi	r18, 0x14	; 20
    4a26:	31 05       	cpc	r19, r1
    4a28:	a9 f7       	brne	.-22     	; 0x4a14 <macSetLongAlarm+0x20>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	1a c0       	rjmp	.+52     	; 0x4a62 <macSetLongAlarm+0x6e>
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    4a2e:	45 e0       	ldi	r20, 0x05	; 5
    4a30:	42 9f       	mul	r20, r18
    4a32:	80 01       	movw	r16, r0
    4a34:	43 9f       	mul	r20, r19
    4a36:	10 0d       	add	r17, r0
    4a38:	11 24       	eor	r1, r1
    4a3a:	0a 54       	subi	r16, 0x4A	; 74
    4a3c:	19 4f       	sbci	r17, 0xF9	; 249
    4a3e:	f8 01       	movw	r30, r16
    4a40:	91 83       	std	Z+1, r25	; 0x01
    4a42:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    4a44:	74 83       	std	Z+4, r23	; 0x04
    4a46:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    4a48:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <getUniqueID>
    4a4c:	f8 01       	movw	r30, r16
    4a4e:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    4a50:	8f b7       	in	r24, 0x3f	; 63
    4a52:	89 83       	std	Y+1, r24	; 0x01
    4a54:	f8 94       	cli
        timerStart();
    4a56:	0e 94 a2 24 	call	0x4944	; 0x4944 <timerStart>
        AVR_LEAVE_CRITICAL_REGION();
    4a5a:	89 81       	ldd	r24, Y+1	; 0x01
    4a5c:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    4a5e:	f8 01       	movw	r30, r16
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return 0;
}
    4a62:	0f 90       	pop	r0
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	1f 91       	pop	r17
    4a6a:	0f 91       	pop	r16
    4a6c:	08 95       	ret

00004a6e <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    4a6e:	ec e1       	ldi	r30, 0x1C	; 28
    4a70:	f7 e0       	ldi	r31, 0x07	; 7
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    4a76:	90 81       	ld	r25, Z
    4a78:	98 13       	cpse	r25, r24
    4a7a:	09 c0       	rjmp	.+18     	; 0x4a8e <macTimerEnd+0x20>
        {
            // kill this timer
            timerEvents[i].time = 0;
    4a7c:	85 e0       	ldi	r24, 0x05	; 5
    4a7e:	82 9f       	mul	r24, r18
    4a80:	f0 01       	movw	r30, r0
    4a82:	83 9f       	mul	r24, r19
    4a84:	f0 0d       	add	r31, r0
    4a86:	11 24       	eor	r1, r1
    4a88:	e6 5e       	subi	r30, 0xE6	; 230
    4a8a:	f8 4f       	sbci	r31, 0xF8	; 248
    4a8c:	15 c0       	rjmp	.+42     	; 0x4ab8 <macTimerEnd+0x4a>
    4a8e:	2f 5f       	subi	r18, 0xFF	; 255
    4a90:	3f 4f       	sbci	r19, 0xFF	; 255
    4a92:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4a94:	24 31       	cpi	r18, 0x14	; 20
    4a96:	31 05       	cpc	r19, r1
    4a98:	71 f7       	brne	.-36     	; 0x4a76 <macTimerEnd+0x8>
    4a9a:	e8 eb       	ldi	r30, 0xB8	; 184
    4a9c:	f6 e0       	ldi	r31, 0x06	; 6
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    4aa2:	90 81       	ld	r25, Z
    4aa4:	98 13       	cpse	r25, r24
    4aa6:	0c c0       	rjmp	.+24     	; 0x4ac0 <macTimerEnd+0x52>
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    4aa8:	85 e0       	ldi	r24, 0x05	; 5
    4aaa:	82 9f       	mul	r24, r18
    4aac:	f0 01       	movw	r30, r0
    4aae:	83 9f       	mul	r24, r19
    4ab0:	f0 0d       	add	r31, r0
    4ab2:	11 24       	eor	r1, r1
    4ab4:	ea 54       	subi	r30, 0x4A	; 74
    4ab6:	f9 4f       	sbci	r31, 0xF9	; 249
    4ab8:	11 82       	std	Z+1, r1	; 0x01
    4aba:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    4abc:	12 82       	std	Z+2, r1	; 0x02
                return;
    4abe:	08 95       	ret
    4ac0:	2f 5f       	subi	r18, 0xFF	; 255
    4ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac4:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4ac6:	24 31       	cpi	r18, 0x14	; 20
    4ac8:	31 05       	cpc	r19, r1
    4aca:	59 f7       	brne	.-42     	; 0x4aa2 <macTimerEnd+0x34>
    4acc:	08 95       	ret

00004ace <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    4ace:	e1 e9       	ldi	r30, 0x91	; 145
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	80 81       	ld	r24, Z
    4ad4:	8a 60       	ori	r24, 0x0A	; 10
    4ad6:	80 83       	st	Z, r24
    4ad8:	80 ed       	ldi	r24, 0xD0	; 208
    4ada:	97 e0       	ldi	r25, 0x07	; 7
    4adc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4ae0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    4ae4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4ae8:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4aec:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <srand>

00004af0 <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    4af0:	1f 92       	push	r1
    4af2:	0f 92       	push	r0
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	0f 92       	push	r0
    4af8:	11 24       	eor	r1, r1
    4afa:	0b b6       	in	r0, 0x3b	; 59
    4afc:	0f 92       	push	r0
    4afe:	ff 92       	push	r15
    4b00:	0f 93       	push	r16
    4b02:	1f 93       	push	r17
    4b04:	2f 93       	push	r18
    4b06:	3f 93       	push	r19
    4b08:	4f 93       	push	r20
    4b0a:	5f 93       	push	r21
    4b0c:	6f 93       	push	r22
    4b0e:	7f 93       	push	r23
    4b10:	8f 93       	push	r24
    4b12:	9f 93       	push	r25
    4b14:	af 93       	push	r26
    4b16:	bf 93       	push	r27
    4b18:	ef 93       	push	r30
    4b1a:	ff 93       	push	r31
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	00 d0       	rcall	.+0      	; 0x4b22 <__vector_32+0x32>
    4b22:	1f 92       	push	r1
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    4b28:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <tickTimer>
    4b2c:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <tickTimer+0x1>
    4b30:	01 96       	adiw	r24, 0x01	; 1
    4b32:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <tickTimer+0x1>
    4b36:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    4b3a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <secondTimer>
    4b3e:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <secondTimer+0x1>
    4b42:	01 97       	sbiw	r24, 0x01	; 1
    4b44:	49 f0       	breq	.+18     	; 0x4b58 <__vector_32+0x68>
    4b46:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4b4a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4b4e:	0a e1       	ldi	r16, 0x1A	; 26
    4b50:	17 e0       	ldi	r17, 0x07	; 7
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4b52:	96 e1       	ldi	r25, 0x16	; 22
    4b54:	f9 2e       	mov	r15, r25
    4b56:	24 c0       	rjmp	.+72     	; 0x4ba0 <__vector_32+0xb0>
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    4b58:	84 ef       	ldi	r24, 0xF4	; 244
    4b5a:	91 e0       	ldi	r25, 0x01	; 1
    4b5c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4b60:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4b64:	06 eb       	ldi	r16, 0xB6	; 182
    4b66:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4b68:	86 e1       	ldi	r24, 0x16	; 22
    4b6a:	f8 2e       	mov	r15, r24
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    4b6c:	f8 01       	movw	r30, r16
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	00 97       	sbiw	r24, 0x00	; 0
    4b74:	71 f0       	breq	.+28     	; 0x4b92 <__vector_32+0xa2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	91 83       	std	Z+1, r25	; 0x01
    4b7a:	80 83       	st	Z, r24
    4b7c:	89 2b       	or	r24, r25
    4b7e:	49 f4       	brne	.+18     	; 0x4b92 <__vector_32+0xa2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4b80:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    4b82:	83 81       	ldd	r24, Z+3	; 0x03
    4b84:	94 81       	ldd	r25, Z+4	; 0x04
    4b86:	9b 83       	std	Y+3, r25	; 0x03
    4b88:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    4b8a:	ce 01       	movw	r24, r28
    4b8c:	01 96       	adiw	r24, 0x01	; 1
    4b8e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <mac_put_event>
    4b92:	0b 5f       	subi	r16, 0xFB	; 251
    4b94:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4b96:	f7 e0       	ldi	r31, 0x07	; 7
    4b98:	0a 31       	cpi	r16, 0x1A	; 26
    4b9a:	1f 07       	cpc	r17, r31
    4b9c:	39 f7       	brne	.-50     	; 0x4b6c <__vector_32+0x7c>
    4b9e:	d7 cf       	rjmp	.-82     	; 0x4b4e <__vector_32+0x5e>
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    4ba0:	f8 01       	movw	r30, r16
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	00 97       	sbiw	r24, 0x00	; 0
    4ba8:	71 f0       	breq	.+28     	; 0x4bc6 <__vector_32+0xd6>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    4baa:	01 97       	sbiw	r24, 0x01	; 1
    4bac:	91 83       	std	Z+1, r25	; 0x01
    4bae:	80 83       	st	Z, r24
    4bb0:	89 2b       	or	r24, r25
    4bb2:	49 f4       	brne	.+18     	; 0x4bc6 <__vector_32+0xd6>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4bb4:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    4bb6:	83 81       	ldd	r24, Z+3	; 0x03
    4bb8:	94 81       	ldd	r25, Z+4	; 0x04
    4bba:	9b 83       	std	Y+3, r25	; 0x03
    4bbc:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    4bbe:	ce 01       	movw	r24, r28
    4bc0:	01 96       	adiw	r24, 0x01	; 1
    4bc2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <mac_put_event>
    4bc6:	0b 5f       	subi	r16, 0xFB	; 251
    4bc8:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4bca:	f7 e0       	ldi	r31, 0x07	; 7
    4bcc:	0e 37       	cpi	r16, 0x7E	; 126
    4bce:	1f 07       	cpc	r17, r31
    4bd0:	39 f7       	brne	.-50     	; 0x4ba0 <__vector_32+0xb0>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    4bd2:	0f 90       	pop	r0
    4bd4:	0f 90       	pop	r0
    4bd6:	0f 90       	pop	r0
    4bd8:	df 91       	pop	r29
    4bda:	cf 91       	pop	r28
    4bdc:	ff 91       	pop	r31
    4bde:	ef 91       	pop	r30
    4be0:	bf 91       	pop	r27
    4be2:	af 91       	pop	r26
    4be4:	9f 91       	pop	r25
    4be6:	8f 91       	pop	r24
    4be8:	7f 91       	pop	r23
    4bea:	6f 91       	pop	r22
    4bec:	5f 91       	pop	r21
    4bee:	4f 91       	pop	r20
    4bf0:	3f 91       	pop	r19
    4bf2:	2f 91       	pop	r18
    4bf4:	1f 91       	pop	r17
    4bf6:	0f 91       	pop	r16
    4bf8:	ff 90       	pop	r15
    4bfa:	0f 90       	pop	r0
    4bfc:	0b be       	out	0x3b, r0	; 59
    4bfe:	0f 90       	pop	r0
    4c00:	0f be       	out	0x3f, r0	; 63
    4c02:	0f 90       	pop	r0
    4c04:	1f 90       	pop	r1
    4c06:	18 95       	reti

00004c08 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    4c08:	1f 92       	push	r1
    4c0a:	0f 92       	push	r0
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	0f 92       	push	r0
    4c10:	11 24       	eor	r1, r1
    4c12:	8f 93       	push	r24
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <GenericTimerFlag>
    4c1a:	8f 91       	pop	r24
    4c1c:	0f 90       	pop	r0
    4c1e:	0f be       	out	0x3f, r0	; 63
    4c20:	0f 90       	pop	r0
    4c22:	1f 90       	pop	r1
    4c24:	18 95       	reti

00004c26 <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    4c26:	1f 92       	push	r1
    4c28:	0f 92       	push	r0
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	0f 92       	push	r0
    4c2e:	11 24       	eor	r1, r1
    4c30:	8f 93       	push	r24
    WDTFlag = 1;
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <WDTFlag>
}
    4c38:	8f 91       	pop	r24
    4c3a:	0f 90       	pop	r0
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	0f 90       	pop	r0
    4c40:	1f 90       	pop	r1
    4c42:	18 95       	reti

00004c44 <WaitForMachine>:
		if(MdcStatus.MachineType[1] == QUANTUM_SERIES)
		halGetEeprom(MACHINE_SETUP_ADDR_QUANTUM, QUANTUM_SETUP_NUM_BYTE, &MachineSetupData.CoolDownTime);
}

void SaveMachineSetupData(void)
{
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <ucMachineWait>
    4c4a:	08 95       	ret

00004c4c <InitTimerZero>:
    4c4c:	82 e0       	ldi	r24, 0x02	; 2
    4c4e:	85 bb       	out	0x15, r24	; 21
    4c50:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    4c54:	16 bc       	out	0x26, r1	; 38
    4c56:	10 92 e4 0c 	sts	0x0CE4, r1	; 0x800ce4 <ucTimerCount>
    4c5a:	08 95       	ret

00004c5c <StopTimerZero>:
    4c5c:	15 bc       	out	0x25, r1	; 37
    4c5e:	08 95       	ret

00004c60 <StartTimerZero>:
    4c60:	8e e4       	ldi	r24, 0x4E	; 78
    4c62:	87 bd       	out	0x27, r24	; 39
    4c64:	82 e0       	ldi	r24, 0x02	; 2
    4c66:	84 bd       	out	0x24, r24	; 36
    4c68:	85 e0       	ldi	r24, 0x05	; 5
    4c6a:	85 bd       	out	0x25, r24	; 37
    4c6c:	08 95       	ret

00004c6e <__vector_21>:
    4c6e:	1f 92       	push	r1
    4c70:	0f 92       	push	r0
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	0f 92       	push	r0
    4c76:	11 24       	eor	r1, r1
    4c78:	8f 93       	push	r24
    4c7a:	80 91 e4 0c 	lds	r24, 0x0CE4	; 0x800ce4 <ucTimerCount>
    4c7e:	8f 5f       	subi	r24, 0xFF	; 255
    4c80:	80 93 e4 0c 	sts	0x0CE4, r24	; 0x800ce4 <ucTimerCount>
    4c84:	8f 91       	pop	r24
    4c86:	0f 90       	pop	r0
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	0f 90       	pop	r0
    4c8c:	1f 90       	pop	r1
    4c8e:	18 95       	reti

00004c90 <SetDefaultMachineSetup>:
}
*/
void SetDefaultMachineSetup(void)
{
	//Default settings
	MachineSetupData.KeyPressWaitTime = 25;
    4c90:	e6 ea       	ldi	r30, 0xA6	; 166
    4c92:	f9 e0       	ldi	r31, 0x09	; 9
    4c94:	99 e1       	ldi	r25, 0x19	; 25
    4c96:	90 83       	st	Z, r25
	MachineSetupData.VendPrice[0] = 0;
    4c98:	14 82       	std	Z+4, r1	; 0x04
	MachineSetupData.VendPrice[1] = 100;
    4c9a:	84 e6       	ldi	r24, 0x64	; 100
    4c9c:	85 83       	std	Z+5, r24	; 0x05
	MachineSetupData.Coin1[0] = 0;
    4c9e:	13 a6       	std	Z+43, r1	; 0x2b
	MachineSetupData.Coin1[1] = 25;
    4ca0:	94 a7       	std	Z+44, r25	; 0x2c
	MachineSetupData.Coin2[0] = 0;
    4ca2:	15 a6       	std	Z+45, r1	; 0x2d
	MachineSetupData.Coin2[1] = 100;
    4ca4:	86 a7       	std	Z+46, r24	; 0x2e
	MachineSetupData.StartPulse[0] = 0;
    4ca6:	17 a6       	std	Z+47, r1	; 0x2f
	MachineSetupData.StartPulse[1] = 100;
    4ca8:	80 ab       	std	Z+48, r24	; 0x30
	MachineSetupData.CycleLength = 1;
    4caa:	91 e0       	ldi	r25, 0x01	; 1
    4cac:	91 ab       	std	Z+49, r25	; 0x31
	MachineSetupData.ControlConfig = 0;//8;
    4cae:	12 aa       	std	Z+50, r1	; 0x32
	MachineSetupData.DefaultCycle = 2; //Normal for washer
    4cb0:	82 e0       	ldi	r24, 0x02	; 2
    4cb2:	83 ab       	std	Z+51, r24	; 0x33

	//Dryer specific settings
	MachineSetupData.CoolDownTime = 3;
    4cb4:	83 e0       	ldi	r24, 0x03	; 3
    4cb6:	84 ab       	std	Z+52, r24	; 0x34
	MachineSetupData.Coin1TopoffTime = 15;
    4cb8:	2f e0       	ldi	r18, 0x0F	; 15
    4cba:	25 ab       	std	Z+53, r18	; 0x35
	MachineSetupData.Coin2TopoffTime = 60;
    4cbc:	2c e3       	ldi	r18, 0x3C	; 60
    4cbe:	26 ab       	std	Z+54, r18	; 0x36
	MachineSetupData.HighTempSetting = 0;
    4cc0:	17 aa       	std	Z+55, r1	; 0x37
	MachineSetupData.MediumTempSetting = 1;
    4cc2:	90 af       	std	Z+56, r25	; 0x38
	MachineSetupData.LowTempSetting = 3;
    4cc4:	81 af       	std	Z+57, r24	; 0x39
	MachineSetupData.DelicateTempSetting = 9;
    4cc6:	89 e0       	ldi	r24, 0x09	; 9
    4cc8:	82 af       	std	Z+58, r24	; 0x3a
    4cca:	08 95       	ret

00004ccc <get_from_circ_buf>:
    else
    {
        ucData = ucData - 10 + 'A';
    }
    return ucData;
}
    4ccc:	fc 01       	movw	r30, r24
    4cce:	91 81       	ldd	r25, Z+1	; 0x01
    4cd0:	df 01       	movw	r26, r30
    4cd2:	a9 0f       	add	r26, r25
    4cd4:	b1 1d       	adc	r27, r1
    4cd6:	12 96       	adiw	r26, 0x02	; 2
    4cd8:	2c 91       	ld	r18, X
    4cda:	80 81       	ld	r24, Z
    4cdc:	98 17       	cp	r25, r24
    4cde:	31 f0       	breq	.+12     	; 0x4cec <get_from_circ_buf+0x20>
    4ce0:	9f 5f       	subi	r25, 0xFF	; 255
    4ce2:	97 fd       	sbrc	r25, 7
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	91 83       	std	Z+1, r25	; 0x01
    4ce8:	82 2f       	mov	r24, r18
    4cea:	08 95       	ret
    4cec:	8f ef       	ldi	r24, 0xFF	; 255
    4cee:	08 95       	ret

00004cf0 <init_rx_buf>:
    4cf0:	e4 e8       	ldi	r30, 0x84	; 132
    4cf2:	f7 e0       	ldi	r31, 0x07	; 7
    4cf4:	11 82       	std	Z+1, r1	; 0x01
    4cf6:	10 82       	st	Z, r1
    4cf8:	08 95       	ret

00004cfa <serial_init>:
    4cfa:	e4 e8       	ldi	r30, 0x84	; 132
    4cfc:	f7 e0       	ldi	r31, 0x07	; 7
    4cfe:	11 82       	std	Z+1, r1	; 0x01
    4d00:	10 82       	st	Z, r1
    4d02:	e6 e0       	ldi	r30, 0x06	; 6
    4d04:	f8 e0       	ldi	r31, 0x08	; 8
    4d06:	11 82       	std	Z+1, r1	; 0x01
    4d08:	10 82       	st	Z, r1
    4d0a:	28 e9       	ldi	r18, 0x98	; 152
    4d0c:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4d10:	26 e0       	ldi	r18, 0x06	; 6
    4d12:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    4d16:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    4d1a:	27 e6       	ldi	r18, 0x67	; 103
    4d1c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    4d20:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <rx_handler+0x1>
    4d24:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <rx_handler>
    4d28:	08 95       	ret

00004d2a <serial_putchar>:
    4d2a:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <pause>
    4d2e:	91 11       	cpse	r25, r1
    4d30:	2a c0       	rjmp	.+84     	; 0x4d86 <serial_putchar+0x5c>
    4d32:	78 94       	sei
    4d34:	90 91 06 08 	lds	r25, 0x0806	; 0x800806 <txbuf>
    4d38:	9f 5f       	subi	r25, 0xFF	; 255
    4d3a:	97 fd       	sbrc	r25, 7
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <rx>
    4d42:	20 91 07 08 	lds	r18, 0x0807	; 0x800807 <txbuf+0x1>
    4d46:	92 13       	cpse	r25, r18
    4d48:	03 c0       	rjmp	.+6      	; 0x4d50 <serial_putchar+0x26>
    4d4a:	33 23       	and	r19, r19
    4d4c:	d1 f3       	breq	.-12     	; 0x4d42 <serial_putchar+0x18>
    4d4e:	08 c0       	rjmp	.+16     	; 0x4d60 <serial_putchar+0x36>
    4d50:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <txbuf>
    4d54:	f0 e0       	ldi	r31, 0x00	; 0
    4d56:	ea 5f       	subi	r30, 0xFA	; 250
    4d58:	f7 4f       	sbci	r31, 0xF7	; 247
    4d5a:	82 83       	std	Z+2, r24	; 0x02
    4d5c:	90 93 06 08 	sts	0x0806, r25	; 0x800806 <txbuf>
    4d60:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4d64:	85 fd       	sbrc	r24, 5
    4d66:	0f c0       	rjmp	.+30     	; 0x4d86 <serial_putchar+0x5c>
    4d68:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4d6c:	85 ff       	sbrs	r24, 5
    4d6e:	fc cf       	rjmp	.-8      	; 0x4d68 <serial_putchar+0x3e>
    4d70:	86 e0       	ldi	r24, 0x06	; 6
    4d72:	98 e0       	ldi	r25, 0x08	; 8
    4d74:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <get_from_circ_buf>
    4d78:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4d7c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4d80:	80 62       	ori	r24, 0x20	; 32
    4d82:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4d86:	08 95       	ret

00004d88 <rx_buf_count>:
    4d88:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <rxbuf>
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	20 91 85 07 	lds	r18, 0x0785	; 0x800785 <rxbuf+0x1>
    4d92:	82 1b       	sub	r24, r18
    4d94:	91 09       	sbc	r25, r1
    4d96:	97 ff       	sbrs	r25, 7
    4d98:	02 c0       	rjmp	.+4      	; 0x4d9e <rx_buf_count+0x16>
    4d9a:	80 58       	subi	r24, 0x80	; 128
    4d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9e:	08 95       	ret

00004da0 <serial_getchar>:
    4da0:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <rxbuf>
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	20 91 85 07 	lds	r18, 0x0785	; 0x800785 <rxbuf+0x1>
    4daa:	82 1b       	sub	r24, r18
    4dac:	91 09       	sbc	r25, r1
    4dae:	97 ff       	sbrs	r25, 7
    4db0:	02 c0       	rjmp	.+4      	; 0x4db6 <serial_getchar+0x16>
    4db2:	80 58       	subi	r24, 0x80	; 128
    4db4:	9f 4f       	sbci	r25, 0xFF	; 255
    4db6:	88 23       	and	r24, r24
    4db8:	99 f3       	breq	.-26     	; 0x4da0 <serial_getchar>
    4dba:	84 e8       	ldi	r24, 0x84	; 132
    4dbc:	97 e0       	ldi	r25, 0x07	; 7
    4dbe:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <get_from_circ_buf>

00004dc2 <__vector_36>:
    4dc2:	1f 92       	push	r1
    4dc4:	0f 92       	push	r0
    4dc6:	0f b6       	in	r0, 0x3f	; 63
    4dc8:	0f 92       	push	r0
    4dca:	11 24       	eor	r1, r1
    4dcc:	0b b6       	in	r0, 0x3b	; 59
    4dce:	0f 92       	push	r0
    4dd0:	2f 93       	push	r18
    4dd2:	3f 93       	push	r19
    4dd4:	4f 93       	push	r20
    4dd6:	5f 93       	push	r21
    4dd8:	6f 93       	push	r22
    4dda:	7f 93       	push	r23
    4ddc:	8f 93       	push	r24
    4dde:	9f 93       	push	r25
    4de0:	af 93       	push	r26
    4de2:	bf 93       	push	r27
    4de4:	ef 93       	push	r30
    4de6:	ff 93       	push	r31
    4de8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4dec:	91 e0       	ldi	r25, 0x01	; 1
    4dee:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <rx>
    4df2:	90 91 84 07 	lds	r25, 0x0784	; 0x800784 <rxbuf>
    4df6:	9f 5f       	subi	r25, 0xFF	; 255
    4df8:	97 fd       	sbrc	r25, 7
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	20 91 85 07 	lds	r18, 0x0785	; 0x800785 <rxbuf+0x1>
    4e00:	92 17       	cp	r25, r18
    4e02:	41 f0       	breq	.+16     	; 0x4e14 <__vector_36+0x52>
    4e04:	e0 91 84 07 	lds	r30, 0x0784	; 0x800784 <rxbuf>
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	ec 57       	subi	r30, 0x7C	; 124
    4e0c:	f8 4f       	sbci	r31, 0xF8	; 248
    4e0e:	82 83       	std	Z+2, r24	; 0x02
    4e10:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <rxbuf>
    4e14:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <rx>
    4e18:	e0 91 82 07 	lds	r30, 0x0782	; 0x800782 <rx_handler>
    4e1c:	f0 91 83 07 	lds	r31, 0x0783	; 0x800783 <rx_handler+0x1>
    4e20:	30 97       	sbiw	r30, 0x00	; 0
    4e22:	09 f0       	breq	.+2      	; 0x4e26 <__vector_36+0x64>
    4e24:	09 95       	icall
    4e26:	ff 91       	pop	r31
    4e28:	ef 91       	pop	r30
    4e2a:	bf 91       	pop	r27
    4e2c:	af 91       	pop	r26
    4e2e:	9f 91       	pop	r25
    4e30:	8f 91       	pop	r24
    4e32:	7f 91       	pop	r23
    4e34:	6f 91       	pop	r22
    4e36:	5f 91       	pop	r21
    4e38:	4f 91       	pop	r20
    4e3a:	3f 91       	pop	r19
    4e3c:	2f 91       	pop	r18
    4e3e:	0f 90       	pop	r0
    4e40:	0b be       	out	0x3b, r0	; 59
    4e42:	0f 90       	pop	r0
    4e44:	0f be       	out	0x3f, r0	; 63
    4e46:	0f 90       	pop	r0
    4e48:	1f 90       	pop	r1
    4e4a:	18 95       	reti

00004e4c <__vector_37>:
    4e4c:	1f 92       	push	r1
    4e4e:	0f 92       	push	r0
    4e50:	0f b6       	in	r0, 0x3f	; 63
    4e52:	0f 92       	push	r0
    4e54:	11 24       	eor	r1, r1
    4e56:	0b b6       	in	r0, 0x3b	; 59
    4e58:	0f 92       	push	r0
    4e5a:	2f 93       	push	r18
    4e5c:	3f 93       	push	r19
    4e5e:	4f 93       	push	r20
    4e60:	5f 93       	push	r21
    4e62:	6f 93       	push	r22
    4e64:	7f 93       	push	r23
    4e66:	8f 93       	push	r24
    4e68:	9f 93       	push	r25
    4e6a:	af 93       	push	r26
    4e6c:	bf 93       	push	r27
    4e6e:	ef 93       	push	r30
    4e70:	ff 93       	push	r31
    4e72:	90 91 06 08 	lds	r25, 0x0806	; 0x800806 <txbuf>
    4e76:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <txbuf+0x1>
    4e7a:	98 17       	cp	r25, r24
    4e7c:	39 f0       	breq	.+14     	; 0x4e8c <__vector_37+0x40>
    4e7e:	86 e0       	ldi	r24, 0x06	; 6
    4e80:	98 e0       	ldi	r25, 0x08	; 8
    4e82:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <get_from_circ_buf>
    4e86:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4e8a:	05 c0       	rjmp	.+10     	; 0x4e96 <__vector_37+0x4a>
    4e8c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e90:	8f 7d       	andi	r24, 0xDF	; 223
    4e92:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e96:	ff 91       	pop	r31
    4e98:	ef 91       	pop	r30
    4e9a:	bf 91       	pop	r27
    4e9c:	af 91       	pop	r26
    4e9e:	9f 91       	pop	r25
    4ea0:	8f 91       	pop	r24
    4ea2:	7f 91       	pop	r23
    4ea4:	6f 91       	pop	r22
    4ea6:	5f 91       	pop	r21
    4ea8:	4f 91       	pop	r20
    4eaa:	3f 91       	pop	r19
    4eac:	2f 91       	pop	r18
    4eae:	0f 90       	pop	r0
    4eb0:	0b be       	out	0x3b, r0	; 59
    4eb2:	0f 90       	pop	r0
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	0f 90       	pop	r0
    4eb8:	1f 90       	pop	r1
    4eba:	18 95       	reti

00004ebc <Ascii_to_nible>:
 * \param ucData is the ASCII value to be converted.
 *
 * \return ucData is the nible value.
**/
u8 Ascii_to_nible ( u8 ucData )
{
    4ebc:	98 2f       	mov	r25, r24
    if ((ucData <= '9' ) && (ucData >= '0')) 
    4ebe:	80 ed       	ldi	r24, 0xD0	; 208
    4ec0:	89 0f       	add	r24, r25
    4ec2:	8a 30       	cpi	r24, 0x0A	; 10
    4ec4:	70 f0       	brcs	.+28     	; 0x4ee2 <Ascii_to_nible+0x26>
    {
        ucData -= '0';
    }
    else if ((ucData <= 'F' ) && (ucData >= 'A')) 
    4ec6:	8f eb       	ldi	r24, 0xBF	; 191
    4ec8:	89 0f       	add	r24, r25
    4eca:	86 30       	cpi	r24, 0x06	; 6
    4ecc:	10 f4       	brcc	.+4      	; 0x4ed2 <Ascii_to_nible+0x16>
    {
        ucData = ucData -'A' + 10;
    4ece:	89 ec       	ldi	r24, 0xC9	; 201
    4ed0:	05 c0       	rjmp	.+10     	; 0x4edc <Ascii_to_nible+0x20>
    }
    else if ((ucData <= 'f' ) && (ucData >= 'a')) 
    4ed2:	8f e9       	ldi	r24, 0x9F	; 159
    4ed4:	89 0f       	add	r24, r25
    4ed6:	86 30       	cpi	r24, 0x06	; 6
    4ed8:	18 f4       	brcc	.+6      	; 0x4ee0 <Ascii_to_nible+0x24>
    {
        ucData = ucData -'a' + 10;
    4eda:	89 ea       	ldi	r24, 0xA9	; 169
    4edc:	89 0f       	add	r24, r25
    4ede:	08 95       	ret
    }
    else 
    {
        ucData = 0;
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    }
    return ucData;
}
    4ee2:	08 95       	ret

00004ee4 <vfprintf>:
    4ee4:	2f 92       	push	r2
    4ee6:	3f 92       	push	r3
    4ee8:	4f 92       	push	r4
    4eea:	5f 92       	push	r5
    4eec:	6f 92       	push	r6
    4eee:	7f 92       	push	r7
    4ef0:	8f 92       	push	r8
    4ef2:	9f 92       	push	r9
    4ef4:	af 92       	push	r10
    4ef6:	bf 92       	push	r11
    4ef8:	cf 92       	push	r12
    4efa:	df 92       	push	r13
    4efc:	ef 92       	push	r14
    4efe:	ff 92       	push	r15
    4f00:	0f 93       	push	r16
    4f02:	1f 93       	push	r17
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	63 97       	sbiw	r28, 0x13	; 19
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	6c 01       	movw	r12, r24
    4f1a:	4b 01       	movw	r8, r22
    4f1c:	2a 01       	movw	r4, r20
    4f1e:	fc 01       	movw	r30, r24
    4f20:	17 82       	std	Z+7, r1	; 0x07
    4f22:	16 82       	std	Z+6, r1	; 0x06
    4f24:	83 81       	ldd	r24, Z+3	; 0x03
    4f26:	81 ff       	sbrs	r24, 1
    4f28:	43 c3       	rjmp	.+1670   	; 0x55b0 <vfprintf+0x6cc>
    4f2a:	ae 01       	movw	r20, r28
    4f2c:	4f 5f       	subi	r20, 0xFF	; 255
    4f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f30:	3a 01       	movw	r6, r20
    4f32:	f6 01       	movw	r30, r12
    4f34:	93 81       	ldd	r25, Z+3	; 0x03
    4f36:	f4 01       	movw	r30, r8
    4f38:	93 fd       	sbrc	r25, 3
    4f3a:	85 91       	lpm	r24, Z+
    4f3c:	93 ff       	sbrs	r25, 3
    4f3e:	81 91       	ld	r24, Z+
    4f40:	4f 01       	movw	r8, r30
    4f42:	88 23       	and	r24, r24
    4f44:	09 f4       	brne	.+2      	; 0x4f48 <vfprintf+0x64>
    4f46:	30 c3       	rjmp	.+1632   	; 0x55a8 <vfprintf+0x6c4>
    4f48:	85 32       	cpi	r24, 0x25	; 37
    4f4a:	39 f4       	brne	.+14     	; 0x4f5a <vfprintf+0x76>
    4f4c:	93 fd       	sbrc	r25, 3
    4f4e:	85 91       	lpm	r24, Z+
    4f50:	93 ff       	sbrs	r25, 3
    4f52:	81 91       	ld	r24, Z+
    4f54:	4f 01       	movw	r8, r30
    4f56:	85 32       	cpi	r24, 0x25	; 37
    4f58:	39 f4       	brne	.+14     	; 0x4f68 <vfprintf+0x84>
    4f5a:	b6 01       	movw	r22, r12
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    4f62:	52 01       	movw	r10, r4
    4f64:	25 01       	movw	r4, r10
    4f66:	e5 cf       	rjmp	.-54     	; 0x4f32 <vfprintf+0x4e>
    4f68:	10 e0       	ldi	r17, 0x00	; 0
    4f6a:	f1 2c       	mov	r15, r1
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	20 32       	cpi	r18, 0x20	; 32
    4f70:	a0 f4       	brcc	.+40     	; 0x4f9a <vfprintf+0xb6>
    4f72:	8b 32       	cpi	r24, 0x2B	; 43
    4f74:	69 f0       	breq	.+26     	; 0x4f90 <vfprintf+0xac>
    4f76:	30 f4       	brcc	.+12     	; 0x4f84 <vfprintf+0xa0>
    4f78:	80 32       	cpi	r24, 0x20	; 32
    4f7a:	59 f0       	breq	.+22     	; 0x4f92 <vfprintf+0xae>
    4f7c:	83 32       	cpi	r24, 0x23	; 35
    4f7e:	69 f4       	brne	.+26     	; 0x4f9a <vfprintf+0xb6>
    4f80:	20 61       	ori	r18, 0x10	; 16
    4f82:	2c c0       	rjmp	.+88     	; 0x4fdc <vfprintf+0xf8>
    4f84:	8d 32       	cpi	r24, 0x2D	; 45
    4f86:	39 f0       	breq	.+14     	; 0x4f96 <vfprintf+0xb2>
    4f88:	80 33       	cpi	r24, 0x30	; 48
    4f8a:	39 f4       	brne	.+14     	; 0x4f9a <vfprintf+0xb6>
    4f8c:	21 60       	ori	r18, 0x01	; 1
    4f8e:	26 c0       	rjmp	.+76     	; 0x4fdc <vfprintf+0xf8>
    4f90:	22 60       	ori	r18, 0x02	; 2
    4f92:	24 60       	ori	r18, 0x04	; 4
    4f94:	23 c0       	rjmp	.+70     	; 0x4fdc <vfprintf+0xf8>
    4f96:	28 60       	ori	r18, 0x08	; 8
    4f98:	21 c0       	rjmp	.+66     	; 0x4fdc <vfprintf+0xf8>
    4f9a:	27 fd       	sbrc	r18, 7
    4f9c:	27 c0       	rjmp	.+78     	; 0x4fec <vfprintf+0x108>
    4f9e:	30 ed       	ldi	r19, 0xD0	; 208
    4fa0:	38 0f       	add	r19, r24
    4fa2:	3a 30       	cpi	r19, 0x0A	; 10
    4fa4:	78 f4       	brcc	.+30     	; 0x4fc4 <vfprintf+0xe0>
    4fa6:	26 ff       	sbrs	r18, 6
    4fa8:	06 c0       	rjmp	.+12     	; 0x4fb6 <vfprintf+0xd2>
    4faa:	fa e0       	ldi	r31, 0x0A	; 10
    4fac:	1f 9f       	mul	r17, r31
    4fae:	30 0d       	add	r19, r0
    4fb0:	11 24       	eor	r1, r1
    4fb2:	13 2f       	mov	r17, r19
    4fb4:	13 c0       	rjmp	.+38     	; 0x4fdc <vfprintf+0xf8>
    4fb6:	4a e0       	ldi	r20, 0x0A	; 10
    4fb8:	f4 9e       	mul	r15, r20
    4fba:	30 0d       	add	r19, r0
    4fbc:	11 24       	eor	r1, r1
    4fbe:	f3 2e       	mov	r15, r19
    4fc0:	20 62       	ori	r18, 0x20	; 32
    4fc2:	0c c0       	rjmp	.+24     	; 0x4fdc <vfprintf+0xf8>
    4fc4:	8e 32       	cpi	r24, 0x2E	; 46
    4fc6:	21 f4       	brne	.+8      	; 0x4fd0 <vfprintf+0xec>
    4fc8:	26 fd       	sbrc	r18, 6
    4fca:	ee c2       	rjmp	.+1500   	; 0x55a8 <vfprintf+0x6c4>
    4fcc:	20 64       	ori	r18, 0x40	; 64
    4fce:	06 c0       	rjmp	.+12     	; 0x4fdc <vfprintf+0xf8>
    4fd0:	8c 36       	cpi	r24, 0x6C	; 108
    4fd2:	11 f4       	brne	.+4      	; 0x4fd8 <vfprintf+0xf4>
    4fd4:	20 68       	ori	r18, 0x80	; 128
    4fd6:	02 c0       	rjmp	.+4      	; 0x4fdc <vfprintf+0xf8>
    4fd8:	88 36       	cpi	r24, 0x68	; 104
    4fda:	41 f4       	brne	.+16     	; 0x4fec <vfprintf+0x108>
    4fdc:	f4 01       	movw	r30, r8
    4fde:	93 fd       	sbrc	r25, 3
    4fe0:	85 91       	lpm	r24, Z+
    4fe2:	93 ff       	sbrs	r25, 3
    4fe4:	81 91       	ld	r24, Z+
    4fe6:	4f 01       	movw	r8, r30
    4fe8:	81 11       	cpse	r24, r1
    4fea:	c1 cf       	rjmp	.-126    	; 0x4f6e <vfprintf+0x8a>
    4fec:	9b eb       	ldi	r25, 0xBB	; 187
    4fee:	98 0f       	add	r25, r24
    4ff0:	93 30       	cpi	r25, 0x03	; 3
    4ff2:	18 f4       	brcc	.+6      	; 0x4ffa <vfprintf+0x116>
    4ff4:	20 61       	ori	r18, 0x10	; 16
    4ff6:	80 5e       	subi	r24, 0xE0	; 224
    4ff8:	06 c0       	rjmp	.+12     	; 0x5006 <vfprintf+0x122>
    4ffa:	9b e9       	ldi	r25, 0x9B	; 155
    4ffc:	98 0f       	add	r25, r24
    4ffe:	93 30       	cpi	r25, 0x03	; 3
    5000:	08 f0       	brcs	.+2      	; 0x5004 <vfprintf+0x120>
    5002:	71 c1       	rjmp	.+738    	; 0x52e6 <vfprintf+0x402>
    5004:	2f 7e       	andi	r18, 0xEF	; 239
    5006:	26 ff       	sbrs	r18, 6
    5008:	16 e0       	ldi	r17, 0x06	; 6
    500a:	2f 73       	andi	r18, 0x3F	; 63
    500c:	32 2e       	mov	r3, r18
    500e:	85 36       	cpi	r24, 0x65	; 101
    5010:	19 f4       	brne	.+6      	; 0x5018 <vfprintf+0x134>
    5012:	20 64       	ori	r18, 0x40	; 64
    5014:	32 2e       	mov	r3, r18
    5016:	08 c0       	rjmp	.+16     	; 0x5028 <vfprintf+0x144>
    5018:	86 36       	cpi	r24, 0x66	; 102
    501a:	21 f4       	brne	.+8      	; 0x5024 <vfprintf+0x140>
    501c:	f2 2f       	mov	r31, r18
    501e:	f0 68       	ori	r31, 0x80	; 128
    5020:	3f 2e       	mov	r3, r31
    5022:	02 c0       	rjmp	.+4      	; 0x5028 <vfprintf+0x144>
    5024:	11 11       	cpse	r17, r1
    5026:	11 50       	subi	r17, 0x01	; 1
    5028:	37 fe       	sbrs	r3, 7
    502a:	07 c0       	rjmp	.+14     	; 0x503a <vfprintf+0x156>
    502c:	1c 33       	cpi	r17, 0x3C	; 60
    502e:	50 f4       	brcc	.+20     	; 0x5044 <vfprintf+0x160>
    5030:	ee 24       	eor	r14, r14
    5032:	e3 94       	inc	r14
    5034:	e1 0e       	add	r14, r17
    5036:	27 e0       	ldi	r18, 0x07	; 7
    5038:	0b c0       	rjmp	.+22     	; 0x5050 <vfprintf+0x16c>
    503a:	18 30       	cpi	r17, 0x08	; 8
    503c:	38 f0       	brcs	.+14     	; 0x504c <vfprintf+0x168>
    503e:	27 e0       	ldi	r18, 0x07	; 7
    5040:	17 e0       	ldi	r17, 0x07	; 7
    5042:	05 c0       	rjmp	.+10     	; 0x504e <vfprintf+0x16a>
    5044:	27 e0       	ldi	r18, 0x07	; 7
    5046:	4c e3       	ldi	r20, 0x3C	; 60
    5048:	e4 2e       	mov	r14, r20
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <vfprintf+0x16c>
    504c:	21 2f       	mov	r18, r17
    504e:	e1 2c       	mov	r14, r1
    5050:	52 01       	movw	r10, r4
    5052:	44 e0       	ldi	r20, 0x04	; 4
    5054:	a4 0e       	add	r10, r20
    5056:	b1 1c       	adc	r11, r1
    5058:	f2 01       	movw	r30, r4
    505a:	60 81       	ld	r22, Z
    505c:	71 81       	ldd	r23, Z+1	; 0x01
    505e:	82 81       	ldd	r24, Z+2	; 0x02
    5060:	93 81       	ldd	r25, Z+3	; 0x03
    5062:	0e 2d       	mov	r16, r14
    5064:	a3 01       	movw	r20, r6
    5066:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__ftoa_engine>
    506a:	2c 01       	movw	r4, r24
    506c:	09 81       	ldd	r16, Y+1	; 0x01
    506e:	00 ff       	sbrs	r16, 0
    5070:	02 c0       	rjmp	.+4      	; 0x5076 <vfprintf+0x192>
    5072:	03 ff       	sbrs	r16, 3
    5074:	07 c0       	rjmp	.+14     	; 0x5084 <vfprintf+0x1a0>
    5076:	31 fc       	sbrc	r3, 1
    5078:	08 c0       	rjmp	.+16     	; 0x508a <vfprintf+0x1a6>
    507a:	32 fe       	sbrs	r3, 2
    507c:	09 c0       	rjmp	.+18     	; 0x5090 <vfprintf+0x1ac>
    507e:	30 e2       	ldi	r19, 0x20	; 32
    5080:	23 2e       	mov	r2, r19
    5082:	07 c0       	rjmp	.+14     	; 0x5092 <vfprintf+0x1ae>
    5084:	2d e2       	ldi	r18, 0x2D	; 45
    5086:	22 2e       	mov	r2, r18
    5088:	04 c0       	rjmp	.+8      	; 0x5092 <vfprintf+0x1ae>
    508a:	9b e2       	ldi	r25, 0x2B	; 43
    508c:	29 2e       	mov	r2, r25
    508e:	01 c0       	rjmp	.+2      	; 0x5092 <vfprintf+0x1ae>
    5090:	21 2c       	mov	r2, r1
    5092:	80 2f       	mov	r24, r16
    5094:	8c 70       	andi	r24, 0x0C	; 12
    5096:	19 f0       	breq	.+6      	; 0x509e <vfprintf+0x1ba>
    5098:	21 10       	cpse	r2, r1
    509a:	68 c2       	rjmp	.+1232   	; 0x556c <vfprintf+0x688>
    509c:	a8 c2       	rjmp	.+1360   	; 0x55ee <vfprintf+0x70a>
    509e:	37 fe       	sbrs	r3, 7
    50a0:	0f c0       	rjmp	.+30     	; 0x50c0 <vfprintf+0x1dc>
    50a2:	e4 0c       	add	r14, r4
    50a4:	04 ff       	sbrs	r16, 4
    50a6:	04 c0       	rjmp	.+8      	; 0x50b0 <vfprintf+0x1cc>
    50a8:	8a 81       	ldd	r24, Y+2	; 0x02
    50aa:	81 33       	cpi	r24, 0x31	; 49
    50ac:	09 f4       	brne	.+2      	; 0x50b0 <vfprintf+0x1cc>
    50ae:	ea 94       	dec	r14
    50b0:	1e 14       	cp	r1, r14
    50b2:	74 f5       	brge	.+92     	; 0x5110 <vfprintf+0x22c>
    50b4:	f8 e0       	ldi	r31, 0x08	; 8
    50b6:	fe 15       	cp	r31, r14
    50b8:	78 f5       	brcc	.+94     	; 0x5118 <vfprintf+0x234>
    50ba:	88 e0       	ldi	r24, 0x08	; 8
    50bc:	e8 2e       	mov	r14, r24
    50be:	2c c0       	rjmp	.+88     	; 0x5118 <vfprintf+0x234>
    50c0:	36 fc       	sbrc	r3, 6
    50c2:	2a c0       	rjmp	.+84     	; 0x5118 <vfprintf+0x234>
    50c4:	81 2f       	mov	r24, r17
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	84 15       	cp	r24, r4
    50ca:	95 05       	cpc	r25, r5
    50cc:	9c f0       	brlt	.+38     	; 0x50f4 <vfprintf+0x210>
    50ce:	2c ef       	ldi	r18, 0xFC	; 252
    50d0:	42 16       	cp	r4, r18
    50d2:	2f ef       	ldi	r18, 0xFF	; 255
    50d4:	52 06       	cpc	r5, r18
    50d6:	74 f0       	brlt	.+28     	; 0x50f4 <vfprintf+0x210>
    50d8:	43 2d       	mov	r20, r3
    50da:	40 68       	ori	r20, 0x80	; 128
    50dc:	34 2e       	mov	r3, r20
    50de:	0a c0       	rjmp	.+20     	; 0x50f4 <vfprintf+0x210>
    50e0:	e2 e0       	ldi	r30, 0x02	; 2
    50e2:	f0 e0       	ldi	r31, 0x00	; 0
    50e4:	ec 0f       	add	r30, r28
    50e6:	fd 1f       	adc	r31, r29
    50e8:	e1 0f       	add	r30, r17
    50ea:	f1 1d       	adc	r31, r1
    50ec:	80 81       	ld	r24, Z
    50ee:	80 33       	cpi	r24, 0x30	; 48
    50f0:	19 f4       	brne	.+6      	; 0x50f8 <vfprintf+0x214>
    50f2:	11 50       	subi	r17, 0x01	; 1
    50f4:	11 11       	cpse	r17, r1
    50f6:	f4 cf       	rjmp	.-24     	; 0x50e0 <vfprintf+0x1fc>
    50f8:	37 fe       	sbrs	r3, 7
    50fa:	0e c0       	rjmp	.+28     	; 0x5118 <vfprintf+0x234>
    50fc:	ee 24       	eor	r14, r14
    50fe:	e3 94       	inc	r14
    5100:	e1 0e       	add	r14, r17
    5102:	81 2f       	mov	r24, r17
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	48 16       	cp	r4, r24
    5108:	59 06       	cpc	r5, r25
    510a:	2c f4       	brge	.+10     	; 0x5116 <vfprintf+0x232>
    510c:	14 19       	sub	r17, r4
    510e:	04 c0       	rjmp	.+8      	; 0x5118 <vfprintf+0x234>
    5110:	ee 24       	eor	r14, r14
    5112:	e3 94       	inc	r14
    5114:	01 c0       	rjmp	.+2      	; 0x5118 <vfprintf+0x234>
    5116:	10 e0       	ldi	r17, 0x00	; 0
    5118:	37 fe       	sbrs	r3, 7
    511a:	06 c0       	rjmp	.+12     	; 0x5128 <vfprintf+0x244>
    511c:	14 14       	cp	r1, r4
    511e:	15 04       	cpc	r1, r5
    5120:	34 f4       	brge	.+12     	; 0x512e <vfprintf+0x24a>
    5122:	c2 01       	movw	r24, r4
    5124:	01 96       	adiw	r24, 0x01	; 1
    5126:	05 c0       	rjmp	.+10     	; 0x5132 <vfprintf+0x24e>
    5128:	85 e0       	ldi	r24, 0x05	; 5
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	02 c0       	rjmp	.+4      	; 0x5132 <vfprintf+0x24e>
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	21 10       	cpse	r2, r1
    5134:	01 96       	adiw	r24, 0x01	; 1
    5136:	11 23       	and	r17, r17
    5138:	31 f0       	breq	.+12     	; 0x5146 <vfprintf+0x262>
    513a:	21 2f       	mov	r18, r17
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	2f 5f       	subi	r18, 0xFF	; 255
    5140:	3f 4f       	sbci	r19, 0xFF	; 255
    5142:	82 0f       	add	r24, r18
    5144:	93 1f       	adc	r25, r19
    5146:	2f 2d       	mov	r18, r15
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	82 17       	cp	r24, r18
    514c:	93 07       	cpc	r25, r19
    514e:	14 f4       	brge	.+4      	; 0x5154 <vfprintf+0x270>
    5150:	f8 1a       	sub	r15, r24
    5152:	01 c0       	rjmp	.+2      	; 0x5156 <vfprintf+0x272>
    5154:	f1 2c       	mov	r15, r1
    5156:	83 2d       	mov	r24, r3
    5158:	89 70       	andi	r24, 0x09	; 9
    515a:	49 f4       	brne	.+18     	; 0x516e <vfprintf+0x28a>
    515c:	ff 20       	and	r15, r15
    515e:	39 f0       	breq	.+14     	; 0x516e <vfprintf+0x28a>
    5160:	b6 01       	movw	r22, r12
    5162:	80 e2       	ldi	r24, 0x20	; 32
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    516a:	fa 94       	dec	r15
    516c:	f7 cf       	rjmp	.-18     	; 0x515c <vfprintf+0x278>
    516e:	22 20       	and	r2, r2
    5170:	29 f0       	breq	.+10     	; 0x517c <vfprintf+0x298>
    5172:	b6 01       	movw	r22, r12
    5174:	82 2d       	mov	r24, r2
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    517c:	33 fc       	sbrc	r3, 3
    517e:	09 c0       	rjmp	.+18     	; 0x5192 <vfprintf+0x2ae>
    5180:	ff 20       	and	r15, r15
    5182:	39 f0       	breq	.+14     	; 0x5192 <vfprintf+0x2ae>
    5184:	b6 01       	movw	r22, r12
    5186:	80 e3       	ldi	r24, 0x30	; 48
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    518e:	fa 94       	dec	r15
    5190:	f7 cf       	rjmp	.-18     	; 0x5180 <vfprintf+0x29c>
    5192:	37 fe       	sbrs	r3, 7
    5194:	5a c0       	rjmp	.+180    	; 0x524a <vfprintf+0x366>
    5196:	94 2d       	mov	r25, r4
    5198:	85 2d       	mov	r24, r5
    519a:	57 fe       	sbrs	r5, 7
    519c:	02 c0       	rjmp	.+4      	; 0x51a2 <vfprintf+0x2be>
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	29 2e       	mov	r2, r25
    51a4:	38 2e       	mov	r3, r24
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	a2 01       	movw	r20, r4
    51ac:	4e 19       	sub	r20, r14
    51ae:	51 09       	sbc	r21, r1
    51b0:	5d 87       	std	Y+13, r21	; 0x0d
    51b2:	4c 87       	std	Y+12, r20	; 0x0c
    51b4:	a2 01       	movw	r20, r4
    51b6:	42 19       	sub	r20, r2
    51b8:	53 09       	sbc	r21, r3
    51ba:	5f 87       	std	Y+15, r21	; 0x0f
    51bc:	4e 87       	std	Y+14, r20	; 0x0e
    51be:	61 2f       	mov	r22, r17
    51c0:	70 e0       	ldi	r23, 0x00	; 0
    51c2:	44 27       	eor	r20, r20
    51c4:	55 27       	eor	r21, r21
    51c6:	46 1b       	sub	r20, r22
    51c8:	57 0b       	sbc	r21, r23
    51ca:	59 8b       	std	Y+17, r21	; 0x11
    51cc:	48 8b       	std	Y+16, r20	; 0x10
    51ce:	5f ef       	ldi	r21, 0xFF	; 255
    51d0:	25 16       	cp	r2, r21
    51d2:	35 06       	cpc	r3, r21
    51d4:	49 f4       	brne	.+18     	; 0x51e8 <vfprintf+0x304>
    51d6:	b6 01       	movw	r22, r12
    51d8:	8e e2       	ldi	r24, 0x2E	; 46
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	2a 8b       	std	Y+18, r18	; 0x12
    51de:	3b 8b       	std	Y+19, r19	; 0x13
    51e0:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    51e4:	3b 89       	ldd	r19, Y+19	; 0x13
    51e6:	2a 89       	ldd	r18, Y+18	; 0x12
    51e8:	42 14       	cp	r4, r2
    51ea:	53 04       	cpc	r5, r3
    51ec:	6c f0       	brlt	.+26     	; 0x5208 <vfprintf+0x324>
    51ee:	4c 85       	ldd	r20, Y+12	; 0x0c
    51f0:	5d 85       	ldd	r21, Y+13	; 0x0d
    51f2:	42 15       	cp	r20, r2
    51f4:	53 05       	cpc	r21, r3
    51f6:	44 f4       	brge	.+16     	; 0x5208 <vfprintf+0x324>
    51f8:	ee 85       	ldd	r30, Y+14	; 0x0e
    51fa:	ff 85       	ldd	r31, Y+15	; 0x0f
    51fc:	e2 0f       	add	r30, r18
    51fe:	f3 1f       	adc	r31, r19
    5200:	e6 0d       	add	r30, r6
    5202:	f7 1d       	adc	r31, r7
    5204:	81 81       	ldd	r24, Z+1	; 0x01
    5206:	01 c0       	rjmp	.+2      	; 0x520a <vfprintf+0x326>
    5208:	80 e3       	ldi	r24, 0x30	; 48
    520a:	51 e0       	ldi	r21, 0x01	; 1
    520c:	25 1a       	sub	r2, r21
    520e:	31 08       	sbc	r3, r1
    5210:	2f 5f       	subi	r18, 0xFF	; 255
    5212:	3f 4f       	sbci	r19, 0xFF	; 255
    5214:	48 89       	ldd	r20, Y+16	; 0x10
    5216:	59 89       	ldd	r21, Y+17	; 0x11
    5218:	24 16       	cp	r2, r20
    521a:	35 06       	cpc	r3, r21
    521c:	4c f0       	brlt	.+18     	; 0x5230 <vfprintf+0x34c>
    521e:	b6 01       	movw	r22, r12
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	2a 8b       	std	Y+18, r18	; 0x12
    5224:	3b 8b       	std	Y+19, r19	; 0x13
    5226:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    522a:	2a 89       	ldd	r18, Y+18	; 0x12
    522c:	3b 89       	ldd	r19, Y+19	; 0x13
    522e:	cf cf       	rjmp	.-98     	; 0x51ce <vfprintf+0x2ea>
    5230:	24 14       	cp	r2, r4
    5232:	35 04       	cpc	r3, r5
    5234:	39 f4       	brne	.+14     	; 0x5244 <vfprintf+0x360>
    5236:	9a 81       	ldd	r25, Y+2	; 0x02
    5238:	96 33       	cpi	r25, 0x36	; 54
    523a:	18 f4       	brcc	.+6      	; 0x5242 <vfprintf+0x35e>
    523c:	95 33       	cpi	r25, 0x35	; 53
    523e:	11 f4       	brne	.+4      	; 0x5244 <vfprintf+0x360>
    5240:	04 ff       	sbrs	r16, 4
    5242:	81 e3       	ldi	r24, 0x31	; 49
    5244:	b6 01       	movw	r22, r12
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	4b c0       	rjmp	.+150    	; 0x52e0 <vfprintf+0x3fc>
    524a:	8a 81       	ldd	r24, Y+2	; 0x02
    524c:	81 33       	cpi	r24, 0x31	; 49
    524e:	09 f0       	breq	.+2      	; 0x5252 <vfprintf+0x36e>
    5250:	0f 7e       	andi	r16, 0xEF	; 239
    5252:	b6 01       	movw	r22, r12
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    525a:	11 11       	cpse	r17, r1
    525c:	05 c0       	rjmp	.+10     	; 0x5268 <vfprintf+0x384>
    525e:	34 fc       	sbrc	r3, 4
    5260:	18 c0       	rjmp	.+48     	; 0x5292 <vfprintf+0x3ae>
    5262:	85 e6       	ldi	r24, 0x65	; 101
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	17 c0       	rjmp	.+46     	; 0x5296 <vfprintf+0x3b2>
    5268:	b6 01       	movw	r22, r12
    526a:	8e e2       	ldi	r24, 0x2E	; 46
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    5272:	82 e0       	ldi	r24, 0x02	; 2
    5274:	ee 24       	eor	r14, r14
    5276:	e3 94       	inc	r14
    5278:	e8 0e       	add	r14, r24
    527a:	f3 01       	movw	r30, r6
    527c:	e8 0f       	add	r30, r24
    527e:	f1 1d       	adc	r31, r1
    5280:	80 81       	ld	r24, Z
    5282:	b6 01       	movw	r22, r12
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    528a:	11 50       	subi	r17, 0x01	; 1
    528c:	8e 2d       	mov	r24, r14
    528e:	91 f7       	brne	.-28     	; 0x5274 <vfprintf+0x390>
    5290:	e6 cf       	rjmp	.-52     	; 0x525e <vfprintf+0x37a>
    5292:	85 e4       	ldi	r24, 0x45	; 69
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	b6 01       	movw	r22, r12
    5298:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    529c:	57 fc       	sbrc	r5, 7
    529e:	05 c0       	rjmp	.+10     	; 0x52aa <vfprintf+0x3c6>
    52a0:	41 14       	cp	r4, r1
    52a2:	51 04       	cpc	r5, r1
    52a4:	39 f4       	brne	.+14     	; 0x52b4 <vfprintf+0x3d0>
    52a6:	04 ff       	sbrs	r16, 4
    52a8:	05 c0       	rjmp	.+10     	; 0x52b4 <vfprintf+0x3d0>
    52aa:	51 94       	neg	r5
    52ac:	41 94       	neg	r4
    52ae:	51 08       	sbc	r5, r1
    52b0:	8d e2       	ldi	r24, 0x2D	; 45
    52b2:	01 c0       	rjmp	.+2      	; 0x52b6 <vfprintf+0x3d2>
    52b4:	8b e2       	ldi	r24, 0x2B	; 43
    52b6:	b6 01       	movw	r22, r12
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    52be:	80 e3       	ldi	r24, 0x30	; 48
    52c0:	9a e0       	ldi	r25, 0x0A	; 10
    52c2:	49 16       	cp	r4, r25
    52c4:	51 04       	cpc	r5, r1
    52c6:	2c f0       	brlt	.+10     	; 0x52d2 <vfprintf+0x3ee>
    52c8:	8f 5f       	subi	r24, 0xFF	; 255
    52ca:	5a e0       	ldi	r21, 0x0A	; 10
    52cc:	45 1a       	sub	r4, r21
    52ce:	51 08       	sbc	r5, r1
    52d0:	f7 cf       	rjmp	.-18     	; 0x52c0 <vfprintf+0x3dc>
    52d2:	b6 01       	movw	r22, r12
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    52da:	b6 01       	movw	r22, r12
    52dc:	c2 01       	movw	r24, r4
    52de:	c0 96       	adiw	r24, 0x30	; 48
    52e0:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    52e4:	57 c1       	rjmp	.+686    	; 0x5594 <vfprintf+0x6b0>
    52e6:	83 36       	cpi	r24, 0x63	; 99
    52e8:	31 f0       	breq	.+12     	; 0x52f6 <vfprintf+0x412>
    52ea:	83 37       	cpi	r24, 0x73	; 115
    52ec:	79 f0       	breq	.+30     	; 0x530c <vfprintf+0x428>
    52ee:	83 35       	cpi	r24, 0x53	; 83
    52f0:	09 f0       	breq	.+2      	; 0x52f4 <vfprintf+0x410>
    52f2:	58 c0       	rjmp	.+176    	; 0x53a4 <vfprintf+0x4c0>
    52f4:	21 c0       	rjmp	.+66     	; 0x5338 <vfprintf+0x454>
    52f6:	52 01       	movw	r10, r4
    52f8:	e2 e0       	ldi	r30, 0x02	; 2
    52fa:	ae 0e       	add	r10, r30
    52fc:	b1 1c       	adc	r11, r1
    52fe:	f2 01       	movw	r30, r4
    5300:	80 81       	ld	r24, Z
    5302:	89 83       	std	Y+1, r24	; 0x01
    5304:	01 e0       	ldi	r16, 0x01	; 1
    5306:	10 e0       	ldi	r17, 0x00	; 0
    5308:	23 01       	movw	r4, r6
    530a:	14 c0       	rjmp	.+40     	; 0x5334 <vfprintf+0x450>
    530c:	52 01       	movw	r10, r4
    530e:	f2 e0       	ldi	r31, 0x02	; 2
    5310:	af 0e       	add	r10, r31
    5312:	b1 1c       	adc	r11, r1
    5314:	f2 01       	movw	r30, r4
    5316:	40 80       	ld	r4, Z
    5318:	51 80       	ldd	r5, Z+1	; 0x01
    531a:	26 ff       	sbrs	r18, 6
    531c:	03 c0       	rjmp	.+6      	; 0x5324 <vfprintf+0x440>
    531e:	61 2f       	mov	r22, r17
    5320:	70 e0       	ldi	r23, 0x00	; 0
    5322:	02 c0       	rjmp	.+4      	; 0x5328 <vfprintf+0x444>
    5324:	6f ef       	ldi	r22, 0xFF	; 255
    5326:	7f ef       	ldi	r23, 0xFF	; 255
    5328:	c2 01       	movw	r24, r4
    532a:	2a 8b       	std	Y+18, r18	; 0x12
    532c:	0e 94 9e 31 	call	0x633c	; 0x633c <strnlen>
    5330:	8c 01       	movw	r16, r24
    5332:	2a 89       	ldd	r18, Y+18	; 0x12
    5334:	2f 77       	andi	r18, 0x7F	; 127
    5336:	15 c0       	rjmp	.+42     	; 0x5362 <vfprintf+0x47e>
    5338:	52 01       	movw	r10, r4
    533a:	f2 e0       	ldi	r31, 0x02	; 2
    533c:	af 0e       	add	r10, r31
    533e:	b1 1c       	adc	r11, r1
    5340:	f2 01       	movw	r30, r4
    5342:	40 80       	ld	r4, Z
    5344:	51 80       	ldd	r5, Z+1	; 0x01
    5346:	26 ff       	sbrs	r18, 6
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <vfprintf+0x46c>
    534a:	61 2f       	mov	r22, r17
    534c:	70 e0       	ldi	r23, 0x00	; 0
    534e:	02 c0       	rjmp	.+4      	; 0x5354 <vfprintf+0x470>
    5350:	6f ef       	ldi	r22, 0xFF	; 255
    5352:	7f ef       	ldi	r23, 0xFF	; 255
    5354:	c2 01       	movw	r24, r4
    5356:	2a 8b       	std	Y+18, r18	; 0x12
    5358:	0e 94 53 31 	call	0x62a6	; 0x62a6 <strnlen_P>
    535c:	8c 01       	movw	r16, r24
    535e:	2a 89       	ldd	r18, Y+18	; 0x12
    5360:	20 68       	ori	r18, 0x80	; 128
    5362:	32 2e       	mov	r3, r18
    5364:	23 fd       	sbrc	r18, 3
    5366:	1a c0       	rjmp	.+52     	; 0x539c <vfprintf+0x4b8>
    5368:	8f 2d       	mov	r24, r15
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	08 17       	cp	r16, r24
    536e:	19 07       	cpc	r17, r25
    5370:	a8 f4       	brcc	.+42     	; 0x539c <vfprintf+0x4b8>
    5372:	b6 01       	movw	r22, r12
    5374:	80 e2       	ldi	r24, 0x20	; 32
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    537c:	fa 94       	dec	r15
    537e:	f4 cf       	rjmp	.-24     	; 0x5368 <vfprintf+0x484>
    5380:	f2 01       	movw	r30, r4
    5382:	37 fc       	sbrc	r3, 7
    5384:	85 91       	lpm	r24, Z+
    5386:	37 fe       	sbrs	r3, 7
    5388:	81 91       	ld	r24, Z+
    538a:	2f 01       	movw	r4, r30
    538c:	b6 01       	movw	r22, r12
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    5394:	f1 10       	cpse	r15, r1
    5396:	fa 94       	dec	r15
    5398:	01 50       	subi	r16, 0x01	; 1
    539a:	11 09       	sbc	r17, r1
    539c:	01 15       	cp	r16, r1
    539e:	11 05       	cpc	r17, r1
    53a0:	79 f7       	brne	.-34     	; 0x5380 <vfprintf+0x49c>
    53a2:	f8 c0       	rjmp	.+496    	; 0x5594 <vfprintf+0x6b0>
    53a4:	84 36       	cpi	r24, 0x64	; 100
    53a6:	11 f0       	breq	.+4      	; 0x53ac <vfprintf+0x4c8>
    53a8:	89 36       	cpi	r24, 0x69	; 105
    53aa:	59 f5       	brne	.+86     	; 0x5402 <vfprintf+0x51e>
    53ac:	52 01       	movw	r10, r4
    53ae:	27 ff       	sbrs	r18, 7
    53b0:	09 c0       	rjmp	.+18     	; 0x53c4 <vfprintf+0x4e0>
    53b2:	f4 e0       	ldi	r31, 0x04	; 4
    53b4:	af 0e       	add	r10, r31
    53b6:	b1 1c       	adc	r11, r1
    53b8:	f2 01       	movw	r30, r4
    53ba:	60 81       	ld	r22, Z
    53bc:	71 81       	ldd	r23, Z+1	; 0x01
    53be:	82 81       	ldd	r24, Z+2	; 0x02
    53c0:	93 81       	ldd	r25, Z+3	; 0x03
    53c2:	0a c0       	rjmp	.+20     	; 0x53d8 <vfprintf+0x4f4>
    53c4:	f2 e0       	ldi	r31, 0x02	; 2
    53c6:	af 0e       	add	r10, r31
    53c8:	b1 1c       	adc	r11, r1
    53ca:	f2 01       	movw	r30, r4
    53cc:	60 81       	ld	r22, Z
    53ce:	71 81       	ldd	r23, Z+1	; 0x01
    53d0:	07 2e       	mov	r0, r23
    53d2:	00 0c       	add	r0, r0
    53d4:	88 0b       	sbc	r24, r24
    53d6:	99 0b       	sbc	r25, r25
    53d8:	2f 76       	andi	r18, 0x6F	; 111
    53da:	32 2e       	mov	r3, r18
    53dc:	97 ff       	sbrs	r25, 7
    53de:	09 c0       	rjmp	.+18     	; 0x53f2 <vfprintf+0x50e>
    53e0:	90 95       	com	r25
    53e2:	80 95       	com	r24
    53e4:	70 95       	com	r23
    53e6:	61 95       	neg	r22
    53e8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ea:	8f 4f       	sbci	r24, 0xFF	; 255
    53ec:	9f 4f       	sbci	r25, 0xFF	; 255
    53ee:	20 68       	ori	r18, 0x80	; 128
    53f0:	32 2e       	mov	r3, r18
    53f2:	2a e0       	ldi	r18, 0x0A	; 10
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	a3 01       	movw	r20, r6
    53f8:	0e 94 55 32 	call	0x64aa	; 0x64aa <__ultoa_invert>
    53fc:	e8 2e       	mov	r14, r24
    53fe:	e6 18       	sub	r14, r6
    5400:	3f c0       	rjmp	.+126    	; 0x5480 <vfprintf+0x59c>
    5402:	02 2f       	mov	r16, r18
    5404:	85 37       	cpi	r24, 0x75	; 117
    5406:	21 f4       	brne	.+8      	; 0x5410 <vfprintf+0x52c>
    5408:	0f 7e       	andi	r16, 0xEF	; 239
    540a:	2a e0       	ldi	r18, 0x0A	; 10
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	1d c0       	rjmp	.+58     	; 0x544a <vfprintf+0x566>
    5410:	09 7f       	andi	r16, 0xF9	; 249
    5412:	8f 36       	cpi	r24, 0x6F	; 111
    5414:	91 f0       	breq	.+36     	; 0x543a <vfprintf+0x556>
    5416:	18 f4       	brcc	.+6      	; 0x541e <vfprintf+0x53a>
    5418:	88 35       	cpi	r24, 0x58	; 88
    541a:	59 f0       	breq	.+22     	; 0x5432 <vfprintf+0x54e>
    541c:	c5 c0       	rjmp	.+394    	; 0x55a8 <vfprintf+0x6c4>
    541e:	80 37       	cpi	r24, 0x70	; 112
    5420:	19 f0       	breq	.+6      	; 0x5428 <vfprintf+0x544>
    5422:	88 37       	cpi	r24, 0x78	; 120
    5424:	11 f0       	breq	.+4      	; 0x542a <vfprintf+0x546>
    5426:	c0 c0       	rjmp	.+384    	; 0x55a8 <vfprintf+0x6c4>
    5428:	00 61       	ori	r16, 0x10	; 16
    542a:	04 ff       	sbrs	r16, 4
    542c:	09 c0       	rjmp	.+18     	; 0x5440 <vfprintf+0x55c>
    542e:	04 60       	ori	r16, 0x04	; 4
    5430:	07 c0       	rjmp	.+14     	; 0x5440 <vfprintf+0x55c>
    5432:	24 ff       	sbrs	r18, 4
    5434:	08 c0       	rjmp	.+16     	; 0x5446 <vfprintf+0x562>
    5436:	06 60       	ori	r16, 0x06	; 6
    5438:	06 c0       	rjmp	.+12     	; 0x5446 <vfprintf+0x562>
    543a:	28 e0       	ldi	r18, 0x08	; 8
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	05 c0       	rjmp	.+10     	; 0x544a <vfprintf+0x566>
    5440:	20 e1       	ldi	r18, 0x10	; 16
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	02 c0       	rjmp	.+4      	; 0x544a <vfprintf+0x566>
    5446:	20 e1       	ldi	r18, 0x10	; 16
    5448:	32 e0       	ldi	r19, 0x02	; 2
    544a:	52 01       	movw	r10, r4
    544c:	07 ff       	sbrs	r16, 7
    544e:	09 c0       	rjmp	.+18     	; 0x5462 <vfprintf+0x57e>
    5450:	f4 e0       	ldi	r31, 0x04	; 4
    5452:	af 0e       	add	r10, r31
    5454:	b1 1c       	adc	r11, r1
    5456:	f2 01       	movw	r30, r4
    5458:	60 81       	ld	r22, Z
    545a:	71 81       	ldd	r23, Z+1	; 0x01
    545c:	82 81       	ldd	r24, Z+2	; 0x02
    545e:	93 81       	ldd	r25, Z+3	; 0x03
    5460:	08 c0       	rjmp	.+16     	; 0x5472 <vfprintf+0x58e>
    5462:	f2 e0       	ldi	r31, 0x02	; 2
    5464:	af 0e       	add	r10, r31
    5466:	b1 1c       	adc	r11, r1
    5468:	f2 01       	movw	r30, r4
    546a:	60 81       	ld	r22, Z
    546c:	71 81       	ldd	r23, Z+1	; 0x01
    546e:	80 e0       	ldi	r24, 0x00	; 0
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	a3 01       	movw	r20, r6
    5474:	0e 94 55 32 	call	0x64aa	; 0x64aa <__ultoa_invert>
    5478:	e8 2e       	mov	r14, r24
    547a:	e6 18       	sub	r14, r6
    547c:	0f 77       	andi	r16, 0x7F	; 127
    547e:	30 2e       	mov	r3, r16
    5480:	36 fe       	sbrs	r3, 6
    5482:	0b c0       	rjmp	.+22     	; 0x549a <vfprintf+0x5b6>
    5484:	33 2d       	mov	r19, r3
    5486:	3e 7f       	andi	r19, 0xFE	; 254
    5488:	e1 16       	cp	r14, r17
    548a:	50 f4       	brcc	.+20     	; 0x54a0 <vfprintf+0x5bc>
    548c:	34 fe       	sbrs	r3, 4
    548e:	0a c0       	rjmp	.+20     	; 0x54a4 <vfprintf+0x5c0>
    5490:	32 fc       	sbrc	r3, 2
    5492:	08 c0       	rjmp	.+16     	; 0x54a4 <vfprintf+0x5c0>
    5494:	33 2d       	mov	r19, r3
    5496:	3e 7e       	andi	r19, 0xEE	; 238
    5498:	05 c0       	rjmp	.+10     	; 0x54a4 <vfprintf+0x5c0>
    549a:	0e 2d       	mov	r16, r14
    549c:	33 2d       	mov	r19, r3
    549e:	03 c0       	rjmp	.+6      	; 0x54a6 <vfprintf+0x5c2>
    54a0:	0e 2d       	mov	r16, r14
    54a2:	01 c0       	rjmp	.+2      	; 0x54a6 <vfprintf+0x5c2>
    54a4:	01 2f       	mov	r16, r17
    54a6:	34 ff       	sbrs	r19, 4
    54a8:	0c c0       	rjmp	.+24     	; 0x54c2 <vfprintf+0x5de>
    54aa:	fe 01       	movw	r30, r28
    54ac:	ee 0d       	add	r30, r14
    54ae:	f1 1d       	adc	r31, r1
    54b0:	80 81       	ld	r24, Z
    54b2:	80 33       	cpi	r24, 0x30	; 48
    54b4:	11 f4       	brne	.+4      	; 0x54ba <vfprintf+0x5d6>
    54b6:	39 7e       	andi	r19, 0xE9	; 233
    54b8:	08 c0       	rjmp	.+16     	; 0x54ca <vfprintf+0x5e6>
    54ba:	32 ff       	sbrs	r19, 2
    54bc:	05 c0       	rjmp	.+10     	; 0x54c8 <vfprintf+0x5e4>
    54be:	0e 5f       	subi	r16, 0xFE	; 254
    54c0:	04 c0       	rjmp	.+8      	; 0x54ca <vfprintf+0x5e6>
    54c2:	83 2f       	mov	r24, r19
    54c4:	86 78       	andi	r24, 0x86	; 134
    54c6:	09 f0       	breq	.+2      	; 0x54ca <vfprintf+0x5e6>
    54c8:	0f 5f       	subi	r16, 0xFF	; 255
    54ca:	33 fd       	sbrc	r19, 3
    54cc:	13 c0       	rjmp	.+38     	; 0x54f4 <vfprintf+0x610>
    54ce:	30 ff       	sbrs	r19, 0
    54d0:	06 c0       	rjmp	.+12     	; 0x54de <vfprintf+0x5fa>
    54d2:	1e 2d       	mov	r17, r14
    54d4:	0f 15       	cp	r16, r15
    54d6:	18 f4       	brcc	.+6      	; 0x54de <vfprintf+0x5fa>
    54d8:	1f 0d       	add	r17, r15
    54da:	10 1b       	sub	r17, r16
    54dc:	0f 2d       	mov	r16, r15
    54de:	0f 15       	cp	r16, r15
    54e0:	68 f4       	brcc	.+26     	; 0x54fc <vfprintf+0x618>
    54e2:	b6 01       	movw	r22, r12
    54e4:	80 e2       	ldi	r24, 0x20	; 32
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	3b 8b       	std	Y+19, r19	; 0x13
    54ea:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    54ee:	0f 5f       	subi	r16, 0xFF	; 255
    54f0:	3b 89       	ldd	r19, Y+19	; 0x13
    54f2:	f5 cf       	rjmp	.-22     	; 0x54de <vfprintf+0x5fa>
    54f4:	0f 15       	cp	r16, r15
    54f6:	10 f4       	brcc	.+4      	; 0x54fc <vfprintf+0x618>
    54f8:	f0 1a       	sub	r15, r16
    54fa:	01 c0       	rjmp	.+2      	; 0x54fe <vfprintf+0x61a>
    54fc:	f1 2c       	mov	r15, r1
    54fe:	34 ff       	sbrs	r19, 4
    5500:	12 c0       	rjmp	.+36     	; 0x5526 <vfprintf+0x642>
    5502:	b6 01       	movw	r22, r12
    5504:	80 e3       	ldi	r24, 0x30	; 48
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	3b 8b       	std	Y+19, r19	; 0x13
    550a:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    550e:	3b 89       	ldd	r19, Y+19	; 0x13
    5510:	32 ff       	sbrs	r19, 2
    5512:	17 c0       	rjmp	.+46     	; 0x5542 <vfprintf+0x65e>
    5514:	31 fd       	sbrc	r19, 1
    5516:	03 c0       	rjmp	.+6      	; 0x551e <vfprintf+0x63a>
    5518:	88 e7       	ldi	r24, 0x78	; 120
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	02 c0       	rjmp	.+4      	; 0x5522 <vfprintf+0x63e>
    551e:	88 e5       	ldi	r24, 0x58	; 88
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	b6 01       	movw	r22, r12
    5524:	0c c0       	rjmp	.+24     	; 0x553e <vfprintf+0x65a>
    5526:	83 2f       	mov	r24, r19
    5528:	86 78       	andi	r24, 0x86	; 134
    552a:	59 f0       	breq	.+22     	; 0x5542 <vfprintf+0x65e>
    552c:	31 ff       	sbrs	r19, 1
    552e:	02 c0       	rjmp	.+4      	; 0x5534 <vfprintf+0x650>
    5530:	8b e2       	ldi	r24, 0x2B	; 43
    5532:	01 c0       	rjmp	.+2      	; 0x5536 <vfprintf+0x652>
    5534:	80 e2       	ldi	r24, 0x20	; 32
    5536:	37 fd       	sbrc	r19, 7
    5538:	8d e2       	ldi	r24, 0x2D	; 45
    553a:	b6 01       	movw	r22, r12
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    5542:	e1 16       	cp	r14, r17
    5544:	38 f4       	brcc	.+14     	; 0x5554 <vfprintf+0x670>
    5546:	b6 01       	movw	r22, r12
    5548:	80 e3       	ldi	r24, 0x30	; 48
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    5550:	11 50       	subi	r17, 0x01	; 1
    5552:	f7 cf       	rjmp	.-18     	; 0x5542 <vfprintf+0x65e>
    5554:	ea 94       	dec	r14
    5556:	f3 01       	movw	r30, r6
    5558:	ee 0d       	add	r30, r14
    555a:	f1 1d       	adc	r31, r1
    555c:	80 81       	ld	r24, Z
    555e:	b6 01       	movw	r22, r12
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    5566:	e1 10       	cpse	r14, r1
    5568:	f5 cf       	rjmp	.-22     	; 0x5554 <vfprintf+0x670>
    556a:	14 c0       	rjmp	.+40     	; 0x5594 <vfprintf+0x6b0>
    556c:	f4 e0       	ldi	r31, 0x04	; 4
    556e:	ff 15       	cp	r31, r15
    5570:	58 f5       	brcc	.+86     	; 0x55c8 <vfprintf+0x6e4>
    5572:	84 e0       	ldi	r24, 0x04	; 4
    5574:	f8 1a       	sub	r15, r24
    5576:	33 fe       	sbrs	r3, 3
    5578:	1e c0       	rjmp	.+60     	; 0x55b6 <vfprintf+0x6d2>
    557a:	21 10       	cpse	r2, r1
    557c:	26 c0       	rjmp	.+76     	; 0x55ca <vfprintf+0x6e6>
    557e:	03 ff       	sbrs	r16, 3
    5580:	2a c0       	rjmp	.+84     	; 0x55d6 <vfprintf+0x6f2>
    5582:	04 e8       	ldi	r16, 0x84	; 132
    5584:	11 e0       	ldi	r17, 0x01	; 1
    5586:	f3 2d       	mov	r31, r3
    5588:	f0 71       	andi	r31, 0x10	; 16
    558a:	3f 2e       	mov	r3, r31
    558c:	f8 01       	movw	r30, r16
    558e:	84 91       	lpm	r24, Z
    5590:	81 11       	cpse	r24, r1
    5592:	24 c0       	rjmp	.+72     	; 0x55dc <vfprintf+0x6f8>
    5594:	ff 20       	and	r15, r15
    5596:	09 f4       	brne	.+2      	; 0x559a <vfprintf+0x6b6>
    5598:	e5 cc       	rjmp	.-1590   	; 0x4f64 <vfprintf+0x80>
    559a:	b6 01       	movw	r22, r12
    559c:	80 e2       	ldi	r24, 0x20	; 32
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    55a4:	fa 94       	dec	r15
    55a6:	f6 cf       	rjmp	.-20     	; 0x5594 <vfprintf+0x6b0>
    55a8:	f6 01       	movw	r30, r12
    55aa:	86 81       	ldd	r24, Z+6	; 0x06
    55ac:	97 81       	ldd	r25, Z+7	; 0x07
    55ae:	26 c0       	rjmp	.+76     	; 0x55fc <vfprintf+0x718>
    55b0:	8f ef       	ldi	r24, 0xFF	; 255
    55b2:	9f ef       	ldi	r25, 0xFF	; 255
    55b4:	23 c0       	rjmp	.+70     	; 0x55fc <vfprintf+0x718>
    55b6:	b6 01       	movw	r22, r12
    55b8:	80 e2       	ldi	r24, 0x20	; 32
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    55c0:	fa 94       	dec	r15
    55c2:	f1 10       	cpse	r15, r1
    55c4:	f8 cf       	rjmp	.-16     	; 0x55b6 <vfprintf+0x6d2>
    55c6:	d9 cf       	rjmp	.-78     	; 0x557a <vfprintf+0x696>
    55c8:	f1 2c       	mov	r15, r1
    55ca:	b6 01       	movw	r22, r12
    55cc:	82 2d       	mov	r24, r2
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    55d4:	d4 cf       	rjmp	.-88     	; 0x557e <vfprintf+0x69a>
    55d6:	08 e8       	ldi	r16, 0x88	; 136
    55d8:	11 e0       	ldi	r17, 0x01	; 1
    55da:	d5 cf       	rjmp	.-86     	; 0x5586 <vfprintf+0x6a2>
    55dc:	31 10       	cpse	r3, r1
    55de:	80 52       	subi	r24, 0x20	; 32
    55e0:	b6 01       	movw	r22, r12
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	0e 94 ed 31 	call	0x63da	; 0x63da <fputc>
    55e8:	0f 5f       	subi	r16, 0xFF	; 255
    55ea:	1f 4f       	sbci	r17, 0xFF	; 255
    55ec:	cf cf       	rjmp	.-98     	; 0x558c <vfprintf+0x6a8>
    55ee:	23 e0       	ldi	r18, 0x03	; 3
    55f0:	2f 15       	cp	r18, r15
    55f2:	10 f4       	brcc	.+4      	; 0x55f8 <vfprintf+0x714>
    55f4:	83 e0       	ldi	r24, 0x03	; 3
    55f6:	be cf       	rjmp	.-132    	; 0x5574 <vfprintf+0x690>
    55f8:	f1 2c       	mov	r15, r1
    55fa:	c1 cf       	rjmp	.-126    	; 0x557e <vfprintf+0x69a>
    55fc:	63 96       	adiw	r28, 0x13	; 19
    55fe:	0f b6       	in	r0, 0x3f	; 63
    5600:	f8 94       	cli
    5602:	de bf       	out	0x3e, r29	; 62
    5604:	0f be       	out	0x3f, r0	; 63
    5606:	cd bf       	out	0x3d, r28	; 61
    5608:	df 91       	pop	r29
    560a:	cf 91       	pop	r28
    560c:	1f 91       	pop	r17
    560e:	0f 91       	pop	r16
    5610:	ff 90       	pop	r15
    5612:	ef 90       	pop	r14
    5614:	df 90       	pop	r13
    5616:	cf 90       	pop	r12
    5618:	bf 90       	pop	r11
    561a:	af 90       	pop	r10
    561c:	9f 90       	pop	r9
    561e:	8f 90       	pop	r8
    5620:	7f 90       	pop	r7
    5622:	6f 90       	pop	r6
    5624:	5f 90       	pop	r5
    5626:	4f 90       	pop	r4
    5628:	3f 90       	pop	r3
    562a:	2f 90       	pop	r2
    562c:	08 95       	ret

0000562e <__subsf3>:
    562e:	50 58       	subi	r21, 0x80	; 128

00005630 <__addsf3>:
    5630:	bb 27       	eor	r27, r27
    5632:	aa 27       	eor	r26, r26
    5634:	0e 94 2f 2b 	call	0x565e	; 0x565e <__addsf3x>
    5638:	0c 94 79 2c 	jmp	0x58f2	; 0x58f2 <__fp_round>
    563c:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fp_pscA>
    5640:	38 f0       	brcs	.+14     	; 0x5650 <__addsf3+0x20>
    5642:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fp_pscB>
    5646:	20 f0       	brcs	.+8      	; 0x5650 <__addsf3+0x20>
    5648:	39 f4       	brne	.+14     	; 0x5658 <__addsf3+0x28>
    564a:	9f 3f       	cpi	r25, 0xFF	; 255
    564c:	19 f4       	brne	.+6      	; 0x5654 <__addsf3+0x24>
    564e:	26 f4       	brtc	.+8      	; 0x5658 <__addsf3+0x28>
    5650:	0c 94 68 2c 	jmp	0x58d0	; 0x58d0 <__fp_nan>
    5654:	0e f4       	brtc	.+2      	; 0x5658 <__addsf3+0x28>
    5656:	e0 95       	com	r30
    5658:	e7 fb       	bst	r30, 7
    565a:	0c 94 62 2c 	jmp	0x58c4	; 0x58c4 <__fp_inf>

0000565e <__addsf3x>:
    565e:	e9 2f       	mov	r30, r25
    5660:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__fp_split3>
    5664:	58 f3       	brcs	.-42     	; 0x563c <__addsf3+0xc>
    5666:	ba 17       	cp	r27, r26
    5668:	62 07       	cpc	r22, r18
    566a:	73 07       	cpc	r23, r19
    566c:	84 07       	cpc	r24, r20
    566e:	95 07       	cpc	r25, r21
    5670:	20 f0       	brcs	.+8      	; 0x567a <__addsf3x+0x1c>
    5672:	79 f4       	brne	.+30     	; 0x5692 <__addsf3x+0x34>
    5674:	a6 f5       	brtc	.+104    	; 0x56de <__addsf3x+0x80>
    5676:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <__fp_zero>
    567a:	0e f4       	brtc	.+2      	; 0x567e <__addsf3x+0x20>
    567c:	e0 95       	com	r30
    567e:	0b 2e       	mov	r0, r27
    5680:	ba 2f       	mov	r27, r26
    5682:	a0 2d       	mov	r26, r0
    5684:	0b 01       	movw	r0, r22
    5686:	b9 01       	movw	r22, r18
    5688:	90 01       	movw	r18, r0
    568a:	0c 01       	movw	r0, r24
    568c:	ca 01       	movw	r24, r20
    568e:	a0 01       	movw	r20, r0
    5690:	11 24       	eor	r1, r1
    5692:	ff 27       	eor	r31, r31
    5694:	59 1b       	sub	r21, r25
    5696:	99 f0       	breq	.+38     	; 0x56be <__addsf3x+0x60>
    5698:	59 3f       	cpi	r21, 0xF9	; 249
    569a:	50 f4       	brcc	.+20     	; 0x56b0 <__addsf3x+0x52>
    569c:	50 3e       	cpi	r21, 0xE0	; 224
    569e:	68 f1       	brcs	.+90     	; 0x56fa <__addsf3x+0x9c>
    56a0:	1a 16       	cp	r1, r26
    56a2:	f0 40       	sbci	r31, 0x00	; 0
    56a4:	a2 2f       	mov	r26, r18
    56a6:	23 2f       	mov	r18, r19
    56a8:	34 2f       	mov	r19, r20
    56aa:	44 27       	eor	r20, r20
    56ac:	58 5f       	subi	r21, 0xF8	; 248
    56ae:	f3 cf       	rjmp	.-26     	; 0x5696 <__addsf3x+0x38>
    56b0:	46 95       	lsr	r20
    56b2:	37 95       	ror	r19
    56b4:	27 95       	ror	r18
    56b6:	a7 95       	ror	r26
    56b8:	f0 40       	sbci	r31, 0x00	; 0
    56ba:	53 95       	inc	r21
    56bc:	c9 f7       	brne	.-14     	; 0x56b0 <__addsf3x+0x52>
    56be:	7e f4       	brtc	.+30     	; 0x56de <__addsf3x+0x80>
    56c0:	1f 16       	cp	r1, r31
    56c2:	ba 0b       	sbc	r27, r26
    56c4:	62 0b       	sbc	r22, r18
    56c6:	73 0b       	sbc	r23, r19
    56c8:	84 0b       	sbc	r24, r20
    56ca:	ba f0       	brmi	.+46     	; 0x56fa <__addsf3x+0x9c>
    56cc:	91 50       	subi	r25, 0x01	; 1
    56ce:	a1 f0       	breq	.+40     	; 0x56f8 <__addsf3x+0x9a>
    56d0:	ff 0f       	add	r31, r31
    56d2:	bb 1f       	adc	r27, r27
    56d4:	66 1f       	adc	r22, r22
    56d6:	77 1f       	adc	r23, r23
    56d8:	88 1f       	adc	r24, r24
    56da:	c2 f7       	brpl	.-16     	; 0x56cc <__addsf3x+0x6e>
    56dc:	0e c0       	rjmp	.+28     	; 0x56fa <__addsf3x+0x9c>
    56de:	ba 0f       	add	r27, r26
    56e0:	62 1f       	adc	r22, r18
    56e2:	73 1f       	adc	r23, r19
    56e4:	84 1f       	adc	r24, r20
    56e6:	48 f4       	brcc	.+18     	; 0x56fa <__addsf3x+0x9c>
    56e8:	87 95       	ror	r24
    56ea:	77 95       	ror	r23
    56ec:	67 95       	ror	r22
    56ee:	b7 95       	ror	r27
    56f0:	f7 95       	ror	r31
    56f2:	9e 3f       	cpi	r25, 0xFE	; 254
    56f4:	08 f0       	brcs	.+2      	; 0x56f8 <__addsf3x+0x9a>
    56f6:	b0 cf       	rjmp	.-160    	; 0x5658 <__addsf3+0x28>
    56f8:	93 95       	inc	r25
    56fa:	88 0f       	add	r24, r24
    56fc:	08 f0       	brcs	.+2      	; 0x5700 <__addsf3x+0xa2>
    56fe:	99 27       	eor	r25, r25
    5700:	ee 0f       	add	r30, r30
    5702:	97 95       	ror	r25
    5704:	87 95       	ror	r24
    5706:	08 95       	ret

00005708 <__divsf3>:
    5708:	0e 94 98 2b 	call	0x5730	; 0x5730 <__divsf3x>
    570c:	0c 94 79 2c 	jmp	0x58f2	; 0x58f2 <__fp_round>
    5710:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fp_pscB>
    5714:	58 f0       	brcs	.+22     	; 0x572c <__divsf3+0x24>
    5716:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fp_pscA>
    571a:	40 f0       	brcs	.+16     	; 0x572c <__divsf3+0x24>
    571c:	29 f4       	brne	.+10     	; 0x5728 <__divsf3+0x20>
    571e:	5f 3f       	cpi	r21, 0xFF	; 255
    5720:	29 f0       	breq	.+10     	; 0x572c <__divsf3+0x24>
    5722:	0c 94 62 2c 	jmp	0x58c4	; 0x58c4 <__fp_inf>
    5726:	51 11       	cpse	r21, r1
    5728:	0c 94 ad 2c 	jmp	0x595a	; 0x595a <__fp_szero>
    572c:	0c 94 68 2c 	jmp	0x58d0	; 0x58d0 <__fp_nan>

00005730 <__divsf3x>:
    5730:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__fp_split3>
    5734:	68 f3       	brcs	.-38     	; 0x5710 <__divsf3+0x8>

00005736 <__divsf3_pse>:
    5736:	99 23       	and	r25, r25
    5738:	b1 f3       	breq	.-20     	; 0x5726 <__divsf3+0x1e>
    573a:	55 23       	and	r21, r21
    573c:	91 f3       	breq	.-28     	; 0x5722 <__divsf3+0x1a>
    573e:	95 1b       	sub	r25, r21
    5740:	55 0b       	sbc	r21, r21
    5742:	bb 27       	eor	r27, r27
    5744:	aa 27       	eor	r26, r26
    5746:	62 17       	cp	r22, r18
    5748:	73 07       	cpc	r23, r19
    574a:	84 07       	cpc	r24, r20
    574c:	38 f0       	brcs	.+14     	; 0x575c <__divsf3_pse+0x26>
    574e:	9f 5f       	subi	r25, 0xFF	; 255
    5750:	5f 4f       	sbci	r21, 0xFF	; 255
    5752:	22 0f       	add	r18, r18
    5754:	33 1f       	adc	r19, r19
    5756:	44 1f       	adc	r20, r20
    5758:	aa 1f       	adc	r26, r26
    575a:	a9 f3       	breq	.-22     	; 0x5746 <__divsf3_pse+0x10>
    575c:	35 d0       	rcall	.+106    	; 0x57c8 <__divsf3_pse+0x92>
    575e:	0e 2e       	mov	r0, r30
    5760:	3a f0       	brmi	.+14     	; 0x5770 <__divsf3_pse+0x3a>
    5762:	e0 e8       	ldi	r30, 0x80	; 128
    5764:	32 d0       	rcall	.+100    	; 0x57ca <__divsf3_pse+0x94>
    5766:	91 50       	subi	r25, 0x01	; 1
    5768:	50 40       	sbci	r21, 0x00	; 0
    576a:	e6 95       	lsr	r30
    576c:	00 1c       	adc	r0, r0
    576e:	ca f7       	brpl	.-14     	; 0x5762 <__divsf3_pse+0x2c>
    5770:	2b d0       	rcall	.+86     	; 0x57c8 <__divsf3_pse+0x92>
    5772:	fe 2f       	mov	r31, r30
    5774:	29 d0       	rcall	.+82     	; 0x57c8 <__divsf3_pse+0x92>
    5776:	66 0f       	add	r22, r22
    5778:	77 1f       	adc	r23, r23
    577a:	88 1f       	adc	r24, r24
    577c:	bb 1f       	adc	r27, r27
    577e:	26 17       	cp	r18, r22
    5780:	37 07       	cpc	r19, r23
    5782:	48 07       	cpc	r20, r24
    5784:	ab 07       	cpc	r26, r27
    5786:	b0 e8       	ldi	r27, 0x80	; 128
    5788:	09 f0       	breq	.+2      	; 0x578c <__divsf3_pse+0x56>
    578a:	bb 0b       	sbc	r27, r27
    578c:	80 2d       	mov	r24, r0
    578e:	bf 01       	movw	r22, r30
    5790:	ff 27       	eor	r31, r31
    5792:	93 58       	subi	r25, 0x83	; 131
    5794:	5f 4f       	sbci	r21, 0xFF	; 255
    5796:	3a f0       	brmi	.+14     	; 0x57a6 <__divsf3_pse+0x70>
    5798:	9e 3f       	cpi	r25, 0xFE	; 254
    579a:	51 05       	cpc	r21, r1
    579c:	78 f0       	brcs	.+30     	; 0x57bc <__divsf3_pse+0x86>
    579e:	0c 94 62 2c 	jmp	0x58c4	; 0x58c4 <__fp_inf>
    57a2:	0c 94 ad 2c 	jmp	0x595a	; 0x595a <__fp_szero>
    57a6:	5f 3f       	cpi	r21, 0xFF	; 255
    57a8:	e4 f3       	brlt	.-8      	; 0x57a2 <__divsf3_pse+0x6c>
    57aa:	98 3e       	cpi	r25, 0xE8	; 232
    57ac:	d4 f3       	brlt	.-12     	; 0x57a2 <__divsf3_pse+0x6c>
    57ae:	86 95       	lsr	r24
    57b0:	77 95       	ror	r23
    57b2:	67 95       	ror	r22
    57b4:	b7 95       	ror	r27
    57b6:	f7 95       	ror	r31
    57b8:	9f 5f       	subi	r25, 0xFF	; 255
    57ba:	c9 f7       	brne	.-14     	; 0x57ae <__divsf3_pse+0x78>
    57bc:	88 0f       	add	r24, r24
    57be:	91 1d       	adc	r25, r1
    57c0:	96 95       	lsr	r25
    57c2:	87 95       	ror	r24
    57c4:	97 f9       	bld	r25, 7
    57c6:	08 95       	ret
    57c8:	e1 e0       	ldi	r30, 0x01	; 1
    57ca:	66 0f       	add	r22, r22
    57cc:	77 1f       	adc	r23, r23
    57ce:	88 1f       	adc	r24, r24
    57d0:	bb 1f       	adc	r27, r27
    57d2:	62 17       	cp	r22, r18
    57d4:	73 07       	cpc	r23, r19
    57d6:	84 07       	cpc	r24, r20
    57d8:	ba 07       	cpc	r27, r26
    57da:	20 f0       	brcs	.+8      	; 0x57e4 <__divsf3_pse+0xae>
    57dc:	62 1b       	sub	r22, r18
    57de:	73 0b       	sbc	r23, r19
    57e0:	84 0b       	sbc	r24, r20
    57e2:	ba 0b       	sbc	r27, r26
    57e4:	ee 1f       	adc	r30, r30
    57e6:	88 f7       	brcc	.-30     	; 0x57ca <__divsf3_pse+0x94>
    57e8:	e0 95       	com	r30
    57ea:	08 95       	ret

000057ec <__fixunssfsi>:
    57ec:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fp_splitA>
    57f0:	88 f0       	brcs	.+34     	; 0x5814 <__fixunssfsi+0x28>
    57f2:	9f 57       	subi	r25, 0x7F	; 127
    57f4:	98 f0       	brcs	.+38     	; 0x581c <__fixunssfsi+0x30>
    57f6:	b9 2f       	mov	r27, r25
    57f8:	99 27       	eor	r25, r25
    57fa:	b7 51       	subi	r27, 0x17	; 23
    57fc:	b0 f0       	brcs	.+44     	; 0x582a <__fixunssfsi+0x3e>
    57fe:	e1 f0       	breq	.+56     	; 0x5838 <__fixunssfsi+0x4c>
    5800:	66 0f       	add	r22, r22
    5802:	77 1f       	adc	r23, r23
    5804:	88 1f       	adc	r24, r24
    5806:	99 1f       	adc	r25, r25
    5808:	1a f0       	brmi	.+6      	; 0x5810 <__fixunssfsi+0x24>
    580a:	ba 95       	dec	r27
    580c:	c9 f7       	brne	.-14     	; 0x5800 <__fixunssfsi+0x14>
    580e:	14 c0       	rjmp	.+40     	; 0x5838 <__fixunssfsi+0x4c>
    5810:	b1 30       	cpi	r27, 0x01	; 1
    5812:	91 f0       	breq	.+36     	; 0x5838 <__fixunssfsi+0x4c>
    5814:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fp_zero>
    5818:	b1 e0       	ldi	r27, 0x01	; 1
    581a:	08 95       	ret
    581c:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <__fp_zero>
    5820:	67 2f       	mov	r22, r23
    5822:	78 2f       	mov	r23, r24
    5824:	88 27       	eor	r24, r24
    5826:	b8 5f       	subi	r27, 0xF8	; 248
    5828:	39 f0       	breq	.+14     	; 0x5838 <__fixunssfsi+0x4c>
    582a:	b9 3f       	cpi	r27, 0xF9	; 249
    582c:	cc f3       	brlt	.-14     	; 0x5820 <__fixunssfsi+0x34>
    582e:	86 95       	lsr	r24
    5830:	77 95       	ror	r23
    5832:	67 95       	ror	r22
    5834:	b3 95       	inc	r27
    5836:	d9 f7       	brne	.-10     	; 0x582e <__fixunssfsi+0x42>
    5838:	3e f4       	brtc	.+14     	; 0x5848 <__fixunssfsi+0x5c>
    583a:	90 95       	com	r25
    583c:	80 95       	com	r24
    583e:	70 95       	com	r23
    5840:	61 95       	neg	r22
    5842:	7f 4f       	sbci	r23, 0xFF	; 255
    5844:	8f 4f       	sbci	r24, 0xFF	; 255
    5846:	9f 4f       	sbci	r25, 0xFF	; 255
    5848:	08 95       	ret

0000584a <__floatunsisf>:
    584a:	e8 94       	clt
    584c:	09 c0       	rjmp	.+18     	; 0x5860 <__floatsisf+0x12>

0000584e <__floatsisf>:
    584e:	97 fb       	bst	r25, 7
    5850:	3e f4       	brtc	.+14     	; 0x5860 <__floatsisf+0x12>
    5852:	90 95       	com	r25
    5854:	80 95       	com	r24
    5856:	70 95       	com	r23
    5858:	61 95       	neg	r22
    585a:	7f 4f       	sbci	r23, 0xFF	; 255
    585c:	8f 4f       	sbci	r24, 0xFF	; 255
    585e:	9f 4f       	sbci	r25, 0xFF	; 255
    5860:	99 23       	and	r25, r25
    5862:	a9 f0       	breq	.+42     	; 0x588e <__floatsisf+0x40>
    5864:	f9 2f       	mov	r31, r25
    5866:	96 e9       	ldi	r25, 0x96	; 150
    5868:	bb 27       	eor	r27, r27
    586a:	93 95       	inc	r25
    586c:	f6 95       	lsr	r31
    586e:	87 95       	ror	r24
    5870:	77 95       	ror	r23
    5872:	67 95       	ror	r22
    5874:	b7 95       	ror	r27
    5876:	f1 11       	cpse	r31, r1
    5878:	f8 cf       	rjmp	.-16     	; 0x586a <__floatsisf+0x1c>
    587a:	fa f4       	brpl	.+62     	; 0x58ba <__floatsisf+0x6c>
    587c:	bb 0f       	add	r27, r27
    587e:	11 f4       	brne	.+4      	; 0x5884 <__floatsisf+0x36>
    5880:	60 ff       	sbrs	r22, 0
    5882:	1b c0       	rjmp	.+54     	; 0x58ba <__floatsisf+0x6c>
    5884:	6f 5f       	subi	r22, 0xFF	; 255
    5886:	7f 4f       	sbci	r23, 0xFF	; 255
    5888:	8f 4f       	sbci	r24, 0xFF	; 255
    588a:	9f 4f       	sbci	r25, 0xFF	; 255
    588c:	16 c0       	rjmp	.+44     	; 0x58ba <__floatsisf+0x6c>
    588e:	88 23       	and	r24, r24
    5890:	11 f0       	breq	.+4      	; 0x5896 <__floatsisf+0x48>
    5892:	96 e9       	ldi	r25, 0x96	; 150
    5894:	11 c0       	rjmp	.+34     	; 0x58b8 <__floatsisf+0x6a>
    5896:	77 23       	and	r23, r23
    5898:	21 f0       	breq	.+8      	; 0x58a2 <__floatsisf+0x54>
    589a:	9e e8       	ldi	r25, 0x8E	; 142
    589c:	87 2f       	mov	r24, r23
    589e:	76 2f       	mov	r23, r22
    58a0:	05 c0       	rjmp	.+10     	; 0x58ac <__floatsisf+0x5e>
    58a2:	66 23       	and	r22, r22
    58a4:	71 f0       	breq	.+28     	; 0x58c2 <__floatsisf+0x74>
    58a6:	96 e8       	ldi	r25, 0x86	; 134
    58a8:	86 2f       	mov	r24, r22
    58aa:	70 e0       	ldi	r23, 0x00	; 0
    58ac:	60 e0       	ldi	r22, 0x00	; 0
    58ae:	2a f0       	brmi	.+10     	; 0x58ba <__floatsisf+0x6c>
    58b0:	9a 95       	dec	r25
    58b2:	66 0f       	add	r22, r22
    58b4:	77 1f       	adc	r23, r23
    58b6:	88 1f       	adc	r24, r24
    58b8:	da f7       	brpl	.-10     	; 0x58b0 <__floatsisf+0x62>
    58ba:	88 0f       	add	r24, r24
    58bc:	96 95       	lsr	r25
    58be:	87 95       	ror	r24
    58c0:	97 f9       	bld	r25, 7
    58c2:	08 95       	ret

000058c4 <__fp_inf>:
    58c4:	97 f9       	bld	r25, 7
    58c6:	9f 67       	ori	r25, 0x7F	; 127
    58c8:	80 e8       	ldi	r24, 0x80	; 128
    58ca:	70 e0       	ldi	r23, 0x00	; 0
    58cc:	60 e0       	ldi	r22, 0x00	; 0
    58ce:	08 95       	ret

000058d0 <__fp_nan>:
    58d0:	9f ef       	ldi	r25, 0xFF	; 255
    58d2:	80 ec       	ldi	r24, 0xC0	; 192
    58d4:	08 95       	ret

000058d6 <__fp_pscA>:
    58d6:	00 24       	eor	r0, r0
    58d8:	0a 94       	dec	r0
    58da:	16 16       	cp	r1, r22
    58dc:	17 06       	cpc	r1, r23
    58de:	18 06       	cpc	r1, r24
    58e0:	09 06       	cpc	r0, r25
    58e2:	08 95       	ret

000058e4 <__fp_pscB>:
    58e4:	00 24       	eor	r0, r0
    58e6:	0a 94       	dec	r0
    58e8:	12 16       	cp	r1, r18
    58ea:	13 06       	cpc	r1, r19
    58ec:	14 06       	cpc	r1, r20
    58ee:	05 06       	cpc	r0, r21
    58f0:	08 95       	ret

000058f2 <__fp_round>:
    58f2:	09 2e       	mov	r0, r25
    58f4:	03 94       	inc	r0
    58f6:	00 0c       	add	r0, r0
    58f8:	11 f4       	brne	.+4      	; 0x58fe <__fp_round+0xc>
    58fa:	88 23       	and	r24, r24
    58fc:	52 f0       	brmi	.+20     	; 0x5912 <__fp_round+0x20>
    58fe:	bb 0f       	add	r27, r27
    5900:	40 f4       	brcc	.+16     	; 0x5912 <__fp_round+0x20>
    5902:	bf 2b       	or	r27, r31
    5904:	11 f4       	brne	.+4      	; 0x590a <__fp_round+0x18>
    5906:	60 ff       	sbrs	r22, 0
    5908:	04 c0       	rjmp	.+8      	; 0x5912 <__fp_round+0x20>
    590a:	6f 5f       	subi	r22, 0xFF	; 255
    590c:	7f 4f       	sbci	r23, 0xFF	; 255
    590e:	8f 4f       	sbci	r24, 0xFF	; 255
    5910:	9f 4f       	sbci	r25, 0xFF	; 255
    5912:	08 95       	ret

00005914 <__fp_split3>:
    5914:	57 fd       	sbrc	r21, 7
    5916:	90 58       	subi	r25, 0x80	; 128
    5918:	44 0f       	add	r20, r20
    591a:	55 1f       	adc	r21, r21
    591c:	59 f0       	breq	.+22     	; 0x5934 <__fp_splitA+0x10>
    591e:	5f 3f       	cpi	r21, 0xFF	; 255
    5920:	71 f0       	breq	.+28     	; 0x593e <__fp_splitA+0x1a>
    5922:	47 95       	ror	r20

00005924 <__fp_splitA>:
    5924:	88 0f       	add	r24, r24
    5926:	97 fb       	bst	r25, 7
    5928:	99 1f       	adc	r25, r25
    592a:	61 f0       	breq	.+24     	; 0x5944 <__fp_splitA+0x20>
    592c:	9f 3f       	cpi	r25, 0xFF	; 255
    592e:	79 f0       	breq	.+30     	; 0x594e <__fp_splitA+0x2a>
    5930:	87 95       	ror	r24
    5932:	08 95       	ret
    5934:	12 16       	cp	r1, r18
    5936:	13 06       	cpc	r1, r19
    5938:	14 06       	cpc	r1, r20
    593a:	55 1f       	adc	r21, r21
    593c:	f2 cf       	rjmp	.-28     	; 0x5922 <__fp_split3+0xe>
    593e:	46 95       	lsr	r20
    5940:	f1 df       	rcall	.-30     	; 0x5924 <__fp_splitA>
    5942:	08 c0       	rjmp	.+16     	; 0x5954 <__fp_splitA+0x30>
    5944:	16 16       	cp	r1, r22
    5946:	17 06       	cpc	r1, r23
    5948:	18 06       	cpc	r1, r24
    594a:	99 1f       	adc	r25, r25
    594c:	f1 cf       	rjmp	.-30     	; 0x5930 <__fp_splitA+0xc>
    594e:	86 95       	lsr	r24
    5950:	71 05       	cpc	r23, r1
    5952:	61 05       	cpc	r22, r1
    5954:	08 94       	sec
    5956:	08 95       	ret

00005958 <__fp_zero>:
    5958:	e8 94       	clt

0000595a <__fp_szero>:
    595a:	bb 27       	eor	r27, r27
    595c:	66 27       	eor	r22, r22
    595e:	77 27       	eor	r23, r23
    5960:	cb 01       	movw	r24, r22
    5962:	97 f9       	bld	r25, 7
    5964:	08 95       	ret

00005966 <__mulsf3>:
    5966:	0e 94 c6 2c 	call	0x598c	; 0x598c <__mulsf3x>
    596a:	0c 94 79 2c 	jmp	0x58f2	; 0x58f2 <__fp_round>
    596e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fp_pscA>
    5972:	38 f0       	brcs	.+14     	; 0x5982 <__mulsf3+0x1c>
    5974:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fp_pscB>
    5978:	20 f0       	brcs	.+8      	; 0x5982 <__mulsf3+0x1c>
    597a:	95 23       	and	r25, r21
    597c:	11 f0       	breq	.+4      	; 0x5982 <__mulsf3+0x1c>
    597e:	0c 94 62 2c 	jmp	0x58c4	; 0x58c4 <__fp_inf>
    5982:	0c 94 68 2c 	jmp	0x58d0	; 0x58d0 <__fp_nan>
    5986:	11 24       	eor	r1, r1
    5988:	0c 94 ad 2c 	jmp	0x595a	; 0x595a <__fp_szero>

0000598c <__mulsf3x>:
    598c:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__fp_split3>
    5990:	70 f3       	brcs	.-36     	; 0x596e <__mulsf3+0x8>

00005992 <__mulsf3_pse>:
    5992:	95 9f       	mul	r25, r21
    5994:	c1 f3       	breq	.-16     	; 0x5986 <__mulsf3+0x20>
    5996:	95 0f       	add	r25, r21
    5998:	50 e0       	ldi	r21, 0x00	; 0
    599a:	55 1f       	adc	r21, r21
    599c:	62 9f       	mul	r22, r18
    599e:	f0 01       	movw	r30, r0
    59a0:	72 9f       	mul	r23, r18
    59a2:	bb 27       	eor	r27, r27
    59a4:	f0 0d       	add	r31, r0
    59a6:	b1 1d       	adc	r27, r1
    59a8:	63 9f       	mul	r22, r19
    59aa:	aa 27       	eor	r26, r26
    59ac:	f0 0d       	add	r31, r0
    59ae:	b1 1d       	adc	r27, r1
    59b0:	aa 1f       	adc	r26, r26
    59b2:	64 9f       	mul	r22, r20
    59b4:	66 27       	eor	r22, r22
    59b6:	b0 0d       	add	r27, r0
    59b8:	a1 1d       	adc	r26, r1
    59ba:	66 1f       	adc	r22, r22
    59bc:	82 9f       	mul	r24, r18
    59be:	22 27       	eor	r18, r18
    59c0:	b0 0d       	add	r27, r0
    59c2:	a1 1d       	adc	r26, r1
    59c4:	62 1f       	adc	r22, r18
    59c6:	73 9f       	mul	r23, r19
    59c8:	b0 0d       	add	r27, r0
    59ca:	a1 1d       	adc	r26, r1
    59cc:	62 1f       	adc	r22, r18
    59ce:	83 9f       	mul	r24, r19
    59d0:	a0 0d       	add	r26, r0
    59d2:	61 1d       	adc	r22, r1
    59d4:	22 1f       	adc	r18, r18
    59d6:	74 9f       	mul	r23, r20
    59d8:	33 27       	eor	r19, r19
    59da:	a0 0d       	add	r26, r0
    59dc:	61 1d       	adc	r22, r1
    59de:	23 1f       	adc	r18, r19
    59e0:	84 9f       	mul	r24, r20
    59e2:	60 0d       	add	r22, r0
    59e4:	21 1d       	adc	r18, r1
    59e6:	82 2f       	mov	r24, r18
    59e8:	76 2f       	mov	r23, r22
    59ea:	6a 2f       	mov	r22, r26
    59ec:	11 24       	eor	r1, r1
    59ee:	9f 57       	subi	r25, 0x7F	; 127
    59f0:	50 40       	sbci	r21, 0x00	; 0
    59f2:	9a f0       	brmi	.+38     	; 0x5a1a <__mulsf3_pse+0x88>
    59f4:	f1 f0       	breq	.+60     	; 0x5a32 <__mulsf3_pse+0xa0>
    59f6:	88 23       	and	r24, r24
    59f8:	4a f0       	brmi	.+18     	; 0x5a0c <__mulsf3_pse+0x7a>
    59fa:	ee 0f       	add	r30, r30
    59fc:	ff 1f       	adc	r31, r31
    59fe:	bb 1f       	adc	r27, r27
    5a00:	66 1f       	adc	r22, r22
    5a02:	77 1f       	adc	r23, r23
    5a04:	88 1f       	adc	r24, r24
    5a06:	91 50       	subi	r25, 0x01	; 1
    5a08:	50 40       	sbci	r21, 0x00	; 0
    5a0a:	a9 f7       	brne	.-22     	; 0x59f6 <__mulsf3_pse+0x64>
    5a0c:	9e 3f       	cpi	r25, 0xFE	; 254
    5a0e:	51 05       	cpc	r21, r1
    5a10:	80 f0       	brcs	.+32     	; 0x5a32 <__mulsf3_pse+0xa0>
    5a12:	0c 94 62 2c 	jmp	0x58c4	; 0x58c4 <__fp_inf>
    5a16:	0c 94 ad 2c 	jmp	0x595a	; 0x595a <__fp_szero>
    5a1a:	5f 3f       	cpi	r21, 0xFF	; 255
    5a1c:	e4 f3       	brlt	.-8      	; 0x5a16 <__mulsf3_pse+0x84>
    5a1e:	98 3e       	cpi	r25, 0xE8	; 232
    5a20:	d4 f3       	brlt	.-12     	; 0x5a16 <__mulsf3_pse+0x84>
    5a22:	86 95       	lsr	r24
    5a24:	77 95       	ror	r23
    5a26:	67 95       	ror	r22
    5a28:	b7 95       	ror	r27
    5a2a:	f7 95       	ror	r31
    5a2c:	e7 95       	ror	r30
    5a2e:	9f 5f       	subi	r25, 0xFF	; 255
    5a30:	c1 f7       	brne	.-16     	; 0x5a22 <__mulsf3_pse+0x90>
    5a32:	fe 2b       	or	r31, r30
    5a34:	88 0f       	add	r24, r24
    5a36:	91 1d       	adc	r25, r1
    5a38:	96 95       	lsr	r25
    5a3a:	87 95       	ror	r24
    5a3c:	97 f9       	bld	r25, 7
    5a3e:	08 95       	ret

00005a40 <__udivmodhi4>:
    5a40:	aa 1b       	sub	r26, r26
    5a42:	bb 1b       	sub	r27, r27
    5a44:	51 e1       	ldi	r21, 0x11	; 17
    5a46:	07 c0       	rjmp	.+14     	; 0x5a56 <__udivmodhi4_ep>

00005a48 <__udivmodhi4_loop>:
    5a48:	aa 1f       	adc	r26, r26
    5a4a:	bb 1f       	adc	r27, r27
    5a4c:	a6 17       	cp	r26, r22
    5a4e:	b7 07       	cpc	r27, r23
    5a50:	10 f0       	brcs	.+4      	; 0x5a56 <__udivmodhi4_ep>
    5a52:	a6 1b       	sub	r26, r22
    5a54:	b7 0b       	sbc	r27, r23

00005a56 <__udivmodhi4_ep>:
    5a56:	88 1f       	adc	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	5a 95       	dec	r21
    5a5c:	a9 f7       	brne	.-22     	; 0x5a48 <__udivmodhi4_loop>
    5a5e:	80 95       	com	r24
    5a60:	90 95       	com	r25
    5a62:	bc 01       	movw	r22, r24
    5a64:	cd 01       	movw	r24, r26
    5a66:	08 95       	ret

00005a68 <__divmodhi4>:
    5a68:	97 fb       	bst	r25, 7
    5a6a:	07 2e       	mov	r0, r23
    5a6c:	16 f4       	brtc	.+4      	; 0x5a72 <__divmodhi4+0xa>
    5a6e:	00 94       	com	r0
    5a70:	07 d0       	rcall	.+14     	; 0x5a80 <__divmodhi4_neg1>
    5a72:	77 fd       	sbrc	r23, 7
    5a74:	09 d0       	rcall	.+18     	; 0x5a88 <__divmodhi4_neg2>
    5a76:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__udivmodhi4>
    5a7a:	07 fc       	sbrc	r0, 7
    5a7c:	05 d0       	rcall	.+10     	; 0x5a88 <__divmodhi4_neg2>
    5a7e:	3e f4       	brtc	.+14     	; 0x5a8e <__divmodhi4_exit>

00005a80 <__divmodhi4_neg1>:
    5a80:	90 95       	com	r25
    5a82:	81 95       	neg	r24
    5a84:	9f 4f       	sbci	r25, 0xFF	; 255
    5a86:	08 95       	ret

00005a88 <__divmodhi4_neg2>:
    5a88:	70 95       	com	r23
    5a8a:	61 95       	neg	r22
    5a8c:	7f 4f       	sbci	r23, 0xFF	; 255

00005a8e <__divmodhi4_exit>:
    5a8e:	08 95       	ret

00005a90 <__udivmodsi4>:
    5a90:	a1 e2       	ldi	r26, 0x21	; 33
    5a92:	1a 2e       	mov	r1, r26
    5a94:	aa 1b       	sub	r26, r26
    5a96:	bb 1b       	sub	r27, r27
    5a98:	fd 01       	movw	r30, r26
    5a9a:	0d c0       	rjmp	.+26     	; 0x5ab6 <__udivmodsi4_ep>

00005a9c <__udivmodsi4_loop>:
    5a9c:	aa 1f       	adc	r26, r26
    5a9e:	bb 1f       	adc	r27, r27
    5aa0:	ee 1f       	adc	r30, r30
    5aa2:	ff 1f       	adc	r31, r31
    5aa4:	a2 17       	cp	r26, r18
    5aa6:	b3 07       	cpc	r27, r19
    5aa8:	e4 07       	cpc	r30, r20
    5aaa:	f5 07       	cpc	r31, r21
    5aac:	20 f0       	brcs	.+8      	; 0x5ab6 <__udivmodsi4_ep>
    5aae:	a2 1b       	sub	r26, r18
    5ab0:	b3 0b       	sbc	r27, r19
    5ab2:	e4 0b       	sbc	r30, r20
    5ab4:	f5 0b       	sbc	r31, r21

00005ab6 <__udivmodsi4_ep>:
    5ab6:	66 1f       	adc	r22, r22
    5ab8:	77 1f       	adc	r23, r23
    5aba:	88 1f       	adc	r24, r24
    5abc:	99 1f       	adc	r25, r25
    5abe:	1a 94       	dec	r1
    5ac0:	69 f7       	brne	.-38     	; 0x5a9c <__udivmodsi4_loop>
    5ac2:	60 95       	com	r22
    5ac4:	70 95       	com	r23
    5ac6:	80 95       	com	r24
    5ac8:	90 95       	com	r25
    5aca:	9b 01       	movw	r18, r22
    5acc:	ac 01       	movw	r20, r24
    5ace:	bd 01       	movw	r22, r26
    5ad0:	cf 01       	movw	r24, r30
    5ad2:	08 95       	ret

00005ad4 <__tablejump2__>:
    5ad4:	ee 0f       	add	r30, r30
    5ad6:	ff 1f       	adc	r31, r31
    5ad8:	00 24       	eor	r0, r0
    5ada:	00 1c       	adc	r0, r0
    5adc:	0b be       	out	0x3b, r0	; 59
    5ade:	07 90       	elpm	r0, Z+
    5ae0:	f6 91       	elpm	r31, Z
    5ae2:	e0 2d       	mov	r30, r0
    5ae4:	09 94       	ijmp

00005ae6 <__ashrdi3>:
    5ae6:	97 fb       	bst	r25, 7
    5ae8:	10 f8       	bld	r1, 0

00005aea <__lshrdi3>:
    5aea:	16 94       	lsr	r1
    5aec:	00 08       	sbc	r0, r0
    5aee:	0f 93       	push	r16
    5af0:	08 30       	cpi	r16, 0x08	; 8
    5af2:	98 f0       	brcs	.+38     	; 0x5b1a <__lshrdi3+0x30>
    5af4:	08 50       	subi	r16, 0x08	; 8
    5af6:	23 2f       	mov	r18, r19
    5af8:	34 2f       	mov	r19, r20
    5afa:	45 2f       	mov	r20, r21
    5afc:	56 2f       	mov	r21, r22
    5afe:	67 2f       	mov	r22, r23
    5b00:	78 2f       	mov	r23, r24
    5b02:	89 2f       	mov	r24, r25
    5b04:	90 2d       	mov	r25, r0
    5b06:	f4 cf       	rjmp	.-24     	; 0x5af0 <__lshrdi3+0x6>
    5b08:	05 94       	asr	r0
    5b0a:	97 95       	ror	r25
    5b0c:	87 95       	ror	r24
    5b0e:	77 95       	ror	r23
    5b10:	67 95       	ror	r22
    5b12:	57 95       	ror	r21
    5b14:	47 95       	ror	r20
    5b16:	37 95       	ror	r19
    5b18:	27 95       	ror	r18
    5b1a:	0a 95       	dec	r16
    5b1c:	aa f7       	brpl	.-22     	; 0x5b08 <__lshrdi3+0x1e>
    5b1e:	0f 91       	pop	r16
    5b20:	08 95       	ret

00005b22 <malloc>:
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
    5b26:	82 30       	cpi	r24, 0x02	; 2
    5b28:	91 05       	cpc	r25, r1
    5b2a:	10 f4       	brcc	.+4      	; 0x5b30 <malloc+0xe>
    5b2c:	82 e0       	ldi	r24, 0x02	; 2
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <__flp>
    5b34:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <__flp+0x1>
    5b38:	20 e0       	ldi	r18, 0x00	; 0
    5b3a:	30 e0       	ldi	r19, 0x00	; 0
    5b3c:	c0 e0       	ldi	r28, 0x00	; 0
    5b3e:	d0 e0       	ldi	r29, 0x00	; 0
    5b40:	30 97       	sbiw	r30, 0x00	; 0
    5b42:	11 f1       	breq	.+68     	; 0x5b88 <malloc+0x66>
    5b44:	40 81       	ld	r20, Z
    5b46:	51 81       	ldd	r21, Z+1	; 0x01
    5b48:	48 17       	cp	r20, r24
    5b4a:	59 07       	cpc	r21, r25
    5b4c:	c0 f0       	brcs	.+48     	; 0x5b7e <malloc+0x5c>
    5b4e:	48 17       	cp	r20, r24
    5b50:	59 07       	cpc	r21, r25
    5b52:	61 f4       	brne	.+24     	; 0x5b6c <malloc+0x4a>
    5b54:	82 81       	ldd	r24, Z+2	; 0x02
    5b56:	93 81       	ldd	r25, Z+3	; 0x03
    5b58:	20 97       	sbiw	r28, 0x00	; 0
    5b5a:	19 f0       	breq	.+6      	; 0x5b62 <malloc+0x40>
    5b5c:	9b 83       	std	Y+3, r25	; 0x03
    5b5e:	8a 83       	std	Y+2, r24	; 0x02
    5b60:	2b c0       	rjmp	.+86     	; 0x5bb8 <malloc+0x96>
    5b62:	90 93 ee 0c 	sts	0x0CEE, r25	; 0x800cee <__flp+0x1>
    5b66:	80 93 ed 0c 	sts	0x0CED, r24	; 0x800ced <__flp>
    5b6a:	26 c0       	rjmp	.+76     	; 0x5bb8 <malloc+0x96>
    5b6c:	21 15       	cp	r18, r1
    5b6e:	31 05       	cpc	r19, r1
    5b70:	19 f0       	breq	.+6      	; 0x5b78 <malloc+0x56>
    5b72:	42 17       	cp	r20, r18
    5b74:	53 07       	cpc	r21, r19
    5b76:	18 f4       	brcc	.+6      	; 0x5b7e <malloc+0x5c>
    5b78:	9a 01       	movw	r18, r20
    5b7a:	be 01       	movw	r22, r28
    5b7c:	df 01       	movw	r26, r30
    5b7e:	ef 01       	movw	r28, r30
    5b80:	02 80       	ldd	r0, Z+2	; 0x02
    5b82:	f3 81       	ldd	r31, Z+3	; 0x03
    5b84:	e0 2d       	mov	r30, r0
    5b86:	dc cf       	rjmp	.-72     	; 0x5b40 <malloc+0x1e>
    5b88:	21 15       	cp	r18, r1
    5b8a:	31 05       	cpc	r19, r1
    5b8c:	09 f1       	breq	.+66     	; 0x5bd0 <malloc+0xae>
    5b8e:	28 1b       	sub	r18, r24
    5b90:	39 0b       	sbc	r19, r25
    5b92:	24 30       	cpi	r18, 0x04	; 4
    5b94:	31 05       	cpc	r19, r1
    5b96:	90 f4       	brcc	.+36     	; 0x5bbc <malloc+0x9a>
    5b98:	12 96       	adiw	r26, 0x02	; 2
    5b9a:	8d 91       	ld	r24, X+
    5b9c:	9c 91       	ld	r25, X
    5b9e:	13 97       	sbiw	r26, 0x03	; 3
    5ba0:	61 15       	cp	r22, r1
    5ba2:	71 05       	cpc	r23, r1
    5ba4:	21 f0       	breq	.+8      	; 0x5bae <malloc+0x8c>
    5ba6:	fb 01       	movw	r30, r22
    5ba8:	93 83       	std	Z+3, r25	; 0x03
    5baa:	82 83       	std	Z+2, r24	; 0x02
    5bac:	04 c0       	rjmp	.+8      	; 0x5bb6 <malloc+0x94>
    5bae:	90 93 ee 0c 	sts	0x0CEE, r25	; 0x800cee <__flp+0x1>
    5bb2:	80 93 ed 0c 	sts	0x0CED, r24	; 0x800ced <__flp>
    5bb6:	fd 01       	movw	r30, r26
    5bb8:	32 96       	adiw	r30, 0x02	; 2
    5bba:	44 c0       	rjmp	.+136    	; 0x5c44 <malloc+0x122>
    5bbc:	fd 01       	movw	r30, r26
    5bbe:	e2 0f       	add	r30, r18
    5bc0:	f3 1f       	adc	r31, r19
    5bc2:	81 93       	st	Z+, r24
    5bc4:	91 93       	st	Z+, r25
    5bc6:	22 50       	subi	r18, 0x02	; 2
    5bc8:	31 09       	sbc	r19, r1
    5bca:	2d 93       	st	X+, r18
    5bcc:	3c 93       	st	X, r19
    5bce:	3a c0       	rjmp	.+116    	; 0x5c44 <malloc+0x122>
    5bd0:	20 91 eb 0c 	lds	r18, 0x0CEB	; 0x800ceb <__brkval>
    5bd4:	30 91 ec 0c 	lds	r19, 0x0CEC	; 0x800cec <__brkval+0x1>
    5bd8:	23 2b       	or	r18, r19
    5bda:	41 f4       	brne	.+16     	; 0x5bec <malloc+0xca>
    5bdc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5be0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5be4:	30 93 ec 0c 	sts	0x0CEC, r19	; 0x800cec <__brkval+0x1>
    5be8:	20 93 eb 0c 	sts	0x0CEB, r18	; 0x800ceb <__brkval>
    5bec:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5bf0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5bf4:	21 15       	cp	r18, r1
    5bf6:	31 05       	cpc	r19, r1
    5bf8:	41 f4       	brne	.+16     	; 0x5c0a <malloc+0xe8>
    5bfa:	2d b7       	in	r18, 0x3d	; 61
    5bfc:	3e b7       	in	r19, 0x3e	; 62
    5bfe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5c02:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5c06:	24 1b       	sub	r18, r20
    5c08:	35 0b       	sbc	r19, r21
    5c0a:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <__brkval>
    5c0e:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <__brkval+0x1>
    5c12:	e2 17       	cp	r30, r18
    5c14:	f3 07       	cpc	r31, r19
    5c16:	a0 f4       	brcc	.+40     	; 0x5c40 <malloc+0x11e>
    5c18:	2e 1b       	sub	r18, r30
    5c1a:	3f 0b       	sbc	r19, r31
    5c1c:	28 17       	cp	r18, r24
    5c1e:	39 07       	cpc	r19, r25
    5c20:	78 f0       	brcs	.+30     	; 0x5c40 <malloc+0x11e>
    5c22:	ac 01       	movw	r20, r24
    5c24:	4e 5f       	subi	r20, 0xFE	; 254
    5c26:	5f 4f       	sbci	r21, 0xFF	; 255
    5c28:	24 17       	cp	r18, r20
    5c2a:	35 07       	cpc	r19, r21
    5c2c:	48 f0       	brcs	.+18     	; 0x5c40 <malloc+0x11e>
    5c2e:	4e 0f       	add	r20, r30
    5c30:	5f 1f       	adc	r21, r31
    5c32:	50 93 ec 0c 	sts	0x0CEC, r21	; 0x800cec <__brkval+0x1>
    5c36:	40 93 eb 0c 	sts	0x0CEB, r20	; 0x800ceb <__brkval>
    5c3a:	81 93       	st	Z+, r24
    5c3c:	91 93       	st	Z+, r25
    5c3e:	02 c0       	rjmp	.+4      	; 0x5c44 <malloc+0x122>
    5c40:	e0 e0       	ldi	r30, 0x00	; 0
    5c42:	f0 e0       	ldi	r31, 0x00	; 0
    5c44:	cf 01       	movw	r24, r30
    5c46:	df 91       	pop	r29
    5c48:	cf 91       	pop	r28
    5c4a:	08 95       	ret

00005c4c <free>:
    5c4c:	0f 93       	push	r16
    5c4e:	1f 93       	push	r17
    5c50:	cf 93       	push	r28
    5c52:	df 93       	push	r29
    5c54:	00 97       	sbiw	r24, 0x00	; 0
    5c56:	09 f4       	brne	.+2      	; 0x5c5a <free+0xe>
    5c58:	8c c0       	rjmp	.+280    	; 0x5d72 <free+0x126>
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	32 97       	sbiw	r30, 0x02	; 2
    5c5e:	13 82       	std	Z+3, r1	; 0x03
    5c60:	12 82       	std	Z+2, r1	; 0x02
    5c62:	00 91 ed 0c 	lds	r16, 0x0CED	; 0x800ced <__flp>
    5c66:	10 91 ee 0c 	lds	r17, 0x0CEE	; 0x800cee <__flp+0x1>
    5c6a:	01 15       	cp	r16, r1
    5c6c:	11 05       	cpc	r17, r1
    5c6e:	81 f4       	brne	.+32     	; 0x5c90 <free+0x44>
    5c70:	20 81       	ld	r18, Z
    5c72:	31 81       	ldd	r19, Z+1	; 0x01
    5c74:	82 0f       	add	r24, r18
    5c76:	93 1f       	adc	r25, r19
    5c78:	20 91 eb 0c 	lds	r18, 0x0CEB	; 0x800ceb <__brkval>
    5c7c:	30 91 ec 0c 	lds	r19, 0x0CEC	; 0x800cec <__brkval+0x1>
    5c80:	28 17       	cp	r18, r24
    5c82:	39 07       	cpc	r19, r25
    5c84:	79 f5       	brne	.+94     	; 0x5ce4 <free+0x98>
    5c86:	f0 93 ec 0c 	sts	0x0CEC, r31	; 0x800cec <__brkval+0x1>
    5c8a:	e0 93 eb 0c 	sts	0x0CEB, r30	; 0x800ceb <__brkval>
    5c8e:	71 c0       	rjmp	.+226    	; 0x5d72 <free+0x126>
    5c90:	d8 01       	movw	r26, r16
    5c92:	40 e0       	ldi	r20, 0x00	; 0
    5c94:	50 e0       	ldi	r21, 0x00	; 0
    5c96:	ae 17       	cp	r26, r30
    5c98:	bf 07       	cpc	r27, r31
    5c9a:	50 f4       	brcc	.+20     	; 0x5cb0 <free+0x64>
    5c9c:	12 96       	adiw	r26, 0x02	; 2
    5c9e:	2d 91       	ld	r18, X+
    5ca0:	3c 91       	ld	r19, X
    5ca2:	13 97       	sbiw	r26, 0x03	; 3
    5ca4:	ad 01       	movw	r20, r26
    5ca6:	21 15       	cp	r18, r1
    5ca8:	31 05       	cpc	r19, r1
    5caa:	09 f1       	breq	.+66     	; 0x5cee <free+0xa2>
    5cac:	d9 01       	movw	r26, r18
    5cae:	f3 cf       	rjmp	.-26     	; 0x5c96 <free+0x4a>
    5cb0:	9d 01       	movw	r18, r26
    5cb2:	da 01       	movw	r26, r20
    5cb4:	33 83       	std	Z+3, r19	; 0x03
    5cb6:	22 83       	std	Z+2, r18	; 0x02
    5cb8:	60 81       	ld	r22, Z
    5cba:	71 81       	ldd	r23, Z+1	; 0x01
    5cbc:	86 0f       	add	r24, r22
    5cbe:	97 1f       	adc	r25, r23
    5cc0:	82 17       	cp	r24, r18
    5cc2:	93 07       	cpc	r25, r19
    5cc4:	69 f4       	brne	.+26     	; 0x5ce0 <free+0x94>
    5cc6:	ec 01       	movw	r28, r24
    5cc8:	28 81       	ld	r18, Y
    5cca:	39 81       	ldd	r19, Y+1	; 0x01
    5ccc:	26 0f       	add	r18, r22
    5cce:	37 1f       	adc	r19, r23
    5cd0:	2e 5f       	subi	r18, 0xFE	; 254
    5cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd4:	31 83       	std	Z+1, r19	; 0x01
    5cd6:	20 83       	st	Z, r18
    5cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cda:	9b 81       	ldd	r25, Y+3	; 0x03
    5cdc:	93 83       	std	Z+3, r25	; 0x03
    5cde:	82 83       	std	Z+2, r24	; 0x02
    5ce0:	45 2b       	or	r20, r21
    5ce2:	29 f4       	brne	.+10     	; 0x5cee <free+0xa2>
    5ce4:	f0 93 ee 0c 	sts	0x0CEE, r31	; 0x800cee <__flp+0x1>
    5ce8:	e0 93 ed 0c 	sts	0x0CED, r30	; 0x800ced <__flp>
    5cec:	42 c0       	rjmp	.+132    	; 0x5d72 <free+0x126>
    5cee:	13 96       	adiw	r26, 0x03	; 3
    5cf0:	fc 93       	st	X, r31
    5cf2:	ee 93       	st	-X, r30
    5cf4:	12 97       	sbiw	r26, 0x02	; 2
    5cf6:	ed 01       	movw	r28, r26
    5cf8:	49 91       	ld	r20, Y+
    5cfa:	59 91       	ld	r21, Y+
    5cfc:	9e 01       	movw	r18, r28
    5cfe:	24 0f       	add	r18, r20
    5d00:	35 1f       	adc	r19, r21
    5d02:	e2 17       	cp	r30, r18
    5d04:	f3 07       	cpc	r31, r19
    5d06:	71 f4       	brne	.+28     	; 0x5d24 <free+0xd8>
    5d08:	80 81       	ld	r24, Z
    5d0a:	91 81       	ldd	r25, Z+1	; 0x01
    5d0c:	84 0f       	add	r24, r20
    5d0e:	95 1f       	adc	r25, r21
    5d10:	02 96       	adiw	r24, 0x02	; 2
    5d12:	11 96       	adiw	r26, 0x01	; 1
    5d14:	9c 93       	st	X, r25
    5d16:	8e 93       	st	-X, r24
    5d18:	82 81       	ldd	r24, Z+2	; 0x02
    5d1a:	93 81       	ldd	r25, Z+3	; 0x03
    5d1c:	13 96       	adiw	r26, 0x03	; 3
    5d1e:	9c 93       	st	X, r25
    5d20:	8e 93       	st	-X, r24
    5d22:	12 97       	sbiw	r26, 0x02	; 2
    5d24:	e0 e0       	ldi	r30, 0x00	; 0
    5d26:	f0 e0       	ldi	r31, 0x00	; 0
    5d28:	d8 01       	movw	r26, r16
    5d2a:	12 96       	adiw	r26, 0x02	; 2
    5d2c:	8d 91       	ld	r24, X+
    5d2e:	9c 91       	ld	r25, X
    5d30:	13 97       	sbiw	r26, 0x03	; 3
    5d32:	00 97       	sbiw	r24, 0x00	; 0
    5d34:	19 f0       	breq	.+6      	; 0x5d3c <free+0xf0>
    5d36:	f8 01       	movw	r30, r16
    5d38:	8c 01       	movw	r16, r24
    5d3a:	f6 cf       	rjmp	.-20     	; 0x5d28 <free+0xdc>
    5d3c:	8d 91       	ld	r24, X+
    5d3e:	9c 91       	ld	r25, X
    5d40:	98 01       	movw	r18, r16
    5d42:	2e 5f       	subi	r18, 0xFE	; 254
    5d44:	3f 4f       	sbci	r19, 0xFF	; 255
    5d46:	82 0f       	add	r24, r18
    5d48:	93 1f       	adc	r25, r19
    5d4a:	20 91 eb 0c 	lds	r18, 0x0CEB	; 0x800ceb <__brkval>
    5d4e:	30 91 ec 0c 	lds	r19, 0x0CEC	; 0x800cec <__brkval+0x1>
    5d52:	28 17       	cp	r18, r24
    5d54:	39 07       	cpc	r19, r25
    5d56:	69 f4       	brne	.+26     	; 0x5d72 <free+0x126>
    5d58:	30 97       	sbiw	r30, 0x00	; 0
    5d5a:	29 f4       	brne	.+10     	; 0x5d66 <free+0x11a>
    5d5c:	10 92 ee 0c 	sts	0x0CEE, r1	; 0x800cee <__flp+0x1>
    5d60:	10 92 ed 0c 	sts	0x0CED, r1	; 0x800ced <__flp>
    5d64:	02 c0       	rjmp	.+4      	; 0x5d6a <free+0x11e>
    5d66:	13 82       	std	Z+3, r1	; 0x03
    5d68:	12 82       	std	Z+2, r1	; 0x02
    5d6a:	10 93 ec 0c 	sts	0x0CEC, r17	; 0x800cec <__brkval+0x1>
    5d6e:	00 93 eb 0c 	sts	0x0CEB, r16	; 0x800ceb <__brkval>
    5d72:	df 91       	pop	r29
    5d74:	cf 91       	pop	r28
    5d76:	1f 91       	pop	r17
    5d78:	0f 91       	pop	r16
    5d7a:	08 95       	ret

00005d7c <do_rand>:
    5d7c:	8f 92       	push	r8
    5d7e:	9f 92       	push	r9
    5d80:	af 92       	push	r10
    5d82:	bf 92       	push	r11
    5d84:	cf 92       	push	r12
    5d86:	df 92       	push	r13
    5d88:	ef 92       	push	r14
    5d8a:	ff 92       	push	r15
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	ec 01       	movw	r28, r24
    5d92:	68 81       	ld	r22, Y
    5d94:	79 81       	ldd	r23, Y+1	; 0x01
    5d96:	8a 81       	ldd	r24, Y+2	; 0x02
    5d98:	9b 81       	ldd	r25, Y+3	; 0x03
    5d9a:	61 15       	cp	r22, r1
    5d9c:	71 05       	cpc	r23, r1
    5d9e:	81 05       	cpc	r24, r1
    5da0:	91 05       	cpc	r25, r1
    5da2:	21 f4       	brne	.+8      	; 0x5dac <do_rand+0x30>
    5da4:	64 e2       	ldi	r22, 0x24	; 36
    5da6:	79 ed       	ldi	r23, 0xD9	; 217
    5da8:	8b e5       	ldi	r24, 0x5B	; 91
    5daa:	97 e0       	ldi	r25, 0x07	; 7
    5dac:	2d e1       	ldi	r18, 0x1D	; 29
    5dae:	33 ef       	ldi	r19, 0xF3	; 243
    5db0:	41 e0       	ldi	r20, 0x01	; 1
    5db2:	50 e0       	ldi	r21, 0x00	; 0
    5db4:	0e 94 c0 34 	call	0x6980	; 0x6980 <__divmodsi4>
    5db8:	49 01       	movw	r8, r18
    5dba:	5a 01       	movw	r10, r20
    5dbc:	9b 01       	movw	r18, r22
    5dbe:	ac 01       	movw	r20, r24
    5dc0:	a7 ea       	ldi	r26, 0xA7	; 167
    5dc2:	b1 e4       	ldi	r27, 0x41	; 65
    5dc4:	0e 94 df 34 	call	0x69be	; 0x69be <__muluhisi3>
    5dc8:	6b 01       	movw	r12, r22
    5dca:	7c 01       	movw	r14, r24
    5dcc:	ac ee       	ldi	r26, 0xEC	; 236
    5dce:	b4 ef       	ldi	r27, 0xF4	; 244
    5dd0:	a5 01       	movw	r20, r10
    5dd2:	94 01       	movw	r18, r8
    5dd4:	0e 94 ed 34 	call	0x69da	; 0x69da <__mulohisi3>
    5dd8:	dc 01       	movw	r26, r24
    5dda:	cb 01       	movw	r24, r22
    5ddc:	8c 0d       	add	r24, r12
    5dde:	9d 1d       	adc	r25, r13
    5de0:	ae 1d       	adc	r26, r14
    5de2:	bf 1d       	adc	r27, r15
    5de4:	b7 ff       	sbrs	r27, 7
    5de6:	03 c0       	rjmp	.+6      	; 0x5dee <do_rand+0x72>
    5de8:	01 97       	sbiw	r24, 0x01	; 1
    5dea:	a1 09       	sbc	r26, r1
    5dec:	b0 48       	sbci	r27, 0x80	; 128
    5dee:	88 83       	st	Y, r24
    5df0:	99 83       	std	Y+1, r25	; 0x01
    5df2:	aa 83       	std	Y+2, r26	; 0x02
    5df4:	bb 83       	std	Y+3, r27	; 0x03
    5df6:	9f 77       	andi	r25, 0x7F	; 127
    5df8:	df 91       	pop	r29
    5dfa:	cf 91       	pop	r28
    5dfc:	ff 90       	pop	r15
    5dfe:	ef 90       	pop	r14
    5e00:	df 90       	pop	r13
    5e02:	cf 90       	pop	r12
    5e04:	bf 90       	pop	r11
    5e06:	af 90       	pop	r10
    5e08:	9f 90       	pop	r9
    5e0a:	8f 90       	pop	r8
    5e0c:	08 95       	ret

00005e0e <rand_r>:
    5e0e:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <do_rand>

00005e12 <rand>:
    5e12:	86 e0       	ldi	r24, 0x06	; 6
    5e14:	92 e0       	ldi	r25, 0x02	; 2
    5e16:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <do_rand>

00005e1a <srand>:
    5e1a:	a0 e0       	ldi	r26, 0x00	; 0
    5e1c:	b0 e0       	ldi	r27, 0x00	; 0
    5e1e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    5e22:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5e26:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5e2a:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5e2e:	08 95       	ret

00005e30 <strtoul>:
    5e30:	2f 92       	push	r2
    5e32:	3f 92       	push	r3
    5e34:	4f 92       	push	r4
    5e36:	5f 92       	push	r5
    5e38:	6f 92       	push	r6
    5e3a:	7f 92       	push	r7
    5e3c:	8f 92       	push	r8
    5e3e:	9f 92       	push	r9
    5e40:	af 92       	push	r10
    5e42:	bf 92       	push	r11
    5e44:	cf 92       	push	r12
    5e46:	df 92       	push	r13
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	cf 93       	push	r28
    5e52:	df 93       	push	r29
    5e54:	00 d0       	rcall	.+0      	; 0x5e56 <strtoul+0x26>
    5e56:	00 d0       	rcall	.+0      	; 0x5e58 <strtoul+0x28>
    5e58:	00 d0       	rcall	.+0      	; 0x5e5a <strtoul+0x2a>
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
    5e5e:	5c 01       	movw	r10, r24
    5e60:	6b 01       	movw	r12, r22
    5e62:	7a 01       	movw	r14, r20
    5e64:	61 15       	cp	r22, r1
    5e66:	71 05       	cpc	r23, r1
    5e68:	19 f0       	breq	.+6      	; 0x5e70 <strtoul+0x40>
    5e6a:	db 01       	movw	r26, r22
    5e6c:	8d 93       	st	X+, r24
    5e6e:	9c 93       	st	X, r25
    5e70:	e1 14       	cp	r14, r1
    5e72:	f1 04       	cpc	r15, r1
    5e74:	29 f0       	breq	.+10     	; 0x5e80 <strtoul+0x50>
    5e76:	c7 01       	movw	r24, r14
    5e78:	02 97       	sbiw	r24, 0x02	; 2
    5e7a:	83 97       	sbiw	r24, 0x23	; 35
    5e7c:	08 f0       	brcs	.+2      	; 0x5e80 <strtoul+0x50>
    5e7e:	dc c0       	rjmp	.+440    	; 0x6038 <strtoul+0x208>
    5e80:	35 01       	movw	r6, r10
    5e82:	bf ef       	ldi	r27, 0xFF	; 255
    5e84:	6b 1a       	sub	r6, r27
    5e86:	7b 0a       	sbc	r7, r27
    5e88:	f5 01       	movw	r30, r10
    5e8a:	10 81       	ld	r17, Z
    5e8c:	81 2f       	mov	r24, r17
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	0e 94 4a 31 	call	0x6294	; 0x6294 <isspace>
    5e94:	89 2b       	or	r24, r25
    5e96:	11 f0       	breq	.+4      	; 0x5e9c <strtoul+0x6c>
    5e98:	53 01       	movw	r10, r6
    5e9a:	f2 cf       	rjmp	.-28     	; 0x5e80 <strtoul+0x50>
    5e9c:	1d 32       	cpi	r17, 0x2D	; 45
    5e9e:	49 f4       	brne	.+18     	; 0x5eb2 <strtoul+0x82>
    5ea0:	35 01       	movw	r6, r10
    5ea2:	f2 e0       	ldi	r31, 0x02	; 2
    5ea4:	6f 0e       	add	r6, r31
    5ea6:	71 1c       	adc	r7, r1
    5ea8:	d5 01       	movw	r26, r10
    5eaa:	11 96       	adiw	r26, 0x01	; 1
    5eac:	1c 91       	ld	r17, X
    5eae:	01 e0       	ldi	r16, 0x01	; 1
    5eb0:	09 c0       	rjmp	.+18     	; 0x5ec4 <strtoul+0x94>
    5eb2:	1b 32       	cpi	r17, 0x2B	; 43
    5eb4:	31 f4       	brne	.+12     	; 0x5ec2 <strtoul+0x92>
    5eb6:	35 01       	movw	r6, r10
    5eb8:	b2 e0       	ldi	r27, 0x02	; 2
    5eba:	6b 0e       	add	r6, r27
    5ebc:	71 1c       	adc	r7, r1
    5ebe:	f5 01       	movw	r30, r10
    5ec0:	11 81       	ldd	r17, Z+1	; 0x01
    5ec2:	00 e0       	ldi	r16, 0x00	; 0
    5ec4:	e1 14       	cp	r14, r1
    5ec6:	f1 04       	cpc	r15, r1
    5ec8:	09 f4       	brne	.+2      	; 0x5ecc <strtoul+0x9c>
    5eca:	c4 c0       	rjmp	.+392    	; 0x6054 <strtoul+0x224>
    5ecc:	f0 e1       	ldi	r31, 0x10	; 16
    5ece:	ef 16       	cp	r14, r31
    5ed0:	f1 04       	cpc	r15, r1
    5ed2:	89 f4       	brne	.+34     	; 0x5ef6 <strtoul+0xc6>
    5ed4:	10 33       	cpi	r17, 0x30	; 48
    5ed6:	99 f5       	brne	.+102    	; 0x5f3e <strtoul+0x10e>
    5ed8:	d3 01       	movw	r26, r6
    5eda:	8c 91       	ld	r24, X
    5edc:	8f 7d       	andi	r24, 0xDF	; 223
    5ede:	88 35       	cpi	r24, 0x58	; 88
    5ee0:	09 f0       	breq	.+2      	; 0x5ee4 <strtoul+0xb4>
    5ee2:	b2 c0       	rjmp	.+356    	; 0x6048 <strtoul+0x218>
    5ee4:	11 96       	adiw	r26, 0x01	; 1
    5ee6:	1c 91       	ld	r17, X
    5ee8:	b2 e0       	ldi	r27, 0x02	; 2
    5eea:	6b 0e       	add	r6, r27
    5eec:	71 1c       	adc	r7, r1
    5eee:	02 60       	ori	r16, 0x02	; 2
    5ef0:	50 e1       	ldi	r21, 0x10	; 16
    5ef2:	e5 2e       	mov	r14, r21
    5ef4:	f1 2c       	mov	r15, r1
    5ef6:	ea e0       	ldi	r30, 0x0A	; 10
    5ef8:	ee 16       	cp	r14, r30
    5efa:	f1 04       	cpc	r15, r1
    5efc:	09 f4       	brne	.+2      	; 0x5f00 <strtoul+0xd0>
    5efe:	b0 c0       	rjmp	.+352    	; 0x6060 <strtoul+0x230>
    5f00:	f0 e1       	ldi	r31, 0x10	; 16
    5f02:	ef 16       	cp	r14, r31
    5f04:	f1 04       	cpc	r15, r1
    5f06:	d9 f0       	breq	.+54     	; 0x5f3e <strtoul+0x10e>
    5f08:	28 e0       	ldi	r18, 0x08	; 8
    5f0a:	e2 16       	cp	r14, r18
    5f0c:	f1 04       	cpc	r15, r1
    5f0e:	51 f4       	brne	.+20     	; 0x5f24 <strtoul+0xf4>
    5f10:	38 e0       	ldi	r19, 0x08	; 8
    5f12:	e3 2e       	mov	r14, r19
    5f14:	f1 2c       	mov	r15, r1
    5f16:	88 24       	eor	r8, r8
    5f18:	8a 94       	dec	r8
    5f1a:	98 2c       	mov	r9, r8
    5f1c:	a8 2c       	mov	r10, r8
    5f1e:	4f e1       	ldi	r20, 0x1F	; 31
    5f20:	b4 2e       	mov	r11, r20
    5f22:	13 c0       	rjmp	.+38     	; 0x5f4a <strtoul+0x11a>
    5f24:	6f ef       	ldi	r22, 0xFF	; 255
    5f26:	7f ef       	ldi	r23, 0xFF	; 255
    5f28:	cb 01       	movw	r24, r22
    5f2a:	97 01       	movw	r18, r14
    5f2c:	0f 2c       	mov	r0, r15
    5f2e:	00 0c       	add	r0, r0
    5f30:	44 0b       	sbc	r20, r20
    5f32:	55 0b       	sbc	r21, r21
    5f34:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <__udivmodsi4>
    5f38:	49 01       	movw	r8, r18
    5f3a:	5a 01       	movw	r10, r20
    5f3c:	06 c0       	rjmp	.+12     	; 0x5f4a <strtoul+0x11a>
    5f3e:	88 24       	eor	r8, r8
    5f40:	8a 94       	dec	r8
    5f42:	98 2c       	mov	r9, r8
    5f44:	a8 2c       	mov	r10, r8
    5f46:	2f e0       	ldi	r18, 0x0F	; 15
    5f48:	b2 2e       	mov	r11, r18
    5f4a:	7e 82       	std	Y+6, r7	; 0x06
    5f4c:	6d 82       	std	Y+5, r6	; 0x05
    5f4e:	60 e0       	ldi	r22, 0x00	; 0
    5f50:	20 e0       	ldi	r18, 0x00	; 0
    5f52:	30 e0       	ldi	r19, 0x00	; 0
    5f54:	a9 01       	movw	r20, r18
    5f56:	27 01       	movw	r4, r14
    5f58:	0f 2c       	mov	r0, r15
    5f5a:	00 0c       	add	r0, r0
    5f5c:	66 08       	sbc	r6, r6
    5f5e:	77 08       	sbc	r7, r7
    5f60:	2d 80       	ldd	r2, Y+5	; 0x05
    5f62:	3e 80       	ldd	r3, Y+6	; 0x06
    5f64:	e0 ed       	ldi	r30, 0xD0	; 208
    5f66:	e1 0f       	add	r30, r17
    5f68:	ea 30       	cpi	r30, 0x0A	; 10
    5f6a:	60 f0       	brcs	.+24     	; 0x5f84 <strtoul+0x154>
    5f6c:	8f eb       	ldi	r24, 0xBF	; 191
    5f6e:	81 0f       	add	r24, r17
    5f70:	8a 31       	cpi	r24, 0x1A	; 26
    5f72:	10 f4       	brcc	.+4      	; 0x5f78 <strtoul+0x148>
    5f74:	e9 ec       	ldi	r30, 0xC9	; 201
    5f76:	05 c0       	rjmp	.+10     	; 0x5f82 <strtoul+0x152>
    5f78:	8f e9       	ldi	r24, 0x9F	; 159
    5f7a:	81 0f       	add	r24, r17
    5f7c:	8a 31       	cpi	r24, 0x1A	; 26
    5f7e:	90 f5       	brcc	.+100    	; 0x5fe4 <strtoul+0x1b4>
    5f80:	e9 ea       	ldi	r30, 0xA9	; 169
    5f82:	e1 0f       	add	r30, r17
    5f84:	8e 2f       	mov	r24, r30
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	8e 15       	cp	r24, r14
    5f8a:	9f 05       	cpc	r25, r15
    5f8c:	5c f5       	brge	.+86     	; 0x5fe4 <strtoul+0x1b4>
    5f8e:	6f 3f       	cpi	r22, 0xFF	; 255
    5f90:	09 f1       	breq	.+66     	; 0x5fd4 <strtoul+0x1a4>
    5f92:	82 16       	cp	r8, r18
    5f94:	93 06       	cpc	r9, r19
    5f96:	a4 06       	cpc	r10, r20
    5f98:	b5 06       	cpc	r11, r21
    5f9a:	d8 f0       	brcs	.+54     	; 0x5fd2 <strtoul+0x1a2>
    5f9c:	c3 01       	movw	r24, r6
    5f9e:	b2 01       	movw	r22, r4
    5fa0:	0e 94 b0 34 	call	0x6960	; 0x6960 <__mulsi3>
    5fa4:	2e 2f       	mov	r18, r30
    5fa6:	30 e0       	ldi	r19, 0x00	; 0
    5fa8:	40 e0       	ldi	r20, 0x00	; 0
    5faa:	50 e0       	ldi	r21, 0x00	; 0
    5fac:	29 83       	std	Y+1, r18	; 0x01
    5fae:	3a 83       	std	Y+2, r19	; 0x02
    5fb0:	4b 83       	std	Y+3, r20	; 0x03
    5fb2:	5c 83       	std	Y+4, r21	; 0x04
    5fb4:	26 0f       	add	r18, r22
    5fb6:	37 1f       	adc	r19, r23
    5fb8:	48 1f       	adc	r20, r24
    5fba:	59 1f       	adc	r21, r25
    5fbc:	89 81       	ldd	r24, Y+1	; 0x01
    5fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc0:	ab 81       	ldd	r26, Y+3	; 0x03
    5fc2:	bc 81       	ldd	r27, Y+4	; 0x04
    5fc4:	28 17       	cp	r18, r24
    5fc6:	39 07       	cpc	r19, r25
    5fc8:	4a 07       	cpc	r20, r26
    5fca:	5b 07       	cpc	r21, r27
    5fcc:	10 f0       	brcs	.+4      	; 0x5fd2 <strtoul+0x1a2>
    5fce:	61 e0       	ldi	r22, 0x01	; 1
    5fd0:	01 c0       	rjmp	.+2      	; 0x5fd4 <strtoul+0x1a4>
    5fd2:	6f ef       	ldi	r22, 0xFF	; 255
    5fd4:	ed 81       	ldd	r30, Y+5	; 0x05
    5fd6:	fe 81       	ldd	r31, Y+6	; 0x06
    5fd8:	31 96       	adiw	r30, 0x01	; 1
    5fda:	fe 83       	std	Y+6, r31	; 0x06
    5fdc:	ed 83       	std	Y+5, r30	; 0x05
    5fde:	d1 01       	movw	r26, r2
    5fe0:	1c 91       	ld	r17, X
    5fe2:	be cf       	rjmp	.-132    	; 0x5f60 <strtoul+0x130>
    5fe4:	c1 14       	cp	r12, r1
    5fe6:	d1 04       	cpc	r13, r1
    5fe8:	89 f0       	breq	.+34     	; 0x600c <strtoul+0x1dc>
    5fea:	66 23       	and	r22, r22
    5fec:	39 f0       	breq	.+14     	; 0x5ffc <strtoul+0x1cc>
    5fee:	8d 81       	ldd	r24, Y+5	; 0x05
    5ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ff2:	01 97       	sbiw	r24, 0x01	; 1
    5ff4:	f6 01       	movw	r30, r12
    5ff6:	91 83       	std	Z+1, r25	; 0x01
    5ff8:	80 83       	st	Z, r24
    5ffa:	08 c0       	rjmp	.+16     	; 0x600c <strtoul+0x1dc>
    5ffc:	01 ff       	sbrs	r16, 1
    5ffe:	06 c0       	rjmp	.+12     	; 0x600c <strtoul+0x1dc>
    6000:	8d 81       	ldd	r24, Y+5	; 0x05
    6002:	9e 81       	ldd	r25, Y+6	; 0x06
    6004:	02 97       	sbiw	r24, 0x02	; 2
    6006:	d6 01       	movw	r26, r12
    6008:	8d 93       	st	X+, r24
    600a:	9c 93       	st	X, r25
    600c:	00 ff       	sbrs	r16, 0
    600e:	07 c0       	rjmp	.+14     	; 0x601e <strtoul+0x1ee>
    6010:	50 95       	com	r21
    6012:	40 95       	com	r20
    6014:	30 95       	com	r19
    6016:	21 95       	neg	r18
    6018:	3f 4f       	sbci	r19, 0xFF	; 255
    601a:	4f 4f       	sbci	r20, 0xFF	; 255
    601c:	5f 4f       	sbci	r21, 0xFF	; 255
    601e:	67 ff       	sbrs	r22, 7
    6020:	10 c0       	rjmp	.+32     	; 0x6042 <strtoul+0x212>
    6022:	82 e2       	ldi	r24, 0x22	; 34
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	90 93 f0 0c 	sts	0x0CF0, r25	; 0x800cf0 <errno+0x1>
    602a:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <errno>
    602e:	6f ef       	ldi	r22, 0xFF	; 255
    6030:	7f ef       	ldi	r23, 0xFF	; 255
    6032:	8f ef       	ldi	r24, 0xFF	; 255
    6034:	9f ef       	ldi	r25, 0xFF	; 255
    6036:	1b c0       	rjmp	.+54     	; 0x606e <strtoul+0x23e>
    6038:	60 e0       	ldi	r22, 0x00	; 0
    603a:	70 e0       	ldi	r23, 0x00	; 0
    603c:	80 e0       	ldi	r24, 0x00	; 0
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	16 c0       	rjmp	.+44     	; 0x606e <strtoul+0x23e>
    6042:	b9 01       	movw	r22, r18
    6044:	ca 01       	movw	r24, r20
    6046:	13 c0       	rjmp	.+38     	; 0x606e <strtoul+0x23e>
    6048:	10 e3       	ldi	r17, 0x30	; 48
    604a:	e1 14       	cp	r14, r1
    604c:	f1 04       	cpc	r15, r1
    604e:	09 f4       	brne	.+2      	; 0x6052 <strtoul+0x222>
    6050:	5f cf       	rjmp	.-322    	; 0x5f10 <strtoul+0xe0>
    6052:	51 cf       	rjmp	.-350    	; 0x5ef6 <strtoul+0xc6>
    6054:	10 33       	cpi	r17, 0x30	; 48
    6056:	09 f4       	brne	.+2      	; 0x605a <strtoul+0x22a>
    6058:	3f cf       	rjmp	.-386    	; 0x5ed8 <strtoul+0xa8>
    605a:	9a e0       	ldi	r25, 0x0A	; 10
    605c:	e9 2e       	mov	r14, r25
    605e:	f1 2c       	mov	r15, r1
    6060:	89 e9       	ldi	r24, 0x99	; 153
    6062:	88 2e       	mov	r8, r24
    6064:	98 2c       	mov	r9, r8
    6066:	a8 2c       	mov	r10, r8
    6068:	89 e1       	ldi	r24, 0x19	; 25
    606a:	b8 2e       	mov	r11, r24
    606c:	6e cf       	rjmp	.-292    	; 0x5f4a <strtoul+0x11a>
    606e:	26 96       	adiw	r28, 0x06	; 6
    6070:	0f b6       	in	r0, 0x3f	; 63
    6072:	f8 94       	cli
    6074:	de bf       	out	0x3e, r29	; 62
    6076:	0f be       	out	0x3f, r0	; 63
    6078:	cd bf       	out	0x3d, r28	; 61
    607a:	df 91       	pop	r29
    607c:	cf 91       	pop	r28
    607e:	1f 91       	pop	r17
    6080:	0f 91       	pop	r16
    6082:	ff 90       	pop	r15
    6084:	ef 90       	pop	r14
    6086:	df 90       	pop	r13
    6088:	cf 90       	pop	r12
    608a:	bf 90       	pop	r11
    608c:	af 90       	pop	r10
    608e:	9f 90       	pop	r9
    6090:	8f 90       	pop	r8
    6092:	7f 90       	pop	r7
    6094:	6f 90       	pop	r6
    6096:	5f 90       	pop	r5
    6098:	4f 90       	pop	r4
    609a:	3f 90       	pop	r3
    609c:	2f 90       	pop	r2
    609e:	08 95       	ret

000060a0 <atof>:
    60a0:	66 27       	eor	r22, r22
    60a2:	77 27       	eor	r23, r23
    60a4:	0c 94 b3 32 	jmp	0x6566	; 0x6566 <strtod>

000060a8 <atoi>:
    60a8:	fc 01       	movw	r30, r24
    60aa:	88 27       	eor	r24, r24
    60ac:	99 27       	eor	r25, r25
    60ae:	e8 94       	clt
    60b0:	21 91       	ld	r18, Z+
    60b2:	20 32       	cpi	r18, 0x20	; 32
    60b4:	e9 f3       	breq	.-6      	; 0x60b0 <atoi+0x8>
    60b6:	29 30       	cpi	r18, 0x09	; 9
    60b8:	10 f0       	brcs	.+4      	; 0x60be <atoi+0x16>
    60ba:	2e 30       	cpi	r18, 0x0E	; 14
    60bc:	c8 f3       	brcs	.-14     	; 0x60b0 <atoi+0x8>
    60be:	2b 32       	cpi	r18, 0x2B	; 43
    60c0:	41 f0       	breq	.+16     	; 0x60d2 <atoi+0x2a>
    60c2:	2d 32       	cpi	r18, 0x2D	; 45
    60c4:	39 f4       	brne	.+14     	; 0x60d4 <atoi+0x2c>
    60c6:	68 94       	set
    60c8:	04 c0       	rjmp	.+8      	; 0x60d2 <atoi+0x2a>
    60ca:	0e 94 c3 31 	call	0x6386	; 0x6386 <__mulhi_const_10>
    60ce:	82 0f       	add	r24, r18
    60d0:	91 1d       	adc	r25, r1
    60d2:	21 91       	ld	r18, Z+
    60d4:	20 53       	subi	r18, 0x30	; 48
    60d6:	2a 30       	cpi	r18, 0x0A	; 10
    60d8:	c0 f3       	brcs	.-16     	; 0x60ca <atoi+0x22>
    60da:	1e f4       	brtc	.+6      	; 0x60e2 <atoi+0x3a>
    60dc:	90 95       	com	r25
    60de:	81 95       	neg	r24
    60e0:	9f 4f       	sbci	r25, 0xFF	; 255
    60e2:	08 95       	ret

000060e4 <__ftoa_engine>:
    60e4:	28 30       	cpi	r18, 0x08	; 8
    60e6:	08 f0       	brcs	.+2      	; 0x60ea <__ftoa_engine+0x6>
    60e8:	27 e0       	ldi	r18, 0x07	; 7
    60ea:	33 27       	eor	r19, r19
    60ec:	da 01       	movw	r26, r20
    60ee:	99 0f       	add	r25, r25
    60f0:	31 1d       	adc	r19, r1
    60f2:	87 fd       	sbrc	r24, 7
    60f4:	91 60       	ori	r25, 0x01	; 1
    60f6:	00 96       	adiw	r24, 0x00	; 0
    60f8:	61 05       	cpc	r22, r1
    60fa:	71 05       	cpc	r23, r1
    60fc:	39 f4       	brne	.+14     	; 0x610c <__ftoa_engine+0x28>
    60fe:	32 60       	ori	r19, 0x02	; 2
    6100:	2e 5f       	subi	r18, 0xFE	; 254
    6102:	3d 93       	st	X+, r19
    6104:	30 e3       	ldi	r19, 0x30	; 48
    6106:	2a 95       	dec	r18
    6108:	e1 f7       	brne	.-8      	; 0x6102 <__ftoa_engine+0x1e>
    610a:	08 95       	ret
    610c:	9f 3f       	cpi	r25, 0xFF	; 255
    610e:	30 f0       	brcs	.+12     	; 0x611c <__ftoa_engine+0x38>
    6110:	80 38       	cpi	r24, 0x80	; 128
    6112:	71 05       	cpc	r23, r1
    6114:	61 05       	cpc	r22, r1
    6116:	09 f0       	breq	.+2      	; 0x611a <__ftoa_engine+0x36>
    6118:	3c 5f       	subi	r19, 0xFC	; 252
    611a:	3c 5f       	subi	r19, 0xFC	; 252
    611c:	3d 93       	st	X+, r19
    611e:	91 30       	cpi	r25, 0x01	; 1
    6120:	08 f0       	brcs	.+2      	; 0x6124 <__ftoa_engine+0x40>
    6122:	80 68       	ori	r24, 0x80	; 128
    6124:	91 1d       	adc	r25, r1
    6126:	df 93       	push	r29
    6128:	cf 93       	push	r28
    612a:	1f 93       	push	r17
    612c:	0f 93       	push	r16
    612e:	ff 92       	push	r15
    6130:	ef 92       	push	r14
    6132:	19 2f       	mov	r17, r25
    6134:	98 7f       	andi	r25, 0xF8	; 248
    6136:	96 95       	lsr	r25
    6138:	e9 2f       	mov	r30, r25
    613a:	96 95       	lsr	r25
    613c:	96 95       	lsr	r25
    613e:	e9 0f       	add	r30, r25
    6140:	ff 27       	eor	r31, r31
    6142:	ea 51       	subi	r30, 0x1A	; 26
    6144:	fe 4f       	sbci	r31, 0xFE	; 254
    6146:	99 27       	eor	r25, r25
    6148:	33 27       	eor	r19, r19
    614a:	ee 24       	eor	r14, r14
    614c:	ff 24       	eor	r15, r15
    614e:	a7 01       	movw	r20, r14
    6150:	e7 01       	movw	r28, r14
    6152:	05 90       	lpm	r0, Z+
    6154:	08 94       	sec
    6156:	07 94       	ror	r0
    6158:	28 f4       	brcc	.+10     	; 0x6164 <__ftoa_engine+0x80>
    615a:	36 0f       	add	r19, r22
    615c:	e7 1e       	adc	r14, r23
    615e:	f8 1e       	adc	r15, r24
    6160:	49 1f       	adc	r20, r25
    6162:	51 1d       	adc	r21, r1
    6164:	66 0f       	add	r22, r22
    6166:	77 1f       	adc	r23, r23
    6168:	88 1f       	adc	r24, r24
    616a:	99 1f       	adc	r25, r25
    616c:	06 94       	lsr	r0
    616e:	a1 f7       	brne	.-24     	; 0x6158 <__ftoa_engine+0x74>
    6170:	05 90       	lpm	r0, Z+
    6172:	07 94       	ror	r0
    6174:	28 f4       	brcc	.+10     	; 0x6180 <__ftoa_engine+0x9c>
    6176:	e7 0e       	add	r14, r23
    6178:	f8 1e       	adc	r15, r24
    617a:	49 1f       	adc	r20, r25
    617c:	56 1f       	adc	r21, r22
    617e:	c1 1d       	adc	r28, r1
    6180:	77 0f       	add	r23, r23
    6182:	88 1f       	adc	r24, r24
    6184:	99 1f       	adc	r25, r25
    6186:	66 1f       	adc	r22, r22
    6188:	06 94       	lsr	r0
    618a:	a1 f7       	brne	.-24     	; 0x6174 <__ftoa_engine+0x90>
    618c:	05 90       	lpm	r0, Z+
    618e:	07 94       	ror	r0
    6190:	28 f4       	brcc	.+10     	; 0x619c <__ftoa_engine+0xb8>
    6192:	f8 0e       	add	r15, r24
    6194:	49 1f       	adc	r20, r25
    6196:	56 1f       	adc	r21, r22
    6198:	c7 1f       	adc	r28, r23
    619a:	d1 1d       	adc	r29, r1
    619c:	88 0f       	add	r24, r24
    619e:	99 1f       	adc	r25, r25
    61a0:	66 1f       	adc	r22, r22
    61a2:	77 1f       	adc	r23, r23
    61a4:	06 94       	lsr	r0
    61a6:	a1 f7       	brne	.-24     	; 0x6190 <__ftoa_engine+0xac>
    61a8:	05 90       	lpm	r0, Z+
    61aa:	07 94       	ror	r0
    61ac:	20 f4       	brcc	.+8      	; 0x61b6 <__ftoa_engine+0xd2>
    61ae:	49 0f       	add	r20, r25
    61b0:	56 1f       	adc	r21, r22
    61b2:	c7 1f       	adc	r28, r23
    61b4:	d8 1f       	adc	r29, r24
    61b6:	99 0f       	add	r25, r25
    61b8:	66 1f       	adc	r22, r22
    61ba:	77 1f       	adc	r23, r23
    61bc:	88 1f       	adc	r24, r24
    61be:	06 94       	lsr	r0
    61c0:	a9 f7       	brne	.-22     	; 0x61ac <__ftoa_engine+0xc8>
    61c2:	84 91       	lpm	r24, Z
    61c4:	10 95       	com	r17
    61c6:	17 70       	andi	r17, 0x07	; 7
    61c8:	41 f0       	breq	.+16     	; 0x61da <__ftoa_engine+0xf6>
    61ca:	d6 95       	lsr	r29
    61cc:	c7 95       	ror	r28
    61ce:	57 95       	ror	r21
    61d0:	47 95       	ror	r20
    61d2:	f7 94       	ror	r15
    61d4:	e7 94       	ror	r14
    61d6:	1a 95       	dec	r17
    61d8:	c1 f7       	brne	.-16     	; 0x61ca <__ftoa_engine+0xe6>
    61da:	ec e8       	ldi	r30, 0x8C	; 140
    61dc:	f1 e0       	ldi	r31, 0x01	; 1
    61de:	68 94       	set
    61e0:	15 90       	lpm	r1, Z+
    61e2:	15 91       	lpm	r17, Z+
    61e4:	35 91       	lpm	r19, Z+
    61e6:	65 91       	lpm	r22, Z+
    61e8:	95 91       	lpm	r25, Z+
    61ea:	05 90       	lpm	r0, Z+
    61ec:	7f e2       	ldi	r23, 0x2F	; 47
    61ee:	73 95       	inc	r23
    61f0:	e1 18       	sub	r14, r1
    61f2:	f1 0a       	sbc	r15, r17
    61f4:	43 0b       	sbc	r20, r19
    61f6:	56 0b       	sbc	r21, r22
    61f8:	c9 0b       	sbc	r28, r25
    61fa:	d0 09       	sbc	r29, r0
    61fc:	c0 f7       	brcc	.-16     	; 0x61ee <__ftoa_engine+0x10a>
    61fe:	e1 0c       	add	r14, r1
    6200:	f1 1e       	adc	r15, r17
    6202:	43 1f       	adc	r20, r19
    6204:	56 1f       	adc	r21, r22
    6206:	c9 1f       	adc	r28, r25
    6208:	d0 1d       	adc	r29, r0
    620a:	7e f4       	brtc	.+30     	; 0x622a <__ftoa_engine+0x146>
    620c:	70 33       	cpi	r23, 0x30	; 48
    620e:	11 f4       	brne	.+4      	; 0x6214 <__ftoa_engine+0x130>
    6210:	8a 95       	dec	r24
    6212:	e6 cf       	rjmp	.-52     	; 0x61e0 <__ftoa_engine+0xfc>
    6214:	e8 94       	clt
    6216:	01 50       	subi	r16, 0x01	; 1
    6218:	30 f0       	brcs	.+12     	; 0x6226 <__ftoa_engine+0x142>
    621a:	08 0f       	add	r16, r24
    621c:	0a f4       	brpl	.+2      	; 0x6220 <__ftoa_engine+0x13c>
    621e:	00 27       	eor	r16, r16
    6220:	02 17       	cp	r16, r18
    6222:	08 f4       	brcc	.+2      	; 0x6226 <__ftoa_engine+0x142>
    6224:	20 2f       	mov	r18, r16
    6226:	23 95       	inc	r18
    6228:	02 2f       	mov	r16, r18
    622a:	7a 33       	cpi	r23, 0x3A	; 58
    622c:	28 f0       	brcs	.+10     	; 0x6238 <__ftoa_engine+0x154>
    622e:	79 e3       	ldi	r23, 0x39	; 57
    6230:	7d 93       	st	X+, r23
    6232:	2a 95       	dec	r18
    6234:	e9 f7       	brne	.-6      	; 0x6230 <__ftoa_engine+0x14c>
    6236:	10 c0       	rjmp	.+32     	; 0x6258 <__ftoa_engine+0x174>
    6238:	7d 93       	st	X+, r23
    623a:	2a 95       	dec	r18
    623c:	89 f6       	brne	.-94     	; 0x61e0 <__ftoa_engine+0xfc>
    623e:	06 94       	lsr	r0
    6240:	97 95       	ror	r25
    6242:	67 95       	ror	r22
    6244:	37 95       	ror	r19
    6246:	17 95       	ror	r17
    6248:	17 94       	ror	r1
    624a:	e1 18       	sub	r14, r1
    624c:	f1 0a       	sbc	r15, r17
    624e:	43 0b       	sbc	r20, r19
    6250:	56 0b       	sbc	r21, r22
    6252:	c9 0b       	sbc	r28, r25
    6254:	d0 09       	sbc	r29, r0
    6256:	98 f0       	brcs	.+38     	; 0x627e <__ftoa_engine+0x19a>
    6258:	23 95       	inc	r18
    625a:	7e 91       	ld	r23, -X
    625c:	73 95       	inc	r23
    625e:	7a 33       	cpi	r23, 0x3A	; 58
    6260:	08 f0       	brcs	.+2      	; 0x6264 <__ftoa_engine+0x180>
    6262:	70 e3       	ldi	r23, 0x30	; 48
    6264:	7c 93       	st	X, r23
    6266:	20 13       	cpse	r18, r16
    6268:	b8 f7       	brcc	.-18     	; 0x6258 <__ftoa_engine+0x174>
    626a:	7e 91       	ld	r23, -X
    626c:	70 61       	ori	r23, 0x10	; 16
    626e:	7d 93       	st	X+, r23
    6270:	30 f0       	brcs	.+12     	; 0x627e <__ftoa_engine+0x19a>
    6272:	83 95       	inc	r24
    6274:	71 e3       	ldi	r23, 0x31	; 49
    6276:	7d 93       	st	X+, r23
    6278:	70 e3       	ldi	r23, 0x30	; 48
    627a:	2a 95       	dec	r18
    627c:	e1 f7       	brne	.-8      	; 0x6276 <__ftoa_engine+0x192>
    627e:	11 24       	eor	r1, r1
    6280:	ef 90       	pop	r14
    6282:	ff 90       	pop	r15
    6284:	0f 91       	pop	r16
    6286:	1f 91       	pop	r17
    6288:	cf 91       	pop	r28
    628a:	df 91       	pop	r29
    628c:	99 27       	eor	r25, r25
    628e:	87 fd       	sbrc	r24, 7
    6290:	90 95       	com	r25
    6292:	08 95       	ret

00006294 <isspace>:
    6294:	91 11       	cpse	r25, r1
    6296:	0c 94 22 34 	jmp	0x6844	; 0x6844 <__ctype_isfalse>
    629a:	80 32       	cpi	r24, 0x20	; 32
    629c:	19 f0       	breq	.+6      	; 0x62a4 <isspace+0x10>
    629e:	89 50       	subi	r24, 0x09	; 9
    62a0:	85 50       	subi	r24, 0x05	; 5
    62a2:	c8 f7       	brcc	.-14     	; 0x6296 <isspace+0x2>
    62a4:	08 95       	ret

000062a6 <strnlen_P>:
    62a6:	fc 01       	movw	r30, r24
    62a8:	05 90       	lpm	r0, Z+
    62aa:	61 50       	subi	r22, 0x01	; 1
    62ac:	70 40       	sbci	r23, 0x00	; 0
    62ae:	01 10       	cpse	r0, r1
    62b0:	d8 f7       	brcc	.-10     	; 0x62a8 <strnlen_P+0x2>
    62b2:	80 95       	com	r24
    62b4:	90 95       	com	r25
    62b6:	8e 0f       	add	r24, r30
    62b8:	9f 1f       	adc	r25, r31
    62ba:	08 95       	ret

000062bc <memcmp>:
    62bc:	fb 01       	movw	r30, r22
    62be:	dc 01       	movw	r26, r24
    62c0:	04 c0       	rjmp	.+8      	; 0x62ca <memcmp+0xe>
    62c2:	8d 91       	ld	r24, X+
    62c4:	01 90       	ld	r0, Z+
    62c6:	80 19       	sub	r24, r0
    62c8:	21 f4       	brne	.+8      	; 0x62d2 <memcmp+0x16>
    62ca:	41 50       	subi	r20, 0x01	; 1
    62cc:	50 40       	sbci	r21, 0x00	; 0
    62ce:	c8 f7       	brcc	.-14     	; 0x62c2 <memcmp+0x6>
    62d0:	88 1b       	sub	r24, r24
    62d2:	99 0b       	sbc	r25, r25
    62d4:	08 95       	ret

000062d6 <memcpy>:
    62d6:	fb 01       	movw	r30, r22
    62d8:	dc 01       	movw	r26, r24
    62da:	02 c0       	rjmp	.+4      	; 0x62e0 <memcpy+0xa>
    62dc:	01 90       	ld	r0, Z+
    62de:	0d 92       	st	X+, r0
    62e0:	41 50       	subi	r20, 0x01	; 1
    62e2:	50 40       	sbci	r21, 0x00	; 0
    62e4:	d8 f7       	brcc	.-10     	; 0x62dc <memcpy+0x6>
    62e6:	08 95       	ret

000062e8 <strchr>:
    62e8:	fc 01       	movw	r30, r24
    62ea:	81 91       	ld	r24, Z+
    62ec:	86 17       	cp	r24, r22
    62ee:	21 f0       	breq	.+8      	; 0x62f8 <strchr+0x10>
    62f0:	88 23       	and	r24, r24
    62f2:	d9 f7       	brne	.-10     	; 0x62ea <strchr+0x2>
    62f4:	99 27       	eor	r25, r25
    62f6:	08 95       	ret
    62f8:	31 97       	sbiw	r30, 0x01	; 1
    62fa:	cf 01       	movw	r24, r30
    62fc:	08 95       	ret

000062fe <strcmp>:
    62fe:	fb 01       	movw	r30, r22
    6300:	dc 01       	movw	r26, r24
    6302:	8d 91       	ld	r24, X+
    6304:	01 90       	ld	r0, Z+
    6306:	80 19       	sub	r24, r0
    6308:	01 10       	cpse	r0, r1
    630a:	d9 f3       	breq	.-10     	; 0x6302 <strcmp+0x4>
    630c:	99 0b       	sbc	r25, r25
    630e:	08 95       	ret

00006310 <strcpy>:
    6310:	fb 01       	movw	r30, r22
    6312:	dc 01       	movw	r26, r24
    6314:	01 90       	ld	r0, Z+
    6316:	0d 92       	st	X+, r0
    6318:	00 20       	and	r0, r0
    631a:	e1 f7       	brne	.-8      	; 0x6314 <strcpy+0x4>
    631c:	08 95       	ret

0000631e <strncpy>:
    631e:	fb 01       	movw	r30, r22
    6320:	dc 01       	movw	r26, r24
    6322:	41 50       	subi	r20, 0x01	; 1
    6324:	50 40       	sbci	r21, 0x00	; 0
    6326:	48 f0       	brcs	.+18     	; 0x633a <strncpy+0x1c>
    6328:	01 90       	ld	r0, Z+
    632a:	0d 92       	st	X+, r0
    632c:	00 20       	and	r0, r0
    632e:	c9 f7       	brne	.-14     	; 0x6322 <strncpy+0x4>
    6330:	01 c0       	rjmp	.+2      	; 0x6334 <strncpy+0x16>
    6332:	1d 92       	st	X+, r1
    6334:	41 50       	subi	r20, 0x01	; 1
    6336:	50 40       	sbci	r21, 0x00	; 0
    6338:	e0 f7       	brcc	.-8      	; 0x6332 <strncpy+0x14>
    633a:	08 95       	ret

0000633c <strnlen>:
    633c:	fc 01       	movw	r30, r24
    633e:	61 50       	subi	r22, 0x01	; 1
    6340:	70 40       	sbci	r23, 0x00	; 0
    6342:	01 90       	ld	r0, Z+
    6344:	01 10       	cpse	r0, r1
    6346:	d8 f7       	brcc	.-10     	; 0x633e <strnlen+0x2>
    6348:	80 95       	com	r24
    634a:	90 95       	com	r25
    634c:	8e 0f       	add	r24, r30
    634e:	9f 1f       	adc	r25, r31
    6350:	08 95       	ret

00006352 <strstr>:
    6352:	fb 01       	movw	r30, r22
    6354:	51 91       	ld	r21, Z+
    6356:	55 23       	and	r21, r21
    6358:	a9 f0       	breq	.+42     	; 0x6384 <strstr+0x32>
    635a:	bf 01       	movw	r22, r30
    635c:	dc 01       	movw	r26, r24
    635e:	4d 91       	ld	r20, X+
    6360:	45 17       	cp	r20, r21
    6362:	41 11       	cpse	r20, r1
    6364:	e1 f7       	brne	.-8      	; 0x635e <strstr+0xc>
    6366:	59 f4       	brne	.+22     	; 0x637e <strstr+0x2c>
    6368:	cd 01       	movw	r24, r26
    636a:	01 90       	ld	r0, Z+
    636c:	00 20       	and	r0, r0
    636e:	49 f0       	breq	.+18     	; 0x6382 <strstr+0x30>
    6370:	4d 91       	ld	r20, X+
    6372:	40 15       	cp	r20, r0
    6374:	41 11       	cpse	r20, r1
    6376:	c9 f3       	breq	.-14     	; 0x636a <strstr+0x18>
    6378:	fb 01       	movw	r30, r22
    637a:	41 11       	cpse	r20, r1
    637c:	ef cf       	rjmp	.-34     	; 0x635c <strstr+0xa>
    637e:	81 e0       	ldi	r24, 0x01	; 1
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	01 97       	sbiw	r24, 0x01	; 1
    6384:	08 95       	ret

00006386 <__mulhi_const_10>:
    6386:	7a e0       	ldi	r23, 0x0A	; 10
    6388:	97 9f       	mul	r25, r23
    638a:	90 2d       	mov	r25, r0
    638c:	87 9f       	mul	r24, r23
    638e:	80 2d       	mov	r24, r0
    6390:	91 0d       	add	r25, r1
    6392:	11 24       	eor	r1, r1
    6394:	08 95       	ret

00006396 <__ultoa_ncheck>:
    6396:	bb 27       	eor	r27, r27

00006398 <__ultoa_common>:
    6398:	fa 01       	movw	r30, r20
    639a:	a6 2f       	mov	r26, r22
    639c:	62 17       	cp	r22, r18
    639e:	71 05       	cpc	r23, r1
    63a0:	81 05       	cpc	r24, r1
    63a2:	91 05       	cpc	r25, r1
    63a4:	33 0b       	sbc	r19, r19
    63a6:	30 fb       	bst	r19, 0
    63a8:	66 f0       	brts	.+24     	; 0x63c2 <__ultoa_common+0x2a>
    63aa:	aa 27       	eor	r26, r26
    63ac:	66 0f       	add	r22, r22
    63ae:	77 1f       	adc	r23, r23
    63b0:	88 1f       	adc	r24, r24
    63b2:	99 1f       	adc	r25, r25
    63b4:	aa 1f       	adc	r26, r26
    63b6:	a2 17       	cp	r26, r18
    63b8:	10 f0       	brcs	.+4      	; 0x63be <__ultoa_common+0x26>
    63ba:	a2 1b       	sub	r26, r18
    63bc:	63 95       	inc	r22
    63be:	38 50       	subi	r19, 0x08	; 8
    63c0:	a9 f7       	brne	.-22     	; 0x63ac <__ultoa_common+0x14>
    63c2:	a0 5d       	subi	r26, 0xD0	; 208
    63c4:	aa 33       	cpi	r26, 0x3A	; 58
    63c6:	08 f0       	brcs	.+2      	; 0x63ca <__ultoa_common+0x32>
    63c8:	a9 5d       	subi	r26, 0xD9	; 217
    63ca:	a1 93       	st	Z+, r26
    63cc:	36 f7       	brtc	.-52     	; 0x639a <__ultoa_common+0x2>
    63ce:	b1 11       	cpse	r27, r1
    63d0:	b1 93       	st	Z+, r27
    63d2:	10 82       	st	Z, r1
    63d4:	ca 01       	movw	r24, r20
    63d6:	0c 94 3d 34 	jmp	0x687a	; 0x687a <strrev>

000063da <fputc>:
    63da:	0f 93       	push	r16
    63dc:	1f 93       	push	r17
    63de:	cf 93       	push	r28
    63e0:	df 93       	push	r29
    63e2:	fb 01       	movw	r30, r22
    63e4:	23 81       	ldd	r18, Z+3	; 0x03
    63e6:	21 fd       	sbrc	r18, 1
    63e8:	03 c0       	rjmp	.+6      	; 0x63f0 <fputc+0x16>
    63ea:	8f ef       	ldi	r24, 0xFF	; 255
    63ec:	9f ef       	ldi	r25, 0xFF	; 255
    63ee:	28 c0       	rjmp	.+80     	; 0x6440 <fputc+0x66>
    63f0:	22 ff       	sbrs	r18, 2
    63f2:	16 c0       	rjmp	.+44     	; 0x6420 <fputc+0x46>
    63f4:	46 81       	ldd	r20, Z+6	; 0x06
    63f6:	57 81       	ldd	r21, Z+7	; 0x07
    63f8:	24 81       	ldd	r18, Z+4	; 0x04
    63fa:	35 81       	ldd	r19, Z+5	; 0x05
    63fc:	42 17       	cp	r20, r18
    63fe:	53 07       	cpc	r21, r19
    6400:	44 f4       	brge	.+16     	; 0x6412 <fputc+0x38>
    6402:	a0 81       	ld	r26, Z
    6404:	b1 81       	ldd	r27, Z+1	; 0x01
    6406:	9d 01       	movw	r18, r26
    6408:	2f 5f       	subi	r18, 0xFF	; 255
    640a:	3f 4f       	sbci	r19, 0xFF	; 255
    640c:	31 83       	std	Z+1, r19	; 0x01
    640e:	20 83       	st	Z, r18
    6410:	8c 93       	st	X, r24
    6412:	26 81       	ldd	r18, Z+6	; 0x06
    6414:	37 81       	ldd	r19, Z+7	; 0x07
    6416:	2f 5f       	subi	r18, 0xFF	; 255
    6418:	3f 4f       	sbci	r19, 0xFF	; 255
    641a:	37 83       	std	Z+7, r19	; 0x07
    641c:	26 83       	std	Z+6, r18	; 0x06
    641e:	10 c0       	rjmp	.+32     	; 0x6440 <fputc+0x66>
    6420:	eb 01       	movw	r28, r22
    6422:	09 2f       	mov	r16, r25
    6424:	18 2f       	mov	r17, r24
    6426:	00 84       	ldd	r0, Z+8	; 0x08
    6428:	f1 85       	ldd	r31, Z+9	; 0x09
    642a:	e0 2d       	mov	r30, r0
    642c:	09 95       	icall
    642e:	89 2b       	or	r24, r25
    6430:	e1 f6       	brne	.-72     	; 0x63ea <fputc+0x10>
    6432:	8e 81       	ldd	r24, Y+6	; 0x06
    6434:	9f 81       	ldd	r25, Y+7	; 0x07
    6436:	01 96       	adiw	r24, 0x01	; 1
    6438:	9f 83       	std	Y+7, r25	; 0x07
    643a:	8e 83       	std	Y+6, r24	; 0x06
    643c:	81 2f       	mov	r24, r17
    643e:	90 2f       	mov	r25, r16
    6440:	df 91       	pop	r29
    6442:	cf 91       	pop	r28
    6444:	1f 91       	pop	r17
    6446:	0f 91       	pop	r16
    6448:	08 95       	ret

0000644a <sprintf>:
    644a:	0f 93       	push	r16
    644c:	1f 93       	push	r17
    644e:	cf 93       	push	r28
    6450:	df 93       	push	r29
    6452:	cd b7       	in	r28, 0x3d	; 61
    6454:	de b7       	in	r29, 0x3e	; 62
    6456:	2e 97       	sbiw	r28, 0x0e	; 14
    6458:	0f b6       	in	r0, 0x3f	; 63
    645a:	f8 94       	cli
    645c:	de bf       	out	0x3e, r29	; 62
    645e:	0f be       	out	0x3f, r0	; 63
    6460:	cd bf       	out	0x3d, r28	; 61
    6462:	0d 89       	ldd	r16, Y+21	; 0x15
    6464:	1e 89       	ldd	r17, Y+22	; 0x16
    6466:	86 e0       	ldi	r24, 0x06	; 6
    6468:	8c 83       	std	Y+4, r24	; 0x04
    646a:	1a 83       	std	Y+2, r17	; 0x02
    646c:	09 83       	std	Y+1, r16	; 0x01
    646e:	8f ef       	ldi	r24, 0xFF	; 255
    6470:	9f e7       	ldi	r25, 0x7F	; 127
    6472:	9e 83       	std	Y+6, r25	; 0x06
    6474:	8d 83       	std	Y+5, r24	; 0x05
    6476:	ae 01       	movw	r20, r28
    6478:	47 5e       	subi	r20, 0xE7	; 231
    647a:	5f 4f       	sbci	r21, 0xFF	; 255
    647c:	6f 89       	ldd	r22, Y+23	; 0x17
    647e:	78 8d       	ldd	r23, Y+24	; 0x18
    6480:	ce 01       	movw	r24, r28
    6482:	01 96       	adiw	r24, 0x01	; 1
    6484:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <vfprintf>
    6488:	2f 81       	ldd	r18, Y+7	; 0x07
    648a:	38 85       	ldd	r19, Y+8	; 0x08
    648c:	f8 01       	movw	r30, r16
    648e:	e2 0f       	add	r30, r18
    6490:	f3 1f       	adc	r31, r19
    6492:	10 82       	st	Z, r1
    6494:	2e 96       	adiw	r28, 0x0e	; 14
    6496:	0f b6       	in	r0, 0x3f	; 63
    6498:	f8 94       	cli
    649a:	de bf       	out	0x3e, r29	; 62
    649c:	0f be       	out	0x3f, r0	; 63
    649e:	cd bf       	out	0x3d, r28	; 61
    64a0:	df 91       	pop	r29
    64a2:	cf 91       	pop	r28
    64a4:	1f 91       	pop	r17
    64a6:	0f 91       	pop	r16
    64a8:	08 95       	ret

000064aa <__ultoa_invert>:
    64aa:	fa 01       	movw	r30, r20
    64ac:	aa 27       	eor	r26, r26
    64ae:	28 30       	cpi	r18, 0x08	; 8
    64b0:	51 f1       	breq	.+84     	; 0x6506 <__ultoa_invert+0x5c>
    64b2:	20 31       	cpi	r18, 0x10	; 16
    64b4:	81 f1       	breq	.+96     	; 0x6516 <__ultoa_invert+0x6c>
    64b6:	e8 94       	clt
    64b8:	6f 93       	push	r22
    64ba:	6e 7f       	andi	r22, 0xFE	; 254
    64bc:	6e 5f       	subi	r22, 0xFE	; 254
    64be:	7f 4f       	sbci	r23, 0xFF	; 255
    64c0:	8f 4f       	sbci	r24, 0xFF	; 255
    64c2:	9f 4f       	sbci	r25, 0xFF	; 255
    64c4:	af 4f       	sbci	r26, 0xFF	; 255
    64c6:	b1 e0       	ldi	r27, 0x01	; 1
    64c8:	3e d0       	rcall	.+124    	; 0x6546 <__ultoa_invert+0x9c>
    64ca:	b4 e0       	ldi	r27, 0x04	; 4
    64cc:	3c d0       	rcall	.+120    	; 0x6546 <__ultoa_invert+0x9c>
    64ce:	67 0f       	add	r22, r23
    64d0:	78 1f       	adc	r23, r24
    64d2:	89 1f       	adc	r24, r25
    64d4:	9a 1f       	adc	r25, r26
    64d6:	a1 1d       	adc	r26, r1
    64d8:	68 0f       	add	r22, r24
    64da:	79 1f       	adc	r23, r25
    64dc:	8a 1f       	adc	r24, r26
    64de:	91 1d       	adc	r25, r1
    64e0:	a1 1d       	adc	r26, r1
    64e2:	6a 0f       	add	r22, r26
    64e4:	71 1d       	adc	r23, r1
    64e6:	81 1d       	adc	r24, r1
    64e8:	91 1d       	adc	r25, r1
    64ea:	a1 1d       	adc	r26, r1
    64ec:	20 d0       	rcall	.+64     	; 0x652e <__ultoa_invert+0x84>
    64ee:	09 f4       	brne	.+2      	; 0x64f2 <__ultoa_invert+0x48>
    64f0:	68 94       	set
    64f2:	3f 91       	pop	r19
    64f4:	2a e0       	ldi	r18, 0x0A	; 10
    64f6:	26 9f       	mul	r18, r22
    64f8:	11 24       	eor	r1, r1
    64fa:	30 19       	sub	r19, r0
    64fc:	30 5d       	subi	r19, 0xD0	; 208
    64fe:	31 93       	st	Z+, r19
    6500:	de f6       	brtc	.-74     	; 0x64b8 <__ultoa_invert+0xe>
    6502:	cf 01       	movw	r24, r30
    6504:	08 95       	ret
    6506:	46 2f       	mov	r20, r22
    6508:	47 70       	andi	r20, 0x07	; 7
    650a:	40 5d       	subi	r20, 0xD0	; 208
    650c:	41 93       	st	Z+, r20
    650e:	b3 e0       	ldi	r27, 0x03	; 3
    6510:	0f d0       	rcall	.+30     	; 0x6530 <__ultoa_invert+0x86>
    6512:	c9 f7       	brne	.-14     	; 0x6506 <__ultoa_invert+0x5c>
    6514:	f6 cf       	rjmp	.-20     	; 0x6502 <__ultoa_invert+0x58>
    6516:	46 2f       	mov	r20, r22
    6518:	4f 70       	andi	r20, 0x0F	; 15
    651a:	40 5d       	subi	r20, 0xD0	; 208
    651c:	4a 33       	cpi	r20, 0x3A	; 58
    651e:	18 f0       	brcs	.+6      	; 0x6526 <__ultoa_invert+0x7c>
    6520:	49 5d       	subi	r20, 0xD9	; 217
    6522:	31 fd       	sbrc	r19, 1
    6524:	40 52       	subi	r20, 0x20	; 32
    6526:	41 93       	st	Z+, r20
    6528:	02 d0       	rcall	.+4      	; 0x652e <__ultoa_invert+0x84>
    652a:	a9 f7       	brne	.-22     	; 0x6516 <__ultoa_invert+0x6c>
    652c:	ea cf       	rjmp	.-44     	; 0x6502 <__ultoa_invert+0x58>
    652e:	b4 e0       	ldi	r27, 0x04	; 4
    6530:	a6 95       	lsr	r26
    6532:	97 95       	ror	r25
    6534:	87 95       	ror	r24
    6536:	77 95       	ror	r23
    6538:	67 95       	ror	r22
    653a:	ba 95       	dec	r27
    653c:	c9 f7       	brne	.-14     	; 0x6530 <__ultoa_invert+0x86>
    653e:	00 97       	sbiw	r24, 0x00	; 0
    6540:	61 05       	cpc	r22, r1
    6542:	71 05       	cpc	r23, r1
    6544:	08 95       	ret
    6546:	9b 01       	movw	r18, r22
    6548:	ac 01       	movw	r20, r24
    654a:	0a 2e       	mov	r0, r26
    654c:	06 94       	lsr	r0
    654e:	57 95       	ror	r21
    6550:	47 95       	ror	r20
    6552:	37 95       	ror	r19
    6554:	27 95       	ror	r18
    6556:	ba 95       	dec	r27
    6558:	c9 f7       	brne	.-14     	; 0x654c <__ultoa_invert+0xa2>
    655a:	62 0f       	add	r22, r18
    655c:	73 1f       	adc	r23, r19
    655e:	84 1f       	adc	r24, r20
    6560:	95 1f       	adc	r25, r21
    6562:	a0 1d       	adc	r26, r0
    6564:	08 95       	ret

00006566 <strtod>:
    6566:	6f 92       	push	r6
    6568:	7f 92       	push	r7
    656a:	8f 92       	push	r8
    656c:	9f 92       	push	r9
    656e:	af 92       	push	r10
    6570:	bf 92       	push	r11
    6572:	cf 92       	push	r12
    6574:	df 92       	push	r13
    6576:	ef 92       	push	r14
    6578:	ff 92       	push	r15
    657a:	0f 93       	push	r16
    657c:	1f 93       	push	r17
    657e:	cf 93       	push	r28
    6580:	df 93       	push	r29
    6582:	ec 01       	movw	r28, r24
    6584:	7b 01       	movw	r14, r22
    6586:	61 15       	cp	r22, r1
    6588:	71 05       	cpc	r23, r1
    658a:	19 f0       	breq	.+6      	; 0x6592 <strtod+0x2c>
    658c:	db 01       	movw	r26, r22
    658e:	8d 93       	st	X+, r24
    6590:	9c 93       	st	X, r25
    6592:	8e 01       	movw	r16, r28
    6594:	0f 5f       	subi	r16, 0xFF	; 255
    6596:	1f 4f       	sbci	r17, 0xFF	; 255
    6598:	78 80       	ld	r7, Y
    659a:	87 2d       	mov	r24, r7
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	0e 94 4a 31 	call	0x6294	; 0x6294 <isspace>
    65a2:	89 2b       	or	r24, r25
    65a4:	11 f0       	breq	.+4      	; 0x65aa <strtod+0x44>
    65a6:	e8 01       	movw	r28, r16
    65a8:	f4 cf       	rjmp	.-24     	; 0x6592 <strtod+0x2c>
    65aa:	bd e2       	ldi	r27, 0x2D	; 45
    65ac:	7b 12       	cpse	r7, r27
    65ae:	05 c0       	rjmp	.+10     	; 0x65ba <strtod+0x54>
    65b0:	0f 5f       	subi	r16, 0xFF	; 255
    65b2:	1f 4f       	sbci	r17, 0xFF	; 255
    65b4:	79 80       	ldd	r7, Y+1	; 0x01
    65b6:	c1 e0       	ldi	r28, 0x01	; 1
    65b8:	08 c0       	rjmp	.+16     	; 0x65ca <strtod+0x64>
    65ba:	eb e2       	ldi	r30, 0x2B	; 43
    65bc:	7e 12       	cpse	r7, r30
    65be:	04 c0       	rjmp	.+8      	; 0x65c8 <strtod+0x62>
    65c0:	8e 01       	movw	r16, r28
    65c2:	0e 5f       	subi	r16, 0xFE	; 254
    65c4:	1f 4f       	sbci	r17, 0xFF	; 255
    65c6:	79 80       	ldd	r7, Y+1	; 0x01
    65c8:	c0 e0       	ldi	r28, 0x00	; 0
    65ca:	68 01       	movw	r12, r16
    65cc:	f1 e0       	ldi	r31, 0x01	; 1
    65ce:	cf 1a       	sub	r12, r31
    65d0:	d1 08       	sbc	r13, r1
    65d2:	43 e0       	ldi	r20, 0x03	; 3
    65d4:	50 e0       	ldi	r21, 0x00	; 0
    65d6:	6e e8       	ldi	r22, 0x8E	; 142
    65d8:	72 e0       	ldi	r23, 0x02	; 2
    65da:	c6 01       	movw	r24, r12
    65dc:	0e 94 25 34 	call	0x684a	; 0x684a <strncasecmp_P>
    65e0:	89 2b       	or	r24, r25
    65e2:	f1 f4       	brne	.+60     	; 0x6620 <strtod+0xba>
    65e4:	68 01       	movw	r12, r16
    65e6:	22 e0       	ldi	r18, 0x02	; 2
    65e8:	c2 0e       	add	r12, r18
    65ea:	d1 1c       	adc	r13, r1
    65ec:	45 e0       	ldi	r20, 0x05	; 5
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	69 e8       	ldi	r22, 0x89	; 137
    65f2:	72 e0       	ldi	r23, 0x02	; 2
    65f4:	c6 01       	movw	r24, r12
    65f6:	0e 94 25 34 	call	0x684a	; 0x684a <strncasecmp_P>
    65fa:	89 2b       	or	r24, r25
    65fc:	21 f4       	brne	.+8      	; 0x6606 <strtod+0xa0>
    65fe:	68 01       	movw	r12, r16
    6600:	87 e0       	ldi	r24, 0x07	; 7
    6602:	c8 0e       	add	r12, r24
    6604:	d1 1c       	adc	r13, r1
    6606:	e1 14       	cp	r14, r1
    6608:	f1 04       	cpc	r15, r1
    660a:	19 f0       	breq	.+6      	; 0x6612 <strtod+0xac>
    660c:	d7 01       	movw	r26, r14
    660e:	cd 92       	st	X+, r12
    6610:	dc 92       	st	X, r13
    6612:	c1 11       	cpse	r28, r1
    6614:	ff c0       	rjmp	.+510    	; 0x6814 <strtod+0x2ae>
    6616:	60 e0       	ldi	r22, 0x00	; 0
    6618:	70 e0       	ldi	r23, 0x00	; 0
    661a:	80 e8       	ldi	r24, 0x80	; 128
    661c:	9f e7       	ldi	r25, 0x7F	; 127
    661e:	03 c1       	rjmp	.+518    	; 0x6826 <strtod+0x2c0>
    6620:	43 e0       	ldi	r20, 0x03	; 3
    6622:	50 e0       	ldi	r21, 0x00	; 0
    6624:	66 e8       	ldi	r22, 0x86	; 134
    6626:	72 e0       	ldi	r23, 0x02	; 2
    6628:	c6 01       	movw	r24, r12
    662a:	0e 94 25 34 	call	0x684a	; 0x684a <strncasecmp_P>
    662e:	89 2b       	or	r24, r25
    6630:	51 f4       	brne	.+20     	; 0x6646 <strtod+0xe0>
    6632:	e1 14       	cp	r14, r1
    6634:	f1 04       	cpc	r15, r1
    6636:	09 f4       	brne	.+2      	; 0x663a <strtod+0xd4>
    6638:	f2 c0       	rjmp	.+484    	; 0x681e <strtod+0x2b8>
    663a:	0e 5f       	subi	r16, 0xFE	; 254
    663c:	1f 4f       	sbci	r17, 0xFF	; 255
    663e:	f7 01       	movw	r30, r14
    6640:	11 83       	std	Z+1, r17	; 0x01
    6642:	00 83       	st	Z, r16
    6644:	ec c0       	rjmp	.+472    	; 0x681e <strtod+0x2b8>
    6646:	68 01       	movw	r12, r16
    6648:	60 e0       	ldi	r22, 0x00	; 0
    664a:	70 e0       	ldi	r23, 0x00	; 0
    664c:	cb 01       	movw	r24, r22
    664e:	00 e0       	ldi	r16, 0x00	; 0
    6650:	10 e0       	ldi	r17, 0x00	; 0
    6652:	f6 01       	movw	r30, r12
    6654:	d0 ed       	ldi	r29, 0xD0	; 208
    6656:	d7 0d       	add	r29, r7
    6658:	da 30       	cpi	r29, 0x0A	; 10
    665a:	58 f5       	brcc	.+86     	; 0x66b2 <strtod+0x14c>
    665c:	2c 2f       	mov	r18, r28
    665e:	22 60       	ori	r18, 0x02	; 2
    6660:	62 2e       	mov	r6, r18
    6662:	2c 2f       	mov	r18, r28
    6664:	28 70       	andi	r18, 0x08	; 8
    6666:	c2 ff       	sbrs	r28, 2
    6668:	05 c0       	rjmp	.+10     	; 0x6674 <strtod+0x10e>
    666a:	21 11       	cpse	r18, r1
    666c:	28 c0       	rjmp	.+80     	; 0x66be <strtod+0x158>
    666e:	0f 5f       	subi	r16, 0xFF	; 255
    6670:	1f 4f       	sbci	r17, 0xFF	; 255
    6672:	25 c0       	rjmp	.+74     	; 0x66be <strtod+0x158>
    6674:	22 23       	and	r18, r18
    6676:	11 f0       	breq	.+4      	; 0x667c <strtod+0x116>
    6678:	01 50       	subi	r16, 0x01	; 1
    667a:	11 09       	sbc	r17, r1
    667c:	a5 e0       	ldi	r26, 0x05	; 5
    667e:	b0 e0       	ldi	r27, 0x00	; 0
    6680:	9b 01       	movw	r18, r22
    6682:	ac 01       	movw	r20, r24
    6684:	0e 94 df 34 	call	0x69be	; 0x69be <__muluhisi3>
    6688:	4b 01       	movw	r8, r22
    668a:	5c 01       	movw	r10, r24
    668c:	88 0c       	add	r8, r8
    668e:	99 1c       	adc	r9, r9
    6690:	aa 1c       	adc	r10, r10
    6692:	bb 1c       	adc	r11, r11
    6694:	c5 01       	movw	r24, r10
    6696:	b4 01       	movw	r22, r8
    6698:	6d 0f       	add	r22, r29
    669a:	71 1d       	adc	r23, r1
    669c:	81 1d       	adc	r24, r1
    669e:	91 1d       	adc	r25, r1
    66a0:	68 39       	cpi	r22, 0x98	; 152
    66a2:	a9 e9       	ldi	r26, 0x99	; 153
    66a4:	7a 07       	cpc	r23, r26
    66a6:	8a 07       	cpc	r24, r26
    66a8:	a9 e1       	ldi	r26, 0x19	; 25
    66aa:	9a 07       	cpc	r25, r26
    66ac:	40 f0       	brcs	.+16     	; 0x66be <strtod+0x158>
    66ae:	c6 60       	ori	r28, 0x06	; 6
    66b0:	05 c0       	rjmp	.+10     	; 0x66bc <strtod+0x156>
    66b2:	de 3f       	cpi	r29, 0xFE	; 254
    66b4:	51 f4       	brne	.+20     	; 0x66ca <strtod+0x164>
    66b6:	c3 fd       	sbrc	r28, 3
    66b8:	44 c0       	rjmp	.+136    	; 0x6742 <strtod+0x1dc>
    66ba:	c8 60       	ori	r28, 0x08	; 8
    66bc:	6c 2e       	mov	r6, r28
    66be:	bf ef       	ldi	r27, 0xFF	; 255
    66c0:	cb 1a       	sub	r12, r27
    66c2:	db 0a       	sbc	r13, r27
    66c4:	70 80       	ld	r7, Z
    66c6:	c6 2d       	mov	r28, r6
    66c8:	c4 cf       	rjmp	.-120    	; 0x6652 <strtod+0xec>
    66ca:	2d 2f       	mov	r18, r29
    66cc:	2f 7d       	andi	r18, 0xDF	; 223
    66ce:	25 31       	cpi	r18, 0x15	; 21
    66d0:	c1 f5       	brne	.+112    	; 0x6742 <strtod+0x1dc>
    66d2:	40 81       	ld	r20, Z
    66d4:	4d 32       	cpi	r20, 0x2D	; 45
    66d6:	11 f4       	brne	.+4      	; 0x66dc <strtod+0x176>
    66d8:	c0 61       	ori	r28, 0x10	; 16
    66da:	06 c0       	rjmp	.+12     	; 0x66e8 <strtod+0x182>
    66dc:	4b 32       	cpi	r20, 0x2B	; 43
    66de:	21 f0       	breq	.+8      	; 0x66e8 <strtod+0x182>
    66e0:	31 96       	adiw	r30, 0x01	; 1
    66e2:	21 e0       	ldi	r18, 0x01	; 1
    66e4:	30 e0       	ldi	r19, 0x00	; 0
    66e6:	06 c0       	rjmp	.+12     	; 0x66f4 <strtod+0x18e>
    66e8:	32 96       	adiw	r30, 0x02	; 2
    66ea:	d6 01       	movw	r26, r12
    66ec:	11 96       	adiw	r26, 0x01	; 1
    66ee:	4c 91       	ld	r20, X
    66f0:	22 e0       	ldi	r18, 0x02	; 2
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	a0 ed       	ldi	r26, 0xD0	; 208
    66f6:	a4 0f       	add	r26, r20
    66f8:	aa 30       	cpi	r26, 0x0A	; 10
    66fa:	18 f0       	brcs	.+6      	; 0x6702 <strtod+0x19c>
    66fc:	e2 1b       	sub	r30, r18
    66fe:	f3 0b       	sbc	r31, r19
    6700:	20 c0       	rjmp	.+64     	; 0x6742 <strtod+0x1dc>
    6702:	40 e0       	ldi	r20, 0x00	; 0
    6704:	50 e0       	ldi	r21, 0x00	; 0
    6706:	40 38       	cpi	r20, 0x80	; 128
    6708:	bc e0       	ldi	r27, 0x0C	; 12
    670a:	5b 07       	cpc	r21, r27
    670c:	5c f4       	brge	.+22     	; 0x6724 <strtod+0x1be>
    670e:	9a 01       	movw	r18, r20
    6710:	22 0f       	add	r18, r18
    6712:	33 1f       	adc	r19, r19
    6714:	22 0f       	add	r18, r18
    6716:	33 1f       	adc	r19, r19
    6718:	42 0f       	add	r20, r18
    671a:	53 1f       	adc	r21, r19
    671c:	44 0f       	add	r20, r20
    671e:	55 1f       	adc	r21, r21
    6720:	4a 0f       	add	r20, r26
    6722:	51 1d       	adc	r21, r1
    6724:	31 96       	adiw	r30, 0x01	; 1
    6726:	df 01       	movw	r26, r30
    6728:	11 97       	sbiw	r26, 0x01	; 1
    672a:	2c 91       	ld	r18, X
    672c:	a0 ed       	ldi	r26, 0xD0	; 208
    672e:	a2 0f       	add	r26, r18
    6730:	aa 30       	cpi	r26, 0x0A	; 10
    6732:	48 f3       	brcs	.-46     	; 0x6706 <strtod+0x1a0>
    6734:	c4 ff       	sbrs	r28, 4
    6736:	03 c0       	rjmp	.+6      	; 0x673e <strtod+0x1d8>
    6738:	51 95       	neg	r21
    673a:	41 95       	neg	r20
    673c:	51 09       	sbc	r21, r1
    673e:	04 0f       	add	r16, r20
    6740:	15 1f       	adc	r17, r21
    6742:	c1 ff       	sbrs	r28, 1
    6744:	07 c0       	rjmp	.+14     	; 0x6754 <strtod+0x1ee>
    6746:	e1 14       	cp	r14, r1
    6748:	f1 04       	cpc	r15, r1
    674a:	21 f0       	breq	.+8      	; 0x6754 <strtod+0x1ee>
    674c:	31 97       	sbiw	r30, 0x01	; 1
    674e:	d7 01       	movw	r26, r14
    6750:	ed 93       	st	X+, r30
    6752:	fc 93       	st	X, r31
    6754:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatunsisf>
    6758:	c3 70       	andi	r28, 0x03	; 3
    675a:	c3 30       	cpi	r28, 0x03	; 3
    675c:	19 f0       	breq	.+6      	; 0x6764 <strtod+0x1fe>
    675e:	6b 01       	movw	r12, r22
    6760:	7c 01       	movw	r14, r24
    6762:	06 c0       	rjmp	.+12     	; 0x6770 <strtod+0x20a>
    6764:	6b 01       	movw	r12, r22
    6766:	7c 01       	movw	r14, r24
    6768:	f7 fa       	bst	r15, 7
    676a:	f0 94       	com	r15
    676c:	f7 f8       	bld	r15, 7
    676e:	f0 94       	com	r15
    6770:	20 e0       	ldi	r18, 0x00	; 0
    6772:	30 e0       	ldi	r19, 0x00	; 0
    6774:	a9 01       	movw	r20, r18
    6776:	c7 01       	movw	r24, r14
    6778:	b6 01       	movw	r22, r12
    677a:	0e 94 4d 34 	call	0x689a	; 0x689a <__cmpsf2>
    677e:	88 23       	and	r24, r24
    6780:	09 f4       	brne	.+2      	; 0x6784 <strtod+0x21e>
    6782:	45 c0       	rjmp	.+138    	; 0x680e <strtod+0x2a8>
    6784:	17 ff       	sbrs	r17, 7
    6786:	06 c0       	rjmp	.+12     	; 0x6794 <strtod+0x22e>
    6788:	11 95       	neg	r17
    678a:	01 95       	neg	r16
    678c:	11 09       	sbc	r17, r1
    678e:	c5 ea       	ldi	r28, 0xA5	; 165
    6790:	d2 e0       	ldi	r29, 0x02	; 2
    6792:	02 c0       	rjmp	.+4      	; 0x6798 <strtod+0x232>
    6794:	cd eb       	ldi	r28, 0xBD	; 189
    6796:	d2 e0       	ldi	r29, 0x02	; 2
    6798:	5e 01       	movw	r10, r28
    679a:	b8 e1       	ldi	r27, 0x18	; 24
    679c:	ab 1a       	sub	r10, r27
    679e:	b1 08       	sbc	r11, r1
    67a0:	46 01       	movw	r8, r12
    67a2:	be 2d       	mov	r27, r14
    67a4:	af 2d       	mov	r26, r15
    67a6:	90 e2       	ldi	r25, 0x20	; 32
    67a8:	e9 2e       	mov	r14, r25
    67aa:	f1 2c       	mov	r15, r1
    67ac:	0e 15       	cp	r16, r14
    67ae:	1f 05       	cpc	r17, r15
    67b0:	84 f0       	brlt	.+32     	; 0x67d2 <strtod+0x26c>
    67b2:	fe 01       	movw	r30, r28
    67b4:	25 91       	lpm	r18, Z+
    67b6:	35 91       	lpm	r19, Z+
    67b8:	45 91       	lpm	r20, Z+
    67ba:	54 91       	lpm	r21, Z
    67bc:	b4 01       	movw	r22, r8
    67be:	8b 2f       	mov	r24, r27
    67c0:	9a 2f       	mov	r25, r26
    67c2:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__mulsf3>
    67c6:	4b 01       	movw	r8, r22
    67c8:	b8 2f       	mov	r27, r24
    67ca:	a9 2f       	mov	r26, r25
    67cc:	0e 19       	sub	r16, r14
    67ce:	1f 09       	sbc	r17, r15
    67d0:	ed cf       	rjmp	.-38     	; 0x67ac <strtod+0x246>
    67d2:	24 97       	sbiw	r28, 0x04	; 4
    67d4:	f5 94       	asr	r15
    67d6:	e7 94       	ror	r14
    67d8:	ca 15       	cp	r28, r10
    67da:	db 05       	cpc	r29, r11
    67dc:	39 f7       	brne	.-50     	; 0x67ac <strtod+0x246>
    67de:	64 01       	movw	r12, r8
    67e0:	eb 2e       	mov	r14, r27
    67e2:	fa 2e       	mov	r15, r26
    67e4:	8e 2d       	mov	r24, r14
    67e6:	88 0f       	add	r24, r24
    67e8:	8f 2d       	mov	r24, r15
    67ea:	88 1f       	adc	r24, r24
    67ec:	8f 3f       	cpi	r24, 0xFF	; 255
    67ee:	49 f0       	breq	.+18     	; 0x6802 <strtod+0x29c>
    67f0:	20 e0       	ldi	r18, 0x00	; 0
    67f2:	30 e0       	ldi	r19, 0x00	; 0
    67f4:	a9 01       	movw	r20, r18
    67f6:	c7 01       	movw	r24, r14
    67f8:	b6 01       	movw	r22, r12
    67fa:	0e 94 4d 34 	call	0x689a	; 0x689a <__cmpsf2>
    67fe:	81 11       	cpse	r24, r1
    6800:	06 c0       	rjmp	.+12     	; 0x680e <strtod+0x2a8>
    6802:	82 e2       	ldi	r24, 0x22	; 34
    6804:	90 e0       	ldi	r25, 0x00	; 0
    6806:	90 93 f0 0c 	sts	0x0CF0, r25	; 0x800cf0 <errno+0x1>
    680a:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <errno>
    680e:	c7 01       	movw	r24, r14
    6810:	b6 01       	movw	r22, r12
    6812:	09 c0       	rjmp	.+18     	; 0x6826 <strtod+0x2c0>
    6814:	60 e0       	ldi	r22, 0x00	; 0
    6816:	70 e0       	ldi	r23, 0x00	; 0
    6818:	80 e8       	ldi	r24, 0x80	; 128
    681a:	9f ef       	ldi	r25, 0xFF	; 255
    681c:	04 c0       	rjmp	.+8      	; 0x6826 <strtod+0x2c0>
    681e:	60 e0       	ldi	r22, 0x00	; 0
    6820:	70 e0       	ldi	r23, 0x00	; 0
    6822:	80 ec       	ldi	r24, 0xC0	; 192
    6824:	9f e7       	ldi	r25, 0x7F	; 127
    6826:	df 91       	pop	r29
    6828:	cf 91       	pop	r28
    682a:	1f 91       	pop	r17
    682c:	0f 91       	pop	r16
    682e:	ff 90       	pop	r15
    6830:	ef 90       	pop	r14
    6832:	df 90       	pop	r13
    6834:	cf 90       	pop	r12
    6836:	bf 90       	pop	r11
    6838:	af 90       	pop	r10
    683a:	9f 90       	pop	r9
    683c:	8f 90       	pop	r8
    683e:	7f 90       	pop	r7
    6840:	6f 90       	pop	r6
    6842:	08 95       	ret

00006844 <__ctype_isfalse>:
    6844:	99 27       	eor	r25, r25
    6846:	88 27       	eor	r24, r24

00006848 <__ctype_istrue>:
    6848:	08 95       	ret

0000684a <strncasecmp_P>:
    684a:	fb 01       	movw	r30, r22
    684c:	dc 01       	movw	r26, r24
    684e:	41 50       	subi	r20, 0x01	; 1
    6850:	50 40       	sbci	r21, 0x00	; 0
    6852:	88 f0       	brcs	.+34     	; 0x6876 <strncasecmp_P+0x2c>
    6854:	8d 91       	ld	r24, X+
    6856:	81 34       	cpi	r24, 0x41	; 65
    6858:	1c f0       	brlt	.+6      	; 0x6860 <strncasecmp_P+0x16>
    685a:	8b 35       	cpi	r24, 0x5B	; 91
    685c:	0c f4       	brge	.+2      	; 0x6860 <strncasecmp_P+0x16>
    685e:	80 5e       	subi	r24, 0xE0	; 224
    6860:	65 91       	lpm	r22, Z+
    6862:	61 34       	cpi	r22, 0x41	; 65
    6864:	1c f0       	brlt	.+6      	; 0x686c <strncasecmp_P+0x22>
    6866:	6b 35       	cpi	r22, 0x5B	; 91
    6868:	0c f4       	brge	.+2      	; 0x686c <strncasecmp_P+0x22>
    686a:	60 5e       	subi	r22, 0xE0	; 224
    686c:	86 1b       	sub	r24, r22
    686e:	61 11       	cpse	r22, r1
    6870:	71 f3       	breq	.-36     	; 0x684e <strncasecmp_P+0x4>
    6872:	99 0b       	sbc	r25, r25
    6874:	08 95       	ret
    6876:	88 1b       	sub	r24, r24
    6878:	fc cf       	rjmp	.-8      	; 0x6872 <strncasecmp_P+0x28>

0000687a <strrev>:
    687a:	dc 01       	movw	r26, r24
    687c:	fc 01       	movw	r30, r24
    687e:	67 2f       	mov	r22, r23
    6880:	71 91       	ld	r23, Z+
    6882:	77 23       	and	r23, r23
    6884:	e1 f7       	brne	.-8      	; 0x687e <strrev+0x4>
    6886:	32 97       	sbiw	r30, 0x02	; 2
    6888:	04 c0       	rjmp	.+8      	; 0x6892 <strrev+0x18>
    688a:	7c 91       	ld	r23, X
    688c:	6d 93       	st	X+, r22
    688e:	70 83       	st	Z, r23
    6890:	62 91       	ld	r22, -Z
    6892:	ae 17       	cp	r26, r30
    6894:	bf 07       	cpc	r27, r31
    6896:	c8 f3       	brcs	.-14     	; 0x688a <strrev+0x10>
    6898:	08 95       	ret

0000689a <__cmpsf2>:
    689a:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__fp_cmp>
    689e:	08 f4       	brcc	.+2      	; 0x68a2 <__cmpsf2+0x8>
    68a0:	81 e0       	ldi	r24, 0x01	; 1
    68a2:	08 95       	ret

000068a4 <__fp_cmp>:
    68a4:	99 0f       	add	r25, r25
    68a6:	00 08       	sbc	r0, r0
    68a8:	55 0f       	add	r21, r21
    68aa:	aa 0b       	sbc	r26, r26
    68ac:	e0 e8       	ldi	r30, 0x80	; 128
    68ae:	fe ef       	ldi	r31, 0xFE	; 254
    68b0:	16 16       	cp	r1, r22
    68b2:	17 06       	cpc	r1, r23
    68b4:	e8 07       	cpc	r30, r24
    68b6:	f9 07       	cpc	r31, r25
    68b8:	c0 f0       	brcs	.+48     	; 0x68ea <__fp_cmp+0x46>
    68ba:	12 16       	cp	r1, r18
    68bc:	13 06       	cpc	r1, r19
    68be:	e4 07       	cpc	r30, r20
    68c0:	f5 07       	cpc	r31, r21
    68c2:	98 f0       	brcs	.+38     	; 0x68ea <__fp_cmp+0x46>
    68c4:	62 1b       	sub	r22, r18
    68c6:	73 0b       	sbc	r23, r19
    68c8:	84 0b       	sbc	r24, r20
    68ca:	95 0b       	sbc	r25, r21
    68cc:	39 f4       	brne	.+14     	; 0x68dc <__fp_cmp+0x38>
    68ce:	0a 26       	eor	r0, r26
    68d0:	61 f0       	breq	.+24     	; 0x68ea <__fp_cmp+0x46>
    68d2:	23 2b       	or	r18, r19
    68d4:	24 2b       	or	r18, r20
    68d6:	25 2b       	or	r18, r21
    68d8:	21 f4       	brne	.+8      	; 0x68e2 <__fp_cmp+0x3e>
    68da:	08 95       	ret
    68dc:	0a 26       	eor	r0, r26
    68de:	09 f4       	brne	.+2      	; 0x68e2 <__fp_cmp+0x3e>
    68e0:	a1 40       	sbci	r26, 0x01	; 1
    68e2:	a6 95       	lsr	r26
    68e4:	8f ef       	ldi	r24, 0xFF	; 255
    68e6:	81 1d       	adc	r24, r1
    68e8:	81 1d       	adc	r24, r1
    68ea:	08 95       	ret

000068ec <eeprom_read_block>:
    68ec:	dc 01       	movw	r26, r24
    68ee:	cb 01       	movw	r24, r22

000068f0 <eeprom_read_blraw>:
    68f0:	fc 01       	movw	r30, r24
    68f2:	f9 99       	sbic	0x1f, 1	; 31
    68f4:	fe cf       	rjmp	.-4      	; 0x68f2 <eeprom_read_blraw+0x2>
    68f6:	06 c0       	rjmp	.+12     	; 0x6904 <eeprom_read_blraw+0x14>
    68f8:	f2 bd       	out	0x22, r31	; 34
    68fa:	e1 bd       	out	0x21, r30	; 33
    68fc:	f8 9a       	sbi	0x1f, 0	; 31
    68fe:	31 96       	adiw	r30, 0x01	; 1
    6900:	00 b4       	in	r0, 0x20	; 32
    6902:	0d 92       	st	X+, r0
    6904:	41 50       	subi	r20, 0x01	; 1
    6906:	50 40       	sbci	r21, 0x00	; 0
    6908:	b8 f7       	brcc	.-18     	; 0x68f8 <eeprom_read_blraw+0x8>
    690a:	08 95       	ret

0000690c <eeprom_update_byte>:
    690c:	26 2f       	mov	r18, r22

0000690e <eeprom_update_r18>:
    690e:	f9 99       	sbic	0x1f, 1	; 31
    6910:	fe cf       	rjmp	.-4      	; 0x690e <eeprom_update_r18>
    6912:	92 bd       	out	0x22, r25	; 34
    6914:	81 bd       	out	0x21, r24	; 33
    6916:	f8 9a       	sbi	0x1f, 0	; 31
    6918:	01 97       	sbiw	r24, 0x01	; 1
    691a:	00 b4       	in	r0, 0x20	; 32
    691c:	02 16       	cp	r0, r18
    691e:	39 f0       	breq	.+14     	; 0x692e <eeprom_update_r18+0x20>
    6920:	1f ba       	out	0x1f, r1	; 31
    6922:	20 bd       	out	0x20, r18	; 32
    6924:	0f b6       	in	r0, 0x3f	; 63
    6926:	f8 94       	cli
    6928:	fa 9a       	sbi	0x1f, 2	; 31
    692a:	f9 9a       	sbi	0x1f, 1	; 31
    692c:	0f be       	out	0x3f, r0	; 63
    692e:	08 95       	ret

00006930 <eeprom_write_block>:
    6930:	dc 01       	movw	r26, r24
    6932:	cb 01       	movw	r24, r22
    6934:	03 c0       	rjmp	.+6      	; 0x693c <eeprom_write_block+0xc>
    6936:	2d 91       	ld	r18, X+
    6938:	0e 94 a3 34 	call	0x6946	; 0x6946 <eeprom_write_r18>
    693c:	41 50       	subi	r20, 0x01	; 1
    693e:	50 40       	sbci	r21, 0x00	; 0
    6940:	d0 f7       	brcc	.-12     	; 0x6936 <eeprom_write_block+0x6>
    6942:	08 95       	ret

00006944 <eeprom_write_byte>:
    6944:	26 2f       	mov	r18, r22

00006946 <eeprom_write_r18>:
    6946:	f9 99       	sbic	0x1f, 1	; 31
    6948:	fe cf       	rjmp	.-4      	; 0x6946 <eeprom_write_r18>
    694a:	1f ba       	out	0x1f, r1	; 31
    694c:	92 bd       	out	0x22, r25	; 34
    694e:	81 bd       	out	0x21, r24	; 33
    6950:	20 bd       	out	0x20, r18	; 32
    6952:	0f b6       	in	r0, 0x3f	; 63
    6954:	f8 94       	cli
    6956:	fa 9a       	sbi	0x1f, 2	; 31
    6958:	f9 9a       	sbi	0x1f, 1	; 31
    695a:	0f be       	out	0x3f, r0	; 63
    695c:	01 96       	adiw	r24, 0x01	; 1
    695e:	08 95       	ret

00006960 <__mulsi3>:
    6960:	db 01       	movw	r26, r22
    6962:	8f 93       	push	r24
    6964:	9f 93       	push	r25
    6966:	0e 94 df 34 	call	0x69be	; 0x69be <__muluhisi3>
    696a:	bf 91       	pop	r27
    696c:	af 91       	pop	r26
    696e:	a2 9f       	mul	r26, r18
    6970:	80 0d       	add	r24, r0
    6972:	91 1d       	adc	r25, r1
    6974:	a3 9f       	mul	r26, r19
    6976:	90 0d       	add	r25, r0
    6978:	b2 9f       	mul	r27, r18
    697a:	90 0d       	add	r25, r0
    697c:	11 24       	eor	r1, r1
    697e:	08 95       	ret

00006980 <__divmodsi4>:
    6980:	05 2e       	mov	r0, r21
    6982:	97 fb       	bst	r25, 7
    6984:	1e f4       	brtc	.+6      	; 0x698c <__divmodsi4+0xc>
    6986:	00 94       	com	r0
    6988:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__negsi2>
    698c:	57 fd       	sbrc	r21, 7
    698e:	07 d0       	rcall	.+14     	; 0x699e <__divmodsi4_neg2>
    6990:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <__udivmodsi4>
    6994:	07 fc       	sbrc	r0, 7
    6996:	03 d0       	rcall	.+6      	; 0x699e <__divmodsi4_neg2>
    6998:	4e f4       	brtc	.+18     	; 0x69ac <__divmodsi4_exit>
    699a:	0c 94 d7 34 	jmp	0x69ae	; 0x69ae <__negsi2>

0000699e <__divmodsi4_neg2>:
    699e:	50 95       	com	r21
    69a0:	40 95       	com	r20
    69a2:	30 95       	com	r19
    69a4:	21 95       	neg	r18
    69a6:	3f 4f       	sbci	r19, 0xFF	; 255
    69a8:	4f 4f       	sbci	r20, 0xFF	; 255
    69aa:	5f 4f       	sbci	r21, 0xFF	; 255

000069ac <__divmodsi4_exit>:
    69ac:	08 95       	ret

000069ae <__negsi2>:
    69ae:	90 95       	com	r25
    69b0:	80 95       	com	r24
    69b2:	70 95       	com	r23
    69b4:	61 95       	neg	r22
    69b6:	7f 4f       	sbci	r23, 0xFF	; 255
    69b8:	8f 4f       	sbci	r24, 0xFF	; 255
    69ba:	9f 4f       	sbci	r25, 0xFF	; 255
    69bc:	08 95       	ret

000069be <__muluhisi3>:
    69be:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <__umulhisi3>
    69c2:	a5 9f       	mul	r26, r21
    69c4:	90 0d       	add	r25, r0
    69c6:	b4 9f       	mul	r27, r20
    69c8:	90 0d       	add	r25, r0
    69ca:	a4 9f       	mul	r26, r20
    69cc:	80 0d       	add	r24, r0
    69ce:	91 1d       	adc	r25, r1
    69d0:	11 24       	eor	r1, r1
    69d2:	08 95       	ret

000069d4 <__mulshisi3>:
    69d4:	b7 ff       	sbrs	r27, 7
    69d6:	0c 94 df 34 	jmp	0x69be	; 0x69be <__muluhisi3>

000069da <__mulohisi3>:
    69da:	0e 94 df 34 	call	0x69be	; 0x69be <__muluhisi3>
    69de:	82 1b       	sub	r24, r18
    69e0:	93 0b       	sbc	r25, r19
    69e2:	08 95       	ret

000069e4 <__umulhisi3>:
    69e4:	a2 9f       	mul	r26, r18
    69e6:	b0 01       	movw	r22, r0
    69e8:	b3 9f       	mul	r27, r19
    69ea:	c0 01       	movw	r24, r0
    69ec:	a3 9f       	mul	r26, r19
    69ee:	70 0d       	add	r23, r0
    69f0:	81 1d       	adc	r24, r1
    69f2:	11 24       	eor	r1, r1
    69f4:	91 1d       	adc	r25, r1
    69f6:	b2 9f       	mul	r27, r18
    69f8:	70 0d       	add	r23, r0
    69fa:	81 1d       	adc	r24, r1
    69fc:	11 24       	eor	r1, r1
    69fe:	91 1d       	adc	r25, r1
    6a00:	08 95       	ret

00006a02 <_exit>:
    6a02:	f8 94       	cli

00006a04 <__stop_program>:
    6a04:	ff cf       	rjmp	.-2      	; 0x6a04 <__stop_program>
